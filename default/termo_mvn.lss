
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  0000118a  0000121e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000118a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  00800170  00800170  0000128e  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000485  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001af9  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008b5  00000000  00000000  00003c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a80  00000000  00000000  0000450e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  00005f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000057a  00000000  00000000  00006310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001533  00000000  00000000  0000688a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000147  00000000  00000000  00007dbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e8       	ldi	r30, 0x8A	; 138
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 37       	cpi	r26, 0x70	; 112
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 e7       	ldi	r26, 0x70	; 112
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 32       	cpi	r26, 0x26	; 38
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 d4 05 	call	0xba8	; 0xba8 <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 40 03 	call	0x680	; 0x680 <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 95 05 	call	0xb2a	; 0xb2a <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
      be:	53 9a       	sbi	0x0a, 3	; 10
      c0:	5b 98       	cbi	0x0b, 3	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000); // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 5);        // запускаем сканирование клавиатуры
      d8:	88 ec       	ldi	r24, 0xC8	; 200
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	45 e0       	ldi	r20, 0x05	; 5
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);   // запускаем сканирование сенсоров
      e6:	84 e6       	ldi	r24, 0x64	; 100
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
  load_max_temp1();
      f4:	0e 94 a1 02 	call	0x542	; 0x542 <load_max_temp1>
  load_max_temp2();
      f8:	0e 94 cb 02 	call	0x596	; 0x596 <load_max_temp2>
  load_min_temp1();
      fc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <load_min_temp1>
  load_min_temp2();
     100:	0e 94 1f 03 	call	0x63e	; 0x63e <load_min_temp2>
  load_type1();
     104:	0e 94 54 03 	call	0x6a8	; 0x6a8 <load_type1>
  load_type2();
     108:	0e 94 63 03 	call	0x6c6	; 0x6c6 <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     10c:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     10e:	0e 94 0c 05 	call	0xa18	; 0xa18 <RTOS_dispatchTask>
     112:	fd cf       	rjmp	.-6      	; 0x10e <main+0x68>

00000114 <print_temperature>:
uint8_t types[2] = {1, 1};
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     11a:	77 ff       	sbrs	r23, 7
     11c:	05 c0       	rjmp	.+10     	; 0x128 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     11e:	70 95       	com	r23
     120:	61 95       	neg	r22
     122:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     124:	01 e0       	ldi	r16, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     128:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     12a:	81 2f       	mov	r24, r17
     12c:	43 e0       	ldi	r20, 0x03	; 3
     12e:	20 e2       	ldi	r18, 0x20	; 32
     130:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     134:	81 2f       	mov	r24, r17
     136:	8e 5f       	subi	r24, 0xFE	; 254
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     13e:	01 30       	cpi	r16, 0x01	; 1
     140:	21 f4       	brne	.+8      	; 0x14a <print_temperature+0x36>
     142:	81 2f       	mov	r24, r17
     144:	6d e2       	ldi	r22, 0x2D	; 45
     146:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
}
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	08 95       	ret

00000150 <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     150:	80 91 73 01 	lds	r24, 0x0173
     154:	88 23       	and	r24, r24
     156:	21 f0       	breq	.+8      	; 0x160 <DS18x20_scan+0x10>
    dscount--;
     158:	81 50       	subi	r24, 0x01	; 1
     15a:	80 93 73 01 	sts	0x0173, r24
	return;
     15e:	08 95       	ret
  }
  switch(ds_state) {
     160:	80 91 7c 01 	lds	r24, 0x017C
     164:	88 23       	and	r24, r24
     166:	19 f0       	breq	.+6      	; 0x16e <DS18x20_scan+0x1e>
     168:	81 30       	cpi	r24, 0x01	; 1
     16a:	29 f5       	brne	.+74     	; 0x1b6 <DS18x20_scan+0x66>
     16c:	13 c0       	rjmp	.+38     	; 0x194 <DS18x20_scan+0x44>
    case 0:
      ds18x20ConvertTemp(1);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     180:	84 e0       	ldi	r24, 0x04	; 4
     182:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
	  dscount = 10;
     186:	8a e0       	ldi	r24, 0x0A	; 10
     188:	80 93 73 01 	sts	0x0173, r24
	  ds_state = 1;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 7c 01 	sts	0x017C, r24
    break;
     192:	08 95       	ret
    case 1:
      ds18x20ReadStratchPad(1);
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     1a6:	84 e0       	ldi	r24, 0x04	; 4
     1a8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
	  dscount = SCAN_TIME / 100;
     1ac:	84 e1       	ldi	r24, 0x14	; 20
     1ae:	80 93 73 01 	sts	0x0173, r24
	  ds_state = 0;
     1b2:	10 92 7c 01 	sts	0x017C, r1
     1b6:	08 95       	ret

000001b8 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     1b8:	89 3c       	cpi	r24, 0xC9	; 201
     1ba:	29 f0       	breq	.+10     	; 0x1c6 <events_default+0xe>
     1bc:	8b 3c       	cpi	r24, 0xCB	; 203
     1be:	71 f0       	breq	.+28     	; 0x1dc <events_default+0x24>
     1c0:	88 3c       	cpi	r24, 0xC8	; 200
     1c2:	71 f4       	brne	.+28     	; 0x1e0 <events_default+0x28>
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 91 70 01 	lds	r25, 0x0170
     1cc:	91 11       	cpse	r25, r1
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	80 93 70 01 	sts	0x0170, r24
    break;
     1d4:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     1d6:	0e 94 1c 04 	call	0x838	; 0x838 <KBD_scan>
    break;
     1da:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     1dc:	0e 94 a8 00 	call	0x150	; 0x150 <DS18x20_scan>
     1e0:	08 95       	ret

000001e2 <run_menu>:
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
  switch(event) {
     1e2:	85 31       	cpi	r24, 0x15	; 21
     1e4:	b1 f0       	breq	.+44     	; 0x212 <run_menu+0x30>
     1e6:	86 31       	cpi	r24, 0x16	; 22
     1e8:	28 f4       	brcc	.+10     	; 0x1f4 <run_menu+0x12>
     1ea:	8a 30       	cpi	r24, 0x0A	; 10
     1ec:	39 f1       	breq	.+78     	; 0x23c <run_menu+0x5a>
     1ee:	84 31       	cpi	r24, 0x14	; 20
     1f0:	19 f5       	brne	.+70     	; 0x238 <run_menu+0x56>
     1f2:	08 95       	ret
     1f4:	8e 31       	cpi	r24, 0x1E	; 30
     1f6:	11 f1       	breq	.+68     	; 0x23c <run_menu+0x5a>
     1f8:	89 3c       	cpi	r24, 0xC9	; 201
     1fa:	f1 f4       	brne	.+60     	; 0x238 <run_menu+0x56>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	80 91 70 01 	lds	r24, 0x0170
     202:	81 11       	cpse	r24, r1
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	60 93 70 01 	sts	0x0170, r22
      MAX7219_setCommaPos(1, blink);
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MAX7219_setCommaPos>
    break;
     210:	08 95       	ret
    case EVENT_KEY_PLUS:
    break;
    case EVENT_KEY_SET:
    break;
    case EVENT_KEY_SET_LONG:
      MAX7219_clearDisplay();
     212:	0e 94 c1 05 	call	0xb82	; 0xb82 <MAX7219_clearDisplay>
	  chanel = 1;
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 93 06 01 	sts	0x0106, r24
      SET_STATE(run_main);
     21c:	8f e1       	ldi	r24, 0x1F	; 31
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	90 93 08 01 	sts	0x0108, r25
     224:	80 93 07 01 	sts	0x0107, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     228:	88 e6       	ldi	r24, 0x68	; 104
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	40 ed       	ldi	r20, 0xD0	; 208
     230:	57 e0       	ldi	r21, 0x07	; 7
     232:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
    break;
     236:	08 95       	ret
    case EVENT_KEY_MINUS:
    break;
	default:
	  events_default(event);
     238:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <events_default>
     23c:	08 95       	ret

0000023e <run_main>:
  }    
}
//=============================================================================
void run_main(unsigned char event)
{
  switch(event) {
     23e:	85 31       	cpi	r24, 0x15	; 21
     240:	09 f4       	brne	.+2      	; 0x244 <run_main+0x6>
     242:	8e c0       	rjmp	.+284    	; 0x360 <run_main+0x122>
     244:	86 31       	cpi	r24, 0x16	; 22
     246:	38 f4       	brcc	.+14     	; 0x256 <run_main+0x18>
     248:	8a 30       	cpi	r24, 0x0A	; 10
     24a:	09 f4       	brne	.+2      	; 0x24e <run_main+0x10>
     24c:	94 c0       	rjmp	.+296    	; 0x376 <run_main+0x138>
     24e:	84 31       	cpi	r24, 0x14	; 20
     250:	09 f0       	breq	.+2      	; 0x254 <run_main+0x16>
     252:	8f c0       	rjmp	.+286    	; 0x372 <run_main+0x134>
     254:	60 c0       	rjmp	.+192    	; 0x316 <run_main+0xd8>
     256:	88 36       	cpi	r24, 0x68	; 104
     258:	39 f0       	breq	.+14     	; 0x268 <run_main+0x2a>
     25a:	89 36       	cpi	r24, 0x69	; 105
     25c:	09 f4       	brne	.+2      	; 0x260 <run_main+0x22>
     25e:	8b c0       	rjmp	.+278    	; 0x376 <run_main+0x138>
     260:	8e 31       	cpi	r24, 0x1E	; 30
     262:	09 f0       	breq	.+2      	; 0x266 <run_main+0x28>
     264:	86 c0       	rjmp	.+268    	; 0x372 <run_main+0x134>
     266:	08 95       	ret
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     268:	80 91 06 01 	lds	r24, 0x0106
     26c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	d1 f5       	brne	.+116    	; 0x2e8 <run_main+0xaa>
	    MAX7219_printChar(2, 'd');
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	64 e6       	ldi	r22, 0x64	; 100
     278:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
	    MAX7219_printChar(3, '-');
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	6d e2       	ldi	r22, 0x2D	; 45
     280:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     284:	60 91 06 01 	lds	r22, 0x0106
     288:	60 5d       	subi	r22, 0xD0	; 208
     28a:	84 e0       	ldi	r24, 0x04	; 4
     28c:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     290:	80 91 06 01 	lds	r24, 0x0106
     294:	0e 94 42 08 	call	0x1084	; 0x1084 <ds18x20GetTemp>
     298:	bc 01       	movw	r22, r24
     29a:	85 e0       	ldi	r24, 0x05	; 5
     29c:	0e 94 8a 00 	call	0x114	; 0x114 <print_temperature>
		if (chanel < 3) {
     2a0:	e0 91 06 01 	lds	r30, 0x0106
     2a4:	e3 30       	cpi	r30, 0x03	; 3
     2a6:	60 f4       	brcc	.+24     	; 0x2c0 <run_main+0x82>
		  if (types[chanel - 1]) {
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ed 5f       	subi	r30, 0xFD	; 253
     2ac:	fe 4f       	sbci	r31, 0xFE	; 254
     2ae:	80 81       	ld	r24, Z
     2b0:	88 23       	and	r24, r24
     2b2:	19 f0       	breq	.+6      	; 0x2ba <run_main+0x7c>
	        MAX7219_printChar(1, '^');
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	6e e5       	ldi	r22, 0x5E	; 94
     2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <run_main+0x86>
		  } else {
	        MAX7219_printChar(1, '_');
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	6f e5       	ldi	r22, 0x5F	; 95
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <run_main+0x86>
		  }
		} else {
	      MAX7219_printChar(1, ' ');
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	60 e2       	ldi	r22, 0x20	; 32
     2c4:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
		}
        MAX7219_setCommaPos(7, 1);
     2c8:	87 e0       	ldi	r24, 0x07	; 7
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     2d0:	84 e0       	ldi	r24, 0x04	; 4
     2d2:	60 91 72 01 	lds	r22, 0x0172
     2d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <MAX7219_setCommaPos>
        RTOS_setTask(EVENT_OUT_CHECK, 0, 0); 
     2da:	89 e6       	ldi	r24, 0x69	; 105
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
	  }
      if (!one_sensor_flag) {
     2e8:	80 91 72 01 	lds	r24, 0x0172
     2ec:	88 23       	and	r24, r24
     2ee:	49 f4       	brne	.+18     	; 0x302 <run_main+0xc4>
        if (chanel < 4) {
     2f0:	80 91 06 01 	lds	r24, 0x0106
     2f4:	84 30       	cpi	r24, 0x04	; 4
     2f6:	10 f4       	brcc	.+4      	; 0x2fc <run_main+0xbe>
          chanel++; 
     2f8:	8f 5f       	subi	r24, 0xFF	; 255
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <run_main+0xc0>
	    } else { 
	      chanel = 1;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 06 01 	sts	0x0106, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     302:	80 91 06 01 	lds	r24, 0x0106
     306:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     30a:	88 23       	and	r24, r24
     30c:	09 f1       	breq	.+66     	; 0x350 <run_main+0x112>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     30e:	88 e6       	ldi	r24, 0x68	; 104
     310:	60 ed       	ldi	r22, 0xD0	; 208
     312:	77 e0       	ldi	r23, 0x07	; 7
     314:	20 c0       	rjmp	.+64     	; 0x356 <run_main+0x118>
	  }
    break;
    case EVENT_KEY_PLUS:
    break;
    case EVENT_KEY_SET:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     316:	88 e6       	ldi	r24, 0x68	; 104
     318:	0e 94 d7 04 	call	0x9ae	; 0x9ae <RTOS_deleteTask>
	  BEEPER_TICK();
     31c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31e:	8f e3       	ldi	r24, 0x3F	; 63
     320:	9c e9       	ldi	r25, 0x9C	; 156
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <run_main+0xe4>
     326:	00 c0       	rjmp	.+0      	; 0x328 <run_main+0xea>
     328:	00 00       	nop
     32a:	40 98       	cbi	0x08, 0	; 8
      one_sensor_flag = !one_sensor_flag;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 91 72 01 	lds	r25, 0x0172
     332:	91 11       	cpse	r25, r1
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	80 93 72 01 	sts	0x0172, r24
	  if (one_sensor_flag) {
     33a:	88 23       	and	r24, r24
     33c:	49 f0       	breq	.+18     	; 0x350 <run_main+0x112>
	    if (chanel > 1) chanel--; else chanel = 4;
     33e:	80 91 06 01 	lds	r24, 0x0106
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	10 f0       	brcs	.+4      	; 0x34a <run_main+0x10c>
     346:	81 50       	subi	r24, 0x01	; 1
     348:	01 c0       	rjmp	.+2      	; 0x34c <run_main+0x10e>
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	80 93 06 01 	sts	0x0106, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     350:	88 e6       	ldi	r24, 0x68	; 104
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
    break;
     35e:	08 95       	ret
    case EVENT_KEY_SET_LONG:
      MAX7219_clearDisplay();
     360:	0e 94 c1 05 	call	0xb82	; 0xb82 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     364:	81 ef       	ldi	r24, 0xF1	; 241
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	90 93 08 01 	sts	0x0108, r25
     36c:	80 93 07 01 	sts	0x0107, r24
    break;
     370:	08 95       	ret
    case EVENT_KEY_MINUS:
    break;
    case EVENT_OUT_CHECK:
    break;
	default:
	  events_default(event);
     372:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <events_default>
     376:	08 95       	ret

00000378 <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
     378:	85 36       	cpi	r24, 0x65	; 101
     37a:	09 f4       	brne	.+2      	; 0x37e <run_start+0x6>
     37c:	b9 c0       	rjmp	.+370    	; 0x4f0 <run_start+0x178>
     37e:	87 36       	cpi	r24, 0x67	; 103
     380:	09 f4       	brne	.+2      	; 0x384 <run_start+0xc>
     382:	8f c0       	rjmp	.+286    	; 0x4a2 <run_start+0x12a>
     384:	84 36       	cpi	r24, 0x64	; 100
     386:	09 f0       	breq	.+2      	; 0x38a <run_start+0x12>
     388:	ca c0       	rjmp	.+404    	; 0x51e <run_start+0x1a6>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	0e 94 85 06 	call	0xd0a	; 0xd0a <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	6d e2       	ldi	r22, 0x2D	; 45
     398:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
	  ds_count = 0;
     39c:	10 92 71 01 	sts	0x0171, r1
      ds18x20IsOnBus(1);
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     3b2:	84 e0       	ldi	r24, 0x04	; 4
     3b4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	41 f4       	brne	.+16     	; 0x3d2 <run_start+0x5a>
     3c2:	80 91 71 01 	lds	r24, 0x0171
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	80 93 71 01 	sts	0x0171, r24
     3cc:	85 e0       	ldi	r24, 0x05	; 5
     3ce:	61 e3       	ldi	r22, 0x31	; 49
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <run_start+0x5e>
     3d2:	85 e0       	ldi	r24, 0x05	; 5
     3d4:	60 e2       	ldi	r22, 0x20	; 32
     3d6:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	41 f4       	brne	.+16     	; 0x3f4 <run_start+0x7c>
     3e4:	80 91 71 01 	lds	r24, 0x0171
     3e8:	8f 5f       	subi	r24, 0xFF	; 255
     3ea:	80 93 71 01 	sts	0x0171, r24
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	61 e3       	ldi	r22, 0x31	; 49
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <run_start+0x80>
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	60 e2       	ldi	r22, 0x20	; 32
     3f8:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	41 f4       	brne	.+16     	; 0x416 <run_start+0x9e>
     406:	80 91 71 01 	lds	r24, 0x0171
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	80 93 71 01 	sts	0x0171, r24
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	61 e3       	ldi	r22, 0x31	; 49
     414:	02 c0       	rjmp	.+4      	; 0x41a <run_start+0xa2>
     416:	87 e0       	ldi	r24, 0x07	; 7
     418:	60 e2       	ldi	r22, 0x20	; 32
     41a:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     424:	81 30       	cpi	r24, 0x01	; 1
     426:	41 f4       	brne	.+16     	; 0x438 <run_start+0xc0>
     428:	80 91 71 01 	lds	r24, 0x0171
     42c:	8f 5f       	subi	r24, 0xFF	; 255
     42e:	80 93 71 01 	sts	0x0171, r24
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	61 e3       	ldi	r22, 0x31	; 49
     436:	02 c0       	rjmp	.+4      	; 0x43c <run_start+0xc4>
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	60 e2       	ldi	r22, 0x20	; 32
     43c:	0e 94 75 06 	call	0xcea	; 0xcea <MAX7219_printChar>
	  if (ds_count == 0) {
     440:	60 91 71 01 	lds	r22, 0x0171
     444:	66 23       	and	r22, r22
     446:	21 f4       	brne	.+8      	; 0x450 <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     448:	84 e6       	ldi	r24, 0x64	; 100
     44a:	68 eb       	ldi	r22, 0xB8	; 184
     44c:	7b e0       	ldi	r23, 0x0B	; 11
     44e:	4b c0       	rjmp	.+150    	; 0x4e6 <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	20 e2       	ldi	r18, 0x20	; 32
     458:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	11 f4       	brne	.+4      	; 0x46a <run_start+0xf2>
     466:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     470:	81 30       	cpi	r24, 0x01	; 1
     472:	19 f4       	brne	.+6      	; 0x47a <run_start+0x102>
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     480:	81 30       	cpi	r24, 0x01	; 1
     482:	19 f4       	brne	.+6      	; 0x48a <run_start+0x112>
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	19 f4       	brne	.+6      	; 0x49a <run_start+0x122>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	0e 94 1b 08 	call	0x1036	; 0x1036 <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     49a:	87 e6       	ldi	r24, 0x67	; 103
     49c:	68 ee       	ldi	r22, 0xE8	; 232
     49e:	73 e0       	ldi	r23, 0x03	; 3
     4a0:	22 c0       	rjmp	.+68     	; 0x4e6 <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	11 f4       	brne	.+4      	; 0x4b0 <run_start+0x138>
     4ac:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	19 f4       	brne	.+6      	; 0x4c0 <run_start+0x148>
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <run_start+0x158>
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     4d0:	84 e0       	ldi	r24, 0x04	; 4
     4d2:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <ds18x20GetDevCount>
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	19 f4       	brne	.+6      	; 0x4e0 <run_start+0x168>
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     4e0:	85 e6       	ldi	r24, 0x65	; 101
     4e2:	64 e6       	ldi	r22, 0x64	; 100
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
    break;
     4ee:	08 95       	ret
    case EVENT_RUN_MAIN:
      MAX7219_clearDisplay();
     4f0:	0e 94 c1 05 	call	0xb82	; 0xb82 <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     4f4:	8b ec       	ldi	r24, 0xCB	; 203
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	44 e6       	ldi	r20, 0x64	; 100
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     502:	88 e6       	ldi	r24, 0x68	; 104
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
      SET_STATE(run_main);
     510:	8f e1       	ldi	r24, 0x1F	; 31
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	90 93 08 01 	sts	0x0108, r25
     518:	80 93 07 01 	sts	0x0107, r24
    break;
     51c:	08 95       	ret
	default:
	  events_default(event);
     51e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <events_default>
     522:	08 95       	ret

00000524 <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(int16_t temp)
{
     524:	1f 93       	push	r17
     526:	18 2f       	mov	r17, r24
  eeprom_write_byte((uint8_t*)MAX_TEMP_1_ADDR, ((temp & 0xF0) >> 8));
     528:	80 e1       	ldi	r24, 0x10	; 16
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
  eeprom_write_byte((uint8_t*)MAX_TEMP_1_ADDR + 1, (temp & 0x0F));
     532:	61 2f       	mov	r22, r17
     534:	6f 70       	andi	r22, 0x0F	; 15
     536:	81 e1       	ldi	r24, 0x11	; 17
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
}
     53e:	1f 91       	pop	r17
     540:	08 95       	ret

00000542 <load_max_temp1>:
//=============================================================================
int16_t load_max_temp1(void)
{
     542:	1f 93       	push	r17
  uint8_t th = eeprom_read_byte((uint8_t*)(uint8_t*)MAX_TEMP_1_ADDR);
     544:	80 e1       	ldi	r24, 0x10	; 16
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
     54c:	18 2f       	mov	r17, r24
  uint8_t tl = eeprom_read_byte((uint8_t*)(uint8_t*)MAX_TEMP_1_ADDR + 1);
     54e:	81 e1       	ldi	r24, 0x11	; 17
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
  uint16_t t = th;
  t = (t << 8) + tl;
     556:	31 2f       	mov	r19, r17
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	28 0f       	add	r18, r24
     55c:	31 1d       	adc	r19, r1
  if (t > 800) t = 250;
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	21 32       	cpi	r18, 0x21	; 33
     562:	38 07       	cpc	r19, r24
     564:	10 f0       	brcs	.+4      	; 0x56a <load_max_temp1+0x28>
     566:	2a ef       	ldi	r18, 0xFA	; 250
     568:	30 e0       	ldi	r19, 0x00	; 0
  temps[0][0] = (int16_t)t;
     56a:	20 93 74 01 	sts	0x0174, r18
     56e:	30 93 75 01 	sts	0x0175, r19
  return (int16_t)t;
}
     572:	c9 01       	movw	r24, r18
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(int16_t temp)
{
     578:	1f 93       	push	r17
     57a:	18 2f       	mov	r17, r24
  eeprom_write_byte((uint8_t*)MAX_TEMP_2_ADDR, ((temp & 0xF0) >> 8));
     57c:	80 e2       	ldi	r24, 0x20	; 32
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
  eeprom_write_byte((uint8_t*)MAX_TEMP_2_ADDR + 1, (temp & 0x0F));
     586:	61 2f       	mov	r22, r17
     588:	6f 70       	andi	r22, 0x0F	; 15
     58a:	81 e2       	ldi	r24, 0x21	; 33
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
}
     592:	1f 91       	pop	r17
     594:	08 95       	ret

00000596 <load_max_temp2>:
//=============================================================================
int16_t load_max_temp2(void)
{
     596:	1f 93       	push	r17
  uint8_t th = eeprom_read_byte((uint8_t*)(uint8_t*)MAX_TEMP_2_ADDR);
     598:	80 e2       	ldi	r24, 0x20	; 32
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
     5a0:	18 2f       	mov	r17, r24
  uint8_t tl = eeprom_read_byte((uint8_t*)(uint8_t*)MAX_TEMP_2_ADDR + 1);
     5a2:	81 e2       	ldi	r24, 0x21	; 33
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
  uint16_t t = th;
  t = (t << 8) + tl;
     5aa:	31 2f       	mov	r19, r17
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	28 0f       	add	r18, r24
     5b0:	31 1d       	adc	r19, r1
  if (t > 800) t = 250;
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	21 32       	cpi	r18, 0x21	; 33
     5b6:	38 07       	cpc	r19, r24
     5b8:	10 f0       	brcs	.+4      	; 0x5be <load_max_temp2+0x28>
     5ba:	2a ef       	ldi	r18, 0xFA	; 250
     5bc:	30 e0       	ldi	r19, 0x00	; 0
  temps[1][0] = (int16_t)t;
     5be:	20 93 78 01 	sts	0x0178, r18
     5c2:	30 93 79 01 	sts	0x0179, r19
  return (int16_t)t;
}
     5c6:	c9 01       	movw	r24, r18
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret

000005cc <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(int16_t temp)
{
     5cc:	1f 93       	push	r17
     5ce:	18 2f       	mov	r17, r24
  eeprom_write_byte((uint8_t*)MIN_TEMP_1_ADDR, ((temp & 0xF0) >> 8));
     5d0:	82 e1       	ldi	r24, 0x12	; 18
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
  eeprom_write_byte((uint8_t*)MIN_TEMP_1_ADDR + 1, (temp & 0x0F));
     5da:	61 2f       	mov	r22, r17
     5dc:	6f 70       	andi	r22, 0x0F	; 15
     5de:	83 e1       	ldi	r24, 0x13	; 19
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
}
     5e6:	1f 91       	pop	r17
     5e8:	08 95       	ret

000005ea <load_min_temp1>:
//=============================================================================
int16_t load_min_temp1(void)
{
     5ea:	1f 93       	push	r17
  uint8_t th = eeprom_read_byte((uint8_t*)(uint8_t*)MIN_TEMP_1_ADDR);
     5ec:	82 e1       	ldi	r24, 0x12	; 18
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
     5f4:	18 2f       	mov	r17, r24
  uint8_t tl = eeprom_read_byte((uint8_t*)(uint8_t*)MIN_TEMP_1_ADDR + 1);
     5f6:	83 e1       	ldi	r24, 0x13	; 19
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
  uint16_t t = th;
  t = (t << 8) + tl;
     5fe:	31 2f       	mov	r19, r17
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	28 0f       	add	r18, r24
     604:	31 1d       	adc	r19, r1
  if (t > 800) t = 230;
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	21 32       	cpi	r18, 0x21	; 33
     60a:	38 07       	cpc	r19, r24
     60c:	10 f0       	brcs	.+4      	; 0x612 <load_min_temp1+0x28>
     60e:	26 ee       	ldi	r18, 0xE6	; 230
     610:	30 e0       	ldi	r19, 0x00	; 0
  temps[0][1] = (int16_t)t;
     612:	20 93 76 01 	sts	0x0176, r18
     616:	30 93 77 01 	sts	0x0177, r19
  return (int16_t)t;
}
     61a:	c9 01       	movw	r24, r18
     61c:	1f 91       	pop	r17
     61e:	08 95       	ret

00000620 <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(int16_t temp)
{
     620:	1f 93       	push	r17
     622:	18 2f       	mov	r17, r24
  eeprom_write_byte((uint8_t*)MIN_TEMP_2_ADDR, ((temp & 0xF0) >> 8));
     624:	82 e2       	ldi	r24, 0x22	; 34
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
  eeprom_write_byte((uint8_t*)MIN_TEMP_2_ADDR + 1, (temp & 0x0F));
     62e:	61 2f       	mov	r22, r17
     630:	6f 70       	andi	r22, 0x0F	; 15
     632:	83 e2       	ldi	r24, 0x23	; 35
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
}
     63a:	1f 91       	pop	r17
     63c:	08 95       	ret

0000063e <load_min_temp2>:
//=============================================================================
int16_t load_min_temp2(void)
{
     63e:	1f 93       	push	r17
  uint8_t th = eeprom_read_byte((uint8_t*)(uint8_t*)MIN_TEMP_2_ADDR);
     640:	82 e2       	ldi	r24, 0x22	; 34
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
     648:	18 2f       	mov	r17, r24
  uint8_t tl = eeprom_read_byte((uint8_t*)(uint8_t*)MIN_TEMP_2_ADDR + 1);
     64a:	83 e2       	ldi	r24, 0x23	; 35
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
  uint16_t t = th;
  t = (t << 8) + tl;
     652:	31 2f       	mov	r19, r17
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	28 0f       	add	r18, r24
     658:	31 1d       	adc	r19, r1
  if (t > 800) t = 230;
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	21 32       	cpi	r18, 0x21	; 33
     65e:	38 07       	cpc	r19, r24
     660:	10 f0       	brcs	.+4      	; 0x666 <load_min_temp2+0x28>
     662:	26 ee       	ldi	r18, 0xE6	; 230
     664:	30 e0       	ldi	r19, 0x00	; 0
  temps[1][1] = (int16_t)t;
     666:	20 93 7a 01 	sts	0x017A, r18
     66a:	30 93 7b 01 	sts	0x017B, r19
  return (int16_t)t;
}
     66e:	c9 01       	movw	r24, r18
     670:	1f 91       	pop	r17
     672:	08 95       	ret

00000674 <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     674:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     676:	80 e3       	ldi	r24, 0x30	; 48
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
}
     67e:	08 95       	ret

00000680 <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     680:	80 e3       	ldi	r24, 0x30	; 48
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
     688:	80 93 03 01 	sts	0x0103, r24
  if (brightnes > 15) brightnes = 2;
     68c:	80 31       	cpi	r24, 0x10	; 16
     68e:	18 f0       	brcs	.+6      	; 0x696 <load_brightnes+0x16>
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	80 93 03 01 	sts	0x0103, r24
  return brightnes;
}
     696:	80 91 03 01 	lds	r24, 0x0103
     69a:	08 95       	ret

0000069c <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     69c:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     69e:	84 e1       	ldi	r24, 0x14	; 20
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
}
     6a6:	08 95       	ret

000006a8 <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     6a8:	84 e1       	ldi	r24, 0x14	; 20
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
     6b0:	81 11       	cpse	r24, r1
     6b2:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     6b4:	80 93 04 01 	sts	0x0104, r24
  return t;
}
     6b8:	08 95       	ret

000006ba <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     6ba:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     6bc:	84 e2       	ldi	r24, 0x24	; 36
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 b5 08 	call	0x116a	; 0x116a <__eewr_byte_m328p>
}
     6c4:	08 95       	ret

000006c6 <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     6c6:	84 e2       	ldi	r24, 0x24	; 36
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 ad 08 	call	0x115a	; 0x115a <__eerd_byte_m328p>
     6ce:	81 11       	cpse	r24, r1
     6d0:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     6d2:	80 93 05 01 	sts	0x0105, r24
  return t;
}
     6d6:	08 95       	ret

000006d8 <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
     6d8:	20 91 84 01 	lds	r18, 0x0184
     6dc:	28 30       	cpi	r18, 0x08	; 8
     6de:	78 f4       	brcc	.+30     	; 0x6fe <PutBut+0x26>
     buf[head] = but;
     6e0:	90 91 85 01 	lds	r25, 0x0185
     6e4:	e9 2f       	mov	r30, r25
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ea 57       	subi	r30, 0x7A	; 122
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	80 83       	st	Z, r24
     count++;
     6ee:	2f 5f       	subi	r18, 0xFF	; 255
     6f0:	20 93 84 01 	sts	0x0184, r18
     head++;
     6f4:	89 2f       	mov	r24, r25
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
     6f8:	87 70       	andi	r24, 0x07	; 7
     6fa:	80 93 85 01 	sts	0x0185, r24
     6fe:	08 95       	ret

00000700 <BUT_Check.clone.0>:
  }
  
  return but;
}
//=============================================================================
static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
     708:	96 2f       	mov	r25, r22
     70a:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
     70c:	c9 2f       	mov	r28, r25
     70e:	d0 e0       	ldi	r29, 0x00	; 0
     710:	fe 01       	movw	r30, r28
     712:	e3 58       	subi	r30, 0x83	; 131
     714:	fe 4f       	sbci	r31, 0xFE	; 254
     716:	10 81       	ld	r17, Z

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
#endif

 countDebTmp = countDeb[i];
     718:	fe 01       	movw	r30, r28
     71a:	e0 58       	subi	r30, 0x80	; 128
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	90 81       	ld	r25, Z
     720:	90 93 83 01 	sts	0x0183, r25
  
 if (state){
     724:	88 23       	and	r24, r24
     726:	a9 f0       	breq	.+42     	; 0x752 <BUT_Check.clone.0+0x52>
    if (countDebTmp < BUT_COUNT_MAX){
     728:	97 39       	cpi	r25, 0x97	; 151
     72a:	28 f5       	brcc	.+74     	; 0x776 <BUT_Check.clone.0+0x76>
       countDebTmp++;
     72c:	9f 5f       	subi	r25, 0xFF	; 255
     72e:	90 93 83 01 	sts	0x0183, r25

       if (countDebTmp > BUT_COUNT_THR){
     732:	95 31       	cpi	r25, 0x15	; 21
     734:	00 f1       	brcs	.+64     	; 0x776 <BUT_Check.clone.0+0x76>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
     736:	10 fd       	sbrc	r17, 0
     738:	03 c0       	rjmp	.+6      	; 0x740 <BUT_Check.clone.0+0x40>
             stateTmp |= FLAG_BUT_PRESSED;
     73a:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
     73c:	01 e0       	ldi	r16, 0x01	; 1
     73e:	01 c0       	rjmp	.+2      	; 0x742 <BUT_Check.clone.0+0x42>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     740:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
     742:	97 39       	cpi	r25, 0x97	; 151
     744:	81 f4       	brne	.+32     	; 0x766 <BUT_Check.clone.0+0x66>
         if (!(stateTmp & FLAG_BUT_HOLD)){
     746:	11 fd       	sbrc	r17, 1
     748:	0e c0       	rjmp	.+28     	; 0x766 <BUT_Check.clone.0+0x66>
            stateTmp &= ~(FLAG_BUT_RELEASED);
     74a:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
     74c:	12 60       	ori	r17, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
     74e:	02 e0       	ldi	r16, 0x02	; 2
     750:	0c c0       	rjmp	.+24     	; 0x76a <BUT_Check.clone.0+0x6a>
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
  #endif           
        }
     }
#else
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
     752:	10 ff       	sbrs	r17, 0
     754:	04 c0       	rjmp	.+8      	; 0x75e <BUT_Check.clone.0+0x5e>
     756:	11 fd       	sbrc	r17, 1
     758:	1c c0       	rjmp	.+56     	; 0x792 <BUT_Check.clone.0+0x92>
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     75a:	03 e0       	ldi	r16, 0x03	; 3
     75c:	01 c0       	rjmp	.+2      	; 0x760 <BUT_Check.clone.0+0x60>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     75e:	00 e0       	ldi	r16, 0x00	; 0
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
     760:	10 92 83 01 	sts	0x0183, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
     764:	1c 7f       	andi	r17, 0xFC	; 252
  }
 
  countHold[i] = countHoldTmp;
#endif       
  
  if (event){
     766:	00 23       	and	r16, r16
     768:	31 f0       	breq	.+12     	; 0x776 <BUT_Check.clone.0+0x76>
     PutBut(i+1);
     76a:	86 2f       	mov	r24, r22
     76c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <PutBut>
     PutBut(event);
     770:	80 2f       	mov	r24, r16
     772:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <PutBut>
  }
  
  countDeb[i] = countDebTmp;
     776:	fe 01       	movw	r30, r28
     778:	e0 58       	subi	r30, 0x80	; 128
     77a:	fe 4f       	sbci	r31, 0xFE	; 254
     77c:	80 91 83 01 	lds	r24, 0x0183
     780:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
     782:	c3 58       	subi	r28, 0x83	; 131
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	18 83       	st	Y, r17
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     792:	04 e0       	ldi	r16, 0x04	; 4
     794:	e5 cf       	rjmp	.-54     	; 0x760 <BUT_Check.clone.0+0x60>

00000796 <KBD_getBut>:

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    
  if (count){
     796:	20 91 84 01 	lds	r18, 0x0184
     79a:	22 23       	and	r18, r18
     79c:	79 f0       	breq	.+30     	; 0x7bc <KBD_getBut+0x26>
     but = buf[tail];
     79e:	90 91 8e 01 	lds	r25, 0x018E
     7a2:	e9 2f       	mov	r30, r25
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	ea 57       	subi	r30, 0x7A	; 122
     7a8:	fe 4f       	sbci	r31, 0xFE	; 254
     7aa:	80 81       	ld	r24, Z
     count--;
     7ac:	21 50       	subi	r18, 0x01	; 1
     7ae:	20 93 84 01 	sts	0x0184, r18
     tail++;
     7b2:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
     7b4:	97 70       	andi	r25, 0x07	; 7
     7b6:	90 93 8e 01 	sts	0x018E, r25
     7ba:	08 95       	ret
  }
}

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
     7be:	08 95       	ret

000007c0 <KBD_init>:
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     7c0:	10 92 80 01 	sts	0x0180, r1
     stateBut[i] = 0;
     7c4:	10 92 7d 01 	sts	0x017D, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     7c8:	10 92 81 01 	sts	0x0181, r1
     stateBut[i] = 0;
     7cc:	10 92 7e 01 	sts	0x017E, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     7d0:	10 92 82 01 	sts	0x0182, r1
     stateBut[i] = 0;
     7d4:	10 92 7f 01 	sts	0x017F, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
     7d8:	10 92 86 01 	sts	0x0186, r1
     7dc:	10 92 87 01 	sts	0x0187, r1
     7e0:	10 92 88 01 	sts	0x0188, r1
     7e4:	10 92 89 01 	sts	0x0189, r1
     7e8:	10 92 8a 01 	sts	0x018A, r1
     7ec:	10 92 8b 01 	sts	0x018B, r1
     7f0:	10 92 8c 01 	sts	0x018C, r1
     7f4:	10 92 8d 01 	sts	0x018D, r1
  }
  
  head = 0;
     7f8:	10 92 85 01 	sts	0x0185, r1
  tail = 0;  
     7fc:	10 92 8e 01 	sts	0x018E, r1
  count = 0;
     800:	10 92 84 01 	sts	0x0184, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
     804:	54 98       	cbi	0x0a, 4	; 10
     806:	5c 9a       	sbi	0x0b, 4	; 11
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
     808:	55 98       	cbi	0x0a, 5	; 10
     80a:	5d 9a       	sbi	0x0b, 5	; 11
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
     80c:	56 98       	cbi	0x0a, 6	; 10
     80e:	5e 9a       	sbi	0x0b, 6	; 11
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
     810:	08 95       	ret

00000812 <KBD_poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	4c 99       	sbic	0x09, 4	; 9
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	0e 94 80 03 	call	0x700	; 0x700 <BUT_Check.clone.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	4d 99       	sbic	0x09, 5	; 9
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	62 e0       	ldi	r22, 0x02	; 2
     826:	0e 94 80 03 	call	0x700	; 0x700 <BUT_Check.clone.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	4e 99       	sbic	0x09, 6	; 9
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	63 e0       	ldi	r22, 0x03	; 3
     832:	0e 94 80 03 	call	0x700	; 0x700 <BUT_Check.clone.0>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
     836:	08 95       	ret

00000838 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
     838:	1f 93       	push	r17
  uint8_t but = 0;
  uint8_t code = 0;
  KBD_poll();
     83a:	0e 94 09 04 	call	0x812	; 0x812 <KBD_poll>
  but = KBD_getBut();
     83e:	0e 94 cb 03 	call	0x796	; 0x796 <KBD_getBut>
     842:	18 2f       	mov	r17, r24
  if (but) {
     844:	88 23       	and	r24, r24
     846:	61 f1       	breq	.+88     	; 0x8a0 <KBD_scan+0x68>
    code = KBD_getBut(); 
     848:	0e 94 cb 03 	call	0x796	; 0x796 <KBD_getBut>
    if (but == 1) {
     84c:	11 30       	cpi	r17, 0x01	; 1
     84e:	21 f4       	brne	.+8      	; 0x858 <KBD_scan+0x20>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	31 f5       	brne	.+76     	; 0x8a0 <KBD_scan+0x68>
     854:	8a e0       	ldi	r24, 0x0A	; 10
     856:	1e c0       	rjmp	.+60     	; 0x894 <KBD_scan+0x5c>
    } 
	if (but == 2) {
     858:	12 30       	cpi	r17, 0x02	; 2
     85a:	b9 f4       	brne	.+46     	; 0x88a <KBD_scan+0x52>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_SET, 0, 0); }
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	11 f4       	brne	.+4      	; 0x864 <KBD_scan+0x2c>
     860:	84 e1       	ldi	r24, 0x14	; 20
     862:	18 c0       	rjmp	.+48     	; 0x894 <KBD_scan+0x5c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_HOLD, 0, 0); }
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	69 f4       	brne	.+26     	; 0x882 <KBD_scan+0x4a>
     868:	40 9a       	sbi	0x08, 0	; 8
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	97 ee       	ldi	r25, 0xE7	; 231
     86e:	a3 e0       	ldi	r26, 0x03	; 3
     870:	81 50       	subi	r24, 0x01	; 1
     872:	90 40       	sbci	r25, 0x00	; 0
     874:	a0 40       	sbci	r26, 0x00	; 0
     876:	e1 f7       	brne	.-8      	; 0x870 <KBD_scan+0x38>
     878:	00 c0       	rjmp	.+0      	; 0x87a <KBD_scan+0x42>
     87a:	00 00       	nop
     87c:	40 98       	cbi	0x08, 0	; 8
     87e:	86 e1       	ldi	r24, 0x16	; 22
     880:	09 c0       	rjmp	.+18     	; 0x894 <KBD_scan+0x5c>
	  if (code == BUT_RELEASED_LONG_CODE) { RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
     882:	84 30       	cpi	r24, 0x04	; 4
     884:	69 f4       	brne	.+26     	; 0x8a0 <KBD_scan+0x68>
     886:	85 e1       	ldi	r24, 0x15	; 21
     888:	05 c0       	rjmp	.+10     	; 0x894 <KBD_scan+0x5c>
    }
	if (but == 3) {
     88a:	13 30       	cpi	r17, 0x03	; 3
     88c:	49 f4       	brne	.+18     	; 0x8a0 <KBD_scan+0x68>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	39 f4       	brne	.+14     	; 0x8a0 <KBD_scan+0x68>
     892:	8e e1       	ldi	r24, 0x1E	; 30
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <RTOS_setTask>
    }
  }
}
     8a0:	1f 91       	pop	r17
     8a2:	08 95       	ret

000008a4 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
     8a4:	e1 eb       	ldi	r30, 0xB1	; 177
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	84 60       	ori	r24, 0x04	; 4
     8ac:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
     8b2:	e0 e7       	ldi	r30, 0x70	; 112
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	81 60       	ori	r24, 0x01	; 1
     8ba:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
     8bc:	86 e0       	ldi	r24, 0x06	; 6
     8be:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
     8c2:	10 92 f0 01 	sts	0x01F0, r1
}
     8c6:	08 95       	ret

000008c8 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
     8c8:	88 23       	and	r24, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <RTOS_setTask+0x6>
     8cc:	6f c0       	rjmp	.+222    	; 0x9ac <__stack+0xad>
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	1b c0       	rjmp	.+54     	; 0x908 <__stack+0x9>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
     8d2:	29 2f       	mov	r18, r25
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	f9 01       	movw	r30, r18
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	e2 0f       	add	r30, r18
     8de:	f3 1f       	adc	r31, r19
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e0 57       	subi	r30, 0x70	; 112
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	20 81       	ld	r18, Z
     8ea:	28 17       	cp	r18, r24
     8ec:	61 f4       	brne	.+24     	; 0x906 <__stack+0x7>
    {
      TaskArray[i].delay  = taskDelay;
     8ee:	72 83       	std	Z+2, r23	; 0x02
     8f0:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
     8f2:	54 83       	std	Z+4, r21	; 0x04
     8f4:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
     8f6:	61 15       	cp	r22, r1
     8f8:	71 05       	cpc	r23, r1
     8fa:	19 f4       	brne	.+6      	; 0x902 <__stack+0x3>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	85 83       	std	Z+5, r24	; 0x05
     900:	08 95       	ret
      } else TaskArray[i].run = 0;   
     902:	15 82       	std	Z+5, r1	; 0x05
     904:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
     906:	9f 5f       	subi	r25, 0xFF	; 255
     908:	20 91 f0 01 	lds	r18, 0x01F0
     90c:	92 17       	cp	r25, r18
     90e:	08 f3       	brcs	.-62     	; 0x8d2 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
     910:	20 91 f0 01 	lds	r18, 0x01F0
     914:	20 31       	cpi	r18, 0x10	; 16
     916:	08 f0       	brcs	.+2      	; 0x91a <__stack+0x1b>
     918:	49 c0       	rjmp	.+146    	; 0x9ac <__stack+0xad>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
     91a:	20 91 f0 01 	lds	r18, 0x01F0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	f9 01       	movw	r30, r18
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	e2 0f       	add	r30, r18
     928:	f3 1f       	adc	r31, r19
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	e0 57       	subi	r30, 0x70	; 112
     930:	fe 4f       	sbci	r31, 0xFE	; 254
     932:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
     934:	20 91 f0 01 	lds	r18, 0x01F0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	f9 01       	movw	r30, r18
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e2 0f       	add	r30, r18
     942:	f3 1f       	adc	r31, r19
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	e0 57       	subi	r30, 0x70	; 112
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	72 83       	std	Z+2, r23	; 0x02
     94e:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
     950:	20 91 f0 01 	lds	r18, 0x01F0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	f9 01       	movw	r30, r18
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	e2 0f       	add	r30, r18
     95e:	f3 1f       	adc	r31, r19
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	e0 57       	subi	r30, 0x70	; 112
     966:	fe 4f       	sbci	r31, 0xFE	; 254
     968:	54 83       	std	Z+4, r21	; 0x04
     96a:	43 83       	std	Z+3, r20	; 0x03
     96c:	89 2f       	mov	r24, r25
     96e:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
     970:	61 15       	cp	r22, r1
     972:	71 05       	cpc	r23, r1
     974:	61 f4       	brne	.+24     	; 0x98e <__stack+0x8f>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
     976:	fc 01       	movw	r30, r24
     978:	ee 0f       	add	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	e8 0f       	add	r30, r24
     97e:	f9 1f       	adc	r31, r25
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	e0 57       	subi	r30, 0x70	; 112
     986:	fe 4f       	sbci	r31, 0xFE	; 254
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	85 83       	std	Z+5, r24	; 0x05
     98c:	0a c0       	rjmp	.+20     	; 0x9a2 <__stack+0xa3>
    } else TaskArray[i].run = 0;   
     98e:	fc 01       	movw	r30, r24
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	e0 57       	subi	r30, 0x70	; 112
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
     9a2:	80 91 f0 01 	lds	r24, 0x01F0
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	80 93 f0 01 	sts	0x01F0, r24
     9ac:	08 95       	ret

000009ae <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2e c0       	rjmp	.+92     	; 0xa0e <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
     9b2:	29 2f       	mov	r18, r25
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	d9 01       	movw	r26, r18
     9b8:	aa 0f       	add	r26, r26
     9ba:	bb 1f       	adc	r27, r27
     9bc:	a2 0f       	add	r26, r18
     9be:	b3 1f       	adc	r27, r19
     9c0:	aa 0f       	add	r26, r26
     9c2:	bb 1f       	adc	r27, r27
     9c4:	a0 57       	subi	r26, 0x70	; 112
     9c6:	be 4f       	sbci	r27, 0xFE	; 254
     9c8:	4c 91       	ld	r20, X
     9ca:	48 17       	cp	r20, r24
     9cc:	f9 f4       	brne	.+62     	; 0xa0c <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
     9ce:	80 91 f0 01 	lds	r24, 0x01F0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	28 17       	cp	r18, r24
     9d8:	39 07       	cpc	r19, r25
     9da:	91 f0       	breq	.+36     	; 0xa00 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
     9dc:	80 91 f0 01 	lds	r24, 0x01F0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	fc 01       	movw	r30, r24
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	e8 0f       	add	r30, r24
     9ec:	f9 1f       	adc	r31, r25
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	e0 57       	subi	r30, 0x70	; 112
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	86 e0       	ldi	r24, 0x06	; 6
     9f8:	01 90       	ld	r0, Z+
     9fa:	0d 92       	st	X+, r0
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
     a00:	80 91 f0 01 	lds	r24, 0x01F0
     a04:	81 50       	subi	r24, 0x01	; 1
     a06:	80 93 f0 01 	sts	0x01F0, r24
      return;
     a0a:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
     a0c:	9f 5f       	subi	r25, 0xFF	; 255
     a0e:	20 91 f0 01 	lds	r18, 0x01F0
     a12:	92 17       	cp	r25, r18
     a14:	70 f2       	brcs	.-100    	; 0x9b2 <RTOS_deleteTask+0x4>
     a16:	08 95       	ret

00000a18 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
     a1c:	80 91 8f 01 	lds	r24, 0x018F
     a20:	88 23       	and	r24, r24
     a22:	11 f4       	brne	.+4      	; 0xa28 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
     a24:	10 e0       	ldi	r17, 0x00	; 0
     a26:	4e c0       	rjmp	.+156    	; 0xac4 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
     a28:	10 92 8f 01 	sts	0x018F, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
     a2c:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
     a2e:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
     a30:	17 c0       	rjmp	.+46     	; 0xa60 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
     a32:	82 2f       	mov	r24, r18
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	fc 01       	movw	r30, r24
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	e8 0f       	add	r30, r24
     a3e:	f9 1f       	adc	r31, r25
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	e0 57       	subi	r30, 0x70	; 112
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	92 81       	ldd	r25, Z+2	; 0x02
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	11 f4       	brne	.+4      	; 0xa54 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
     a50:	35 83       	std	Z+5, r19	; 0x05
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
     a54:	81 81       	ldd	r24, Z+1	; 0x01
     a56:	92 81       	ldd	r25, Z+2	; 0x02
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	92 83       	std	Z+2, r25	; 0x02
     a5c:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	80 91 f0 01 	lds	r24, 0x01F0
     a64:	28 17       	cp	r18, r24
     a66:	28 f3       	brcs	.-54     	; 0xa32 <RTOS_dispatchTask+0x1a>
     a68:	dd cf       	rjmp	.-70     	; 0xa24 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
     a6a:	81 2f       	mov	r24, r17
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	fc 01       	movw	r30, r24
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	e0 57       	subi	r30, 0x70	; 112
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	85 81       	ldd	r24, Z+5	; 0x05
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	f1 f4       	brne	.+60     	; 0xac2 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
     a86:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
     a88:	23 81       	ldd	r18, Z+3	; 0x03
     a8a:	34 81       	ldd	r19, Z+4	; 0x04
     a8c:	21 15       	cp	r18, r1
     a8e:	31 05       	cpc	r19, r1
     a90:	31 f4       	brne	.+12     	; 0xa9e <RTOS_dispatchTask+0x86>
      {  
        cli();
     a92:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
     a94:	80 81       	ld	r24, Z
     a96:	0e 94 d7 04 	call	0x9ae	; 0x9ae <RTOS_deleteTask>
        sei();
     a9a:	78 94       	sei
     a9c:	0c c0       	rjmp	.+24     	; 0xab6 <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
     a9e:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
     aa0:	21 81       	ldd	r18, Z+1	; 0x01
     aa2:	32 81       	ldd	r19, Z+2	; 0x02
     aa4:	21 15       	cp	r18, r1
     aa6:	31 05       	cpc	r19, r1
     aa8:	31 f4       	brne	.+12     	; 0xab6 <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
     aaa:	23 81       	ldd	r18, Z+3	; 0x03
     aac:	34 81       	ldd	r19, Z+4	; 0x04
     aae:	21 50       	subi	r18, 0x01	; 1
     ab0:	30 40       	sbci	r19, 0x00	; 0
     ab2:	32 83       	std	Z+2, r19	; 0x02
     ab4:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
     ab6:	e0 91 07 01 	lds	r30, 0x0107
     aba:	f0 91 08 01 	lds	r31, 0x0108
     abe:	80 2f       	mov	r24, r16
     ac0:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
     ac2:	1f 5f       	subi	r17, 0xFF	; 255
     ac4:	80 91 f0 01 	lds	r24, 0x01F0
     ac8:	18 17       	cp	r17, r24
     aca:	78 f2       	brcs	.-98     	; 0xa6a <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	08 95       	ret

00000ad2 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
     ade:	86 e0       	ldi	r24, 0x06	; 6
     ae0:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 8f 01 	sts	0x018F, r24
}
     aea:	8f 91       	pop	r24
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
     af6:	80 52       	subi	r24, 0x20	; 32
     af8:	86 35       	cpi	r24, 0x56	; 86
     afa:	30 f4       	brcc	.+12     	; 0xb08 <MAX7219_lookupCode+0x12>
     afc:	e8 2f       	mov	r30, r24
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	e7 5e       	subi	r30, 0xE7	; 231
     b02:	fe 4f       	sbci	r31, 0xFE	; 254
     b04:	80 81       	ld	r24, Z
     b06:	08 95       	ret
     b08:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
     b0a:	08 95       	ret

00000b0c <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
     b0c:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
     b0e:	87 ff       	sbrs	r24, 7
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
     b12:	43 9a       	sbi	0x08, 3	; 8
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
     b16:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
     b18:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
     b1a:	00 00       	nop
	asm("nop");
     b1c:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
     b1e:	42 9a       	sbi	0x08, 2	; 8
     b20:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
     b22:	11 f0       	breq	.+4      	; 0xb28 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
     b24:	88 0f       	add	r24, r24
     b26:	f3 cf       	rjmp	.-26     	; 0xb0e <MAX7219_SendByte+0x2>
     b28:	08 95       	ret

00000b2a <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	18 2f       	mov	r17, r24
     b32:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
     b34:	41 98       	cbi	0x08, 1	; 8
     b36:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
     b38:	81 2f       	mov	r24, r17
     b3a:	0e 94 86 05 	call	0xb0c	; 0xb0c <MAX7219_SendByte>
	MAX7219_SendByte(data);
     b3e:	8f 2d       	mov	r24, r15
     b40:	0e 94 86 05 	call	0xb0c	; 0xb0c <MAX7219_SendByte>
     b44:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
     b46:	c1 f7       	brne	.-16     	; 0xb38 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
     b48:	41 9a       	sbi	0x08, 1	; 8
  return;
}
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	08 95       	ret

00000b52 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	c9 e0       	ldi	r28, 0x09	; 9
     b5c:	d1 e0       	ldi	r29, 0x01	; 1
     b5e:	01 e1       	ldi	r16, 0x11	; 17
     b60:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
     b62:	89 91       	ld	r24, Y+
     b64:	f8 01       	movw	r30, r16
     b66:	61 91       	ld	r22, Z+
     b68:	8f 01       	movw	r16, r30
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	0e 94 95 05 	call	0xb2a	; 0xb2a <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	c1 31       	cpi	r28, 0x11	; 17
     b74:	df 07       	cpc	r29, r31
     b76:	a9 f7       	brne	.-22     	; 0xb62 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
     b82:	10 92 11 01 	sts	0x0111, r1
     b86:	10 92 12 01 	sts	0x0112, r1
     b8a:	10 92 13 01 	sts	0x0113, r1
     b8e:	10 92 14 01 	sts	0x0114, r1
     b92:	10 92 15 01 	sts	0x0115, r1
     b96:	10 92 16 01 	sts	0x0116, r1
     b9a:	10 92 17 01 	sts	0x0117, r1
     b9e:	10 92 18 01 	sts	0x0118, r1
  }
  MAX7219_updateDisplay();
     ba2:	0e 94 a9 05 	call	0xb52	; 0xb52 <MAX7219_updateDisplay>
}
     ba6:	08 95       	ret

00000ba8 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
     ba8:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
     baa:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
     bac:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
     bae:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
     bb0:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
     bb2:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
     bb4:	8c e0       	ldi	r24, 0x0C	; 12
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	0e 94 95 05 	call	0xb2a	; 0xb2a <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
     bbc:	8f e0       	ldi	r24, 0x0F	; 15
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	0e 94 95 05 	call	0xb2a	; 0xb2a <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
     bc4:	89 e0       	ldi	r24, 0x09	; 9
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	0e 94 95 05 	call	0xb2a	; 0xb2a <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	62 e0       	ldi	r22, 0x02	; 2
     bd0:	0e 94 95 05 	call	0xb2a	; 0xb2a <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
     bd4:	8b e0       	ldi	r24, 0x0B	; 11
     bd6:	67 e0       	ldi	r22, 0x07	; 7
     bd8:	0e 94 95 05 	call	0xb2a	; 0xb2a <MAX7219_SendCmd>
  MAX7219_clearDisplay();
     bdc:	0e 94 c1 05 	call	0xb82	; 0xb82 <MAX7219_clearDisplay>
  return;
}
     be0:	08 95       	ret

00000be2 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	27 97       	sbiw	r28, 0x07	; 7
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	b8 2e       	mov	r11, r24
     c06:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
     c08:	77 ff       	sbrs	r23, 7
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
     c0c:	90 95       	com	r25
     c0e:	81 95       	neg	r24
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
     c12:	31 e0       	ldi	r19, 0x01	; 1
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
     c16:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
     c18:	e4 2f       	mov	r30, r20
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	8e 01       	movw	r16, r28
     c1e:	0f 5f       	subi	r16, 0xFF	; 255
     c20:	1f 4f       	sbci	r17, 0xFF	; 255
     c22:	e0 0f       	add	r30, r16
     c24:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
     c26:	5a e0       	ldi	r21, 0x0A	; 10
     c28:	e5 2e       	mov	r14, r21
     c2a:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
     c2c:	07 c0       	rjmp	.+14     	; 0xc3c <MAX7219_printNum+0x5a>
     c2e:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
     c30:	b7 01       	movw	r22, r14
     c32:	0e 94 86 08 	call	0x110c	; 0x110c <__divmodhi4>
     c36:	80 5d       	subi	r24, 0xD0	; 208
     c38:	80 83       	st	Z, r24
    x /= 10;
     c3a:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
     c3c:	e0 17       	cp	r30, r16
     c3e:	f1 07       	cpc	r31, r17
     c40:	b1 f7       	brne	.-20     	; 0xc2e <MAX7219_printNum+0x4c>
     c42:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
     c44:	84 2f       	mov	r24, r20
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
     c4a:	de 01       	movw	r26, r28
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	08 c0       	rjmp	.+16     	; 0xc60 <MAX7219_printNum+0x7e>
     c50:	fd 01       	movw	r30, r26
     c52:	e6 0f       	add	r30, r22
     c54:	f7 1f       	adc	r31, r23
     c56:	60 81       	ld	r22, Z
     c58:	60 33       	cpi	r22, 0x30	; 48
     c5a:	11 f5       	brne	.+68     	; 0xca0 <MAX7219_printNum+0xbe>
     c5c:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
     c5e:	5f 5f       	subi	r21, 0xFF	; 255
     c60:	65 2f       	mov	r22, r21
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	68 17       	cp	r22, r24
     c66:	79 07       	cpc	r23, r25
     c68:	9c f3       	brlt	.-26     	; 0xc50 <MAX7219_printNum+0x6e>
     c6a:	1a c0       	rjmp	.+52     	; 0xca0 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
     c6c:	82 2f       	mov	r24, r18
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	8c 01       	movw	r16, r24
     c72:	0c 0d       	add	r16, r12
     c74:	1d 1d       	adc	r17, r13
     c76:	08 30       	cpi	r16, 0x08	; 8
     c78:	11 05       	cpc	r17, r1
     c7a:	84 f4       	brge	.+32     	; 0xc9c <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
     c7c:	8e 0d       	add	r24, r14
     c7e:	9f 1d       	adc	r25, r15
     c80:	fc 01       	movw	r30, r24
     c82:	80 81       	ld	r24, Z
     c84:	2d 83       	std	Y+5, r18	; 0x05
     c86:	3e 83       	std	Y+6, r19	; 0x06
     c88:	4f 83       	std	Y+7, r20	; 0x07
     c8a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <MAX7219_lookupCode>
     c8e:	f8 01       	movw	r30, r16
     c90:	ef 5e       	subi	r30, 0xEF	; 239
     c92:	fe 4f       	sbci	r31, 0xFE	; 254
     c94:	80 83       	st	Z, r24
     c96:	4f 81       	ldd	r20, Y+7	; 0x07
     c98:	3e 81       	ldd	r19, Y+6	; 0x06
     c9a:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
     c9c:	2f 5f       	subi	r18, 0xFF	; 255
     c9e:	07 c0       	rjmp	.+14     	; 0xcae <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
     ca0:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
     ca2:	cb 2c       	mov	r12, r11
     ca4:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
     ca6:	7e 01       	movw	r14, r28
     ca8:	08 94       	sec
     caa:	e1 1c       	adc	r14, r1
     cac:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
     cae:	24 17       	cp	r18, r20
     cb0:	e8 f2       	brcs	.-70     	; 0xc6c <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
     cb2:	33 23       	and	r19, r19
     cb4:	41 f0       	breq	.+16     	; 0xcc6 <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
     cb6:	8d e2       	ldi	r24, 0x2D	; 45
     cb8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <MAX7219_lookupCode>
     cbc:	eb 2d       	mov	r30, r11
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	e0 5f       	subi	r30, 0xF0	; 240
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
     cc6:	0e 94 a9 05 	call	0xb52	; 0xb52 <MAX7219_updateDisplay>
}
     cca:	27 96       	adiw	r28, 0x07	; 7
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	08 95       	ret

00000cea <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
     cea:	1f 93       	push	r17
     cec:	18 2f       	mov	r17, r24
     cee:	86 2f       	mov	r24, r22
  if (pos < 9) {
     cf0:	19 30       	cpi	r17, 0x09	; 9
     cf2:	48 f4       	brcc	.+18     	; 0xd06 <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
     cf4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <MAX7219_lookupCode>
     cf8:	e1 2f       	mov	r30, r17
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	e0 5f       	subi	r30, 0xF0	; 240
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
     d02:	0e 94 a9 05 	call	0xb52	; 0xb52 <MAX7219_updateDisplay>
  }
}
     d06:	1f 91       	pop	r17
     d08:	08 95       	ret

00000d0a <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
  unsigned char i = pos;
     d14:	e6 2e       	mov	r14, r22
     d16:	e7 01       	movw	r28, r14
     d18:	7e 01       	movw	r14, r28
     d1a:	f7 2e       	mov	r15, r23
     d1c:	e7 01       	movw	r28, r14
     d1e:	18 2f       	mov	r17, r24
  while(*data) {
     d20:	0a c0       	rjmp	.+20     	; 0xd36 <MAX7219_printStr+0x2c>
    if (i < 9) {
     d22:	19 30       	cpi	r17, 0x09	; 9
     d24:	58 f4       	brcc	.+22     	; 0xd3c <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
     d26:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <MAX7219_lookupCode>
     d2a:	e1 2f       	mov	r30, r17
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	e0 5f       	subi	r30, 0xF0	; 240
     d30:	fe 4f       	sbci	r31, 0xFE	; 254
     d32:	80 83       	st	Z, r24
      i++;
     d34:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
     d36:	89 91       	ld	r24, Y+
     d38:	88 23       	and	r24, r24
     d3a:	99 f7       	brne	.-26     	; 0xd22 <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
     d3c:	0e 94 a9 05 	call	0xb52	; 0xb52 <MAX7219_updateDisplay>
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	08 95       	ret

00000d4c <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
     d4c:	e8 2f       	mov	r30, r24
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
     d50:	61 30       	cpi	r22, 0x01	; 1
     d52:	29 f4       	brne	.+10     	; 0xd5e <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
     d54:	e0 5f       	subi	r30, 0xF0	; 240
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	80 81       	ld	r24, Z
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
     d5e:	e0 5f       	subi	r30, 0xF0	; 240
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	80 81       	ld	r24, Z
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
     d68:	0e 94 a9 05 	call	0xb52	; 0xb52 <MAX7219_updateDisplay>
}
     d6c:	08 95       	ret

00000d6e <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
     d6e:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
     d70:	f8 94       	cli
  switch(chanel) {
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	01 f1       	breq	.+64     	; 0xdb6 <ds18x20IsOnBus+0x48>
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	20 f4       	brcc	.+8      	; 0xd82 <ds18x20IsOnBus+0x14>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	09 f0       	breq	.+2      	; 0xd80 <ds18x20IsOnBus+0x12>
     d7e:	57 c0       	rjmp	.+174    	; 0xe2e <ds18x20IsOnBus+0xc0>
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <ds18x20IsOnBus+0x20>
     d82:	83 30       	cpi	r24, 0x03	; 3
     d84:	61 f1       	breq	.+88     	; 0xdde <ds18x20IsOnBus+0x70>
     d86:	84 30       	cpi	r24, 0x04	; 4
     d88:	09 f0       	breq	.+2      	; 0xd8c <ds18x20IsOnBus+0x1e>
     d8a:	51 c0       	rjmp	.+162    	; 0xe2e <ds18x20IsOnBus+0xc0>
     d8c:	3e c0       	rjmp	.+124    	; 0xe0a <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
     d8e:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
     d90:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d92:	8f e7       	ldi	r24, 0x7F	; 127
     d94:	97 e0       	ldi	r25, 0x07	; 7
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <ds18x20IsOnBus+0x28>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <ds18x20IsOnBus+0x2e>
     d9c:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
     d9e:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
     da0:	29 9a       	sbi	0x05, 1	; 5
     da2:	a7 e1       	ldi	r26, 0x17	; 23
     da4:	b1 e0       	ldi	r27, 0x01	; 1
     da6:	11 97       	sbiw	r26, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <ds18x20IsOnBus+0x38>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <ds18x20IsOnBus+0x3e>
     dac:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	19 9b       	sbis	0x03, 1	; 3
     db2:	3e c0       	rjmp	.+124    	; 0xe30 <ds18x20IsOnBus+0xc2>
     db4:	3c c0       	rjmp	.+120    	; 0xe2e <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
     db6:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
     db8:	28 98       	cbi	0x05, 0	; 5
     dba:	8f e7       	ldi	r24, 0x7F	; 127
     dbc:	97 e0       	ldi	r25, 0x07	; 7
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <ds18x20IsOnBus+0x50>
     dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <ds18x20IsOnBus+0x56>
     dc4:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
     dc6:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
     dc8:	28 9a       	sbi	0x05, 0	; 5
     dca:	a7 e1       	ldi	r26, 0x17	; 23
     dcc:	b1 e0       	ldi	r27, 0x01	; 1
     dce:	11 97       	sbiw	r26, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <ds18x20IsOnBus+0x60>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <ds18x20IsOnBus+0x66>
     dd4:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	18 9b       	sbis	0x03, 0	; 3
     dda:	2a c0       	rjmp	.+84     	; 0xe30 <ds18x20IsOnBus+0xc2>
     ddc:	28 c0       	rjmp	.+80     	; 0xe2e <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
     dde:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
     de0:	5f 98       	cbi	0x0b, 7	; 11
     de2:	8f e7       	ldi	r24, 0x7F	; 127
     de4:	97 e0       	ldi	r25, 0x07	; 7
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <ds18x20IsOnBus+0x78>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <ds18x20IsOnBus+0x7e>
     dec:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
     dee:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
     df0:	5f 9a       	sbi	0x0b, 7	; 11
     df2:	a7 e1       	ldi	r26, 0x17	; 23
     df4:	b1 e0       	ldi	r27, 0x01	; 1
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <ds18x20IsOnBus+0x88>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <ds18x20IsOnBus+0x8e>
     dfc:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
     dfe:	89 b1       	in	r24, 0x09	; 9
     e00:	80 95       	com	r24
     e02:	88 1f       	adc	r24, r24
     e04:	88 27       	eor	r24, r24
     e06:	88 1f       	adc	r24, r24
    break;
     e08:	13 c0       	rjmp	.+38     	; 0xe30 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
     e0a:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
     e0c:	2a 98       	cbi	0x05, 2	; 5
     e0e:	8f e7       	ldi	r24, 0x7F	; 127
     e10:	97 e0       	ldi	r25, 0x07	; 7
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <ds18x20IsOnBus+0xa4>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <ds18x20IsOnBus+0xaa>
     e18:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
     e1a:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
     e1c:	2a 9a       	sbi	0x05, 2	; 5
     e1e:	a7 e1       	ldi	r26, 0x17	; 23
     e20:	b1 e0       	ldi	r27, 0x01	; 1
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <ds18x20IsOnBus+0xb4>
     e26:	00 c0       	rjmp	.+0      	; 0xe28 <ds18x20IsOnBus+0xba>
     e28:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	a7 e6       	ldi	r26, 0x67	; 103
     e32:	b6 e0       	ldi	r27, 0x06	; 6
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <ds18x20IsOnBus+0xc6>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <ds18x20IsOnBus+0xcc>
     e3a:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	e0 51       	subi	r30, 0x10	; 16
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
     e42:	80 83       	st	Z, r24
  sei();
     e44:	78 94       	sei
  return ret;
}
     e46:	08 95       	ret

00000e48 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
     e48:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
     e4a:	98 2f       	mov	r25, r24
     e4c:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
     e4e:	f8 94       	cli
  switch(chanel) {
     e50:	62 30       	cpi	r22, 0x02	; 2
     e52:	e1 f0       	breq	.+56     	; 0xe8c <ds18x20SendByte+0x44>
     e54:	63 30       	cpi	r22, 0x03	; 3
     e56:	20 f4       	brcc	.+8      	; 0xe60 <ds18x20SendByte+0x18>
     e58:	61 30       	cpi	r22, 0x01	; 1
     e5a:	09 f0       	breq	.+2      	; 0xe5e <ds18x20SendByte+0x16>
     e5c:	52 c0       	rjmp	.+164    	; 0xf02 <ds18x20SendByte+0xba>
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <ds18x20SendByte+0x24>
     e60:	63 30       	cpi	r22, 0x03	; 3
     e62:	21 f1       	breq	.+72     	; 0xeac <ds18x20SendByte+0x64>
     e64:	64 30       	cpi	r22, 0x04	; 4
     e66:	09 f0       	breq	.+2      	; 0xe6a <ds18x20SendByte+0x22>
     e68:	4c c0       	rjmp	.+152    	; 0xf02 <ds18x20SendByte+0xba>
     e6a:	30 c0       	rjmp	.+96     	; 0xecc <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
     e6c:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
     e6e:	29 98       	cbi	0x05, 1	; 5
     e70:	30 e2       	ldi	r19, 0x20	; 32
     e72:	3a 95       	dec	r19
     e74:	f1 f7       	brne	.-4      	; 0xe72 <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
     e76:	99 23       	and	r25, r25
     e78:	31 f4       	brne	.+12     	; 0xe86 <ds18x20SendByte+0x3e>
     e7a:	e7 ed       	ldi	r30, 0xD7	; 215
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <ds18x20SendByte+0x36>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <ds18x20SendByte+0x3c>
     e84:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
     e86:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
     e88:	29 9a       	sbi	0x05, 1	; 5
     e8a:	2f c0       	rjmp	.+94     	; 0xeea <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
     e8c:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
     e8e:	28 98       	cbi	0x05, 0	; 5
     e90:	f0 e2       	ldi	r31, 0x20	; 32
     e92:	fa 95       	dec	r31
     e94:	f1 f7       	brne	.-4      	; 0xe92 <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
     e96:	99 23       	and	r25, r25
     e98:	31 f4       	brne	.+12     	; 0xea6 <ds18x20SendByte+0x5e>
     e9a:	e7 ed       	ldi	r30, 0xD7	; 215
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <ds18x20SendByte+0x56>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <ds18x20SendByte+0x5c>
     ea4:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
     ea6:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
     ea8:	28 9a       	sbi	0x05, 0	; 5
     eaa:	1f c0       	rjmp	.+62     	; 0xeea <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
     eac:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
     eae:	5f 98       	cbi	0x0b, 7	; 11
     eb0:	f0 e2       	ldi	r31, 0x20	; 32
     eb2:	fa 95       	dec	r31
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
     eb6:	99 23       	and	r25, r25
     eb8:	31 f4       	brne	.+12     	; 0xec6 <ds18x20SendByte+0x7e>
     eba:	e7 ed       	ldi	r30, 0xD7	; 215
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <ds18x20SendByte+0x76>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <ds18x20SendByte+0x7c>
     ec4:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
     ec6:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
     ec8:	5f 9a       	sbi	0x0b, 7	; 11
     eca:	0f c0       	rjmp	.+30     	; 0xeea <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
     ecc:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
     ece:	2a 98       	cbi	0x05, 2	; 5
     ed0:	f0 e2       	ldi	r31, 0x20	; 32
     ed2:	fa 95       	dec	r31
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
     ed6:	99 23       	and	r25, r25
     ed8:	31 f4       	brne	.+12     	; 0xee6 <ds18x20SendByte+0x9e>
     eda:	e7 ed       	ldi	r30, 0xD7	; 215
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	31 97       	sbiw	r30, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <ds18x20SendByte+0x96>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <ds18x20SendByte+0x9c>
     ee4:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
     ee6:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
     ee8:	2a 9a       	sbi	0x05, 2	; 5
     eea:	f5 e3       	ldi	r31, 0x35	; 53
     eec:	fa 95       	dec	r31
     eee:	f1 f7       	brne	.-4      	; 0xeec <ds18x20SendByte+0xa4>
     ef0:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
     ef2:	99 23       	and	r25, r25
     ef4:	31 f0       	breq	.+12     	; 0xf02 <ds18x20SendByte+0xba>
     ef6:	e7 ed       	ldi	r30, 0xD7	; 215
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <ds18x20SendByte+0xb2>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <ds18x20SendByte+0xb8>
     f00:	00 00       	nop
    break;
  }
  sei();
     f02:	78 94       	sei
     f04:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
     f06:	11 f0       	breq	.+4      	; 0xf0c <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
     f08:	86 95       	lsr	r24
     f0a:	9f cf       	rjmp	.-194    	; 0xe4a <ds18x20SendByte+0x2>
     f0c:	08 95       	ret

00000f0e <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
     f0e:	28 2f       	mov	r18, r24
     f10:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
     f12:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
     f14:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
     f16:	f8 94       	cli
  switch(chanel) {
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	c1 f0       	breq	.+48     	; 0xf4c <ds18x20GetByte+0x3e>
     f1c:	23 30       	cpi	r18, 0x03	; 3
     f1e:	20 f4       	brcc	.+8      	; 0xf28 <ds18x20GetByte+0x1a>
     f20:	21 30       	cpi	r18, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <ds18x20GetByte+0x18>
     f24:	40 c0       	rjmp	.+128    	; 0xfa6 <ds18x20GetByte+0x98>
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <ds18x20GetByte+0x24>
     f28:	23 30       	cpi	r18, 0x03	; 3
     f2a:	e9 f0       	breq	.+58     	; 0xf66 <ds18x20GetByte+0x58>
     f2c:	24 30       	cpi	r18, 0x04	; 4
     f2e:	d9 f5       	brne	.+118    	; 0xfa6 <ds18x20GetByte+0x98>
     f30:	27 c0       	rjmp	.+78     	; 0xf80 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
     f32:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
     f34:	29 98       	cbi	0x05, 1	; 5
     f36:	90 e2       	ldi	r25, 0x20	; 32
     f38:	9a 95       	dec	r25
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
     f3c:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
     f3e:	29 9a       	sbi	0x05, 1	; 5
     f40:	e0 e3       	ldi	r30, 0x30	; 48
     f42:	ea 95       	dec	r30
     f44:	f1 f7       	brne	.-4      	; 0xf42 <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
     f46:	93 b1       	in	r25, 0x03	; 3
     f48:	92 70       	andi	r25, 0x02	; 2
     f4a:	26 c0       	rjmp	.+76     	; 0xf98 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
     f4c:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
     f4e:	28 98       	cbi	0x05, 0	; 5
     f50:	f0 e2       	ldi	r31, 0x20	; 32
     f52:	fa 95       	dec	r31
     f54:	f1 f7       	brne	.-4      	; 0xf52 <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
     f56:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
     f58:	28 9a       	sbi	0x05, 0	; 5
     f5a:	90 e3       	ldi	r25, 0x30	; 48
     f5c:	9a 95       	dec	r25
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
     f60:	93 b1       	in	r25, 0x03	; 3
     f62:	91 70       	andi	r25, 0x01	; 1
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
     f66:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
     f68:	5f 98       	cbi	0x0b, 7	; 11
     f6a:	f0 e2       	ldi	r31, 0x20	; 32
     f6c:	fa 95       	dec	r31
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
     f70:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
     f72:	5f 9a       	sbi	0x0b, 7	; 11
     f74:	90 e3       	ldi	r25, 0x30	; 48
     f76:	9a 95       	dec	r25
     f78:	f1 f7       	brne	.-4      	; 0xf76 <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
     f7a:	99 b1       	in	r25, 0x09	; 9
     f7c:	90 78       	andi	r25, 0x80	; 128
     f7e:	0c c0       	rjmp	.+24     	; 0xf98 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
     f80:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
     f82:	2a 98       	cbi	0x05, 2	; 5
     f84:	f0 e2       	ldi	r31, 0x20	; 32
     f86:	fa 95       	dec	r31
     f88:	f1 f7       	brne	.-4      	; 0xf86 <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
     f8a:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
     f8c:	2a 9a       	sbi	0x05, 2	; 5
     f8e:	90 e3       	ldi	r25, 0x30	; 48
     f90:	9a 95       	dec	r25
     f92:	f1 f7       	brne	.-4      	; 0xf90 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
     f94:	93 b1       	in	r25, 0x03	; 3
     f96:	94 70       	andi	r25, 0x04	; 4
     f98:	eb ed       	ldi	r30, 0xDB	; 219
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	31 97       	sbiw	r30, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <ds18x20GetByte+0x8e>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <ds18x20GetByte+0x94>
     fa2:	00 00       	nop
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
     fa6:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
     fa8:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
     faa:	91 11       	cpse	r25, r1
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <ds18x20GetByte+0xa6>
     fb2:	b0 cf       	rjmp	.-160    	; 0xf14 <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
     fb4:	08 95       	ret

00000fb6 <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
     fc0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ds18x20IsOnBus>
     fc4:	88 23       	and	r24, r24
     fc6:	91 f1       	breq	.+100    	; 0x102c <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
     fc8:	8c ec       	ldi	r24, 0xCC	; 204
     fca:	61 2f       	mov	r22, r17
     fcc:	0e 94 24 07 	call	0xe48	; 0xe48 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
     fd0:	8e eb       	ldi	r24, 0xBE	; 190
     fd2:	61 2f       	mov	r22, r17
     fd4:	0e 94 24 07 	call	0xe48	; 0xe48 <ds18x20SendByte>
     fd8:	cd e1       	ldi	r28, 0x1D	; 29
     fda:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
     fdc:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
     fde:	81 2f       	mov	r24, r17
     fe0:	0e 94 87 07 	call	0xf0e	; 0xf0e <ds18x20GetByte>
     fe4:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
     fe6:	08 27       	eor	r16, r24
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	9c e8       	ldi	r25, 0x8C	; 140
     fec:	06 95       	lsr	r16
     fee:	08 f4       	brcc	.+2      	; 0xff2 <ds18x20ReadStratchPad+0x3c>
     ff0:	09 27       	eor	r16, r25
     ff2:	8a 95       	dec	r24
     ff4:	d9 f7       	brne	.-10     	; 0xfec <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	c6 32       	cpi	r28, 0x26	; 38
     ffa:	d8 07       	cpc	r29, r24
     ffc:	81 f7       	brne	.-32     	; 0xfde <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
     ffe:	00 23       	and	r16, r16
    1000:	a9 f4       	brne	.+42     	; 0x102c <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    1002:	81 2f       	mov	r24, r17
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	fc 01       	movw	r30, r24
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	23 e0       	ldi	r18, 0x03	; 3
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	2a 95       	dec	r18
    1016:	e1 f7       	brne	.-8      	; 0x1010 <ds18x20ReadStratchPad+0x5a>
    1018:	e8 0f       	add	r30, r24
    101a:	f9 1f       	adc	r31, r25
    101c:	eb 50       	subi	r30, 0x0B	; 11
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 91 1d 02 	lds	r24, 0x021D
    1024:	80 83       	st	Z, r24
    1026:	80 91 1e 02 	lds	r24, 0x021E
    102a:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    1036:	1f 93       	push	r17
    1038:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    103a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ds18x20IsOnBus>
    103e:	88 23       	and	r24, r24
    1040:	41 f0       	breq	.+16     	; 0x1052 <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    1042:	8c ec       	ldi	r24, 0xCC	; 204
    1044:	61 2f       	mov	r22, r17
    1046:	0e 94 24 07 	call	0xe48	; 0xe48 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    104a:	84 e4       	ldi	r24, 0x44	; 68
    104c:	61 2f       	mov	r22, r17
    104e:	0e 94 24 07 	call	0xe48	; 0xe48 <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    1052:	12 30       	cpi	r17, 0x02	; 2
    1054:	69 f0       	breq	.+26     	; 0x1070 <ds18x20ConvertTemp+0x3a>
    1056:	13 30       	cpi	r17, 0x03	; 3
    1058:	18 f4       	brcc	.+6      	; 0x1060 <ds18x20ConvertTemp+0x2a>
    105a:	11 30       	cpi	r17, 0x01	; 1
    105c:	89 f4       	brne	.+34     	; 0x1080 <ds18x20ConvertTemp+0x4a>
    105e:	05 c0       	rjmp	.+10     	; 0x106a <ds18x20ConvertTemp+0x34>
    1060:	13 30       	cpi	r17, 0x03	; 3
    1062:	49 f0       	breq	.+18     	; 0x1076 <ds18x20ConvertTemp+0x40>
    1064:	14 30       	cpi	r17, 0x04	; 4
    1066:	61 f4       	brne	.+24     	; 0x1080 <ds18x20ConvertTemp+0x4a>
    1068:	09 c0       	rjmp	.+18     	; 0x107c <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    106a:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    106c:	21 9a       	sbi	0x04, 1	; 4
    break;
    106e:	08 c0       	rjmp	.+16     	; 0x1080 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1070:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1072:	20 9a       	sbi	0x04, 0	; 4
    break;
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1076:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1078:	57 9a       	sbi	0x0a, 7	; 10
    break;
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    107c:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    107e:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    1080:	1f 91       	pop	r17
    1082:	08 95       	ret

00001084 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	fc 01       	movw	r30, r24
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	23 e0       	ldi	r18, 0x03	; 3
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	2a 95       	dec	r18
    1096:	e1 f7       	brne	.-8      	; 0x1090 <ds18x20GetTemp+0xc>
    1098:	e8 0f       	add	r30, r24
    109a:	f9 1f       	adc	r31, r25
    109c:	eb 50       	subi	r30, 0x0B	; 11
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	40 81       	ld	r20, Z
    10a2:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    10a4:	9a 01       	movw	r18, r20
    10a6:	2f 70       	andi	r18, 0x0F	; 15
    10a8:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    10aa:	c9 01       	movw	r24, r18
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	a3 e0       	ldi	r26, 0x03	; 3
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	aa 95       	dec	r26
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <ds18x20GetTemp+0x2e>
    10ba:	28 0f       	add	r18, r24
    10bc:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	84 2b       	or	r24, r20
    10c4:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    10c6:	60 e1       	ldi	r22, 0x10	; 16
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	0e 94 86 08 	call	0x110c	; 0x110c <__divmodhi4>
    10ce:	ab 01       	movw	r20, r22
    10d0:	44 0f       	add	r20, r20
    10d2:	55 1f       	adc	r21, r21
    10d4:	e3 e0       	ldi	r30, 0x03	; 3
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	ea 95       	dec	r30
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <ds18x20GetTemp+0x52>
    10de:	46 0f       	add	r20, r22
    10e0:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    10e2:	64 e0       	ldi	r22, 0x04	; 4
    10e4:	35 95       	asr	r19
    10e6:	27 95       	ror	r18
    10e8:	6a 95       	dec	r22
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    10ec:	42 0f       	add	r20, r18
    10ee:	53 1f       	adc	r21, r19
  return ret;
}
    10f0:	ca 01       	movw	r24, r20
    10f2:	08 95       	ret

000010f4 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    10f4:	e8 2f       	mov	r30, r24
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	e0 51       	subi	r30, 0x10	; 16
    10fa:	fe 4f       	sbci	r31, 0xFE	; 254
}
    10fc:	80 81       	ld	r24, Z
    10fe:	08 95       	ret

00001100 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    1100:	e8 2f       	mov	r30, r24
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	e0 51       	subi	r30, 0x10	; 16
    1106:	fe 4f       	sbci	r31, 0xFE	; 254
    1108:	60 83       	st	Z, r22
}
    110a:	08 95       	ret

0000110c <__divmodhi4>:
    110c:	97 fb       	bst	r25, 7
    110e:	09 2e       	mov	r0, r25
    1110:	07 26       	eor	r0, r23
    1112:	0a d0       	rcall	.+20     	; 0x1128 <__divmodhi4_neg1>
    1114:	77 fd       	sbrc	r23, 7
    1116:	04 d0       	rcall	.+8      	; 0x1120 <__divmodhi4_neg2>
    1118:	0c d0       	rcall	.+24     	; 0x1132 <__udivmodhi4>
    111a:	06 d0       	rcall	.+12     	; 0x1128 <__divmodhi4_neg1>
    111c:	00 20       	and	r0, r0
    111e:	1a f4       	brpl	.+6      	; 0x1126 <__divmodhi4_exit>

00001120 <__divmodhi4_neg2>:
    1120:	70 95       	com	r23
    1122:	61 95       	neg	r22
    1124:	7f 4f       	sbci	r23, 0xFF	; 255

00001126 <__divmodhi4_exit>:
    1126:	08 95       	ret

00001128 <__divmodhi4_neg1>:
    1128:	f6 f7       	brtc	.-4      	; 0x1126 <__divmodhi4_exit>
    112a:	90 95       	com	r25
    112c:	81 95       	neg	r24
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	08 95       	ret

00001132 <__udivmodhi4>:
    1132:	aa 1b       	sub	r26, r26
    1134:	bb 1b       	sub	r27, r27
    1136:	51 e1       	ldi	r21, 0x11	; 17
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <__udivmodhi4_ep>

0000113a <__udivmodhi4_loop>:
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	a6 17       	cp	r26, r22
    1140:	b7 07       	cpc	r27, r23
    1142:	10 f0       	brcs	.+4      	; 0x1148 <__udivmodhi4_ep>
    1144:	a6 1b       	sub	r26, r22
    1146:	b7 0b       	sbc	r27, r23

00001148 <__udivmodhi4_ep>:
    1148:	88 1f       	adc	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	5a 95       	dec	r21
    114e:	a9 f7       	brne	.-22     	; 0x113a <__udivmodhi4_loop>
    1150:	80 95       	com	r24
    1152:	90 95       	com	r25
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	08 95       	ret

0000115a <__eerd_byte_m328p>:
    115a:	f9 99       	sbic	0x1f, 1	; 31
    115c:	fe cf       	rjmp	.-4      	; 0x115a <__eerd_byte_m328p>
    115e:	92 bd       	out	0x22, r25	; 34
    1160:	81 bd       	out	0x21, r24	; 33
    1162:	f8 9a       	sbi	0x1f, 0	; 31
    1164:	99 27       	eor	r25, r25
    1166:	80 b5       	in	r24, 0x20	; 32
    1168:	08 95       	ret

0000116a <__eewr_byte_m328p>:
    116a:	26 2f       	mov	r18, r22

0000116c <__eewr_r18_m328p>:
    116c:	f9 99       	sbic	0x1f, 1	; 31
    116e:	fe cf       	rjmp	.-4      	; 0x116c <__eewr_r18_m328p>
    1170:	1f ba       	out	0x1f, r1	; 31
    1172:	92 bd       	out	0x22, r25	; 34
    1174:	81 bd       	out	0x21, r24	; 33
    1176:	20 bd       	out	0x20, r18	; 32
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	fa 9a       	sbi	0x1f, 2	; 31
    117e:	f9 9a       	sbi	0x1f, 1	; 31
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	08 95       	ret

00001186 <_exit>:
    1186:	f8 94       	cli

00001188 <__stop_program>:
    1188:	ff cf       	rjmp	.-2      	; 0x1188 <__stop_program>
