
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000c82  00000d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009f  00800168  00800168  00000d7e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002b9  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001508  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000087c  00000000  00000000  00002d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000139f  00000000  00000000  000035ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00004970  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004dc  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001028  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000116  00000000  00000000  000060f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  0000620a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
  a6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <MAX7219_Init>
  KBD_init();
  aa:	0e 94 16 01 	call	0x22c	; 0x22c <KBD_init>
  OUT_1_init();
  ae:	53 9a       	sbi	0x0a, 3	; 10
  b0:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
  b2:	53 9a       	sbi	0x0a, 3	; 10
  b4:	5b 98       	cbi	0x0b, 3	; 11
  BEEPER_init();
  b6:	38 9a       	sbi	0x07, 0	; 7
  b8:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
  ba:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 500); // запускаем секундный таймер,
  be:	89 ec       	ldi	r24, 0xC9	; 201
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	44 ef       	ldi	r20, 0xF4	; 244
  c6:	51 e0       	ldi	r21, 0x01	; 1
  c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 10);      // запускаем секундный таймер,
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	4a e0       	ldi	r20, 0x0A	; 10
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <RTOS_setTask>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
  da:	78 94       	sei
  BEEPER_TICK();
  dc:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f ed       	ldi	r24, 0xDF	; 223
  e0:	9e e2       	ldi	r25, 0x2E	; 46
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x3c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x42>
  e8:	00 00       	nop
  ea:	40 98       	cbi	0x08, 0	; 8
  while(1) {
    RTOS_dispatchTask();        
  ec:	0e 94 9a 02 	call	0x534	; 0x534 <RTOS_dispatchTask>
  f0:	fd cf       	rjmp	.-6      	; 0xec <main+0x46>

000000f2 <run_main>:
  }    
}
//=============================================================================
void run_main(unsigned char event)
{
}
  f2:	08 95       	ret

000000f4 <run_menu>:
//=============================================================================
void run_menu(unsigned char event)
{
}
  f4:	08 95       	ret

000000f6 <events_default>:
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
  f6:	88 3c       	cpi	r24, 0xC8	; 200
  f8:	69 f0       	breq	.+26     	; 0x114 <events_default+0x1e>
  fa:	89 3c       	cpi	r24, 0xC9	; 201
  fc:	69 f4       	brne	.+26     	; 0x118 <events_default+0x22>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	80 91 68 01 	lds	r24, 0x0168
 104:	81 11       	cpse	r24, r1
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	60 93 68 01 	sts	0x0168, r22
      MAX7219_setCommaPos(8, blink);
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	0e 94 24 04 	call	0x848	; 0x848 <MAX7219_setCommaPos>
    break;
 112:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
 114:	0e 94 52 01 	call	0x2a4	; 0x2a4 <KBD_scan>
 118:	08 95       	ret

0000011a <run_start>:
unsigned char blink = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void run_start(unsigned char event)
{
 11a:	68 2f       	mov	r22, r24
  switch(event) {
 11c:	87 31       	cpi	r24, 0x17	; 23
 11e:	20 f4       	brcc	.+8      	; 0x128 <run_start+0xe>
 120:	84 31       	cpi	r24, 0x14	; 20
 122:	28 f4       	brcc	.+10     	; 0x12e <run_start+0x14>
 124:	8a 50       	subi	r24, 0x0A	; 10
 126:	01 c0       	rjmp	.+2      	; 0x12a <run_start+0x10>
 128:	8e 51       	subi	r24, 0x1E	; 30
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	38 f4       	brcc	.+14     	; 0x13c <run_start+0x22>
	  MAX7219_printNum(1, event, 3, '0');
    break;
    case EVENT_KEY_MINUS:
    case EVENT_KEY_MINUS_LONG:
    case EVENT_KEY_MINUS_HOLD:
	  MAX7219_printNum(1, event, 3, '0');
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	43 e0       	ldi	r20, 0x03	; 3
 134:	20 e3       	ldi	r18, 0x30	; 48
 136:	0e 94 7f 03 	call	0x6fe	; 0x6fe <MAX7219_printNum>
    break;
 13a:	08 95       	ret
	default:
	  events_default(event);
 13c:	86 2f       	mov	r24, r22
 13e:	0e 94 7b 00 	call	0xf6	; 0xf6 <events_default>
 142:	08 95       	ret

00000144 <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
 144:	20 91 70 01 	lds	r18, 0x0170
 148:	28 30       	cpi	r18, 0x08	; 8
 14a:	78 f4       	brcc	.+30     	; 0x16a <PutBut+0x26>
     buf[head] = but;
 14c:	90 91 71 01 	lds	r25, 0x0171
 150:	e9 2f       	mov	r30, r25
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ee 58       	subi	r30, 0x8E	; 142
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 83       	st	Z, r24
     count++;
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	20 93 70 01 	sts	0x0170, r18
     head++;
 160:	89 2f       	mov	r24, r25
 162:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
 164:	87 70       	andi	r24, 0x07	; 7
 166:	80 93 71 01 	sts	0x0171, r24
 16a:	08 95       	ret

0000016c <BUT_Check.clone.0>:
  }
  
  return but;
}
//=============================================================================
static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
 174:	96 2f       	mov	r25, r22
 176:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
 178:	c9 2f       	mov	r28, r25
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	fe 01       	movw	r30, r28
 17e:	e7 59       	subi	r30, 0x97	; 151
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	10 81       	ld	r17, Z

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
#endif

 countDebTmp = countDeb[i];
 184:	fe 01       	movw	r30, r28
 186:	e4 59       	subi	r30, 0x94	; 148
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	90 81       	ld	r25, Z
 18c:	90 93 6f 01 	sts	0x016F, r25
  
 if (state){
 190:	88 23       	and	r24, r24
 192:	a9 f0       	breq	.+42     	; 0x1be <BUT_Check.clone.0+0x52>
    if (countDebTmp < BUT_COUNT_MAX){
 194:	97 39       	cpi	r25, 0x97	; 151
 196:	28 f5       	brcc	.+74     	; 0x1e2 <BUT_Check.clone.0+0x76>
       countDebTmp++;
 198:	9f 5f       	subi	r25, 0xFF	; 255
 19a:	90 93 6f 01 	sts	0x016F, r25

       if (countDebTmp > BUT_COUNT_THR){
 19e:	95 31       	cpi	r25, 0x15	; 21
 1a0:	00 f1       	brcs	.+64     	; 0x1e2 <BUT_Check.clone.0+0x76>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
 1a2:	10 fd       	sbrc	r17, 0
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <BUT_Check.clone.0+0x40>
             stateTmp |= FLAG_BUT_PRESSED;
 1a6:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
 1a8:	01 e0       	ldi	r16, 0x01	; 1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <BUT_Check.clone.0+0x42>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
 1ae:	97 39       	cpi	r25, 0x97	; 151
 1b0:	81 f4       	brne	.+32     	; 0x1d2 <BUT_Check.clone.0+0x66>
         if (!(stateTmp & FLAG_BUT_HOLD)){
 1b2:	11 fd       	sbrc	r17, 1
 1b4:	0e c0       	rjmp	.+28     	; 0x1d2 <BUT_Check.clone.0+0x66>
            stateTmp &= ~(FLAG_BUT_RELEASED);
 1b6:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
 1b8:	12 60       	ori	r17, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
 1ba:	02 e0       	ldi	r16, 0x02	; 2
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <BUT_Check.clone.0+0x6a>
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
  #endif           
        }
     }
#else
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
 1be:	10 ff       	sbrs	r17, 0
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <BUT_Check.clone.0+0x5e>
 1c2:	11 fd       	sbrc	r17, 1
 1c4:	1c c0       	rjmp	.+56     	; 0x1fe <BUT_Check.clone.0+0x92>
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
 1c6:	03 e0       	ldi	r16, 0x03	; 3
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <BUT_Check.clone.0+0x60>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 1ca:	00 e0       	ldi	r16, 0x00	; 0
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
 1cc:	10 92 6f 01 	sts	0x016F, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
 1d0:	1c 7f       	andi	r17, 0xFC	; 252
  }
 
  countHold[i] = countHoldTmp;
#endif       
  
  if (event){
 1d2:	00 23       	and	r16, r16
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <BUT_Check.clone.0+0x76>
     PutBut(i+1);
 1d6:	86 2f       	mov	r24, r22
 1d8:	0e 94 a2 00 	call	0x144	; 0x144 <PutBut>
     PutBut(event);
 1dc:	80 2f       	mov	r24, r16
 1de:	0e 94 a2 00 	call	0x144	; 0x144 <PutBut>
  }
  
  countDeb[i] = countDebTmp;
 1e2:	fe 01       	movw	r30, r28
 1e4:	e4 59       	subi	r30, 0x94	; 148
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	80 91 6f 01 	lds	r24, 0x016F
 1ec:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
 1ee:	c7 59       	subi	r28, 0x97	; 151
 1f0:	de 4f       	sbci	r29, 0xFE	; 254
 1f2:	18 83       	st	Y, r17
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
 1fe:	04 e0       	ldi	r16, 0x04	; 4
 200:	e5 cf       	rjmp	.-54     	; 0x1cc <BUT_Check.clone.0+0x60>

00000202 <KBD_getBut>:

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    
  if (count){
 202:	20 91 70 01 	lds	r18, 0x0170
 206:	22 23       	and	r18, r18
 208:	79 f0       	breq	.+30     	; 0x228 <KBD_getBut+0x26>
     but = buf[tail];
 20a:	90 91 7a 01 	lds	r25, 0x017A
 20e:	e9 2f       	mov	r30, r25
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ee 58       	subi	r30, 0x8E	; 142
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 81       	ld	r24, Z
     count--;
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	20 93 70 01 	sts	0x0170, r18
     tail++;
 21e:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
 220:	97 70       	andi	r25, 0x07	; 7
 222:	90 93 7a 01 	sts	0x017A, r25
 226:	08 95       	ret
  }
}

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
 22a:	08 95       	ret

0000022c <KBD_init>:
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 22c:	10 92 6c 01 	sts	0x016C, r1
     stateBut[i] = 0;
 230:	10 92 69 01 	sts	0x0169, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 234:	10 92 6d 01 	sts	0x016D, r1
     stateBut[i] = 0;
 238:	10 92 6a 01 	sts	0x016A, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 23c:	10 92 6e 01 	sts	0x016E, r1
     stateBut[i] = 0;
 240:	10 92 6b 01 	sts	0x016B, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
 244:	10 92 72 01 	sts	0x0172, r1
 248:	10 92 73 01 	sts	0x0173, r1
 24c:	10 92 74 01 	sts	0x0174, r1
 250:	10 92 75 01 	sts	0x0175, r1
 254:	10 92 76 01 	sts	0x0176, r1
 258:	10 92 77 01 	sts	0x0177, r1
 25c:	10 92 78 01 	sts	0x0178, r1
 260:	10 92 79 01 	sts	0x0179, r1
  }
  
  head = 0;
 264:	10 92 71 01 	sts	0x0171, r1
  tail = 0;  
 268:	10 92 7a 01 	sts	0x017A, r1
  count = 0;
 26c:	10 92 70 01 	sts	0x0170, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
 270:	54 98       	cbi	0x0a, 4	; 10
 272:	5c 9a       	sbi	0x0b, 4	; 11
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
 274:	55 98       	cbi	0x0a, 5	; 10
 276:	5d 9a       	sbi	0x0b, 5	; 11
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
 278:	56 98       	cbi	0x0a, 6	; 10
 27a:	5e 9a       	sbi	0x0b, 6	; 11
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
 27c:	08 95       	ret

0000027e <KBD_poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	4c 99       	sbic	0x09, 4	; 9
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	0e 94 b6 00 	call	0x16c	; 0x16c <BUT_Check.clone.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	4d 99       	sbic	0x09, 5	; 9
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	0e 94 b6 00 	call	0x16c	; 0x16c <BUT_Check.clone.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	4e 99       	sbic	0x09, 6	; 9
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	0e 94 b6 00 	call	0x16c	; 0x16c <BUT_Check.clone.0>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
 2a2:	08 95       	ret

000002a4 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
 2a4:	1f 93       	push	r17
  uint8_t but = 0;
  uint8_t code = 0;
  KBD_poll();
 2a6:	0e 94 3f 01 	call	0x27e	; 0x27e <KBD_poll>
  but = KBD_getBut();
 2aa:	0e 94 01 01 	call	0x202	; 0x202 <KBD_getBut>
 2ae:	18 2f       	mov	r17, r24
  if (but) {
 2b0:	88 23       	and	r24, r24
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <KBD_scan+0x12>
 2b4:	83 c0       	rjmp	.+262    	; 0x3bc <KBD_scan+0x118>
    code = KBD_getBut(); 
 2b6:	0e 94 01 01 	call	0x202	; 0x202 <KBD_getBut>
    if (but == 1) {
 2ba:	11 30       	cpi	r17, 0x01	; 1
 2bc:	41 f5       	brne	.+80     	; 0x30e <KBD_scan+0x6a>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
 2be:	83 30       	cpi	r24, 0x03	; 3
 2c0:	51 f4       	brne	.+20     	; 0x2d6 <KBD_scan+0x32>
 2c2:	40 9a       	sbi	0x08, 0	; 8
 2c4:	8f ed       	ldi	r24, 0xDF	; 223
 2c6:	9e e2       	ldi	r25, 0x2E	; 46
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <KBD_scan+0x24>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <KBD_scan+0x2a>
 2ce:	00 00       	nop
 2d0:	40 98       	cbi	0x08, 0	; 8
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	6d c0       	rjmp	.+218    	; 0x3b0 <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_PLUS_HOLD, 0, 0); }
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	69 f4       	brne	.+26     	; 0x2f4 <KBD_scan+0x50>
 2da:	40 9a       	sbi	0x08, 0	; 8
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	97 ee       	ldi	r25, 0xE7	; 231
 2e0:	a3 e0       	ldi	r26, 0x03	; 3
 2e2:	81 50       	subi	r24, 0x01	; 1
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	a0 40       	sbci	r26, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <KBD_scan+0x3e>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <KBD_scan+0x48>
 2ec:	00 00       	nop
 2ee:	40 98       	cbi	0x08, 0	; 8
 2f0:	8c e0       	ldi	r24, 0x0C	; 12
 2f2:	5e c0       	rjmp	.+188    	; 0x3b0 <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS_LONG, 0, 0); }
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	09 f0       	breq	.+2      	; 0x2fa <KBD_scan+0x56>
 2f8:	61 c0       	rjmp	.+194    	; 0x3bc <KBD_scan+0x118>
 2fa:	40 9a       	sbi	0x08, 0	; 8
 2fc:	af ed       	ldi	r26, 0xDF	; 223
 2fe:	be e2       	ldi	r27, 0x2E	; 46
 300:	11 97       	sbiw	r26, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <KBD_scan+0x5c>
 304:	00 c0       	rjmp	.+0      	; 0x306 <KBD_scan+0x62>
 306:	00 00       	nop
 308:	40 98       	cbi	0x08, 0	; 8
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	51 c0       	rjmp	.+162    	; 0x3b0 <KBD_scan+0x10c>
    } 
	if (but == 2) {
 30e:	12 30       	cpi	r17, 0x02	; 2
 310:	39 f5       	brne	.+78     	; 0x360 <KBD_scan+0xbc>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET, 0, 0); }
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	51 f4       	brne	.+20     	; 0x32a <KBD_scan+0x86>
 316:	40 9a       	sbi	0x08, 0	; 8
 318:	8f ed       	ldi	r24, 0xDF	; 223
 31a:	9e e2       	ldi	r25, 0x2E	; 46
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <KBD_scan+0x78>
 320:	00 c0       	rjmp	.+0      	; 0x322 <KBD_scan+0x7e>
 322:	00 00       	nop
 324:	40 98       	cbi	0x08, 0	; 8
 326:	84 e1       	ldi	r24, 0x14	; 20
 328:	43 c0       	rjmp	.+134    	; 0x3b0 <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_HOLD, 0, 0); }
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	69 f4       	brne	.+26     	; 0x348 <KBD_scan+0xa4>
 32e:	40 9a       	sbi	0x08, 0	; 8
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	97 ee       	ldi	r25, 0xE7	; 231
 334:	a3 e0       	ldi	r26, 0x03	; 3
 336:	81 50       	subi	r24, 0x01	; 1
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	a0 40       	sbci	r26, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <KBD_scan+0x92>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <KBD_scan+0x9c>
 340:	00 00       	nop
 342:	40 98       	cbi	0x08, 0	; 8
 344:	86 e1       	ldi	r24, 0x16	; 22
 346:	34 c0       	rjmp	.+104    	; 0x3b0 <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
 348:	84 30       	cpi	r24, 0x04	; 4
 34a:	c1 f5       	brne	.+112    	; 0x3bc <KBD_scan+0x118>
 34c:	40 9a       	sbi	0x08, 0	; 8
 34e:	af ed       	ldi	r26, 0xDF	; 223
 350:	be e2       	ldi	r27, 0x2E	; 46
 352:	11 97       	sbiw	r26, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <KBD_scan+0xae>
 356:	00 c0       	rjmp	.+0      	; 0x358 <KBD_scan+0xb4>
 358:	00 00       	nop
 35a:	40 98       	cbi	0x08, 0	; 8
 35c:	85 e1       	ldi	r24, 0x15	; 21
 35e:	28 c0       	rjmp	.+80     	; 0x3b0 <KBD_scan+0x10c>
    }
	if (but == 3) {
 360:	13 30       	cpi	r17, 0x03	; 3
 362:	61 f5       	brne	.+88     	; 0x3bc <KBD_scan+0x118>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	51 f4       	brne	.+20     	; 0x37c <KBD_scan+0xd8>
 368:	40 9a       	sbi	0x08, 0	; 8
 36a:	8f ed       	ldi	r24, 0xDF	; 223
 36c:	9e e2       	ldi	r25, 0x2E	; 46
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <KBD_scan+0xca>
 372:	00 c0       	rjmp	.+0      	; 0x374 <KBD_scan+0xd0>
 374:	00 00       	nop
 376:	40 98       	cbi	0x08, 0	; 8
 378:	8e e1       	ldi	r24, 0x1E	; 30
 37a:	1a c0       	rjmp	.+52     	; 0x3b0 <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_MINUS_HOLD, 0, 0); }
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	69 f4       	brne	.+26     	; 0x39a <KBD_scan+0xf6>
 380:	40 9a       	sbi	0x08, 0	; 8
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	97 ee       	ldi	r25, 0xE7	; 231
 386:	a3 e0       	ldi	r26, 0x03	; 3
 388:	81 50       	subi	r24, 0x01	; 1
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	a0 40       	sbci	r26, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <KBD_scan+0xe4>
 390:	00 c0       	rjmp	.+0      	; 0x392 <KBD_scan+0xee>
 392:	00 00       	nop
 394:	40 98       	cbi	0x08, 0	; 8
 396:	80 e2       	ldi	r24, 0x20	; 32
 398:	0b c0       	rjmp	.+22     	; 0x3b0 <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS_LONG, 0, 0); }
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	79 f4       	brne	.+30     	; 0x3bc <KBD_scan+0x118>
 39e:	40 9a       	sbi	0x08, 0	; 8
 3a0:	af ed       	ldi	r26, 0xDF	; 223
 3a2:	be e2       	ldi	r27, 0x2E	; 46
 3a4:	11 97       	sbiw	r26, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <KBD_scan+0x100>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <KBD_scan+0x106>
 3aa:	00 00       	nop
 3ac:	40 98       	cbi	0x08, 0	; 8
 3ae:	8f e1       	ldi	r24, 0x1F	; 31
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <RTOS_setTask>
    }
  }
}
 3bc:	1f 91       	pop	r17
 3be:	08 95       	ret

000003c0 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
 3c0:	e1 eb       	ldi	r30, 0xB1	; 177
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	84 60       	ori	r24, 0x04	; 4
 3c8:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
 3ce:	e0 e7       	ldi	r30, 0x70	; 112
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
 3d8:	82 e8       	ldi	r24, 0x82	; 130
 3da:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
 3de:	10 92 b8 01 	sts	0x01B8, r1
}
 3e2:	08 95       	ret

000003e4 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
 3e4:	88 23       	and	r24, r24
 3e6:	09 f4       	brne	.+2      	; 0x3ea <RTOS_setTask+0x6>
 3e8:	6f c0       	rjmp	.+222    	; 0x4c8 <RTOS_setTask+0xe4>
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	1b c0       	rjmp	.+54     	; 0x424 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
 3ee:	29 2f       	mov	r18, r25
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	e2 0f       	add	r30, r18
 3fa:	f3 1f       	adc	r31, r19
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e4 58       	subi	r30, 0x84	; 132
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	20 81       	ld	r18, Z
 406:	28 17       	cp	r18, r24
 408:	61 f4       	brne	.+24     	; 0x422 <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
 40a:	72 83       	std	Z+2, r23	; 0x02
 40c:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
 40e:	54 83       	std	Z+4, r21	; 0x04
 410:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
 412:	61 15       	cp	r22, r1
 414:	71 05       	cpc	r23, r1
 416:	19 f4       	brne	.+6      	; 0x41e <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	85 83       	std	Z+5, r24	; 0x05
 41c:	08 95       	ret
      } else TaskArray[i].run = 0;   
 41e:	15 82       	std	Z+5, r1	; 0x05
 420:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
 422:	9f 5f       	subi	r25, 0xFF	; 255
 424:	20 91 b8 01 	lds	r18, 0x01B8
 428:	92 17       	cp	r25, r18
 42a:	08 f3       	brcs	.-62     	; 0x3ee <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
 42c:	20 91 b8 01 	lds	r18, 0x01B8
 430:	2a 30       	cpi	r18, 0x0A	; 10
 432:	08 f0       	brcs	.+2      	; 0x436 <RTOS_setTask+0x52>
 434:	49 c0       	rjmp	.+146    	; 0x4c8 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
 436:	20 91 b8 01 	lds	r18, 0x01B8
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	f9 01       	movw	r30, r18
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	e2 0f       	add	r30, r18
 444:	f3 1f       	adc	r31, r19
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	e4 58       	subi	r30, 0x84	; 132
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
 450:	20 91 b8 01 	lds	r18, 0x01B8
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	f9 01       	movw	r30, r18
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	e2 0f       	add	r30, r18
 45e:	f3 1f       	adc	r31, r19
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	e4 58       	subi	r30, 0x84	; 132
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	72 83       	std	Z+2, r23	; 0x02
 46a:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
 46c:	20 91 b8 01 	lds	r18, 0x01B8
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	f9 01       	movw	r30, r18
 474:	ee 0f       	add	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	e2 0f       	add	r30, r18
 47a:	f3 1f       	adc	r31, r19
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	e4 58       	subi	r30, 0x84	; 132
 482:	fe 4f       	sbci	r31, 0xFE	; 254
 484:	54 83       	std	Z+4, r21	; 0x04
 486:	43 83       	std	Z+3, r20	; 0x03
 488:	89 2f       	mov	r24, r25
 48a:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
 48c:	61 15       	cp	r22, r1
 48e:	71 05       	cpc	r23, r1
 490:	61 f4       	brne	.+24     	; 0x4aa <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
 492:	fc 01       	movw	r30, r24
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	e8 0f       	add	r30, r24
 49a:	f9 1f       	adc	r31, r25
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	e4 58       	subi	r30, 0x84	; 132
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	85 83       	std	Z+5, r24	; 0x05
 4a8:	0a c0       	rjmp	.+20     	; 0x4be <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
 4aa:	fc 01       	movw	r30, r24
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	e8 0f       	add	r30, r24
 4b2:	f9 1f       	adc	r31, r25
 4b4:	ee 0f       	add	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	e4 58       	subi	r30, 0x84	; 132
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
 4be:	80 91 b8 01 	lds	r24, 0x01B8
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	80 93 b8 01 	sts	0x01B8, r24
 4c8:	08 95       	ret

000004ca <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	2e c0       	rjmp	.+92     	; 0x52a <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
 4ce:	29 2f       	mov	r18, r25
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	d9 01       	movw	r26, r18
 4d4:	aa 0f       	add	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	a2 0f       	add	r26, r18
 4da:	b3 1f       	adc	r27, r19
 4dc:	aa 0f       	add	r26, r26
 4de:	bb 1f       	adc	r27, r27
 4e0:	a4 58       	subi	r26, 0x84	; 132
 4e2:	be 4f       	sbci	r27, 0xFE	; 254
 4e4:	4c 91       	ld	r20, X
 4e6:	48 17       	cp	r20, r24
 4e8:	f9 f4       	brne	.+62     	; 0x528 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
 4ea:	80 91 b8 01 	lds	r24, 0x01B8
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	28 17       	cp	r18, r24
 4f4:	39 07       	cpc	r19, r25
 4f6:	91 f0       	breq	.+36     	; 0x51c <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
 4f8:	80 91 b8 01 	lds	r24, 0x01B8
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	fc 01       	movw	r30, r24
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	e8 0f       	add	r30, r24
 508:	f9 1f       	adc	r31, r25
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	e4 58       	subi	r30, 0x84	; 132
 510:	fe 4f       	sbci	r31, 0xFE	; 254
 512:	86 e0       	ldi	r24, 0x06	; 6
 514:	01 90       	ld	r0, Z+
 516:	0d 92       	st	X+, r0
 518:	81 50       	subi	r24, 0x01	; 1
 51a:	e1 f7       	brne	.-8      	; 0x514 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
 51c:	80 91 b8 01 	lds	r24, 0x01B8
 520:	81 50       	subi	r24, 0x01	; 1
 522:	80 93 b8 01 	sts	0x01B8, r24
      return;
 526:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 528:	9f 5f       	subi	r25, 0xFF	; 255
 52a:	20 91 b8 01 	lds	r18, 0x01B8
 52e:	92 17       	cp	r25, r18
 530:	70 f2       	brcs	.-100    	; 0x4ce <RTOS_deleteTask+0x4>
 532:	08 95       	ret

00000534 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
 538:	80 91 7b 01 	lds	r24, 0x017B
 53c:	88 23       	and	r24, r24
 53e:	11 f4       	brne	.+4      	; 0x544 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 540:	10 e0       	ldi	r17, 0x00	; 0
 542:	4e c0       	rjmp	.+156    	; 0x5e0 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
 544:	10 92 7b 01 	sts	0x017B, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 548:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
 54a:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 54c:	17 c0       	rjmp	.+46     	; 0x57c <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
 54e:	82 2f       	mov	r24, r18
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	fc 01       	movw	r30, r24
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	e4 58       	subi	r30, 0x84	; 132
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	81 81       	ldd	r24, Z+1	; 0x01
 566:	92 81       	ldd	r25, Z+2	; 0x02
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	11 f4       	brne	.+4      	; 0x570 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
 56c:	35 83       	std	Z+5, r19	; 0x05
 56e:	05 c0       	rjmp	.+10     	; 0x57a <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
 570:	81 81       	ldd	r24, Z+1	; 0x01
 572:	92 81       	ldd	r25, Z+2	; 0x02
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	92 83       	std	Z+2, r25	; 0x02
 578:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 57a:	2f 5f       	subi	r18, 0xFF	; 255
 57c:	80 91 b8 01 	lds	r24, 0x01B8
 580:	28 17       	cp	r18, r24
 582:	28 f3       	brcs	.-54     	; 0x54e <RTOS_dispatchTask+0x1a>
 584:	dd cf       	rjmp	.-70     	; 0x540 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
 586:	81 2f       	mov	r24, r17
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	fc 01       	movw	r30, r24
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	e8 0f       	add	r30, r24
 592:	f9 1f       	adc	r31, r25
 594:	ee 0f       	add	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	e4 58       	subi	r30, 0x84	; 132
 59a:	fe 4f       	sbci	r31, 0xFE	; 254
 59c:	85 81       	ldd	r24, Z+5	; 0x05
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	f1 f4       	brne	.+60     	; 0x5de <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
 5a2:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
 5a4:	23 81       	ldd	r18, Z+3	; 0x03
 5a6:	34 81       	ldd	r19, Z+4	; 0x04
 5a8:	21 15       	cp	r18, r1
 5aa:	31 05       	cpc	r19, r1
 5ac:	31 f4       	brne	.+12     	; 0x5ba <RTOS_dispatchTask+0x86>
      {  
        cli();
 5ae:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
 5b0:	80 81       	ld	r24, Z
 5b2:	0e 94 65 02 	call	0x4ca	; 0x4ca <RTOS_deleteTask>
        sei();
 5b6:	78 94       	sei
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
 5ba:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
 5bc:	21 81       	ldd	r18, Z+1	; 0x01
 5be:	32 81       	ldd	r19, Z+2	; 0x02
 5c0:	21 15       	cp	r18, r1
 5c2:	31 05       	cpc	r19, r1
 5c4:	31 f4       	brne	.+12     	; 0x5d2 <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
 5c6:	23 81       	ldd	r18, Z+3	; 0x03
 5c8:	34 81       	ldd	r19, Z+4	; 0x04
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	30 40       	sbci	r19, 0x00	; 0
 5ce:	32 83       	std	Z+2, r19	; 0x02
 5d0:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
 5d2:	e0 91 00 01 	lds	r30, 0x0100
 5d6:	f0 91 01 01 	lds	r31, 0x0101
 5da:	80 2f       	mov	r24, r16
 5dc:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
 5de:	1f 5f       	subi	r17, 0xFF	; 255
 5e0:	80 91 b8 01 	lds	r24, 0x01B8
 5e4:	18 17       	cp	r17, r24
 5e6:	78 f2       	brcs	.-98     	; 0x586 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
 5fa:	82 e8       	ldi	r24, 0x82	; 130
 5fc:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	80 93 7b 01 	sts	0x017B, r24
}
 606:	8f 91       	pop	r24
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
 612:	80 52       	subi	r24, 0x20	; 32
 614:	86 35       	cpi	r24, 0x56	; 86
 616:	30 f4       	brcc	.+12     	; 0x624 <MAX7219_lookupCode+0x12>
 618:	e8 2f       	mov	r30, r24
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	ee 5e       	subi	r30, 0xEE	; 238
 61e:	fe 4f       	sbci	r31, 0xFE	; 254
 620:	80 81       	ld	r24, Z
 622:	08 95       	ret
 624:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
 626:	08 95       	ret

00000628 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
 628:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
 62a:	87 ff       	sbrs	r24, 7
 62c:	02 c0       	rjmp	.+4      	; 0x632 <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
 62e:	43 9a       	sbi	0x08, 3	; 8
 630:	01 c0       	rjmp	.+2      	; 0x634 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 632:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 634:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
 636:	00 00       	nop
	asm("nop");
 638:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
 63a:	42 9a       	sbi	0x08, 2	; 8
 63c:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
 63e:	11 f0       	breq	.+4      	; 0x644 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
 640:	88 0f       	add	r24, r24
 642:	f3 cf       	rjmp	.-26     	; 0x62a <MAX7219_SendByte+0x2>
 644:	08 95       	ret

00000646 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	18 2f       	mov	r17, r24
 64e:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
 650:	41 98       	cbi	0x08, 1	; 8
 652:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
 654:	81 2f       	mov	r24, r17
 656:	0e 94 14 03 	call	0x628	; 0x628 <MAX7219_SendByte>
	MAX7219_SendByte(data);
 65a:	8f 2d       	mov	r24, r15
 65c:	0e 94 14 03 	call	0x628	; 0x628 <MAX7219_SendByte>
 660:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
 662:	c1 f7       	brne	.-16     	; 0x654 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 664:	41 9a       	sbi	0x08, 1	; 8
  return;
}
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	08 95       	ret

0000066e <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	c2 e0       	ldi	r28, 0x02	; 2
 678:	d1 e0       	ldi	r29, 0x01	; 1
 67a:	0a e0       	ldi	r16, 0x0A	; 10
 67c:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
 67e:	89 91       	ld	r24, Y+
 680:	f8 01       	movw	r30, r16
 682:	61 91       	ld	r22, Z+
 684:	8f 01       	movw	r16, r30
 686:	8f 5f       	subi	r24, 0xFF	; 255
 688:	0e 94 23 03 	call	0x646	; 0x646 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	ca 30       	cpi	r28, 0x0A	; 10
 690:	df 07       	cpc	r29, r31
 692:	a9 f7       	brne	.-22     	; 0x67e <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	08 95       	ret

0000069e <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
 69e:	10 92 0a 01 	sts	0x010A, r1
 6a2:	10 92 0b 01 	sts	0x010B, r1
 6a6:	10 92 0c 01 	sts	0x010C, r1
 6aa:	10 92 0d 01 	sts	0x010D, r1
 6ae:	10 92 0e 01 	sts	0x010E, r1
 6b2:	10 92 0f 01 	sts	0x010F, r1
 6b6:	10 92 10 01 	sts	0x0110, r1
 6ba:	10 92 11 01 	sts	0x0111, r1
  }
  MAX7219_updateDisplay();
 6be:	0e 94 37 03 	call	0x66e	; 0x66e <MAX7219_updateDisplay>
}
 6c2:	08 95       	ret

000006c4 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 6c4:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
 6c6:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
 6c8:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 6ca:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 6cc:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 6ce:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
 6d0:	8c e0       	ldi	r24, 0x0C	; 12
 6d2:	61 e0       	ldi	r22, 0x01	; 1
 6d4:	0e 94 23 03 	call	0x646	; 0x646 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
 6d8:	8f e0       	ldi	r24, 0x0F	; 15
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	0e 94 23 03 	call	0x646	; 0x646 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
 6e0:	89 e0       	ldi	r24, 0x09	; 9
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	0e 94 23 03 	call	0x646	; 0x646 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 4);
 6e8:	8a e0       	ldi	r24, 0x0A	; 10
 6ea:	64 e0       	ldi	r22, 0x04	; 4
 6ec:	0e 94 23 03 	call	0x646	; 0x646 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
 6f0:	8b e0       	ldi	r24, 0x0B	; 11
 6f2:	67 e0       	ldi	r22, 0x07	; 7
 6f4:	0e 94 23 03 	call	0x646	; 0x646 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
 6f8:	0e 94 4f 03 	call	0x69e	; 0x69e <MAX7219_clearDisplay>
  return;
}
 6fc:	08 95       	ret

000006fe <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, signed int x, unsigned char n, unsigned char fillch)
{
 6fe:	bf 92       	push	r11
 700:	cf 92       	push	r12
 702:	df 92       	push	r13
 704:	ef 92       	push	r14
 706:	ff 92       	push	r15
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	df 93       	push	r29
 70e:	cf 93       	push	r28
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	27 97       	sbiw	r28, 0x07	; 7
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	b8 2e       	mov	r11, r24
 722:	cb 01       	movw	r24, r22
  char negative = 0;
  unsigned char i;
  unsigned char s[4];
  if (x < 0) {
 724:	77 ff       	sbrs	r23, 7
 726:	05 c0       	rjmp	.+10     	; 0x732 <MAX7219_printNum+0x34>
    negative = 1;
    x *= -1;
 728:	90 95       	com	r25
 72a:	81 95       	neg	r24
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
{
  char negative = 0;
  unsigned char i;
  unsigned char s[4];
  if (x < 0) {
    negative = 1;
 72e:	31 e0       	ldi	r19, 0x01	; 1
 730:	01 c0       	rjmp	.+2      	; 0x734 <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, signed int x, unsigned char n, unsigned char fillch)
{
  char negative = 0;
 732:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, signed int x, unsigned char n, unsigned char fillch)
 734:	e4 2f       	mov	r30, r20
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	8e 01       	movw	r16, r28
 73a:	0f 5f       	subi	r16, 0xFF	; 255
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	e0 0f       	add	r30, r16
 740:	f1 1f       	adc	r31, r17
  if (x < 0) {
    negative = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
 742:	5a e0       	ldi	r21, 0x0A	; 10
 744:	e5 2e       	mov	r14, r21
 746:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    negative = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
 748:	07 c0       	rjmp	.+14     	; 0x758 <MAX7219_printNum+0x5a>
 74a:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
 74c:	b7 01       	movw	r22, r14
 74e:	0e 94 18 06 	call	0xc30	; 0xc30 <__divmodhi4>
 752:	80 5d       	subi	r24, 0xD0	; 208
 754:	80 83       	st	Z, r24
    x /= 10;
 756:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    negative = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
 758:	e0 17       	cp	r30, r16
 75a:	f1 07       	cpc	r31, r17
 75c:	b1 f7       	brne	.-20     	; 0x74a <MAX7219_printNum+0x4c>
 75e:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 760:	84 2f       	mov	r24, r20
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
 766:	de 01       	movw	r26, r28
 768:	11 96       	adiw	r26, 0x01	; 1
 76a:	08 c0       	rjmp	.+16     	; 0x77c <MAX7219_printNum+0x7e>
 76c:	fd 01       	movw	r30, r26
 76e:	e6 0f       	add	r30, r22
 770:	f7 1f       	adc	r31, r23
 772:	60 81       	ld	r22, Z
 774:	60 33       	cpi	r22, 0x30	; 48
 776:	11 f5       	brne	.+68     	; 0x7bc <MAX7219_printNum+0xbe>
 778:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 77a:	5f 5f       	subi	r21, 0xFF	; 255
 77c:	65 2f       	mov	r22, r21
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	68 17       	cp	r22, r24
 782:	79 07       	cpc	r23, r25
 784:	9c f3       	brlt	.-26     	; 0x76c <MAX7219_printNum+0x6e>
 786:	1a c0       	rjmp	.+52     	; 0x7bc <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 788:	82 2f       	mov	r24, r18
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	8c 01       	movw	r16, r24
 78e:	0c 0d       	add	r16, r12
 790:	1d 1d       	adc	r17, r13
 792:	08 30       	cpi	r16, 0x08	; 8
 794:	11 05       	cpc	r17, r1
 796:	84 f4       	brge	.+32     	; 0x7b8 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 798:	8e 0d       	add	r24, r14
 79a:	9f 1d       	adc	r25, r15
 79c:	fc 01       	movw	r30, r24
 79e:	80 81       	ld	r24, Z
 7a0:	2e 83       	std	Y+6, r18	; 0x06
 7a2:	3d 83       	std	Y+5, r19	; 0x05
 7a4:	4f 83       	std	Y+7, r20	; 0x07
 7a6:	0e 94 09 03 	call	0x612	; 0x612 <MAX7219_lookupCode>
 7aa:	f8 01       	movw	r30, r16
 7ac:	e6 5f       	subi	r30, 0xF6	; 246
 7ae:	fe 4f       	sbci	r31, 0xFE	; 254
 7b0:	80 83       	st	Z, r24
 7b2:	4f 81       	ldd	r20, Y+7	; 0x07
 7b4:	3d 81       	ldd	r19, Y+5	; 0x05
 7b6:	2e 81       	ldd	r18, Y+6	; 0x06
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 7b8:	2f 5f       	subi	r18, 0xFF	; 255
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
 7bc:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 7be:	cb 2c       	mov	r12, r11
 7c0:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 7c2:	7e 01       	movw	r14, r28
 7c4:	08 94       	sec
 7c6:	e1 1c       	adc	r14, r1
 7c8:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 7ca:	24 17       	cp	r18, r20
 7cc:	e8 f2       	brcs	.-70     	; 0x788 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (negative) {
 7ce:	33 23       	and	r19, r19
 7d0:	41 f0       	breq	.+16     	; 0x7e2 <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
 7d2:	8d e2       	ldi	r24, 0x2D	; 45
 7d4:	0e 94 09 03 	call	0x612	; 0x612 <MAX7219_lookupCode>
 7d8:	eb 2d       	mov	r30, r11
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	e7 5f       	subi	r30, 0xF7	; 247
 7de:	fe 4f       	sbci	r31, 0xFE	; 254
 7e0:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
 7e2:	0e 94 37 03 	call	0x66e	; 0x66e <MAX7219_updateDisplay>
}
 7e6:	27 96       	adiw	r28, 0x07	; 7
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61
 7f2:	cf 91       	pop	r28
 7f4:	df 91       	pop	r29
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	ff 90       	pop	r15
 7fc:	ef 90       	pop	r14
 7fe:	df 90       	pop	r13
 800:	cf 90       	pop	r12
 802:	bf 90       	pop	r11
 804:	08 95       	ret

00000806 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
 806:	ef 92       	push	r14
 808:	ff 92       	push	r15
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
  unsigned char i = pos;
 810:	e6 2e       	mov	r14, r22
 812:	e7 01       	movw	r28, r14
 814:	7e 01       	movw	r14, r28
 816:	f7 2e       	mov	r15, r23
 818:	e7 01       	movw	r28, r14
 81a:	18 2f       	mov	r17, r24
  while(*data) {
 81c:	0a c0       	rjmp	.+20     	; 0x832 <MAX7219_printStr+0x2c>
    if (i < 9) {
 81e:	19 30       	cpi	r17, 0x09	; 9
 820:	58 f4       	brcc	.+22     	; 0x838 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
 822:	0e 94 09 03 	call	0x612	; 0x612 <MAX7219_lookupCode>
 826:	e1 2f       	mov	r30, r17
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	e7 5f       	subi	r30, 0xF7	; 247
 82c:	fe 4f       	sbci	r31, 0xFE	; 254
 82e:	80 83       	st	Z, r24
      i++;
 830:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
 832:	89 91       	ld	r24, Y+
 834:	88 23       	and	r24, r24
 836:	99 f7       	brne	.-26     	; 0x81e <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
 838:	0e 94 37 03 	call	0x66e	; 0x66e <MAX7219_updateDisplay>
}
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	08 95       	ret

00000848 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
 848:	e8 2f       	mov	r30, r24
 84a:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
 84c:	61 30       	cpi	r22, 0x01	; 1
 84e:	29 f4       	brne	.+10     	; 0x85a <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
 850:	e7 5f       	subi	r30, 0xF7	; 247
 852:	fe 4f       	sbci	r31, 0xFE	; 254
 854:	80 81       	ld	r24, Z
 856:	80 68       	ori	r24, 0x80	; 128
 858:	04 c0       	rjmp	.+8      	; 0x862 <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
 85a:	e7 5f       	subi	r30, 0xF7	; 247
 85c:	fe 4f       	sbci	r31, 0xFE	; 254
 85e:	80 81       	ld	r24, Z
 860:	8f 77       	andi	r24, 0x7F	; 127
 862:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
 864:	0e 94 37 03 	call	0x66e	; 0x66e <MAX7219_updateDisplay>
}
 868:	08 95       	ret

0000086a <ds18x20SendBit>:
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit)
{
  cli();
 86a:	f8 94       	cli
  DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;						/* Pin as output (0) */
 86c:	21 9a       	sbi	0x04, 1	; 4
  PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 86e:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 870:	90 e2       	ldi	r25, 0x20	; 32
 872:	9a 95       	dec	r25
 874:	f1 f7       	brne	.-4      	; 0x872 <ds18x20SendBit+0x8>
  _delay_us(6);
  if (!bit)	_delay_us(54);
 876:	88 23       	and	r24, r24
 878:	31 f4       	brne	.+12     	; 0x886 <ds18x20SendBit+0x1c>
 87a:	e7 ed       	ldi	r30, 0xD7	; 215
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	31 97       	sbiw	r30, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <ds18x20SendBit+0x14>
 882:	00 c0       	rjmp	.+0      	; 0x884 <ds18x20SendBit+0x1a>
 884:	00 00       	nop
  DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 886:	21 98       	cbi	0x04, 1	; 4
  PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 888:	29 9a       	sbi	0x05, 1	; 5
 88a:	f5 e3       	ldi	r31, 0x35	; 53
 88c:	fa 95       	dec	r31
 88e:	f1 f7       	brne	.-4      	; 0x88c <ds18x20SendBit+0x22>
 890:	00 00       	nop
  _delay_us(10);
  if (bit) _delay_us(54);
 892:	88 23       	and	r24, r24
 894:	31 f0       	breq	.+12     	; 0x8a2 <ds18x20SendBit+0x38>
 896:	87 ed       	ldi	r24, 0xD7	; 215
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	f1 f7       	brne	.-4      	; 0x89a <ds18x20SendBit+0x30>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <ds18x20SendBit+0x36>
 8a0:	00 00       	nop
  sei();
 8a2:	78 94       	sei
  return;
}
 8a4:	08 95       	ret

000008a6 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	08 2f       	mov	r16, r24
 8ac:	18 e0       	ldi	r17, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01);
 8ae:	80 2f       	mov	r24, r16
 8b0:	81 70       	andi	r24, 0x01	; 1
 8b2:	0e 94 35 04 	call	0x86a	; 0x86a <ds18x20SendBit>
	byte >>= 1;
 8b6:	06 95       	lsr	r16
 8b8:	11 50       	subi	r17, 0x01	; 1
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <ds18x20SendByte+0x8>
	ds18x20SendBit(byte & 0x01);
	byte >>= 1;
  }
  return;
}
 8bc:	1f 91       	pop	r17
 8be:	0f 91       	pop	r16
 8c0:	08 95       	ret

000008c2 <ds18x20GetBit>:
}

static uint8_t ds18x20GetBit(void)
{
  uint8_t ret;
  cli();
 8c2:	f8 94       	cli
  DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;						/* Pin as output (0) */
 8c4:	21 9a       	sbi	0x04, 1	; 4
  PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 8c6:	29 98       	cbi	0x05, 1	; 5
 8c8:	80 e2       	ldi	r24, 0x20	; 32
 8ca:	8a 95       	dec	r24
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <ds18x20GetBit+0x8>
  _delay_us(6);										/* Strob */
  DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 8ce:	21 98       	cbi	0x04, 1	; 4
  PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 8d0:	29 9a       	sbi	0x05, 1	; 5
 8d2:	e0 e3       	ldi	r30, 0x30	; 48
 8d4:	ea 95       	dec	r30
 8d6:	f1 f7       	brne	.-4      	; 0x8d4 <ds18x20GetBit+0x12>
  _delay_us(9);
  ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
 8d8:	83 b1       	in	r24, 0x03	; 3
 8da:	eb ed       	ldi	r30, 0xDB	; 219
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	31 97       	sbiw	r30, 0x01	; 1
 8e0:	f1 f7       	brne	.-4      	; 0x8de <ds18x20GetBit+0x1c>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <ds18x20GetBit+0x22>
 8e4:	00 00       	nop
  _delay_us(55);
  sei();
 8e6:	78 94       	sei
  return ret;
}
 8e8:	82 70       	andi	r24, 0x02	; 2
 8ea:	08 95       	ret

000008ec <ds18x20IsOnBus>:
static uint8_t devCount = 0;
//=============================================================================
static uint8_t ds18x20IsOnBus(void)
{
  uint8_t ret;
  cli();
 8ec:	f8 94       	cli
  DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;						/* Pin as output (0) */
 8ee:	21 9a       	sbi	0x04, 1	; 4
  PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 8f0:	29 98       	cbi	0x05, 1	; 5
 8f2:	8f e7       	ldi	r24, 0x7F	; 127
 8f4:	97 e0       	ldi	r25, 0x07	; 7
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <ds18x20IsOnBus+0xa>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <ds18x20IsOnBus+0x10>
 8fc:	00 00       	nop
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 8fe:	21 98       	cbi	0x04, 1	; 4
  PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 900:	29 9a       	sbi	0x05, 1	; 5
 902:	e7 e1       	ldi	r30, 0x17	; 23
 904:	f1 e0       	ldi	r31, 0x01	; 1
 906:	31 97       	sbiw	r30, 0x01	; 1
 908:	f1 f7       	brne	.-4      	; 0x906 <__stack+0x7>
 90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xd>
 90c:	00 00       	nop
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
 90e:	93 b1       	in	r25, 0x03	; 3
 910:	e7 e6       	ldi	r30, 0x67	; 103
 912:	f6 e0       	ldi	r31, 0x06	; 6
 914:	31 97       	sbiw	r30, 0x01	; 1
 916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0x15>
 918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0x1b>
 91a:	00 00       	nop
  _delay_us(410);
  sei();
 91c:	78 94       	sei
  PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
  PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	91 fd       	sbrc	r25, 1
 922:	80 e0       	ldi	r24, 0x00	; 0
  _delay_us(410);
  sei();
  return ret;
}
 924:	08 95       	ret

00000926 <ds18x20GetAddress>:
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
 926:	90 91 b9 01 	lds	r25, 0x01B9
 92a:	98 17       	cp	r25, r24
 92c:	90 f0       	brcs	.+36     	; 0x952 <ds18x20GetAddress+0x2c>
  if (c > 8) return 0;
 92e:	69 30       	cpi	r22, 0x09	; 9
 930:	90 f4       	brcc	.+36     	; 0x956 <ds18x20GetAddress+0x30>
  return (devs[num - 1].id[c]);
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	fc 01       	movw	r30, r24
 938:	24 e0       	ldi	r18, 0x04	; 4
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31
 93e:	2a 95       	dec	r18
 940:	e1 f7       	brne	.-8      	; 0x93a <ds18x20GetAddress+0x14>
 942:	e8 0f       	add	r30, r24
 944:	f9 1f       	adc	r31, r25
 946:	e6 54       	subi	r30, 0x46	; 70
 948:	fe 4f       	sbci	r31, 0xFE	; 254
 94a:	e6 0f       	add	r30, r22
 94c:	f1 1d       	adc	r31, r1
 94e:	81 85       	ldd	r24, Z+9	; 0x09
 950:	08 95       	ret
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	08 95       	ret
  if (c > 8) return 0;
 956:	80 e0       	ldi	r24, 0x00	; 0
  return (devs[num - 1].id[c]);
}
 958:	08 95       	ret

0000095a <ds18x20SearchDevices>:
  }
  return newDeviation;
}
//=============================================================================
void ds18x20SearchDevices(void)
{
 95a:	af 92       	push	r10
 95c:	bf 92       	push	r11
 95e:	cf 92       	push	r12
 960:	df 92       	push	r13
 962:	ef 92       	push	r14
 964:	ff 92       	push	r15
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
  uint8_t lastDeviation;
  uint8_t count = 0;
  /* Reset addresses */
  for (i = 0; i < DS18X20_MAX_DEV; i++)
	for (j = 0; j < DS18X20_ID_LEN; j++)
	  devs[i].id[j] = 0x00;
 96e:	10 92 c3 01 	sts	0x01C3, r1
 972:	10 92 c4 01 	sts	0x01C4, r1
 976:	10 92 c5 01 	sts	0x01C5, r1
 97a:	10 92 c6 01 	sts	0x01C6, r1
 97e:	10 92 c7 01 	sts	0x01C7, r1
 982:	10 92 c8 01 	sts	0x01C8, r1
 986:	10 92 c9 01 	sts	0x01C9, r1
 98a:	10 92 ca 01 	sts	0x01CA, r1
 98e:	10 92 d4 01 	sts	0x01D4, r1
 992:	10 92 d5 01 	sts	0x01D5, r1
 996:	10 92 d6 01 	sts	0x01D6, r1
 99a:	10 92 d7 01 	sts	0x01D7, r1
 99e:	10 92 d8 01 	sts	0x01D8, r1
 9a2:	10 92 d9 01 	sts	0x01D9, r1
 9a6:	10 92 da 01 	sts	0x01DA, r1
 9aa:	10 92 db 01 	sts	0x01DB, r1
 9ae:	10 92 e5 01 	sts	0x01E5, r1
 9b2:	10 92 e6 01 	sts	0x01E6, r1
 9b6:	10 92 e7 01 	sts	0x01E7, r1
 9ba:	10 92 e8 01 	sts	0x01E8, r1
 9be:	10 92 e9 01 	sts	0x01E9, r1
 9c2:	10 92 ea 01 	sts	0x01EA, r1
 9c6:	10 92 eb 01 	sts	0x01EB, r1
 9ca:	10 92 ec 01 	sts	0x01EC, r1
 9ce:	10 92 f6 01 	sts	0x01F6, r1
 9d2:	10 92 f7 01 	sts	0x01F7, r1
 9d6:	10 92 f8 01 	sts	0x01F8, r1
 9da:	10 92 f9 01 	sts	0x01F9, r1
 9de:	10 92 fa 01 	sts	0x01FA, r1
 9e2:	10 92 fb 01 	sts	0x01FB, r1
 9e6:	10 92 fc 01 	sts	0x01FC, r1
 9ea:	10 92 fd 01 	sts	0x01FD, r1
 9ee:	cc 24       	eor	r12, r12
 9f0:	bb 24       	eor	r11, r11
 9f2:	83 ec       	ldi	r24, 0xC3	; 195
 9f4:	91 e0       	ldi	r25, 0x01	; 1
 9f6:	8c 01       	movw	r16, r24
 9f8:	dc 01       	movw	r26, r24
 9fa:	f8 01       	movw	r30, r16
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
 9fc:	80 e0       	ldi	r24, 0x00	; 0
      newID[j] = currentID[j];
 9fe:	9d 91       	ld	r25, X+
 a00:	91 93       	st	Z+, r25
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
 a02:	8f 5f       	subi	r24, 0xFF	; 255
 a04:	88 30       	cpi	r24, 0x08	; 8
 a06:	d9 f7       	brne	.-10     	; 0x9fe <ds18x20SearchDevices+0xa4>
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
 a08:	0e 94 76 04 	call	0x8ec	; 0x8ec <ds18x20IsOnBus>
 a0c:	88 23       	and	r24, r24
 a0e:	19 f4       	brne	.+6      	; 0xa16 <ds18x20SearchDevices+0xbc>
	    devCount = 0;
 a10:	10 92 b9 01 	sts	0x01B9, r1
	    return;
 a14:	50 c0       	rjmp	.+160    	; 0xab6 <ds18x20SearchDevices+0x15c>
  uint8_t newDeviation = 0;
  uint8_t bitMask = 0x01;
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
 a16:	80 ef       	ldi	r24, 0xF0	; 240
 a18:	0e 94 53 04 	call	0x8a6	; 0x8a6 <ds18x20SendByte>
 a1c:	e8 01       	movw	r28, r16
}
//=============================================================================
static uint8_t ds18x20SearchRom(uint8_t *bitPattern, uint8_t lastDeviation)
{
  uint8_t currBit;
  uint8_t newDeviation = 0;
 a1e:	dd 24       	eor	r13, r13
  uint8_t bitMask = 0x01;
 a20:	ff 24       	eor	r15, r15
 a22:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
 a24:	ee 24       	eor	r14, r14
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
 a26:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ds18x20GetBit>
 a2a:	a8 2e       	mov	r10, r24
	bitB = ds18x20GetBit();
 a2c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ds18x20GetBit>
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
 a30:	aa 20       	and	r10, r10
 a32:	19 f0       	breq	.+6      	; 0xa3a <ds18x20SearchDevices+0xe0>
 a34:	88 23       	and	r24, r24
 a36:	81 f0       	breq	.+32     	; 0xa58 <ds18x20SearchDevices+0xfe>
 a38:	27 c0       	rjmp	.+78     	; 0xa88 <ds18x20SearchDevices+0x12e>
	  return 0xFF;
	} else if (!(bitA || bitB)) {					/* Both bits 0 */
 a3a:	88 23       	and	r24, r24
 a3c:	81 f4       	brne	.+32     	; 0xa5e <ds18x20SearchDevices+0x104>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
 a3e:	eb 14       	cp	r14, r11
 a40:	59 f0       	breq	.+22     	; 0xa58 <ds18x20SearchDevices+0xfe>
 a42:	98 81       	ld	r25, Y
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
 a44:	be 14       	cp	r11, r14
 a46:	28 f4       	brcc	.+10     	; 0xa52 <ds18x20SearchDevices+0xf8>
	    (*bitPattern) &= ~bitMask;
 a48:	8f 2d       	mov	r24, r15
 a4a:	80 95       	com	r24
 a4c:	89 23       	and	r24, r25
 a4e:	88 83       	st	Y, r24
 a50:	0c c0       	rjmp	.+24     	; 0xa6a <ds18x20SearchDevices+0x110>
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
 a52:	9f 21       	and	r25, r15
 a54:	51 f0       	breq	.+20     	; 0xa6a <ds18x20SearchDevices+0x110>
 a56:	0a c0       	rjmp	.+20     	; 0xa6c <ds18x20SearchDevices+0x112>
	    newDeviation = currBit;
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
 a58:	88 81       	ld	r24, Y
 a5a:	8f 29       	or	r24, r15
 a5c:	04 c0       	rjmp	.+8      	; 0xa66 <ds18x20SearchDevices+0x10c>
 a5e:	9f 2d       	mov	r25, r15
 a60:	90 95       	com	r25
 a62:	88 81       	ld	r24, Y
 a64:	89 23       	and	r24, r25
 a66:	88 83       	st	Y, r24
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <ds18x20SearchDevices+0x112>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
	    (*bitPattern) &= ~bitMask;
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
 a6a:	de 2c       	mov	r13, r14
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
    }
    /* Send the selected bit to the bus. */
    ds18x20SendBit(*bitPattern & bitMask);
 a6c:	88 81       	ld	r24, Y
 a6e:	8f 21       	and	r24, r15
 a70:	0e 94 35 04 	call	0x86a	; 0x86a <ds18x20SendBit>
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
 a74:	ff 0c       	add	r15, r15
    if (!bitMask)
 a76:	19 f4       	brne	.+6      	; 0xa7e <ds18x20SearchDevices+0x124>
    {
	  bitMask = 0x01;
	  bitPattern++;
 a78:	21 96       	adiw	r28, 0x01	; 1
    ds18x20SendBit(*bitPattern & bitMask);
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
    if (!bitMask)
    {
	  bitMask = 0x01;
 a7a:	ff 24       	eor	r15, r15
 a7c:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
 a7e:	e3 94       	inc	r14
 a80:	8e 2d       	mov	r24, r14
 a82:	80 34       	cpi	r24, 0x40	; 64
 a84:	81 f6       	brne	.-96     	; 0xa26 <ds18x20SearchDevices+0xcc>
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <ds18x20SearchDevices+0x132>
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
	bitB = ds18x20GetBit();
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
	  return 0xFF;
 a88:	dd 24       	eor	r13, r13
 a8a:	da 94       	dec	r13
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
 a8c:	c3 94       	inc	r12
	  newID=devs[count].id;
  } while (lastDeviation != 0);
 a8e:	dd 20       	and	r13, r13
 a90:	81 f0       	breq	.+32     	; 0xab2 <ds18x20SearchDevices+0x158>
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
 a92:	8c 2d       	mov	r24, r12
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	9c 01       	movw	r18, r24
 a98:	44 e0       	ldi	r20, 0x04	; 4
 a9a:	22 0f       	add	r18, r18
 a9c:	33 1f       	adc	r19, r19
 a9e:	4a 95       	dec	r20
 aa0:	e1 f7       	brne	.-8      	; 0xa9a <ds18x20SearchDevices+0x140>
 aa2:	28 0f       	add	r18, r24
 aa4:	39 1f       	adc	r19, r25
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
 aa6:	c8 01       	movw	r24, r16
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
 aa8:	bd 2c       	mov	r11, r13
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
 aaa:	89 01       	movw	r16, r18
 aac:	0d 53       	subi	r16, 0x3D	; 61
 aae:	1e 4f       	sbci	r17, 0xFE	; 254
 ab0:	a3 cf       	rjmp	.-186    	; 0x9f8 <ds18x20SearchDevices+0x9e>
  } while (lastDeviation != 0);
  devCount = count;
 ab2:	c0 92 b9 01 	sts	0x01B9, r12
  return;
}
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	ff 90       	pop	r15
 ac0:	ef 90       	pop	r14
 ac2:	df 90       	pop	r13
 ac4:	cf 90       	pop	r12
 ac6:	bf 90       	pop	r11
 ac8:	af 90       	pop	r10
 aca:	08 95       	ret

00000acc <ds18x20Process>:
//=============================================================================
uint8_t ds18x20Process(void)
{
 acc:	af 92       	push	r10
 ace:	bf 92       	push	r11
 ad0:	cf 92       	push	r12
 ad2:	df 92       	push	r13
 ad4:	ef 92       	push	r14
 ad6:	ff 92       	push	r15
 ad8:	0f 93       	push	r16
 ada:	1f 93       	push	r17
 adc:	df 93       	push	r29
 ade:	cf 93       	push	r28
 ae0:	0f 92       	push	r0
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
 ae6:	ff 24       	eor	r15, r15
 ae8:	5a c0       	rjmp	.+180    	; 0xb9e <ds18x20Process+0xd2>
  {
	if (ds18x20IsOnBus())
 aea:	0e 94 76 04 	call	0x8ec	; 0x8ec <ds18x20IsOnBus>
 aee:	88 23       	and	r24, r24
 af0:	09 f4       	brne	.+2      	; 0xaf4 <ds18x20Process+0x28>
 af2:	54 c0       	rjmp	.+168    	; 0xb9c <ds18x20Process+0xd0>
}
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
 af4:	85 e5       	ldi	r24, 0x55	; 85
 af6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <ds18x20SendByte>
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
 afa:	8f 2d       	mov	r24, r15
 afc:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
 afe:	6c 01       	movw	r12, r24
 b00:	e4 e0       	ldi	r30, 0x04	; 4
 b02:	cc 0c       	add	r12, r12
 b04:	dd 1c       	adc	r13, r13
 b06:	ea 95       	dec	r30
 b08:	e1 f7       	brne	.-8      	; 0xb02 <ds18x20Process+0x36>
 b0a:	c8 0e       	add	r12, r24
 b0c:	d9 1e       	adc	r13, r25
 b0e:	83 ec       	ldi	r24, 0xC3	; 195
 b10:	91 e0       	ldi	r25, 0x01	; 1
 b12:	c8 0e       	add	r12, r24
 b14:	d9 1e       	adc	r13, r25
 b16:	08 e0       	ldi	r16, 0x08	; 8
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
	ds18x20SendByte(dev->id[i]);
 b18:	d6 01       	movw	r26, r12
 b1a:	8d 91       	ld	r24, X+
 b1c:	6d 01       	movw	r12, r26
 b1e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <ds18x20SendByte>
 b22:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
 b24:	c9 f7       	brne	.-14     	; 0xb18 <ds18x20Process+0x4c>
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
 b26:	8e eb       	ldi	r24, 0xBE	; 190
 b28:	0e 94 53 04 	call	0x8a6	; 0x8a6 <ds18x20SendByte>
 b2c:	7e ef       	ldi	r23, 0xFE	; 254
 b2e:	a7 2e       	mov	r10, r23
 b30:	71 e0       	ldi	r23, 0x01	; 1
 b32:	b7 2e       	mov	r11, r23
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
 b34:	85 01       	movw	r16, r10
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
 b36:	ee 24       	eor	r14, r14
 b38:	68 e0       	ldi	r22, 0x08	; 8
 b3a:	d6 2e       	mov	r13, r22
}
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
 b3c:	90 e0       	ldi	r25, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
 b3e:	96 95       	lsr	r25
	if (ds18x20GetBit()) ret |= 0x80;
 b40:	99 83       	std	Y+1, r25	; 0x01
 b42:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ds18x20GetBit>
 b46:	99 81       	ldd	r25, Y+1	; 0x01
 b48:	81 11       	cpse	r24, r1
 b4a:	90 68       	ori	r25, 0x80	; 128
 b4c:	da 94       	dec	r13
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
 b4e:	b9 f7       	brne	.-18     	; 0xb3e <ds18x20Process+0x72>
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
		arr[j] = ds18x20GetByte();
 b50:	f8 01       	movw	r30, r16
 b52:	91 93       	st	Z+, r25
 b54:	8f 01       	movw	r16, r30

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
 b56:	e9 26       	eor	r14, r25
 b58:	88 e0       	ldi	r24, 0x08	; 8
 b5a:	9c e8       	ldi	r25, 0x8C	; 140
 b5c:	e6 94       	lsr	r14
 b5e:	08 f4       	brcc	.+2      	; 0xb62 <ds18x20Process+0x96>
 b60:	e9 26       	eor	r14, r25
 b62:	8a 95       	dec	r24
 b64:	d9 f7       	brne	.-10     	; 0xb5c <ds18x20Process+0x90>
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
 b66:	f2 e0       	ldi	r31, 0x02	; 2
 b68:	07 30       	cpi	r16, 0x07	; 7
 b6a:	1f 07       	cpc	r17, r31
 b6c:	29 f7       	brne	.-54     	; 0xb38 <ds18x20Process+0x6c>
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
 b6e:	ee 20       	and	r14, r14
 b70:	a9 f4       	brne	.+42     	; 0xb9c <ds18x20Process+0xd0>
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
 b72:	8f 2d       	mov	r24, r15
 b74:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
 b76:	fc 01       	movw	r30, r24
 b78:	54 e0       	ldi	r21, 0x04	; 4
 b7a:	ee 0f       	add	r30, r30
 b7c:	ff 1f       	adc	r31, r31
 b7e:	5a 95       	dec	r21
 b80:	e1 f7       	brne	.-8      	; 0xb7a <ds18x20Process+0xae>
 b82:	e8 0f       	add	r30, r24
 b84:	f9 1f       	adc	r31, r25
 b86:	e6 54       	subi	r30, 0x46	; 70
 b88:	fe 4f       	sbci	r31, 0xFE	; 254
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
 b8a:	d5 01       	movw	r26, r10
 b8c:	8d 91       	ld	r24, X+
 b8e:	5d 01       	movw	r10, r26
 b90:	81 93       	st	Z+, r24
 b92:	b7 e0       	ldi	r27, 0x07	; 7
 b94:	ab 16       	cp	r10, r27
 b96:	b2 e0       	ldi	r27, 0x02	; 2
 b98:	bb 06       	cpc	r11, r27
 b9a:	b9 f7       	brne	.-18     	; 0xb8a <ds18x20Process+0xbe>
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
 b9c:	f3 94       	inc	r15
 b9e:	80 91 b9 01 	lds	r24, 0x01B9
 ba2:	f8 16       	cp	r15, r24
 ba4:	08 f4       	brcc	.+2      	; 0xba8 <ds18x20Process+0xdc>
 ba6:	a1 cf       	rjmp	.-190    	; 0xaea <ds18x20Process+0x1e>
//=============================================================================
uint8_t ds18x20Process(void)
{
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
 ba8:	0e 94 76 04 	call	0x8ec	; 0x8ec <ds18x20IsOnBus>
 bac:	88 23       	and	r24, r24
 bae:	41 f0       	breq	.+16     	; 0xbc0 <ds18x20Process+0xf4>
  return;
}
//=============================================================================
static void ds18x20ConvertTemp(void)
{
  ds18x20SendByte(DS18X20_CMD_SKIP_ROM);
 bb0:	8c ec       	ldi	r24, 0xCC	; 204
 bb2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <ds18x20SendByte>
  ds18x20SendByte(DS18X20_CMD_CONVERT);
 bb6:	84 e4       	ldi	r24, 0x44	; 68
 bb8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <ds18x20SendByte>
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 bbc:	29 9a       	sbi	0x05, 1	; 5
  DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 bbe:	21 9a       	sbi	0x04, 1	; 4
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
	ds18x20ConvertTemp();
  return devCount;
}
 bc0:	80 91 b9 01 	lds	r24, 0x01B9
 bc4:	0f 90       	pop	r0
 bc6:	cf 91       	pop	r28
 bc8:	df 91       	pop	r29
 bca:	1f 91       	pop	r17
 bcc:	0f 91       	pop	r16
 bce:	ff 90       	pop	r15
 bd0:	ef 90       	pop	r14
 bd2:	df 90       	pop	r13
 bd4:	cf 90       	pop	r12
 bd6:	bf 90       	pop	r11
 bd8:	af 90       	pop	r10
 bda:	08 95       	ret

00000bdc <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t num)
{
  int16_t ret = devs[num].temp;
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	fc 01       	movw	r30, r24
 be0:	b4 e0       	ldi	r27, 0x04	; 4
 be2:	ee 0f       	add	r30, r30
 be4:	ff 1f       	adc	r31, r31
 be6:	ba 95       	dec	r27
 be8:	e1 f7       	brne	.-8      	; 0xbe2 <ds18x20GetTemp+0x6>
 bea:	e8 0f       	add	r30, r24
 bec:	f9 1f       	adc	r31, r25
 bee:	e6 54       	subi	r30, 0x46	; 70
 bf0:	fe 4f       	sbci	r31, 0xFE	; 254
 bf2:	60 81       	ld	r22, Z
 bf4:	71 81       	ldd	r23, Z+1	; 0x01
  if (devs[num].id[0] == 0x28) /* DS18B20 */
 bf6:	81 85       	ldd	r24, Z+9	; 0x09
 bf8:	88 32       	cpi	r24, 0x28	; 40
 bfa:	61 f4       	brne	.+24     	; 0xc14 <ds18x20GetTemp+0x38>
	ret = ret * 5 / 8;
 bfc:	cb 01       	movw	r24, r22
 bfe:	88 0f       	add	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	88 0f       	add	r24, r24
 c04:	99 1f       	adc	r25, r25
 c06:	86 0f       	add	r24, r22
 c08:	97 1f       	adc	r25, r23
 c0a:	68 e0       	ldi	r22, 0x08	; 8
 c0c:	70 e0       	ldi	r23, 0x00	; 0
 c0e:	0e 94 18 06 	call	0xc30	; 0xc30 <__divmodhi4>
 c12:	09 c0       	rjmp	.+18     	; 0xc26 <ds18x20GetTemp+0x4a>
  else if (devs[num].id[0] == 0x10) /* DS18S20 */
 c14:	80 31       	cpi	r24, 0x10	; 16
 c16:	39 f4       	brne	.+14     	; 0xc26 <ds18x20GetTemp+0x4a>
	ret = ret * 5;
 c18:	cb 01       	movw	r24, r22
 c1a:	88 0f       	add	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	88 0f       	add	r24, r24
 c20:	99 1f       	adc	r25, r25
 c22:	68 0f       	add	r22, r24
 c24:	79 1f       	adc	r23, r25
	/* Return value is in 0.1В°C units */
  return ret;
}
 c26:	cb 01       	movw	r24, r22
 c28:	08 95       	ret

00000c2a <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(void)
{
  return devCount;
}
 c2a:	80 91 b9 01 	lds	r24, 0x01B9
 c2e:	08 95       	ret

00000c30 <__divmodhi4>:
 c30:	97 fb       	bst	r25, 7
 c32:	09 2e       	mov	r0, r25
 c34:	07 26       	eor	r0, r23
 c36:	0a d0       	rcall	.+20     	; 0xc4c <__divmodhi4_neg1>
 c38:	77 fd       	sbrc	r23, 7
 c3a:	04 d0       	rcall	.+8      	; 0xc44 <__divmodhi4_neg2>
 c3c:	0c d0       	rcall	.+24     	; 0xc56 <__udivmodhi4>
 c3e:	06 d0       	rcall	.+12     	; 0xc4c <__divmodhi4_neg1>
 c40:	00 20       	and	r0, r0
 c42:	1a f4       	brpl	.+6      	; 0xc4a <__divmodhi4_exit>

00000c44 <__divmodhi4_neg2>:
 c44:	70 95       	com	r23
 c46:	61 95       	neg	r22
 c48:	7f 4f       	sbci	r23, 0xFF	; 255

00000c4a <__divmodhi4_exit>:
 c4a:	08 95       	ret

00000c4c <__divmodhi4_neg1>:
 c4c:	f6 f7       	brtc	.-4      	; 0xc4a <__divmodhi4_exit>
 c4e:	90 95       	com	r25
 c50:	81 95       	neg	r24
 c52:	9f 4f       	sbci	r25, 0xFF	; 255
 c54:	08 95       	ret

00000c56 <__udivmodhi4>:
 c56:	aa 1b       	sub	r26, r26
 c58:	bb 1b       	sub	r27, r27
 c5a:	51 e1       	ldi	r21, 0x11	; 17
 c5c:	07 c0       	rjmp	.+14     	; 0xc6c <__udivmodhi4_ep>

00000c5e <__udivmodhi4_loop>:
 c5e:	aa 1f       	adc	r26, r26
 c60:	bb 1f       	adc	r27, r27
 c62:	a6 17       	cp	r26, r22
 c64:	b7 07       	cpc	r27, r23
 c66:	10 f0       	brcs	.+4      	; 0xc6c <__udivmodhi4_ep>
 c68:	a6 1b       	sub	r26, r22
 c6a:	b7 0b       	sbc	r27, r23

00000c6c <__udivmodhi4_ep>:
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	5a 95       	dec	r21
 c72:	a9 f7       	brne	.-22     	; 0xc5e <__udivmodhi4_loop>
 c74:	80 95       	com	r24
 c76:	90 95       	com	r25
 c78:	bc 01       	movw	r22, r24
 c7a:	cd 01       	movw	r24, r26
 c7c:	08 95       	ret

00000c7e <_exit>:
 c7e:	f8 94       	cli

00000c80 <__stop_program>:
 c80:	ff cf       	rjmp	.-2      	; 0xc80 <__stop_program>
