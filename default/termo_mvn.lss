
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  0000195c  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000195c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ab  008001a6  008001a6  00001a96  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000058e  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c01  00000000  00000000  00002d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007b6  00000000  00000000  00004964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002062  00000000  00000000  0000511a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f0  00000000  00000000  0000717c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005ff  00000000  00000000  0000756c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001385  00000000  00000000  00007b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000013a  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 35       	cpi	r26, 0x51	; 81
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 a2 09 	call	0x1344	; 0x1344 <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 99 02 	call	0x532	; 0x532 <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 9a       	sbi	0x0b, 3	; 11
  OUT_2_init();
      be:	53 9a       	sbi	0x0a, 3	; 10
      c0:	5b 9a       	sbi	0x0b, 3	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 20 08 	call	0x1040	; 0x1040 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000);  // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	44 ef       	ldi	r20, 0xF4	; 244
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 10);        // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	4a e0       	ldi	r20, 0x0A	; 10
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);    // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 6f 02 	call	0x4de	; 0x4de <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 81 02 	call	0x502	; 0x502 <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 8a 02 	call	0x514	; 0x514 <load_min_temp_2>
  load_type1();
     112:	0e 94 ad 02 	call	0x55a	; 0x55a <load_type1>
  load_type2();
     116:	0e 94 bc 02 	call	0x578	; 0x578 <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 bf 09 	call	0x137e	; 0x137e <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <check_temp>:
    break;
  }    
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     15e:	1f 93       	push	r17
     160:	18 2f       	mov	r17, r24
  if (ds18x20GetDevCount(chanel) == 0) {
     162:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     166:	88 23       	and	r24, r24
     168:	29 f4       	brne	.+10     	; 0x174 <check_temp+0x16>
    if (chanel == 1) OUT_1_0();
     16a:	11 30       	cpi	r17, 0x01	; 1
     16c:	11 f0       	breq	.+4      	; 0x172 <check_temp+0x14>
    if (chanel == 2) OUT_2_0();
     16e:	12 30       	cpi	r17, 0x02	; 2
     170:	09 f4       	brne	.+2      	; 0x174 <check_temp+0x16>
     172:	5b 98       	cbi	0x0b, 3	; 11
  }
  int16_t t = ds18x20GetTemp(chanel);
     174:	81 2f       	mov	r24, r17
     176:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
     17a:	ac 01       	movw	r20, r24
  if (status[chanel - 1] == T_OTSLED_MAX) {
     17c:	21 2f       	mov	r18, r17
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	d9 01       	movw	r26, r18
     186:	a7 5c       	subi	r26, 0xC7	; 199
     188:	be 4f       	sbci	r27, 0xFE	; 254
     18a:	8c 91       	ld	r24, X
     18c:	b9 01       	movw	r22, r18
     18e:	66 0f       	add	r22, r22
     190:	77 1f       	adc	r23, r23
     192:	66 0f       	add	r22, r22
     194:	77 1f       	adc	r23, r23
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	69 f4       	brne	.+26     	; 0x1b4 <check_temp+0x56>
 // отслеживаем превышение максимума
    if (t > temps[chanel - 1][T_MAX]) {
     19a:	67 55       	subi	r22, 0x57	; 87
     19c:	7e 4f       	sbci	r23, 0xFE	; 254
     19e:	fb 01       	movw	r30, r22
     1a0:	80 81       	ld	r24, Z
     1a2:	91 81       	ldd	r25, Z+1	; 0x01
     1a4:	f9 01       	movw	r30, r18
     1a6:	e9 5c       	subi	r30, 0xC9	; 201
     1a8:	fe 4f       	sbci	r31, 0xFE	; 254
     1aa:	84 17       	cp	r24, r20
     1ac:	95 07       	cpc	r25, r21
     1ae:	7c f4       	brge	.+30     	; 0x1ce <check_temp+0x70>
      status[chanel - 1] = T_OTSLED_MIN;
     1b0:	1c 92       	st	X, r1
     1b2:	11 c0       	rjmp	.+34     	; 0x1d6 <check_temp+0x78>
        MAX7219_setCommaPos(1, 0);
	  }
    }
  } else {
   // отслеживаем превышение минимума
    if (t < temps[chanel - 1][T_MIN]) {
     1b4:	67 55       	subi	r22, 0x57	; 87
     1b6:	7e 4f       	sbci	r23, 0xFE	; 254
     1b8:	fb 01       	movw	r30, r22
     1ba:	62 81       	ldd	r22, Z+2	; 0x02
     1bc:	73 81       	ldd	r23, Z+3	; 0x03
     1be:	f9 01       	movw	r30, r18
     1c0:	e9 5c       	subi	r30, 0xC9	; 201
     1c2:	fe 4f       	sbci	r31, 0xFE	; 254
     1c4:	46 17       	cp	r20, r22
     1c6:	57 07       	cpc	r21, r23
     1c8:	34 f4       	brge	.+12     	; 0x1d6 <check_temp+0x78>
      status[chanel - 1] = T_OTSLED_MAX;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	8c 93       	st	X, r24
      if (types[chanel - 1] == T_HEATER) {
     1ce:	80 81       	ld	r24, Z
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	21 f4       	brne	.+8      	; 0x1dc <check_temp+0x7e>
     1d4:	0b c0       	rjmp	.+22     	; 0x1ec <check_temp+0x8e>
        if (chanel == 1) OUT_1_0();
        if (chanel == 2) OUT_2_0();
        MAX7219_setCommaPos(1, 0);
	  }
    } else {
      if (types[chanel - 1] == T_HEATER) {
     1d6:	80 81       	ld	r24, Z
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	41 f4       	brne	.+16     	; 0x1ec <check_temp+0x8e>
        if (chanel == 1) OUT_1_0();
     1dc:	11 30       	cpi	r17, 0x01	; 1
     1de:	11 f0       	breq	.+4      	; 0x1e4 <check_temp+0x86>
        if (chanel == 2) OUT_2_0();
     1e0:	12 30       	cpi	r17, 0x02	; 2
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <check_temp+0x88>
     1e4:	5b 98       	cbi	0x0b, 3	; 11
        MAX7219_setCommaPos(1, 0);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	07 c0       	rjmp	.+14     	; 0x1fa <check_temp+0x9c>
	  } else {
        if (chanel == 1) OUT_1_1();
     1ec:	11 30       	cpi	r17, 0x01	; 1
     1ee:	11 f0       	breq	.+4      	; 0x1f4 <check_temp+0x96>
        if (chanel == 2) OUT_2_1();
     1f0:	12 30       	cpi	r17, 0x02	; 2
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <check_temp+0x98>
     1f4:	5b 9a       	sbi	0x0b, 3	; 11
        MAX7219_setCommaPos(1, 1);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	61 e0       	ldi	r22, 0x01	; 1
     1fa:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
	  }
    }
  }
}
     1fe:	1f 91       	pop	r17
     200:	08 95       	ret

00000202 <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     202:	80 91 a8 01 	lds	r24, 0x01A8
     206:	88 23       	and	r24, r24
     208:	21 f0       	breq	.+8      	; 0x212 <DS18x20_scan+0x10>
    dscount--;
     20a:	81 50       	subi	r24, 0x01	; 1
     20c:	80 93 a8 01 	sts	0x01A8, r24
	return;
     210:	08 95       	ret
  }
  switch(ds_state) {
     212:	80 91 b3 01 	lds	r24, 0x01B3
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	b1 f0       	breq	.+44     	; 0x246 <DS18x20_scan+0x44>
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	18 f0       	brcs	.+6      	; 0x224 <DS18x20_scan+0x22>
     21e:	82 30       	cpi	r24, 0x02	; 2
     220:	b1 f5       	brne	.+108    	; 0x28e <DS18x20_scan+0x8c>
     222:	24 c0       	rjmp	.+72     	; 0x26c <DS18x20_scan+0x6a>
    case 0:
      ds18x20ConvertTemp(1);
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     230:	83 e0       	ldi	r24, 0x03	; 3
     232:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
	  dscount = 10;
     23c:	8a e0       	ldi	r24, 0x0A	; 10
     23e:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 1;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	10 c0       	rjmp	.+32     	; 0x266 <DS18x20_scan+0x64>
    break;
    case 1:
      ds18x20ReadStratchPad(1);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     258:	84 e0       	ldi	r24, 0x04	; 4
     25a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
	  dscount = 10;
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 2;
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	80 93 b3 01 	sts	0x01B3, r24
    break;
     26a:	08 95       	ret
    case 2:
      ds18x20GetTemp(1);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
      ds18x20GetTemp(2);
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
      ds18x20GetTemp(3);
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
      ds18x20GetTemp(4);
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
	  dscount = SCAN_TIME / 100;
     284:	84 e1       	ldi	r24, 0x14	; 20
     286:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 0;
     28a:	10 92 b3 01 	sts	0x01B3, r1
     28e:	08 95       	ret

00000290 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     290:	89 3c       	cpi	r24, 0xC9	; 201
     292:	29 f0       	breq	.+10     	; 0x29e <events_default+0xe>
     294:	8c 3c       	cpi	r24, 0xCC	; 204
     296:	71 f0       	breq	.+28     	; 0x2b4 <events_default+0x24>
     298:	88 3c       	cpi	r24, 0xC8	; 200
     29a:	71 f4       	brne	.+28     	; 0x2b8 <events_default+0x28>
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 91 32 01 	lds	r25, 0x0132
     2a4:	91 11       	cpse	r25, r1
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	80 93 32 01 	sts	0x0132, r24
    break;
     2ac:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     2ae:	0e 94 ca 07 	call	0xf94	; 0xf94 <KBD_scan>
    break;
     2b2:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     2b4:	0e 94 01 01 	call	0x202	; 0x202 <DS18x20_scan>
     2b8:	08 95       	ret

000002ba <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
     2ba:	85 36       	cpi	r24, 0x65	; 101
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <run_start+0x6>
     2be:	b9 c0       	rjmp	.+370    	; 0x432 <run_start+0x178>
     2c0:	87 36       	cpi	r24, 0x67	; 103
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <run_start+0xc>
     2c4:	8f c0       	rjmp	.+286    	; 0x3e4 <run_start+0x12a>
     2c6:	84 36       	cpi	r24, 0x64	; 100
     2c8:	09 f0       	breq	.+2      	; 0x2cc <run_start+0x12>
     2ca:	ee c0       	rjmp	.+476    	; 0x4a8 <run_start+0x1ee>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	71 e0       	ldi	r23, 0x01	; 1
     2d2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	6d e2       	ldi	r22, 0x2D	; 45
     2da:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
	  ds_count = 0;
     2de:	10 92 a6 01 	sts	0x01A6, r1
      ds18x20IsOnBus(1);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 85 0a 	call	0x150a	; 0x150a <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	0e 94 85 0a 	call	0x150a	; 0x150a <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     2ee:	83 e0       	ldi	r24, 0x03	; 3
     2f0:	0e 94 85 0a 	call	0x150a	; 0x150a <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     2f4:	84 e0       	ldi	r24, 0x04	; 4
     2f6:	0e 94 85 0a 	call	0x150a	; 0x150a <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	41 f4       	brne	.+16     	; 0x314 <run_start+0x5a>
     304:	80 91 a6 01 	lds	r24, 0x01A6
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	80 93 a6 01 	sts	0x01A6, r24
     30e:	85 e0       	ldi	r24, 0x05	; 5
     310:	61 e3       	ldi	r22, 0x31	; 49
     312:	02 c0       	rjmp	.+4      	; 0x318 <run_start+0x5e>
     314:	85 e0       	ldi	r24, 0x05	; 5
     316:	60 e2       	ldi	r22, 0x20	; 32
     318:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	41 f4       	brne	.+16     	; 0x336 <run_start+0x7c>
     326:	80 91 a6 01 	lds	r24, 0x01A6
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 93 a6 01 	sts	0x01A6, r24
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	61 e3       	ldi	r22, 0x31	; 49
     334:	02 c0       	rjmp	.+4      	; 0x33a <run_start+0x80>
     336:	86 e0       	ldi	r24, 0x06	; 6
     338:	60 e2       	ldi	r22, 0x20	; 32
     33a:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	41 f4       	brne	.+16     	; 0x358 <run_start+0x9e>
     348:	80 91 a6 01 	lds	r24, 0x01A6
     34c:	8f 5f       	subi	r24, 0xFF	; 255
     34e:	80 93 a6 01 	sts	0x01A6, r24
     352:	87 e0       	ldi	r24, 0x07	; 7
     354:	61 e3       	ldi	r22, 0x31	; 49
     356:	02 c0       	rjmp	.+4      	; 0x35c <run_start+0xa2>
     358:	87 e0       	ldi	r24, 0x07	; 7
     35a:	60 e2       	ldi	r22, 0x20	; 32
     35c:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     360:	84 e0       	ldi	r24, 0x04	; 4
     362:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	41 f4       	brne	.+16     	; 0x37a <run_start+0xc0>
     36a:	80 91 a6 01 	lds	r24, 0x01A6
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	80 93 a6 01 	sts	0x01A6, r24
     374:	88 e0       	ldi	r24, 0x08	; 8
     376:	61 e3       	ldi	r22, 0x31	; 49
     378:	02 c0       	rjmp	.+4      	; 0x37e <run_start+0xc4>
     37a:	88 e0       	ldi	r24, 0x08	; 8
     37c:	60 e2       	ldi	r22, 0x20	; 32
     37e:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
	  if (ds_count == 0) {
     382:	60 91 a6 01 	lds	r22, 0x01A6
     386:	66 23       	and	r22, r22
     388:	21 f4       	brne	.+8      	; 0x392 <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     38a:	84 e6       	ldi	r24, 0x64	; 100
     38c:	68 eb       	ldi	r22, 0xB8	; 184
     38e:	7b e0       	ldi	r23, 0x0B	; 11
     390:	4b c0       	rjmp	.+150    	; 0x428 <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	41 e0       	ldi	r20, 0x01	; 1
     398:	20 e2       	ldi	r18, 0x20	; 32
     39a:	0e 94 bf 09 	call	0x137e	; 0x137e <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	11 f4       	brne	.+4      	; 0x3ac <run_start+0xf2>
     3a8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	19 f4       	brne	.+6      	; 0x3bc <run_start+0x102>
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	19 f4       	brne	.+6      	; 0x3cc <run_start+0x112>
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	19 f4       	brne	.+6      	; 0x3dc <run_start+0x122>
     3d6:	84 e0       	ldi	r24, 0x04	; 4
     3d8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     3dc:	87 e6       	ldi	r24, 0x67	; 103
     3de:	68 ee       	ldi	r22, 0xE8	; 232
     3e0:	73 e0       	ldi	r23, 0x03	; 3
     3e2:	22 c0       	rjmp	.+68     	; 0x428 <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <run_start+0x138>
     3ee:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	19 f4       	brne	.+6      	; 0x402 <run_start+0x148>
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	19 f4       	brne	.+6      	; 0x412 <run_start+0x158>
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	19 f4       	brne	.+6      	; 0x422 <run_start+0x168>
     41c:	84 e0       	ldi	r24, 0x04	; 4
     41e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     422:	85 e6       	ldi	r24, 0x65	; 101
     424:	64 e6       	ldi	r22, 0x64	; 100
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
    break;
     430:	08 95       	ret
    case EVENT_RUN_MAIN:
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
     438:	20 91 a9 01 	lds	r18, 0x01A9
     43c:	30 91 aa 01 	lds	r19, 0x01AA
     440:	82 17       	cp	r24, r18
     442:	93 07       	cpc	r25, r19
     444:	24 f4       	brge	.+8      	; 0x44e <run_start+0x194>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 39 01 	sts	0x0139, r24
     44c:	02 c0       	rjmp	.+4      	; 0x452 <run_start+0x198>
     44e:	10 92 39 01 	sts	0x0139, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
     458:	20 91 ad 01 	lds	r18, 0x01AD
     45c:	30 91 ae 01 	lds	r19, 0x01AE
     460:	82 17       	cp	r24, r18
     462:	93 07       	cpc	r25, r19
     464:	24 f4       	brge	.+8      	; 0x46e <run_start+0x1b4>
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 3a 01 	sts	0x013A, r24
     46c:	02 c0       	rjmp	.+4      	; 0x472 <run_start+0x1b8>
     46e:	10 92 3a 01 	sts	0x013A, r1
      check_temp(chanel);
     472:	80 91 3b 01 	lds	r24, 0x013B
     476:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
      MAX7219_clearDisplay();
     47a:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     47e:	8c ec       	ldi	r24, 0xCC	; 204
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	44 e6       	ldi	r20, 0x64	; 100
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     48c:	88 e6       	ldi	r24, 0x68	; 104
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
      SET_STATE(run_main);
     49a:	8c e5       	ldi	r24, 0x5C	; 92
     49c:	94 e0       	ldi	r25, 0x04	; 4
     49e:	90 93 3e 01 	sts	0x013E, r25
     4a2:	80 93 3d 01 	sts	0x013D, r24
    break;
     4a6:	08 95       	ret
	default:
	  events_default(event);
     4a8:	0e 94 48 01 	call	0x290	; 0x290 <events_default>
     4ac:	08 95       	ret

000004ae <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     4ae:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     4b0:	80 e1       	ldi	r24, 0x10	; 16
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 97 0c 	call	0x192e	; 0x192e <__eewr_word_m328p>
}
     4b8:	08 95       	ret

000004ba <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     4ba:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     4bc:	80 e2       	ldi	r24, 0x20	; 32
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 97 0c 	call	0x192e	; 0x192e <__eewr_word_m328p>
}
     4c4:	08 95       	ret

000004c6 <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     4c6:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     4c8:	82 e1       	ldi	r24, 0x12	; 18
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 97 0c 	call	0x192e	; 0x192e <__eewr_word_m328p>
}
     4d0:	08 95       	ret

000004d2 <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     4d2:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     4d4:	82 e2       	ldi	r24, 0x22	; 34
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 97 0c 	call	0x192e	; 0x192e <__eewr_word_m328p>
}
     4dc:	08 95       	ret

000004de <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     4e6:	80 93 a9 01 	sts	0x01A9, r24
     4ea:	90 93 aa 01 	sts	0x01AA, r25
  return (int16_t)tu;
}
     4ee:	08 95       	ret

000004f0 <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     4f0:	82 e1       	ldi	r24, 0x12	; 18
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     4f8:	80 93 ab 01 	sts	0x01AB, r24
     4fc:	90 93 ac 01 	sts	0x01AC, r25
  return (int16_t)tu;
}
     500:	08 95       	ret

00000502 <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     502:	80 e2       	ldi	r24, 0x20	; 32
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     50a:	80 93 ad 01 	sts	0x01AD, r24
     50e:	90 93 ae 01 	sts	0x01AE, r25
  return (int16_t)tu;
}
     512:	08 95       	ret

00000514 <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     514:	82 e2       	ldi	r24, 0x22	; 34
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     51c:	80 93 af 01 	sts	0x01AF, r24
     520:	90 93 b0 01 	sts	0x01B0, r25
  return (int16_t)tu;
}
     524:	08 95       	ret

00000526 <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     526:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     528:	80 e3       	ldi	r24, 0x30	; 48
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 89 0c 	call	0x1912	; 0x1912 <__eewr_byte_m328p>
}
     530:	08 95       	ret

00000532 <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     532:	80 e3       	ldi	r24, 0x30	; 48
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__eerd_byte_m328p>
     53a:	80 93 36 01 	sts	0x0136, r24
  if (brightnes > 15) brightnes = 2;
     53e:	80 31       	cpi	r24, 0x10	; 16
     540:	18 f0       	brcs	.+6      	; 0x548 <load_brightnes+0x16>
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	80 93 36 01 	sts	0x0136, r24
  return brightnes;
}
     548:	80 91 36 01 	lds	r24, 0x0136
     54c:	08 95       	ret

0000054e <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     54e:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     550:	84 e1       	ldi	r24, 0x14	; 20
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 89 0c 	call	0x1912	; 0x1912 <__eewr_byte_m328p>
}
     558:	08 95       	ret

0000055a <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     55a:	84 e1       	ldi	r24, 0x14	; 20
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__eerd_byte_m328p>
     562:	81 11       	cpse	r24, r1
     564:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     566:	80 93 37 01 	sts	0x0137, r24
  return t;
}
     56a:	08 95       	ret

0000056c <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     56c:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     56e:	84 e2       	ldi	r24, 0x24	; 36
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 89 0c 	call	0x1912	; 0x1912 <__eewr_byte_m328p>
}
     576:	08 95       	ret

00000578 <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     578:	84 e2       	ldi	r24, 0x24	; 36
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__eerd_byte_m328p>
     580:	81 11       	cpse	r24, r1
     582:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     584:	80 93 38 01 	sts	0x0138, r24
  return t;
}
     588:	08 95       	ret

0000058a <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     58a:	e0 91 b1 01 	lds	r30, 0x01B1
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	e6 5d       	subi	r30, 0xD6	; 214
     596:	fe 4f       	sbci	r31, 0xFE	; 254
     598:	60 81       	ld	r22, Z
     59a:	71 81       	ldd	r23, Z+1	; 0x01
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
}
     5a2:	08 95       	ret

000005a4 <run_error>:
  }    
}
//=============================================================================
void run_error(unsigned char event)
{
  switch(event) {
     5a4:	8e 31       	cpi	r24, 0x1E	; 30
     5a6:	09 f4       	brne	.+2      	; 0x5aa <run_error+0x6>
     5a8:	3e c0       	rjmp	.+124    	; 0x626 <run_error+0x82>
     5aa:	8f 31       	cpi	r24, 0x1F	; 31
     5ac:	30 f4       	brcc	.+12     	; 0x5ba <run_error+0x16>
     5ae:	8a 30       	cpi	r24, 0x0A	; 10
     5b0:	d1 f1       	breq	.+116    	; 0x626 <run_error+0x82>
     5b2:	84 31       	cpi	r24, 0x14	; 20
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <run_error+0x14>
     5b6:	44 c0       	rjmp	.+136    	; 0x640 <run_error+0x9c>
     5b8:	36 c0       	rjmp	.+108    	; 0x626 <run_error+0x82>
     5ba:	89 3c       	cpi	r24, 0xC9	; 201
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <run_error+0x22>
     5be:	8a 3c       	cpi	r24, 0xCA	; 202
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <run_error+0x20>
     5c2:	3e c0       	rjmp	.+124    	; 0x640 <run_error+0x9c>
     5c4:	1d c0       	rjmp	.+58     	; 0x600 <run_error+0x5c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 91 32 01 	lds	r25, 0x0132
     5cc:	91 11       	cpse	r25, r1
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	80 93 32 01 	sts	0x0132, r24
	  if (error_cnt > 0) error_cnt--; else {
     5d4:	80 91 35 01 	lds	r24, 0x0135
     5d8:	88 23       	and	r24, r24
     5da:	21 f0       	breq	.+8      	; 0x5e4 <run_error+0x40>
     5dc:	81 50       	subi	r24, 0x01	; 1
     5de:	80 93 35 01 	sts	0x0135, r24
     5e2:	08 95       	ret
        wait_menu = WAIT_MENU_TIME;
     5e4:	84 e1       	ldi	r24, 0x14	; 20
     5e6:	80 93 34 01 	sts	0x0134, r24
        SET_STATE(run_menu);
     5ea:	8e e8       	ldi	r24, 0x8E	; 142
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	90 93 3e 01 	sts	0x013E, r25
     5f2:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_clearDisplay();
     5f6:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        show_menu();
     5fa:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
     5fe:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 91 33 01 	lds	r25, 0x0133
     606:	91 11       	cpse	r25, r1
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     60e:	88 23       	and	r24, r24
     610:	21 f0       	breq	.+8      	; 0x61a <run_error+0x76>
        MAX7219_printStr(1, "Err ");
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	71 e0       	ldi	r23, 0x01	; 1
     618:	03 c0       	rjmp	.+6      	; 0x620 <run_error+0x7c>
	  } else {
        MAX7219_printStr(1, "    ");
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	68 e0       	ldi	r22, 0x08	; 8
     61e:	71 e0       	ldi	r23, 0x01	; 1
     620:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
     624:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     626:	84 e1       	ldi	r24, 0x14	; 20
     628:	80 93 34 01 	sts	0x0134, r24
      SET_STATE(run_menu);
     62c:	8e e8       	ldi	r24, 0x8E	; 142
     62e:	93 e0       	ldi	r25, 0x03	; 3
     630:	90 93 3e 01 	sts	0x013E, r25
     634:	80 93 3d 01 	sts	0x013D, r24
      MAX7219_clearDisplay();
     638:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
      show_menu();
     63c:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
     640:	08 95       	ret

00000642 <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     642:	8e 31       	cpi	r24, 0x1E	; 30
     644:	09 f4       	brne	.+2      	; 0x648 <run_set_brightnes+0x6>
     646:	3f c0       	rjmp	.+126    	; 0x6c6 <run_set_brightnes+0x84>
     648:	8f 31       	cpi	r24, 0x1F	; 31
     64a:	38 f4       	brcc	.+14     	; 0x65a <run_set_brightnes+0x18>
     64c:	8a 30       	cpi	r24, 0x0A	; 10
     64e:	09 f4       	brne	.+2      	; 0x652 <run_set_brightnes+0x10>
     650:	54 c0       	rjmp	.+168    	; 0x6fa <run_set_brightnes+0xb8>
     652:	84 31       	cpi	r24, 0x14	; 20
     654:	09 f0       	breq	.+2      	; 0x658 <run_set_brightnes+0x16>
     656:	5f c0       	rjmp	.+190    	; 0x716 <run_set_brightnes+0xd4>
     658:	3f c0       	rjmp	.+126    	; 0x6d8 <run_set_brightnes+0x96>
     65a:	89 3c       	cpi	r24, 0xC9	; 201
     65c:	21 f0       	breq	.+8      	; 0x666 <run_set_brightnes+0x24>
     65e:	8a 3c       	cpi	r24, 0xCA	; 202
     660:	09 f0       	breq	.+2      	; 0x664 <run_set_brightnes+0x22>
     662:	59 c0       	rjmp	.+178    	; 0x716 <run_set_brightnes+0xd4>
     664:	18 c0       	rjmp	.+48     	; 0x696 <run_set_brightnes+0x54>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 91 32 01 	lds	r25, 0x0132
     66c:	91 11       	cpse	r25, r1
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     674:	80 91 34 01 	lds	r24, 0x0134
     678:	88 23       	and	r24, r24
     67a:	21 f0       	breq	.+8      	; 0x684 <run_set_brightnes+0x42>
     67c:	81 50       	subi	r24, 0x01	; 1
     67e:	80 93 34 01 	sts	0x0134, r24
     682:	08 95       	ret
        MAX7219_clearDisplay();
     684:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     688:	8e e8       	ldi	r24, 0x8E	; 142
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	90 93 3e 01 	sts	0x013E, r25
     690:	80 93 3d 01 	sts	0x013D, r24
     694:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 91 33 01 	lds	r25, 0x0133
     69c:	91 11       	cpse	r25, r1
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     6a4:	88 23       	and	r24, r24
     6a6:	49 f0       	breq	.+18     	; 0x6ba <run_set_brightnes+0x78>
        MAX7219_printNum(4, brightnes, 2, ' ');
     6a8:	60 91 36 01 	lds	r22, 0x0136
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	42 e0       	ldi	r20, 0x02	; 2
     6b2:	20 e2       	ldi	r18, 0x20	; 32
     6b4:	0e 94 bf 09 	call	0x137e	; 0x137e <MAX7219_printNum>
     6b8:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	6d e0       	ldi	r22, 0x0D	; 13
     6be:	71 e0       	ldi	r23, 0x01	; 1
     6c0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
     6c4:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     6c6:	84 e1       	ldi	r24, 0x14	; 20
     6c8:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes > 0) {
     6cc:	60 91 36 01 	lds	r22, 0x0136
     6d0:	66 23       	and	r22, r22
     6d2:	19 f1       	breq	.+70     	; 0x71a <run_set_brightnes+0xd8>
	    brightnes--;
     6d4:	61 50       	subi	r22, 0x01	; 1
     6d6:	19 c0       	rjmp	.+50     	; 0x70a <run_set_brightnes+0xc8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     6d8:	80 93 34 01 	sts	0x0134, r24
	  save_brightnes(brightnes);
     6dc:	80 91 36 01 	lds	r24, 0x0136
     6e0:	0e 94 93 02 	call	0x526	; 0x526 <save_brightnes>
      MAX7219_clearDisplay();
     6e4:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     6e8:	8e e8       	ldi	r24, 0x8E	; 142
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	90 93 3e 01 	sts	0x013E, r25
     6f0:	80 93 3d 01 	sts	0x013D, r24
      show_menu();
     6f4:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
    break;
     6f8:	08 95       	ret
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     6fa:	84 e1       	ldi	r24, 0x14	; 20
     6fc:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes < 15) {
     700:	60 91 36 01 	lds	r22, 0x0136
     704:	6f 30       	cpi	r22, 0x0F	; 15
     706:	48 f4       	brcc	.+18     	; 0x71a <run_set_brightnes+0xd8>
	    brightnes++;
     708:	6f 5f       	subi	r22, 0xFF	; 255
     70a:	60 93 36 01 	sts	0x0136, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     70e:	8a e0       	ldi	r24, 0x0A	; 10
     710:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
     714:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     716:	0e 94 48 01 	call	0x290	; 0x290 <events_default>
     71a:	08 95       	ret

0000071c <run_menu>:
    break;
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
     71c:	1f 93       	push	r17
  switch(event) {
     71e:	8e 31       	cpi	r24, 0x1E	; 30
     720:	09 f4       	brne	.+2      	; 0x724 <run_menu+0x8>
     722:	b1 c0       	rjmp	.+354    	; 0x886 <run_menu+0x16a>
     724:	8f 31       	cpi	r24, 0x1F	; 31
     726:	30 f4       	brcc	.+12     	; 0x734 <run_menu+0x18>
     728:	8a 30       	cpi	r24, 0x0A	; 10
     72a:	41 f1       	breq	.+80     	; 0x77c <run_menu+0x60>
     72c:	84 31       	cpi	r24, 0x14	; 20
     72e:	09 f0       	breq	.+2      	; 0x732 <run_menu+0x16>
     730:	bf c0       	rjmp	.+382    	; 0x8b0 <run_menu+0x194>
     732:	38 c0       	rjmp	.+112    	; 0x7a4 <run_menu+0x88>
     734:	89 36       	cpi	r24, 0x69	; 105
     736:	09 f4       	brne	.+2      	; 0x73a <run_menu+0x1e>
     738:	70 c0       	rjmp	.+224    	; 0x81a <run_menu+0xfe>
     73a:	89 3c       	cpi	r24, 0xC9	; 201
     73c:	09 f0       	breq	.+2      	; 0x740 <run_menu+0x24>
     73e:	b8 c0       	rjmp	.+368    	; 0x8b0 <run_menu+0x194>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 91 32 01 	lds	r25, 0x0132
     746:	91 11       	cpse	r25, r1
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     74e:	80 91 34 01 	lds	r24, 0x0134
     752:	88 23       	and	r24, r24
     754:	21 f0       	breq	.+8      	; 0x75e <run_menu+0x42>
     756:	81 50       	subi	r24, 0x01	; 1
     758:	80 93 34 01 	sts	0x0134, r24
     75c:	07 c0       	rjmp	.+14     	; 0x76c <run_menu+0x50>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     75e:	89 e6       	ldi	r24, 0x69	; 105
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     76c:	80 91 b1 01 	lds	r24, 0x01B1
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	f1 f1       	breq	.+124    	; 0x7f0 <run_menu+0xd4>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	6d e0       	ldi	r22, 0x0D	; 13
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	11 c0       	rjmp	.+34     	; 0x79e <run_menu+0x82>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     77c:	84 e1       	ldi	r24, 0x14	; 20
     77e:	80 93 34 01 	sts	0x0134, r24
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     782:	80 91 b1 01 	lds	r24, 0x01B1
     786:	88 23       	and	r24, r24
     788:	11 f0       	breq	.+4      	; 0x78e <run_menu+0x72>
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	01 c0       	rjmp	.+2      	; 0x790 <run_menu+0x74>
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	80 93 b1 01 	sts	0x01B1, r24
	  show_menu();
     794:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
      MAX7219_printStr(5, "    ");
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	68 e0       	ldi	r22, 0x08	; 8
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
    break;
     7a2:	88 c0       	rjmp	.+272    	; 0x8b4 <run_menu+0x198>
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     7a4:	80 93 34 01 	sts	0x0134, r24
	  n_edit = 0;
     7a8:	10 92 b2 01 	sts	0x01B2, r1
      MAX7219_clearDisplay();
     7ac:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
	  if (m_menu == MM_D1) {
     7b0:	80 91 b1 01 	lds	r24, 0x01B1
     7b4:	88 23       	and	r24, r24
     7b6:	29 f4       	brne	.+10     	; 0x7c2 <run_menu+0xa6>
		KBD_set_type(0);
     7b8:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
        SET_STATE(run_set_1);
     7bc:	8b e6       	ldi	r24, 0x6B	; 107
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <run_menu+0xb4>
	  } else if (m_menu == MM_D2) {
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	51 f4       	brne	.+20     	; 0x7da <run_menu+0xbe>
		KBD_set_type(0);
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
        SET_STATE(run_set_2);
     7cc:	8c e7       	ldi	r24, 0x7C	; 124
     7ce:	95 e0       	ldi	r25, 0x05	; 5
     7d0:	90 93 3e 01 	sts	0x013E, r25
     7d4:	80 93 3d 01 	sts	0x013D, r24
     7d8:	6d c0       	rjmp	.+218    	; 0x8b4 <run_menu+0x198>
	  } else if (m_menu == MM_BRIGHTNES) {
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	91 f4       	brne	.+36     	; 0x802 <run_menu+0xe6>
		KBD_set_type(1);
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
        SET_STATE(run_set_brightnes);
     7e4:	81 e2       	ldi	r24, 0x21	; 33
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	90 93 3e 01 	sts	0x013E, r25
     7ec:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     7f0:	60 91 36 01 	lds	r22, 0x0136
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	42 e0       	ldi	r20, 0x02	; 2
     7fa:	20 e2       	ldi	r18, 0x20	; 32
     7fc:	0e 94 bf 09 	call	0x137e	; 0x137e <MAX7219_printNum>
     800:	59 c0       	rjmp	.+178    	; 0x8b4 <run_menu+0x198>
	  } else if (m_menu == MM_END) {
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	09 f0       	breq	.+2      	; 0x808 <run_menu+0xec>
     806:	56 c0       	rjmp	.+172    	; 0x8b4 <run_menu+0x198>
		KBD_set_type(1);
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     80e:	89 e6       	ldi	r24, 0x69	; 105
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	33 c0       	rjmp	.+102    	; 0x880 <run_menu+0x164>
	  }
    break;
    case EVENT_EXIT_MENU:
      MAX7219_clearDisplay();
     81a:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
	  chanel = 1;
     81e:	11 e0       	ldi	r17, 0x01	; 1
     820:	10 93 3b 01 	sts	0x013B, r17
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
     82a:	20 91 a9 01 	lds	r18, 0x01A9
     82e:	30 91 aa 01 	lds	r19, 0x01AA
     832:	82 17       	cp	r24, r18
     834:	93 07       	cpc	r25, r19
     836:	1c f4       	brge	.+6      	; 0x83e <run_menu+0x122>
     838:	10 93 39 01 	sts	0x0139, r17
     83c:	02 c0       	rjmp	.+4      	; 0x842 <run_menu+0x126>
     83e:	10 92 39 01 	sts	0x0139, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
     848:	20 91 ad 01 	lds	r18, 0x01AD
     84c:	30 91 ae 01 	lds	r19, 0x01AE
     850:	82 17       	cp	r24, r18
     852:	93 07       	cpc	r25, r19
     854:	24 f4       	brge	.+8      	; 0x85e <run_menu+0x142>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	80 93 3a 01 	sts	0x013A, r24
     85c:	02 c0       	rjmp	.+4      	; 0x862 <run_menu+0x146>
     85e:	10 92 3a 01 	sts	0x013A, r1
      check_temp(chanel);
     862:	80 91 3b 01 	lds	r24, 0x013B
     866:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
      SET_STATE(run_main);
     86a:	8c e5       	ldi	r24, 0x5C	; 92
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	90 93 3e 01 	sts	0x013E, r25
     872:	80 93 3d 01 	sts	0x013D, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     876:	88 e6       	ldi	r24, 0x68	; 104
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	40 ed       	ldi	r20, 0xD0	; 208
     87e:	57 e0       	ldi	r21, 0x07	; 7
     880:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
    break;
     884:	17 c0       	rjmp	.+46     	; 0x8b4 <run_menu+0x198>
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     886:	84 e1       	ldi	r24, 0x14	; 20
     888:	80 93 34 01 	sts	0x0134, r24
      MAX7219_printStr(5, "    ");
     88c:	85 e0       	ldi	r24, 0x05	; 5
     88e:	68 e0       	ldi	r22, 0x08	; 8
     890:	71 e0       	ldi	r23, 0x01	; 1
     892:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     896:	80 91 b1 01 	lds	r24, 0x01B1
     89a:	83 30       	cpi	r24, 0x03	; 3
     89c:	20 f4       	brcc	.+8      	; 0x8a6 <run_menu+0x18a>
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	80 93 b1 01 	sts	0x01B1, r24
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <run_menu+0x18e>
     8a6:	10 92 b1 01 	sts	0x01B1, r1
	  show_menu();
     8aa:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
    break;
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <run_menu+0x198>
	default:
	  events_default(event);
     8b0:	0e 94 48 01 	call	0x290	; 0x290 <events_default>
    break;
  }    
}
     8b4:	1f 91       	pop	r17
     8b6:	08 95       	ret

000008b8 <run_main>:
    }
  }
}
//=============================================================================
void run_main(unsigned char event)
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	0f 92       	push	r0
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
  switch(event) {
     8c2:	84 31       	cpi	r24, 0x14	; 20
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <run_main+0x10>
     8c6:	7f c0       	rjmp	.+254    	; 0x9c6 <__stack+0xc7>
     8c8:	85 31       	cpi	r24, 0x15	; 21
     8ca:	20 f4       	brcc	.+8      	; 0x8d4 <run_main+0x1c>
     8cc:	8a 30       	cpi	r24, 0x0A	; 10
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <run_main+0x1a>
     8d0:	8b c0       	rjmp	.+278    	; 0x9e8 <__stack+0xe9>
     8d2:	5c c0       	rjmp	.+184    	; 0x98c <__stack+0x8d>
     8d4:	8e 31       	cpi	r24, 0x1E	; 30
     8d6:	09 f4       	brne	.+2      	; 0x8da <run_main+0x22>
     8d8:	59 c0       	rjmp	.+178    	; 0x98c <__stack+0x8d>
     8da:	88 36       	cpi	r24, 0x68	; 104
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <run_main+0x28>
     8de:	84 c0       	rjmp	.+264    	; 0x9e8 <__stack+0xe9>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     8e0:	80 91 3b 01 	lds	r24, 0x013B
     8e4:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	c9 f5       	brne	.+114    	; 0x95e <__stack+0x5f>
	    MAX7219_printChar(3, 'd');
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	64 e6       	ldi	r22, 0x64	; 100
     8f0:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     8f4:	60 91 3b 01 	lds	r22, 0x013B
     8f8:	60 5d       	subi	r22, 0xD0	; 208
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     900:	80 91 3b 01 	lds	r24, 0x013B
     904:	0e 94 10 0c 	call	0x1820	; 0x1820 <ds18x20GetTemp>
     908:	bc 01       	movw	r22, r24
     90a:	85 e0       	ldi	r24, 0x05	; 5
     90c:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     910:	e0 91 3b 01 	lds	r30, 0x013B
     914:	e3 30       	cpi	r30, 0x03	; 3
     916:	70 f4       	brcc	.+28     	; 0x934 <__stack+0x35>
		  if (types[chanel - 1]) {
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	ea 5c       	subi	r30, 0xCA	; 202
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	80 81       	ld	r24, Z
     920:	88 23       	and	r24, r24
     922:	19 f0       	breq	.+6      	; 0x92a <__stack+0x2b>
	        MAX7219_printChar(1, 'H');
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	68 e4       	ldi	r22, 0x48	; 72
     928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
		  } else {
	        MAX7219_printChar(1, 'F');
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	66 e4       	ldi	r22, 0x46	; 70
     92e:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
     932:	08 c0       	rjmp	.+16     	; 0x944 <__stack+0x45>
		  }
		} else {
	      MAX7219_printChar(1, ' ');
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	60 e2       	ldi	r22, 0x20	; 32
     938:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	60 91 a7 01 	lds	r22, 0x01A7
     952:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
        check_temp(chanel);
     956:	80 91 3b 01 	lds	r24, 0x013B
     95a:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
	  }
      if (!one_sensor_flag) {
     95e:	80 91 a7 01 	lds	r24, 0x01A7
     962:	88 23       	and	r24, r24
     964:	49 f4       	brne	.+18     	; 0x978 <__stack+0x79>
        if (chanel < 4) {
     966:	80 91 3b 01 	lds	r24, 0x013B
     96a:	84 30       	cpi	r24, 0x04	; 4
     96c:	10 f4       	brcc	.+4      	; 0x972 <__stack+0x73>
          chanel++; 
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	01 c0       	rjmp	.+2      	; 0x974 <__stack+0x75>
	    } else { 
	      chanel = 1;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 3b 01 	sts	0x013B, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     978:	80 91 3b 01 	lds	r24, 0x013B
     97c:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetDevCount>
     980:	88 23       	and	r24, r24
     982:	c9 f0       	breq	.+50     	; 0x9b6 <__stack+0xb7>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     984:	88 e6       	ldi	r24, 0x68	; 104
     986:	60 ed       	ldi	r22, 0xD0	; 208
     988:	77 e0       	ldi	r23, 0x07	; 7
     98a:	18 c0       	rjmp	.+48     	; 0x9bc <__stack+0xbd>
	  }
    break;
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     98c:	88 e6       	ldi	r24, 0x68	; 104
     98e:	0e 94 a5 08 	call	0x114a	; 0x114a <RTOS_deleteTask>
      one_sensor_flag = !one_sensor_flag;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 91 a7 01 	lds	r25, 0x01A7
     998:	91 11       	cpse	r25, r1
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	80 93 a7 01 	sts	0x01A7, r24
	  if (one_sensor_flag) {
     9a0:	88 23       	and	r24, r24
     9a2:	49 f0       	breq	.+18     	; 0x9b6 <__stack+0xb7>
	    if (chanel > 1) chanel--; else chanel = 4;
     9a4:	80 91 3b 01 	lds	r24, 0x013B
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	10 f0       	brcs	.+4      	; 0x9b0 <__stack+0xb1>
     9ac:	81 50       	subi	r24, 0x01	; 1
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	84 e0       	ldi	r24, 0x04	; 4
     9b2:	80 93 3b 01 	sts	0x013B, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     9b6:	88 e6       	ldi	r24, 0x68	; 104
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
    break;
     9c4:	13 c0       	rjmp	.+38     	; 0x9ec <__stack+0xed>
    case EVENT_KEY_SET:
	  n_edit = 0;
     9c6:	10 92 b2 01 	sts	0x01B2, r1
      MAX7219_clearDisplay();
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     9d0:	2e e8       	ldi	r18, 0x8E	; 142
     9d2:	33 e0       	ldi	r19, 0x03	; 3
     9d4:	30 93 3e 01 	sts	0x013E, r19
     9d8:	20 93 3d 01 	sts	0x013D, r18
      wait_menu = WAIT_MENU_TIME;
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	80 93 34 01 	sts	0x0134, r24
	  show_menu();
     9e2:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
    break;
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__stack+0xed>
	default:
	  events_default(event);
     9e8:	0e 94 48 01 	call	0x290	; 0x290 <events_default>
    break;
  }    
}
     9ec:	0f 90       	pop	r0
     9ee:	cf 91       	pop	r28
     9f0:	df 91       	pop	r29
     9f2:	08 95       	ret

000009f4 <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     9f4:	1f 93       	push	r17
     9f6:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     9f8:	80 91 b2 01 	lds	r24, 0x01B2
     9fc:	88 23       	and	r24, r24
     9fe:	61 f5       	brne	.+88     	; 0xa58 <show_set_temp+0x64>
    if (blink05) {
     a00:	80 91 33 01 	lds	r24, 0x0133
     a04:	88 23       	and	r24, r24
     a06:	91 f0       	breq	.+36     	; 0xa2c <show_set_temp+0x38>
      print_temperature(1, temps[temp][0]);
     a08:	e1 2f       	mov	r30, r17
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e7 55       	subi	r30, 0x57	; 87
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <show_set_temp+0x42>
    } else {
      MAX7219_printStr(1, "    ");
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	68 e0       	ldi	r22, 0x08	; 8
     a30:	71 e0       	ldi	r23, 0x01	; 1
     a32:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     a36:	e1 2f       	mov	r30, r17
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e7 55       	subi	r30, 0x57	; 87
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	62 81       	ldd	r22, Z+2	; 0x02
     a48:	73 81       	ldd	r23, Z+3	; 0x03
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     a50:	87 e0       	ldi	r24, 0x07	; 7
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     a58:	80 91 b2 01 	lds	r24, 0x01B2
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	61 f5       	brne	.+88     	; 0xab8 <show_set_temp+0xc4>
    if (blink05) {
     a60:	80 91 33 01 	lds	r24, 0x0133
     a64:	88 23       	and	r24, r24
     a66:	91 f0       	breq	.+36     	; 0xa8c <show_set_temp+0x98>
      print_temperature(5, temps[temp][1]);
     a68:	e1 2f       	mov	r30, r17
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	e7 55       	subi	r30, 0x57	; 87
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	62 81       	ldd	r22, Z+2	; 0x02
     a7a:	73 81       	ldd	r23, Z+3	; 0x03
     a7c:	85 e0       	ldi	r24, 0x05	; 5
     a7e:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     a82:	87 e0       	ldi	r24, 0x07	; 7
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <show_set_temp+0xa2>
    } else {
      MAX7219_printStr(5, "    ");
     a8c:	85 e0       	ldi	r24, 0x05	; 5
     a8e:	68 e0       	ldi	r22, 0x08	; 8
     a90:	71 e0       	ldi	r23, 0x01	; 1
     a92:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     a96:	e1 2f       	mov	r30, r17
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	e7 55       	subi	r30, 0x57	; 87
     aa4:	fe 4f       	sbci	r31, 0xFE	; 254
     aa6:	60 81       	ld	r22, Z
     aa8:	71 81       	ldd	r23, Z+1	; 0x01
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     ab8:	80 91 b2 01 	lds	r24, 0x01B2
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	d1 f4       	brne	.+52     	; 0xaf4 <show_set_temp+0x100>
    MAX7219_printStr(1, "out-");
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	61 e1       	ldi	r22, 0x11	; 17
     ac4:	71 e0       	ldi	r23, 0x01	; 1
     ac6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <MAX7219_printStr>
    if (blink05) {
     aca:	80 91 33 01 	lds	r24, 0x0133
     ace:	88 23       	and	r24, r24
     ad0:	69 f0       	breq	.+26     	; 0xaec <show_set_temp+0xf8>
	  if (types[temp]) MAX7219_printChar(5, 'H'); else MAX7219_printChar(5, 'F');
     ad2:	e1 2f       	mov	r30, r17
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	e9 5c       	subi	r30, 0xC9	; 201
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	80 81       	ld	r24, Z
     adc:	88 23       	and	r24, r24
     ade:	19 f0       	breq	.+6      	; 0xae6 <show_set_temp+0xf2>
     ae0:	85 e0       	ldi	r24, 0x05	; 5
     ae2:	68 e4       	ldi	r22, 0x48	; 72
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <show_set_temp+0xfc>
     ae6:	85 e0       	ldi	r24, 0x05	; 5
     ae8:	66 e4       	ldi	r22, 0x46	; 70
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <show_set_temp+0xfc>
    } else {
	  MAX7219_printChar(5, ' ');
     aec:	85 e0       	ldi	r24, 0x05	; 5
     aee:	60 e2       	ldi	r22, 0x20	; 32
     af0:	0e 94 43 0a 	call	0x1486	; 0x1486 <MAX7219_printChar>
	}
  }
}
     af4:	1f 91       	pop	r17
     af6:	08 95       	ret

00000af8 <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     af8:	8e 31       	cpi	r24, 0x1E	; 30
     afa:	b1 f1       	breq	.+108    	; 0xb68 <run_set_2+0x70>
     afc:	8f 31       	cpi	r24, 0x1F	; 31
     afe:	38 f4       	brcc	.+14     	; 0xb0e <run_set_2+0x16>
     b00:	8a 30       	cpi	r24, 0x0A	; 10
     b02:	09 f4       	brne	.+2      	; 0xb06 <run_set_2+0xe>
     b04:	b0 c0       	rjmp	.+352    	; 0xc66 <run_set_2+0x16e>
     b06:	84 31       	cpi	r24, 0x14	; 20
     b08:	09 f0       	breq	.+2      	; 0xb0c <run_set_2+0x14>
     b0a:	e2 c0       	rjmp	.+452    	; 0xcd0 <run_set_2+0x1d8>
     b0c:	50 c0       	rjmp	.+160    	; 0xbae <run_set_2+0xb6>
     b0e:	89 3c       	cpi	r24, 0xC9	; 201
     b10:	31 f0       	breq	.+12     	; 0xb1e <run_set_2+0x26>
     b12:	8a 3c       	cpi	r24, 0xCA	; 202
     b14:	09 f1       	breq	.+66     	; 0xb58 <run_set_2+0x60>
     b16:	89 36       	cpi	r24, 0x69	; 105
     b18:	09 f0       	breq	.+2      	; 0xb1c <run_set_2+0x24>
     b1a:	da c0       	rjmp	.+436    	; 0xcd0 <run_set_2+0x1d8>
     b1c:	65 c0       	rjmp	.+202    	; 0xbe8 <run_set_2+0xf0>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 91 32 01 	lds	r25, 0x0132
     b24:	91 11       	cpse	r25, r1
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     b2c:	80 91 34 01 	lds	r24, 0x0134
     b30:	88 23       	and	r24, r24
     b32:	21 f0       	breq	.+8      	; 0xb3c <run_set_2+0x44>
     b34:	81 50       	subi	r24, 0x01	; 1
     b36:	80 93 34 01 	sts	0x0134, r24
     b3a:	08 95       	ret
	    KBD_set_type(1);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
        MAX7219_clearDisplay();
     b42:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     b46:	8e e8       	ldi	r24, 0x8E	; 142
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	90 93 3e 01 	sts	0x013E, r25
     b4e:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     b52:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
     b56:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 91 33 01 	lds	r25, 0x0133
     b5e:	91 11       	cpse	r25, r1
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	80 93 33 01 	sts	0x0133, r24
     b66:	b0 c0       	rjmp	.+352    	; 0xcc8 <run_set_2+0x1d0>
	  show_set_temp(1);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     b68:	84 e1       	ldi	r24, 0x14	; 20
     b6a:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     b74:	80 91 b2 01 	lds	r24, 0x01B2
     b78:	88 23       	and	r24, r24
     b7a:	59 f4       	brne	.+22     	; 0xb92 <run_set_2+0x9a>
        if (temps[1][0] > -550) {
     b7c:	80 91 ad 01 	lds	r24, 0x01AD
     b80:	90 91 ae 01 	lds	r25, 0x01AE
     b84:	2d ef       	ldi	r18, 0xFD	; 253
     b86:	8b 3d       	cpi	r24, 0xDB	; 219
     b88:	92 07       	cpc	r25, r18
     b8a:	0c f4       	brge	.+2      	; 0xb8e <run_set_2+0x96>
     b8c:	9d c0       	rjmp	.+314    	; 0xcc8 <run_set_2+0x1d0>
		  temps[1][0]--;
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	7d c0       	rjmp	.+250    	; 0xc8c <run_set_2+0x194>
		}
	  }
	  if (n_edit == 1) {
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	09 f0       	breq	.+2      	; 0xb98 <run_set_2+0xa0>
     b96:	8f c0       	rjmp	.+286    	; 0xcb6 <run_set_2+0x1be>
        if (temps[1][1] > -550) {
     b98:	80 91 af 01 	lds	r24, 0x01AF
     b9c:	90 91 b0 01 	lds	r25, 0x01B0
     ba0:	2d ef       	ldi	r18, 0xFD	; 253
     ba2:	8b 3d       	cpi	r24, 0xDB	; 219
     ba4:	92 07       	cpc	r25, r18
     ba6:	0c f4       	brge	.+2      	; 0xbaa <run_set_2+0xb2>
     ba8:	8f c0       	rjmp	.+286    	; 0xcc8 <run_set_2+0x1d0>
		  temps[1][1]--;
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	7f c0       	rjmp	.+254    	; 0xcac <run_set_2+0x1b4>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     bae:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     bb2:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     bb6:	80 91 b2 01 	lds	r24, 0x01B2
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	20 f4       	brcc	.+8      	; 0xbc6 <run_set_2+0xce>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 b2 01 	sts	0x01B2, r24
     bc4:	07 c0       	rjmp	.+14     	; 0xbd4 <run_set_2+0xdc>
     bc6:	89 e6       	ldi	r24, 0x69	; 105
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     bd4:	80 91 b2 01 	lds	r24, 0x01B2
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	11 f4       	brne	.+4      	; 0xbe0 <run_set_2+0xe8>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <run_set_2+0xea>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
     be6:	70 c0       	rjmp	.+224    	; 0xcc8 <run_set_2+0x1d0>
	  show_set_temp(1);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     be8:	84 e1       	ldi	r24, 0x14	; 20
     bea:	80 93 34 01 	sts	0x0134, r24
	  if (temps[1][0] > temps[1][1]) {
     bee:	20 91 ad 01 	lds	r18, 0x01AD
     bf2:	30 91 ae 01 	lds	r19, 0x01AE
     bf6:	80 91 af 01 	lds	r24, 0x01AF
     bfa:	90 91 b0 01 	lds	r25, 0x01B0
     bfe:	82 17       	cp	r24, r18
     c00:	93 07       	cpc	r25, r19
     c02:	f4 f4       	brge	.+60     	; 0xc40 <run_set_2+0x148>
        MAX7219_clearDisplay();
     c04:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     c08:	8e e8       	ldi	r24, 0x8E	; 142
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	90 93 3e 01 	sts	0x013E, r25
     c10:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_2(temps[1][0]);
     c14:	80 91 ad 01 	lds	r24, 0x01AD
     c18:	90 91 ae 01 	lds	r25, 0x01AE
     c1c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <save_max_temp_2>
        save_min_temp_2(temps[1][1]);
     c20:	80 91 af 01 	lds	r24, 0x01AF
     c24:	90 91 b0 01 	lds	r25, 0x01B0
     c28:	0e 94 69 02 	call	0x4d2	; 0x4d2 <save_min_temp_2>
	    save_type_2(types[1]);
     c2c:	80 91 38 01 	lds	r24, 0x0138
     c30:	0e 94 b6 02 	call	0x56c	; 0x56c <save_type_2>
        show_menu();
     c34:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
	    KBD_set_type(1);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
     c3e:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     c40:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        SET_STATE(run_error);
     c44:	82 ed       	ldi	r24, 0xD2	; 210
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	90 93 3e 01 	sts	0x013E, r25
     c4c:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     c50:	85 e0       	ldi	r24, 0x05	; 5
     c52:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     c56:	8a ec       	ldi	r24, 0xCA	; 202
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	44 ef       	ldi	r20, 0xF4	; 244
     c5e:	51 e0       	ldi	r21, 0x01	; 1
     c60:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
     c64:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     c66:	84 e1       	ldi	r24, 0x14	; 20
     c68:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     c72:	80 91 b2 01 	lds	r24, 0x01B2
     c76:	88 23       	and	r24, r24
     c78:	71 f4       	brne	.+28     	; 0xc96 <run_set_2+0x19e>
        if (temps[1][0] < 790) {
     c7a:	80 91 ad 01 	lds	r24, 0x01AD
     c7e:	90 91 ae 01 	lds	r25, 0x01AE
     c82:	23 e0       	ldi	r18, 0x03	; 3
     c84:	86 31       	cpi	r24, 0x16	; 22
     c86:	92 07       	cpc	r25, r18
     c88:	fc f4       	brge	.+62     	; 0xcc8 <run_set_2+0x1d0>
		  temps[1][0]++;
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	90 93 ae 01 	sts	0x01AE, r25
     c90:	80 93 ad 01 	sts	0x01AD, r24
     c94:	19 c0       	rjmp	.+50     	; 0xcc8 <run_set_2+0x1d0>
		}
	  }
	  if (n_edit == 1) {
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	71 f4       	brne	.+28     	; 0xcb6 <run_set_2+0x1be>
        if (temps[1][1] < 790) {
     c9a:	80 91 af 01 	lds	r24, 0x01AF
     c9e:	90 91 b0 01 	lds	r25, 0x01B0
     ca2:	23 e0       	ldi	r18, 0x03	; 3
     ca4:	86 31       	cpi	r24, 0x16	; 22
     ca6:	92 07       	cpc	r25, r18
     ca8:	7c f4       	brge	.+30     	; 0xcc8 <run_set_2+0x1d0>
		  temps[1][1]++;
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	90 93 b0 01 	sts	0x01B0, r25
     cb0:	80 93 af 01 	sts	0x01AF, r24
     cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <run_set_2+0x1d0>
		}
	  }
	  if (n_edit == 2) {
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <run_set_2+0x1d0>
        types[1] = !types[1];
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 91 38 01 	lds	r25, 0x0138
     cc0:	91 11       	cpse	r25, r1
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	80 93 38 01 	sts	0x0138, r24
	  }
	  show_set_temp(1);
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <show_set_temp>
    break;
     cce:	08 95       	ret
	default:
	  events_default(event);
     cd0:	0e 94 48 01 	call	0x290	; 0x290 <events_default>
     cd4:	08 95       	ret

00000cd6 <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     cd6:	8e 31       	cpi	r24, 0x1E	; 30
     cd8:	b1 f1       	breq	.+108    	; 0xd46 <run_set_1+0x70>
     cda:	8f 31       	cpi	r24, 0x1F	; 31
     cdc:	38 f4       	brcc	.+14     	; 0xcec <run_set_1+0x16>
     cde:	8a 30       	cpi	r24, 0x0A	; 10
     ce0:	09 f4       	brne	.+2      	; 0xce4 <run_set_1+0xe>
     ce2:	b0 c0       	rjmp	.+352    	; 0xe44 <run_set_1+0x16e>
     ce4:	84 31       	cpi	r24, 0x14	; 20
     ce6:	09 f0       	breq	.+2      	; 0xcea <run_set_1+0x14>
     ce8:	e2 c0       	rjmp	.+452    	; 0xeae <run_set_1+0x1d8>
     cea:	50 c0       	rjmp	.+160    	; 0xd8c <run_set_1+0xb6>
     cec:	89 3c       	cpi	r24, 0xC9	; 201
     cee:	31 f0       	breq	.+12     	; 0xcfc <run_set_1+0x26>
     cf0:	8a 3c       	cpi	r24, 0xCA	; 202
     cf2:	09 f1       	breq	.+66     	; 0xd36 <run_set_1+0x60>
     cf4:	89 36       	cpi	r24, 0x69	; 105
     cf6:	09 f0       	breq	.+2      	; 0xcfa <run_set_1+0x24>
     cf8:	da c0       	rjmp	.+436    	; 0xeae <run_set_1+0x1d8>
     cfa:	65 c0       	rjmp	.+202    	; 0xdc6 <run_set_1+0xf0>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 91 32 01 	lds	r25, 0x0132
     d02:	91 11       	cpse	r25, r1
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     d0a:	80 91 34 01 	lds	r24, 0x0134
     d0e:	88 23       	and	r24, r24
     d10:	21 f0       	breq	.+8      	; 0xd1a <run_set_1+0x44>
     d12:	81 50       	subi	r24, 0x01	; 1
     d14:	80 93 34 01 	sts	0x0134, r24
     d18:	08 95       	ret
	    KBD_set_type(1);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
        MAX7219_clearDisplay();
     d20:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     d24:	8e e8       	ldi	r24, 0x8E	; 142
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	90 93 3e 01 	sts	0x013E, r25
     d2c:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     d30:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
     d34:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 91 33 01 	lds	r25, 0x0133
     d3c:	91 11       	cpse	r25, r1
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	80 93 33 01 	sts	0x0133, r24
     d44:	b0 c0       	rjmp	.+352    	; 0xea6 <run_set_1+0x1d0>
	  show_set_temp(0);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     d46:	84 e1       	ldi	r24, 0x14	; 20
     d48:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     d52:	80 91 b2 01 	lds	r24, 0x01B2
     d56:	88 23       	and	r24, r24
     d58:	59 f4       	brne	.+22     	; 0xd70 <run_set_1+0x9a>
        if (temps[0][0] > -550) {
     d5a:	80 91 a9 01 	lds	r24, 0x01A9
     d5e:	90 91 aa 01 	lds	r25, 0x01AA
     d62:	2d ef       	ldi	r18, 0xFD	; 253
     d64:	8b 3d       	cpi	r24, 0xDB	; 219
     d66:	92 07       	cpc	r25, r18
     d68:	0c f4       	brge	.+2      	; 0xd6c <run_set_1+0x96>
     d6a:	9d c0       	rjmp	.+314    	; 0xea6 <run_set_1+0x1d0>
		  temps[0][0]--;
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	7d c0       	rjmp	.+250    	; 0xe6a <run_set_1+0x194>
		}
	  }
	  if (n_edit == 1) {
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	09 f0       	breq	.+2      	; 0xd76 <run_set_1+0xa0>
     d74:	8f c0       	rjmp	.+286    	; 0xe94 <run_set_1+0x1be>
        if (temps[0][1] > -550) {
     d76:	80 91 ab 01 	lds	r24, 0x01AB
     d7a:	90 91 ac 01 	lds	r25, 0x01AC
     d7e:	2d ef       	ldi	r18, 0xFD	; 253
     d80:	8b 3d       	cpi	r24, 0xDB	; 219
     d82:	92 07       	cpc	r25, r18
     d84:	0c f4       	brge	.+2      	; 0xd88 <run_set_1+0xb2>
     d86:	8f c0       	rjmp	.+286    	; 0xea6 <run_set_1+0x1d0>
		  temps[0][1]--;
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	7f c0       	rjmp	.+254    	; 0xe8a <run_set_1+0x1b4>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     d8c:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     d90:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     d94:	80 91 b2 01 	lds	r24, 0x01B2
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	20 f4       	brcc	.+8      	; 0xda4 <run_set_1+0xce>
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	80 93 b2 01 	sts	0x01B2, r24
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <run_set_1+0xdc>
     da4:	89 e6       	ldi	r24, 0x69	; 105
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     db2:	80 91 b2 01 	lds	r24, 0x01B2
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	11 f4       	brne	.+4      	; 0xdbe <run_set_1+0xe8>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <run_set_1+0xea>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
     dc4:	70 c0       	rjmp	.+224    	; 0xea6 <run_set_1+0x1d0>
	  show_set_temp(0);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     dc6:	84 e1       	ldi	r24, 0x14	; 20
     dc8:	80 93 34 01 	sts	0x0134, r24
	  if (temps[0][0] > temps[0][1]) {
     dcc:	20 91 a9 01 	lds	r18, 0x01A9
     dd0:	30 91 aa 01 	lds	r19, 0x01AA
     dd4:	80 91 ab 01 	lds	r24, 0x01AB
     dd8:	90 91 ac 01 	lds	r25, 0x01AC
     ddc:	82 17       	cp	r24, r18
     dde:	93 07       	cpc	r25, r19
     de0:	f4 f4       	brge	.+60     	; 0xe1e <run_set_1+0x148>
        MAX7219_clearDisplay();
     de2:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     de6:	8e e8       	ldi	r24, 0x8E	; 142
     de8:	93 e0       	ldi	r25, 0x03	; 3
     dea:	90 93 3e 01 	sts	0x013E, r25
     dee:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_1(temps[0][0]);
     df2:	80 91 a9 01 	lds	r24, 0x01A9
     df6:	90 91 aa 01 	lds	r25, 0x01AA
     dfa:	0e 94 57 02 	call	0x4ae	; 0x4ae <save_max_temp_1>
        save_min_temp_1(temps[0][1]);
     dfe:	80 91 ab 01 	lds	r24, 0x01AB
     e02:	90 91 ac 01 	lds	r25, 0x01AC
     e06:	0e 94 63 02 	call	0x4c6	; 0x4c6 <save_min_temp_1>
	    save_type_1(types[0]);
     e0a:	80 91 37 01 	lds	r24, 0x0137
     e0e:	0e 94 a7 02 	call	0x54e	; 0x54e <save_type_1>
        show_menu();
     e12:	0e 94 c5 02 	call	0x58a	; 0x58a <show_menu>
	    KBD_set_type(1);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	0e 94 64 07 	call	0xec8	; 0xec8 <KBD_set_type>
     e1c:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     e1e:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
        SET_STATE(run_error);
     e22:	82 ed       	ldi	r24, 0xD2	; 210
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	90 93 3e 01 	sts	0x013E, r25
     e2a:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     e2e:	85 e0       	ldi	r24, 0x05	; 5
     e30:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     e34:	8a ec       	ldi	r24, 0xCA	; 202
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	44 ef       	ldi	r20, 0xF4	; 244
     e3c:	51 e0       	ldi	r21, 0x01	; 1
     e3e:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
     e42:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     e44:	84 e1       	ldi	r24, 0x14	; 20
     e46:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     e50:	80 91 b2 01 	lds	r24, 0x01B2
     e54:	88 23       	and	r24, r24
     e56:	71 f4       	brne	.+28     	; 0xe74 <run_set_1+0x19e>
        if (temps[0][0] < 790) {
     e58:	80 91 a9 01 	lds	r24, 0x01A9
     e5c:	90 91 aa 01 	lds	r25, 0x01AA
     e60:	23 e0       	ldi	r18, 0x03	; 3
     e62:	86 31       	cpi	r24, 0x16	; 22
     e64:	92 07       	cpc	r25, r18
     e66:	fc f4       	brge	.+62     	; 0xea6 <run_set_1+0x1d0>
		  temps[0][0]++;
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	90 93 aa 01 	sts	0x01AA, r25
     e6e:	80 93 a9 01 	sts	0x01A9, r24
     e72:	19 c0       	rjmp	.+50     	; 0xea6 <run_set_1+0x1d0>
		}
	  }
	  if (n_edit == 1) {
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	71 f4       	brne	.+28     	; 0xe94 <run_set_1+0x1be>
        if (temps[0][1] < 790) {
     e78:	80 91 ab 01 	lds	r24, 0x01AB
     e7c:	90 91 ac 01 	lds	r25, 0x01AC
     e80:	23 e0       	ldi	r18, 0x03	; 3
     e82:	86 31       	cpi	r24, 0x16	; 22
     e84:	92 07       	cpc	r25, r18
     e86:	7c f4       	brge	.+30     	; 0xea6 <run_set_1+0x1d0>
		  temps[0][1]++;
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	90 93 ac 01 	sts	0x01AC, r25
     e8e:	80 93 ab 01 	sts	0x01AB, r24
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <run_set_1+0x1d0>
		}
	  }
	  if (n_edit == 2) {
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	39 f4       	brne	.+14     	; 0xea6 <run_set_1+0x1d0>
        types[0] = !types[0];
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 91 37 01 	lds	r25, 0x0137
     e9e:	91 11       	cpse	r25, r1
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	80 93 37 01 	sts	0x0137, r24
	  }
	  show_set_temp(0);
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <show_set_temp>
    break;
     eac:	08 95       	ret
	default:
	  events_default(event);
     eae:	0e 94 48 01 	call	0x290	; 0x290 <events_default>
     eb2:	08 95       	ret

00000eb4 <KBD_init>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_PLUS) &= ~BUT_PLUS_LINE;
     eb4:	54 98       	cbi	0x0a, 4	; 10
  PORT(BUT_PLUS) |= BUT_PLUS_LINE;
     eb6:	5c 9a       	sbi	0x0b, 4	; 11
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     eb8:	55 98       	cbi	0x0a, 5	; 10
  PORT(BUT_SET) |= BUT_SET_LINE;
     eba:	5d 9a       	sbi	0x0b, 5	; 11
  DDR(BUT_MINUS) &= ~BUT_MINUS_LINE;
     ebc:	56 98       	cbi	0x0a, 6	; 10
  PORT(BUT_MINUS) |= BUT_MINUS_LINE;
     ebe:	5e 9a       	sbi	0x0b, 6	; 11
  kbd_type = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 3c 01 	sts	0x013C, r24
}
     ec6:	08 95       	ret

00000ec8 <KBD_set_type>:
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     ec8:	80 93 3c 01 	sts	0x013C, r24
}
     ecc:	08 95       	ret

00000ece <debounce_sw_plus>:
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
     ece:	80 91 b8 01 	lds	r24, 0x01B8
     ed2:	90 91 b9 01 	lds	r25, 0x01B9
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	90 6e       	ori	r25, 0xE0	; 224
     edc:	21 e0       	ldi	r18, 0x01	; 1
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4c 99       	sbic	0x09, 4	; 9
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <debounce_sw_plus+0x1a>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	82 2b       	or	r24, r18
     eea:	93 2b       	or	r25, r19
     eec:	90 93 b9 01 	sts	0x01B9, r25
     ef0:	80 93 b8 01 	sts	0x01B8, r24
  if (state1 == 0xF000) return 1;
     ef4:	20 ef       	ldi	r18, 0xF0	; 240
     ef6:	80 30       	cpi	r24, 0x00	; 0
     ef8:	92 07       	cpc	r25, r18
     efa:	31 f0       	breq	.+12     	; 0xf08 <debounce_sw_plus+0x3a>
  if (state1 == 0xE000) return 2;
     efc:	20 ee       	ldi	r18, 0xE0	; 224
     efe:	80 30       	cpi	r24, 0x00	; 0
     f00:	92 07       	cpc	r25, r18
     f02:	21 f4       	brne	.+8      	; 0xf0c <debounce_sw_plus+0x3e>
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
  if (state1 == 0xF000) return 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	08 95       	ret
  if (state1 == 0xE000) return 2;
  return 0;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
}
     f0e:	08 95       	ret

00000f10 <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     f10:	80 91 b6 01 	lds	r24, 0x01B6
     f14:	90 91 b7 01 	lds	r25, 0x01B7
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	90 6e       	ori	r25, 0xE0	; 224
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	4d 99       	sbic	0x09, 5	; 9
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <debounce_sw_set+0x1a>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	82 2b       	or	r24, r18
     f2c:	93 2b       	or	r25, r19
     f2e:	90 93 b7 01 	sts	0x01B7, r25
     f32:	80 93 b6 01 	sts	0x01B6, r24
  if (state2 == 0xF000) return 1;
     f36:	20 ef       	ldi	r18, 0xF0	; 240
     f38:	80 30       	cpi	r24, 0x00	; 0
     f3a:	92 07       	cpc	r25, r18
     f3c:	31 f0       	breq	.+12     	; 0xf4a <debounce_sw_set+0x3a>
  if (state2 == 0xE000) return 2;
     f3e:	20 ee       	ldi	r18, 0xE0	; 224
     f40:	80 30       	cpi	r24, 0x00	; 0
     f42:	92 07       	cpc	r25, r18
     f44:	21 f4       	brne	.+8      	; 0xf4e <debounce_sw_set+0x3e>
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
  if (state2 == 0xF000) return 1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	08 95       	ret
  if (state2 == 0xE000) return 2;
  return 0;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
}
     f50:	08 95       	ret

00000f52 <debounce_sw_minus>:
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
     f52:	80 91 b4 01 	lds	r24, 0x01B4
     f56:	90 91 b5 01 	lds	r25, 0x01B5
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	90 6e       	ori	r25, 0xE0	; 224
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	4e 99       	sbic	0x09, 6	; 9
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <debounce_sw_minus+0x1a>
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	82 2b       	or	r24, r18
     f6e:	93 2b       	or	r25, r19
     f70:	90 93 b5 01 	sts	0x01B5, r25
     f74:	80 93 b4 01 	sts	0x01B4, r24
  if (state3 == 0xF000) return 1;
     f78:	20 ef       	ldi	r18, 0xF0	; 240
     f7a:	80 30       	cpi	r24, 0x00	; 0
     f7c:	92 07       	cpc	r25, r18
     f7e:	31 f0       	breq	.+12     	; 0xf8c <debounce_sw_minus+0x3a>
  if (state3 == 0xE000) return 2;
     f80:	20 ee       	ldi	r18, 0xE0	; 224
     f82:	80 30       	cpi	r24, 0x00	; 0
     f84:	92 07       	cpc	r25, r18
     f86:	21 f4       	brne	.+8      	; 0xf90 <debounce_sw_minus+0x3e>
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
  if (state3 == 0xF000) return 1;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	08 95       	ret
  if (state3 == 0xE000) return 2;
  return 0;
     f90:	80 e0       	ldi	r24, 0x00	; 0
}
     f92:	08 95       	ret

00000f94 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
  if (kbd_type == 1) {
     f94:	80 91 3c 01 	lds	r24, 0x013C
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	c1 f4       	brne	.+48     	; 0xfcc <KBD_scan+0x38>
    if (debounce_sw_plus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
     f9c:	0e 94 67 07 	call	0xece	; 0xece <debounce_sw_plus>
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	79 f4       	brne	.+30     	; 0xfc2 <KBD_scan+0x2e>
     fa4:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa6:	8f e3       	ldi	r24, 0x3F	; 63
     fa8:	9c e9       	ldi	r25, 0x9C	; 156
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <KBD_scan+0x16>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <KBD_scan+0x1c>
     fb0:	00 00       	nop
     fb2:	40 98       	cbi	0x08, 0	; 8
     fb4:	8a e0       	ldi	r24, 0x0A	; 10
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
    if (debounce_sw_minus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
     fc2:	0e 94 a9 07 	call	0xf52	; 0xf52 <debounce_sw_minus>
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	39 f5       	brne	.+78     	; 0x1018 <KBD_scan+0x84>
     fca:	17 c0       	rjmp	.+46     	; 0xffa <KBD_scan+0x66>
  } else {
    if (debounce_sw_plus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
     fcc:	0e 94 67 07 	call	0xece	; 0xece <debounce_sw_plus>
     fd0:	88 23       	and	r24, r24
     fd2:	79 f0       	breq	.+30     	; 0xff2 <KBD_scan+0x5e>
     fd4:	40 9a       	sbi	0x08, 0	; 8
     fd6:	8f e3       	ldi	r24, 0x3F	; 63
     fd8:	9c e9       	ldi	r25, 0x9C	; 156
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <KBD_scan+0x46>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <KBD_scan+0x4c>
     fe0:	00 00       	nop
     fe2:	40 98       	cbi	0x08, 0	; 8
     fe4:	8a e0       	ldi	r24, 0x0A	; 10
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
    if (debounce_sw_minus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
     ff2:	0e 94 a9 07 	call	0xf52	; 0xf52 <debounce_sw_minus>
     ff6:	88 23       	and	r24, r24
     ff8:	79 f0       	breq	.+30     	; 0x1018 <KBD_scan+0x84>
     ffa:	40 9a       	sbi	0x08, 0	; 8
     ffc:	8f e3       	ldi	r24, 0x3F	; 63
     ffe:	9c e9       	ldi	r25, 0x9C	; 156
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <KBD_scan+0x6c>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <KBD_scan+0x72>
    1006:	00 00       	nop
    1008:	40 98       	cbi	0x08, 0	; 8
    100a:	8e e1       	ldi	r24, 0x1E	; 30
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
  }
  if (debounce_sw_set() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET, 0, 0); }
    1018:	0e 94 88 07 	call	0xf10	; 0xf10 <debounce_sw_set>
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	79 f4       	brne	.+30     	; 0x103e <KBD_scan+0xaa>
    1020:	40 9a       	sbi	0x08, 0	; 8
    1022:	8f e3       	ldi	r24, 0x3F	; 63
    1024:	9c e9       	ldi	r25, 0x9C	; 156
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <KBD_scan+0x92>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <KBD_scan+0x98>
    102c:	00 00       	nop
    102e:	40 98       	cbi	0x08, 0	; 8
    1030:	84 e1       	ldi	r24, 0x14	; 20
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	0e 94 32 08 	call	0x1064	; 0x1064 <RTOS_setTask>
    103e:	08 95       	ret

00001040 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    1040:	e1 eb       	ldi	r30, 0xB1	; 177
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	84 60       	ori	r24, 0x04	; 4
    1048:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    104e:	e0 e7       	ldi	r30, 0x70	; 112
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	81 60       	ori	r24, 0x01	; 1
    1056:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    105e:	10 92 1b 02 	sts	0x021B, r1
}
    1062:	08 95       	ret

00001064 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <RTOS_setTask+0x6>
    1068:	6f c0       	rjmp	.+222    	; 0x1148 <RTOS_setTask+0xe4>
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	1b c0       	rjmp	.+54     	; 0x10a4 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    106e:	29 2f       	mov	r18, r25
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	f9 01       	movw	r30, r18
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	e2 0f       	add	r30, r18
    107a:	f3 1f       	adc	r31, r19
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	e5 54       	subi	r30, 0x45	; 69
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	20 81       	ld	r18, Z
    1086:	28 17       	cp	r18, r24
    1088:	61 f4       	brne	.+24     	; 0x10a2 <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    108a:	72 83       	std	Z+2, r23	; 0x02
    108c:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    108e:	54 83       	std	Z+4, r21	; 0x04
    1090:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    1092:	61 15       	cp	r22, r1
    1094:	71 05       	cpc	r23, r1
    1096:	19 f4       	brne	.+6      	; 0x109e <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	85 83       	std	Z+5, r24	; 0x05
    109c:	08 95       	ret
      } else TaskArray[i].run = 0;   
    109e:	15 82       	std	Z+5, r1	; 0x05
    10a0:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    10a2:	9f 5f       	subi	r25, 0xFF	; 255
    10a4:	20 91 1b 02 	lds	r18, 0x021B
    10a8:	92 17       	cp	r25, r18
    10aa:	08 f3       	brcs	.-62     	; 0x106e <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    10ac:	20 91 1b 02 	lds	r18, 0x021B
    10b0:	20 31       	cpi	r18, 0x10	; 16
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <RTOS_setTask+0x52>
    10b4:	49 c0       	rjmp	.+146    	; 0x1148 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    10b6:	20 91 1b 02 	lds	r18, 0x021B
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	f9 01       	movw	r30, r18
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	e5 54       	subi	r30, 0x45	; 69
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    10d0:	20 91 1b 02 	lds	r18, 0x021B
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	f9 01       	movw	r30, r18
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e2 0f       	add	r30, r18
    10de:	f3 1f       	adc	r31, r19
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	e5 54       	subi	r30, 0x45	; 69
    10e6:	fe 4f       	sbci	r31, 0xFE	; 254
    10e8:	72 83       	std	Z+2, r23	; 0x02
    10ea:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    10ec:	20 91 1b 02 	lds	r18, 0x021B
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	f9 01       	movw	r30, r18
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	e5 54       	subi	r30, 0x45	; 69
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	54 83       	std	Z+4, r21	; 0x04
    1106:	43 83       	std	Z+3, r20	; 0x03
    1108:	89 2f       	mov	r24, r25
    110a:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    110c:	61 15       	cp	r22, r1
    110e:	71 05       	cpc	r23, r1
    1110:	61 f4       	brne	.+24     	; 0x112a <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    1112:	fc 01       	movw	r30, r24
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	e8 0f       	add	r30, r24
    111a:	f9 1f       	adc	r31, r25
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	e5 54       	subi	r30, 0x45	; 69
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	85 83       	std	Z+5, r24	; 0x05
    1128:	0a c0       	rjmp	.+20     	; 0x113e <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    112a:	fc 01       	movw	r30, r24
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	e8 0f       	add	r30, r24
    1132:	f9 1f       	adc	r31, r25
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	e5 54       	subi	r30, 0x45	; 69
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    113e:	80 91 1b 02 	lds	r24, 0x021B
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	80 93 1b 02 	sts	0x021B, r24
    1148:	08 95       	ret

0000114a <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	2e c0       	rjmp	.+92     	; 0x11aa <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    114e:	29 2f       	mov	r18, r25
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	d9 01       	movw	r26, r18
    1154:	aa 0f       	add	r26, r26
    1156:	bb 1f       	adc	r27, r27
    1158:	a2 0f       	add	r26, r18
    115a:	b3 1f       	adc	r27, r19
    115c:	aa 0f       	add	r26, r26
    115e:	bb 1f       	adc	r27, r27
    1160:	a5 54       	subi	r26, 0x45	; 69
    1162:	be 4f       	sbci	r27, 0xFE	; 254
    1164:	4c 91       	ld	r20, X
    1166:	48 17       	cp	r20, r24
    1168:	f9 f4       	brne	.+62     	; 0x11a8 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    116a:	80 91 1b 02 	lds	r24, 0x021B
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	91 f0       	breq	.+36     	; 0x119c <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1178:	80 91 1b 02 	lds	r24, 0x021B
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	fc 01       	movw	r30, r24
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	e8 0f       	add	r30, r24
    1188:	f9 1f       	adc	r31, r25
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	e5 54       	subi	r30, 0x45	; 69
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	86 e0       	ldi	r24, 0x06	; 6
    1194:	01 90       	ld	r0, Z+
    1196:	0d 92       	st	X+, r0
    1198:	81 50       	subi	r24, 0x01	; 1
    119a:	e1 f7       	brne	.-8      	; 0x1194 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    119c:	80 91 1b 02 	lds	r24, 0x021B
    11a0:	81 50       	subi	r24, 0x01	; 1
    11a2:	80 93 1b 02 	sts	0x021B, r24
      return;
    11a6:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	20 91 1b 02 	lds	r18, 0x021B
    11ae:	92 17       	cp	r25, r18
    11b0:	70 f2       	brcs	.-100    	; 0x114e <RTOS_deleteTask+0x4>
    11b2:	08 95       	ret

000011b4 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    11b8:	80 91 ba 01 	lds	r24, 0x01BA
    11bc:	88 23       	and	r24, r24
    11be:	11 f4       	brne	.+4      	; 0x11c4 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    11c0:	10 e0       	ldi	r17, 0x00	; 0
    11c2:	4e c0       	rjmp	.+156    	; 0x1260 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    11c4:	10 92 ba 01 	sts	0x01BA, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    11ca:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    11cc:	17 c0       	rjmp	.+46     	; 0x11fc <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    11ce:	82 2f       	mov	r24, r18
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	fc 01       	movw	r30, r24
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	e8 0f       	add	r30, r24
    11da:	f9 1f       	adc	r31, r25
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	e5 54       	subi	r30, 0x45	; 69
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	81 81       	ldd	r24, Z+1	; 0x01
    11e6:	92 81       	ldd	r25, Z+2	; 0x02
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    11ec:	35 83       	std	Z+5, r19	; 0x05
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    11f0:	81 81       	ldd	r24, Z+1	; 0x01
    11f2:	92 81       	ldd	r25, Z+2	; 0x02
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	92 83       	std	Z+2, r25	; 0x02
    11f8:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	80 91 1b 02 	lds	r24, 0x021B
    1200:	28 17       	cp	r18, r24
    1202:	28 f3       	brcs	.-54     	; 0x11ce <RTOS_dispatchTask+0x1a>
    1204:	dd cf       	rjmp	.-70     	; 0x11c0 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1206:	81 2f       	mov	r24, r17
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	fc 01       	movw	r30, r24
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	e8 0f       	add	r30, r24
    1212:	f9 1f       	adc	r31, r25
    1214:	ee 0f       	add	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	e5 54       	subi	r30, 0x45	; 69
    121a:	fe 4f       	sbci	r31, 0xFE	; 254
    121c:	85 81       	ldd	r24, Z+5	; 0x05
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	f1 f4       	brne	.+60     	; 0x125e <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    1222:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    1224:	23 81       	ldd	r18, Z+3	; 0x03
    1226:	34 81       	ldd	r19, Z+4	; 0x04
    1228:	21 15       	cp	r18, r1
    122a:	31 05       	cpc	r19, r1
    122c:	31 f4       	brne	.+12     	; 0x123a <RTOS_dispatchTask+0x86>
      {  
        cli();
    122e:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    1230:	80 81       	ld	r24, Z
    1232:	0e 94 a5 08 	call	0x114a	; 0x114a <RTOS_deleteTask>
        sei();
    1236:	78 94       	sei
    1238:	0c c0       	rjmp	.+24     	; 0x1252 <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    123a:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    123c:	21 81       	ldd	r18, Z+1	; 0x01
    123e:	32 81       	ldd	r19, Z+2	; 0x02
    1240:	21 15       	cp	r18, r1
    1242:	31 05       	cpc	r19, r1
    1244:	31 f4       	brne	.+12     	; 0x1252 <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1246:	23 81       	ldd	r18, Z+3	; 0x03
    1248:	34 81       	ldd	r19, Z+4	; 0x04
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	30 40       	sbci	r19, 0x00	; 0
    124e:	32 83       	std	Z+2, r19	; 0x02
    1250:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    1252:	e0 91 3d 01 	lds	r30, 0x013D
    1256:	f0 91 3e 01 	lds	r31, 0x013E
    125a:	80 2f       	mov	r24, r16
    125c:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    125e:	1f 5f       	subi	r17, 0xFF	; 255
    1260:	80 91 1b 02 	lds	r24, 0x021B
    1264:	18 17       	cp	r17, r24
    1266:	78 f2       	brcs	.-98     	; 0x1206 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	08 95       	ret

0000126e <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    127a:	86 e0       	ldi	r24, 0x06	; 6
    127c:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 ba 01 	sts	0x01BA, r24
}
    1286:	8f 91       	pop	r24
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    1292:	80 52       	subi	r24, 0x20	; 32
    1294:	86 35       	cpi	r24, 0x56	; 86
    1296:	30 f4       	brcc	.+12     	; 0x12a4 <MAX7219_lookupCode+0x12>
    1298:	e8 2f       	mov	r30, r24
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	e1 5b       	subi	r30, 0xB1	; 177
    129e:	fe 4f       	sbci	r31, 0xFE	; 254
    12a0:	80 81       	ld	r24, Z
    12a2:	08 95       	ret
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    12a6:	08 95       	ret

000012a8 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    12a8:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    12aa:	87 ff       	sbrs	r24, 7
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    12ae:	43 9a       	sbi	0x08, 3	; 8
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    12b2:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    12b4:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    12b6:	00 00       	nop
	asm("nop");
    12b8:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    12ba:	42 9a       	sbi	0x08, 2	; 8
    12bc:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    12be:	11 f0       	breq	.+4      	; 0x12c4 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    12c0:	88 0f       	add	r24, r24
    12c2:	f3 cf       	rjmp	.-26     	; 0x12aa <MAX7219_SendByte+0x2>
    12c4:	08 95       	ret

000012c6 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	18 2f       	mov	r17, r24
    12ce:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    12d0:	41 98       	cbi	0x08, 1	; 8
    12d2:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    12d4:	81 2f       	mov	r24, r17
    12d6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <MAX7219_SendByte>
	MAX7219_SendByte(data);
    12da:	8f 2d       	mov	r24, r15
    12dc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <MAX7219_SendByte>
    12e0:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    12e2:	c1 f7       	brne	.-16     	; 0x12d4 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    12e4:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	08 95       	ret

000012ee <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cf e3       	ldi	r28, 0x3F	; 63
    12f8:	d1 e0       	ldi	r29, 0x01	; 1
    12fa:	07 e4       	ldi	r16, 0x47	; 71
    12fc:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    12fe:	89 91       	ld	r24, Y+
    1300:	f8 01       	movw	r30, r16
    1302:	61 91       	ld	r22, Z+
    1304:	8f 01       	movw	r16, r30
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    130c:	f1 e0       	ldi	r31, 0x01	; 1
    130e:	c7 34       	cpi	r28, 0x47	; 71
    1310:	df 07       	cpc	r29, r31
    1312:	a9 f7       	brne	.-22     	; 0x12fe <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    131e:	10 92 47 01 	sts	0x0147, r1
    1322:	10 92 48 01 	sts	0x0148, r1
    1326:	10 92 49 01 	sts	0x0149, r1
    132a:	10 92 4a 01 	sts	0x014A, r1
    132e:	10 92 4b 01 	sts	0x014B, r1
    1332:	10 92 4c 01 	sts	0x014C, r1
    1336:	10 92 4d 01 	sts	0x014D, r1
    133a:	10 92 4e 01 	sts	0x014E, r1
  }
  MAX7219_updateDisplay();
    133e:	0e 94 77 09 	call	0x12ee	; 0x12ee <MAX7219_updateDisplay>
}
    1342:	08 95       	ret

00001344 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1344:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1346:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    1348:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    134a:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    134c:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    134e:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    1350:	8c e0       	ldi	r24, 0x0C	; 12
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    1358:	8f e0       	ldi	r24, 0x0F	; 15
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    1360:	89 e0       	ldi	r24, 0x09	; 9
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    1368:	8a e0       	ldi	r24, 0x0A	; 10
    136a:	62 e0       	ldi	r22, 0x02	; 2
    136c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    1370:	8b e0       	ldi	r24, 0x0B	; 11
    1372:	67 e0       	ldi	r22, 0x07	; 7
    1374:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    1378:	0e 94 8f 09 	call	0x131e	; 0x131e <MAX7219_clearDisplay>
  return;
}
    137c:	08 95       	ret

0000137e <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    137e:	bf 92       	push	r11
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	27 97       	sbiw	r28, 0x07	; 7
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	b8 2e       	mov	r11, r24
    13a2:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    13a4:	77 ff       	sbrs	r23, 7
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    13a8:	90 95       	com	r25
    13aa:	81 95       	neg	r24
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    13b4:	e4 2f       	mov	r30, r20
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8e 01       	movw	r16, r28
    13ba:	0f 5f       	subi	r16, 0xFF	; 255
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	e0 0f       	add	r30, r16
    13c0:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    13c2:	5a e0       	ldi	r21, 0x0A	; 10
    13c4:	e5 2e       	mov	r14, r21
    13c6:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    13c8:	07 c0       	rjmp	.+14     	; 0x13d8 <MAX7219_printNum+0x5a>
    13ca:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    13cc:	b7 01       	movw	r22, r14
    13ce:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__divmodhi4>
    13d2:	80 5d       	subi	r24, 0xD0	; 208
    13d4:	80 83       	st	Z, r24
    x /= 10;
    13d6:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    13d8:	e0 17       	cp	r30, r16
    13da:	f1 07       	cpc	r31, r17
    13dc:	b1 f7       	brne	.-20     	; 0x13ca <MAX7219_printNum+0x4c>
    13de:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    13e0:	84 2f       	mov	r24, r20
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    13e6:	de 01       	movw	r26, r28
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <MAX7219_printNum+0x7e>
    13ec:	fd 01       	movw	r30, r26
    13ee:	e6 0f       	add	r30, r22
    13f0:	f7 1f       	adc	r31, r23
    13f2:	60 81       	ld	r22, Z
    13f4:	60 33       	cpi	r22, 0x30	; 48
    13f6:	11 f5       	brne	.+68     	; 0x143c <MAX7219_printNum+0xbe>
    13f8:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    13fa:	5f 5f       	subi	r21, 0xFF	; 255
    13fc:	65 2f       	mov	r22, r21
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	68 17       	cp	r22, r24
    1402:	79 07       	cpc	r23, r25
    1404:	9c f3       	brlt	.-26     	; 0x13ec <MAX7219_printNum+0x6e>
    1406:	1a c0       	rjmp	.+52     	; 0x143c <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1408:	82 2f       	mov	r24, r18
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	8c 01       	movw	r16, r24
    140e:	0c 0d       	add	r16, r12
    1410:	1d 1d       	adc	r17, r13
    1412:	08 30       	cpi	r16, 0x08	; 8
    1414:	11 05       	cpc	r17, r1
    1416:	84 f4       	brge	.+32     	; 0x1438 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    1418:	8e 0d       	add	r24, r14
    141a:	9f 1d       	adc	r25, r15
    141c:	fc 01       	movw	r30, r24
    141e:	80 81       	ld	r24, Z
    1420:	2d 83       	std	Y+5, r18	; 0x05
    1422:	3e 83       	std	Y+6, r19	; 0x06
    1424:	4f 83       	std	Y+7, r20	; 0x07
    1426:	0e 94 49 09 	call	0x1292	; 0x1292 <MAX7219_lookupCode>
    142a:	f8 01       	movw	r30, r16
    142c:	e9 5b       	subi	r30, 0xB9	; 185
    142e:	fe 4f       	sbci	r31, 0xFE	; 254
    1430:	80 83       	st	Z, r24
    1432:	4f 81       	ldd	r20, Y+7	; 0x07
    1434:	3e 81       	ldd	r19, Y+6	; 0x06
    1436:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	07 c0       	rjmp	.+14     	; 0x144a <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    143c:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    143e:	cb 2c       	mov	r12, r11
    1440:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    1442:	7e 01       	movw	r14, r28
    1444:	08 94       	sec
    1446:	e1 1c       	adc	r14, r1
    1448:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    144a:	24 17       	cp	r18, r20
    144c:	e8 f2       	brcs	.-70     	; 0x1408 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    144e:	33 23       	and	r19, r19
    1450:	41 f0       	breq	.+16     	; 0x1462 <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    1452:	8d e2       	ldi	r24, 0x2D	; 45
    1454:	0e 94 49 09 	call	0x1292	; 0x1292 <MAX7219_lookupCode>
    1458:	eb 2d       	mov	r30, r11
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	ea 5b       	subi	r30, 0xBA	; 186
    145e:	fe 4f       	sbci	r31, 0xFE	; 254
    1460:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    1462:	0e 94 77 09 	call	0x12ee	; 0x12ee <MAX7219_updateDisplay>
}
    1466:	27 96       	adiw	r28, 0x07	; 7
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	08 95       	ret

00001486 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    1486:	1f 93       	push	r17
    1488:	18 2f       	mov	r17, r24
    148a:	86 2f       	mov	r24, r22
  if (pos < 9) {
    148c:	19 30       	cpi	r17, 0x09	; 9
    148e:	48 f4       	brcc	.+18     	; 0x14a2 <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    1490:	0e 94 49 09 	call	0x1292	; 0x1292 <MAX7219_lookupCode>
    1494:	e1 2f       	mov	r30, r17
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	ea 5b       	subi	r30, 0xBA	; 186
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    149e:	0e 94 77 09 	call	0x12ee	; 0x12ee <MAX7219_updateDisplay>
  }
}
    14a2:	1f 91       	pop	r17
    14a4:	08 95       	ret

000014a6 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
  unsigned char i = pos;
    14b0:	e6 2e       	mov	r14, r22
    14b2:	e7 01       	movw	r28, r14
    14b4:	7e 01       	movw	r14, r28
    14b6:	f7 2e       	mov	r15, r23
    14b8:	e7 01       	movw	r28, r14
    14ba:	18 2f       	mov	r17, r24
  while(*data) {
    14bc:	0a c0       	rjmp	.+20     	; 0x14d2 <MAX7219_printStr+0x2c>
    if (i < 9) {
    14be:	19 30       	cpi	r17, 0x09	; 9
    14c0:	58 f4       	brcc	.+22     	; 0x14d8 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    14c2:	0e 94 49 09 	call	0x1292	; 0x1292 <MAX7219_lookupCode>
    14c6:	e1 2f       	mov	r30, r17
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	ea 5b       	subi	r30, 0xBA	; 186
    14cc:	fe 4f       	sbci	r31, 0xFE	; 254
    14ce:	80 83       	st	Z, r24
      i++;
    14d0:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    14d2:	89 91       	ld	r24, Y+
    14d4:	88 23       	and	r24, r24
    14d6:	99 f7       	brne	.-26     	; 0x14be <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    14d8:	0e 94 77 09 	call	0x12ee	; 0x12ee <MAX7219_updateDisplay>
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	08 95       	ret

000014e8 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    14e8:	e8 2f       	mov	r30, r24
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    14ec:	61 30       	cpi	r22, 0x01	; 1
    14ee:	29 f4       	brne	.+10     	; 0x14fa <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    14f0:	ea 5b       	subi	r30, 0xBA	; 186
    14f2:	fe 4f       	sbci	r31, 0xFE	; 254
    14f4:	80 81       	ld	r24, Z
    14f6:	80 68       	ori	r24, 0x80	; 128
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    14fa:	ea 5b       	subi	r30, 0xBA	; 186
    14fc:	fe 4f       	sbci	r31, 0xFE	; 254
    14fe:	80 81       	ld	r24, Z
    1500:	8f 77       	andi	r24, 0x7F	; 127
    1502:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    1504:	0e 94 77 09 	call	0x12ee	; 0x12ee <MAX7219_updateDisplay>
}
    1508:	08 95       	ret

0000150a <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    150a:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    150c:	f8 94       	cli
  switch(chanel) {
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	01 f1       	breq	.+64     	; 0x1552 <ds18x20IsOnBus+0x48>
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	20 f4       	brcc	.+8      	; 0x151e <ds18x20IsOnBus+0x14>
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	09 f0       	breq	.+2      	; 0x151c <ds18x20IsOnBus+0x12>
    151a:	57 c0       	rjmp	.+174    	; 0x15ca <ds18x20IsOnBus+0xc0>
    151c:	06 c0       	rjmp	.+12     	; 0x152a <ds18x20IsOnBus+0x20>
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	61 f1       	breq	.+88     	; 0x157a <ds18x20IsOnBus+0x70>
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	09 f0       	breq	.+2      	; 0x1528 <ds18x20IsOnBus+0x1e>
    1526:	51 c0       	rjmp	.+162    	; 0x15ca <ds18x20IsOnBus+0xc0>
    1528:	3e c0       	rjmp	.+124    	; 0x15a6 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    152a:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    152c:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    152e:	8f e7       	ldi	r24, 0x7F	; 127
    1530:	97 e0       	ldi	r25, 0x07	; 7
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <ds18x20IsOnBus+0x28>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <ds18x20IsOnBus+0x2e>
    1538:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    153a:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    153c:	29 9a       	sbi	0x05, 1	; 5
    153e:	a7 e1       	ldi	r26, 0x17	; 23
    1540:	b1 e0       	ldi	r27, 0x01	; 1
    1542:	11 97       	sbiw	r26, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <ds18x20IsOnBus+0x38>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <ds18x20IsOnBus+0x3e>
    1548:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	19 9b       	sbis	0x03, 1	; 3
    154e:	3e c0       	rjmp	.+124    	; 0x15cc <ds18x20IsOnBus+0xc2>
    1550:	3c c0       	rjmp	.+120    	; 0x15ca <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    1552:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    1554:	28 98       	cbi	0x05, 0	; 5
    1556:	8f e7       	ldi	r24, 0x7F	; 127
    1558:	97 e0       	ldi	r25, 0x07	; 7
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <ds18x20IsOnBus+0x50>
    155e:	00 c0       	rjmp	.+0      	; 0x1560 <ds18x20IsOnBus+0x56>
    1560:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    1562:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    1564:	28 9a       	sbi	0x05, 0	; 5
    1566:	a7 e1       	ldi	r26, 0x17	; 23
    1568:	b1 e0       	ldi	r27, 0x01	; 1
    156a:	11 97       	sbiw	r26, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <ds18x20IsOnBus+0x60>
    156e:	00 c0       	rjmp	.+0      	; 0x1570 <ds18x20IsOnBus+0x66>
    1570:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	18 9b       	sbis	0x03, 0	; 3
    1576:	2a c0       	rjmp	.+84     	; 0x15cc <ds18x20IsOnBus+0xc2>
    1578:	28 c0       	rjmp	.+80     	; 0x15ca <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    157a:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    157c:	5f 98       	cbi	0x0b, 7	; 11
    157e:	8f e7       	ldi	r24, 0x7F	; 127
    1580:	97 e0       	ldi	r25, 0x07	; 7
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <ds18x20IsOnBus+0x78>
    1586:	00 c0       	rjmp	.+0      	; 0x1588 <ds18x20IsOnBus+0x7e>
    1588:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    158a:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    158c:	5f 9a       	sbi	0x0b, 7	; 11
    158e:	a7 e1       	ldi	r26, 0x17	; 23
    1590:	b1 e0       	ldi	r27, 0x01	; 1
    1592:	11 97       	sbiw	r26, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <ds18x20IsOnBus+0x88>
    1596:	00 c0       	rjmp	.+0      	; 0x1598 <ds18x20IsOnBus+0x8e>
    1598:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    159a:	89 b1       	in	r24, 0x09	; 9
    159c:	80 95       	com	r24
    159e:	88 1f       	adc	r24, r24
    15a0:	88 27       	eor	r24, r24
    15a2:	88 1f       	adc	r24, r24
    break;
    15a4:	13 c0       	rjmp	.+38     	; 0x15cc <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    15a6:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    15a8:	2a 98       	cbi	0x05, 2	; 5
    15aa:	8f e7       	ldi	r24, 0x7F	; 127
    15ac:	97 e0       	ldi	r25, 0x07	; 7
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <ds18x20IsOnBus+0xa4>
    15b2:	00 c0       	rjmp	.+0      	; 0x15b4 <ds18x20IsOnBus+0xaa>
    15b4:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    15b6:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    15b8:	2a 9a       	sbi	0x05, 2	; 5
    15ba:	a7 e1       	ldi	r26, 0x17	; 23
    15bc:	b1 e0       	ldi	r27, 0x01	; 1
    15be:	11 97       	sbiw	r26, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <ds18x20IsOnBus+0xb4>
    15c2:	00 c0       	rjmp	.+0      	; 0x15c4 <ds18x20IsOnBus+0xba>
    15c4:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	a7 e6       	ldi	r26, 0x67	; 103
    15ce:	b6 e0       	ldi	r27, 0x06	; 6
    15d0:	11 97       	sbiw	r26, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <ds18x20IsOnBus+0xc6>
    15d4:	00 c0       	rjmp	.+0      	; 0x15d6 <ds18x20IsOnBus+0xcc>
    15d6:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	e5 5e       	subi	r30, 0xE5	; 229
    15dc:	fd 4f       	sbci	r31, 0xFD	; 253
    15de:	80 83       	st	Z, r24
  sei();
    15e0:	78 94       	sei
  return ret;
}
    15e2:	08 95       	ret

000015e4 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    15e4:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    15e6:	98 2f       	mov	r25, r24
    15e8:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    15ea:	f8 94       	cli
  switch(chanel) {
    15ec:	62 30       	cpi	r22, 0x02	; 2
    15ee:	e1 f0       	breq	.+56     	; 0x1628 <ds18x20SendByte+0x44>
    15f0:	63 30       	cpi	r22, 0x03	; 3
    15f2:	20 f4       	brcc	.+8      	; 0x15fc <ds18x20SendByte+0x18>
    15f4:	61 30       	cpi	r22, 0x01	; 1
    15f6:	09 f0       	breq	.+2      	; 0x15fa <ds18x20SendByte+0x16>
    15f8:	52 c0       	rjmp	.+164    	; 0x169e <ds18x20SendByte+0xba>
    15fa:	06 c0       	rjmp	.+12     	; 0x1608 <ds18x20SendByte+0x24>
    15fc:	63 30       	cpi	r22, 0x03	; 3
    15fe:	21 f1       	breq	.+72     	; 0x1648 <ds18x20SendByte+0x64>
    1600:	64 30       	cpi	r22, 0x04	; 4
    1602:	09 f0       	breq	.+2      	; 0x1606 <ds18x20SendByte+0x22>
    1604:	4c c0       	rjmp	.+152    	; 0x169e <ds18x20SendByte+0xba>
    1606:	30 c0       	rjmp	.+96     	; 0x1668 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1608:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    160a:	29 98       	cbi	0x05, 1	; 5
    160c:	30 e2       	ldi	r19, 0x20	; 32
    160e:	3a 95       	dec	r19
    1610:	f1 f7       	brne	.-4      	; 0x160e <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    1612:	99 23       	and	r25, r25
    1614:	31 f4       	brne	.+12     	; 0x1622 <ds18x20SendByte+0x3e>
    1616:	e7 ed       	ldi	r30, 0xD7	; 215
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <ds18x20SendByte+0x36>
    161e:	00 c0       	rjmp	.+0      	; 0x1620 <ds18x20SendByte+0x3c>
    1620:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    1622:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1624:	29 9a       	sbi	0x05, 1	; 5
    1626:	2f c0       	rjmp	.+94     	; 0x1686 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    1628:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    162a:	28 98       	cbi	0x05, 0	; 5
    162c:	f0 e2       	ldi	r31, 0x20	; 32
    162e:	fa 95       	dec	r31
    1630:	f1 f7       	brne	.-4      	; 0x162e <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    1632:	99 23       	and	r25, r25
    1634:	31 f4       	brne	.+12     	; 0x1642 <ds18x20SendByte+0x5e>
    1636:	e7 ed       	ldi	r30, 0xD7	; 215
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	31 97       	sbiw	r30, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <ds18x20SendByte+0x56>
    163e:	00 c0       	rjmp	.+0      	; 0x1640 <ds18x20SendByte+0x5c>
    1640:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    1642:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    1644:	28 9a       	sbi	0x05, 0	; 5
    1646:	1f c0       	rjmp	.+62     	; 0x1686 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1648:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    164a:	5f 98       	cbi	0x0b, 7	; 11
    164c:	f0 e2       	ldi	r31, 0x20	; 32
    164e:	fa 95       	dec	r31
    1650:	f1 f7       	brne	.-4      	; 0x164e <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    1652:	99 23       	and	r25, r25
    1654:	31 f4       	brne	.+12     	; 0x1662 <ds18x20SendByte+0x7e>
    1656:	e7 ed       	ldi	r30, 0xD7	; 215
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	31 97       	sbiw	r30, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <ds18x20SendByte+0x76>
    165e:	00 c0       	rjmp	.+0      	; 0x1660 <ds18x20SendByte+0x7c>
    1660:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    1662:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    1664:	5f 9a       	sbi	0x0b, 7	; 11
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    1668:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    166a:	2a 98       	cbi	0x05, 2	; 5
    166c:	f0 e2       	ldi	r31, 0x20	; 32
    166e:	fa 95       	dec	r31
    1670:	f1 f7       	brne	.-4      	; 0x166e <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    1672:	99 23       	and	r25, r25
    1674:	31 f4       	brne	.+12     	; 0x1682 <ds18x20SendByte+0x9e>
    1676:	e7 ed       	ldi	r30, 0xD7	; 215
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	31 97       	sbiw	r30, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <ds18x20SendByte+0x96>
    167e:	00 c0       	rjmp	.+0      	; 0x1680 <ds18x20SendByte+0x9c>
    1680:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    1682:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    1684:	2a 9a       	sbi	0x05, 2	; 5
    1686:	f5 e3       	ldi	r31, 0x35	; 53
    1688:	fa 95       	dec	r31
    168a:	f1 f7       	brne	.-4      	; 0x1688 <ds18x20SendByte+0xa4>
    168c:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    168e:	99 23       	and	r25, r25
    1690:	31 f0       	breq	.+12     	; 0x169e <ds18x20SendByte+0xba>
    1692:	e7 ed       	ldi	r30, 0xD7	; 215
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	31 97       	sbiw	r30, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <ds18x20SendByte+0xb2>
    169a:	00 c0       	rjmp	.+0      	; 0x169c <ds18x20SendByte+0xb8>
    169c:	00 00       	nop
    break;
  }
  sei();
    169e:	78 94       	sei
    16a0:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    16a2:	11 f0       	breq	.+4      	; 0x16a8 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    16a4:	86 95       	lsr	r24
    16a6:	9f cf       	rjmp	.-194    	; 0x15e6 <ds18x20SendByte+0x2>
    16a8:	08 95       	ret

000016aa <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    16aa:	28 2f       	mov	r18, r24
    16ac:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    16ae:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    16b0:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    16b2:	f8 94       	cli
  switch(chanel) {
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	c1 f0       	breq	.+48     	; 0x16e8 <ds18x20GetByte+0x3e>
    16b8:	23 30       	cpi	r18, 0x03	; 3
    16ba:	20 f4       	brcc	.+8      	; 0x16c4 <ds18x20GetByte+0x1a>
    16bc:	21 30       	cpi	r18, 0x01	; 1
    16be:	09 f0       	breq	.+2      	; 0x16c2 <ds18x20GetByte+0x18>
    16c0:	40 c0       	rjmp	.+128    	; 0x1742 <ds18x20GetByte+0x98>
    16c2:	05 c0       	rjmp	.+10     	; 0x16ce <ds18x20GetByte+0x24>
    16c4:	23 30       	cpi	r18, 0x03	; 3
    16c6:	e9 f0       	breq	.+58     	; 0x1702 <ds18x20GetByte+0x58>
    16c8:	24 30       	cpi	r18, 0x04	; 4
    16ca:	d9 f5       	brne	.+118    	; 0x1742 <ds18x20GetByte+0x98>
    16cc:	27 c0       	rjmp	.+78     	; 0x171c <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    16ce:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    16d0:	29 98       	cbi	0x05, 1	; 5
    16d2:	90 e2       	ldi	r25, 0x20	; 32
    16d4:	9a 95       	dec	r25
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    16d8:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    16da:	29 9a       	sbi	0x05, 1	; 5
    16dc:	e0 e3       	ldi	r30, 0x30	; 48
    16de:	ea 95       	dec	r30
    16e0:	f1 f7       	brne	.-4      	; 0x16de <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    16e2:	93 b1       	in	r25, 0x03	; 3
    16e4:	92 70       	andi	r25, 0x02	; 2
    16e6:	26 c0       	rjmp	.+76     	; 0x1734 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    16e8:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    16ea:	28 98       	cbi	0x05, 0	; 5
    16ec:	f0 e2       	ldi	r31, 0x20	; 32
    16ee:	fa 95       	dec	r31
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    16f2:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    16f4:	28 9a       	sbi	0x05, 0	; 5
    16f6:	90 e3       	ldi	r25, 0x30	; 48
    16f8:	9a 95       	dec	r25
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    16fc:	93 b1       	in	r25, 0x03	; 3
    16fe:	91 70       	andi	r25, 0x01	; 1
    1700:	19 c0       	rjmp	.+50     	; 0x1734 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    1702:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    1704:	5f 98       	cbi	0x0b, 7	; 11
    1706:	f0 e2       	ldi	r31, 0x20	; 32
    1708:	fa 95       	dec	r31
    170a:	f1 f7       	brne	.-4      	; 0x1708 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    170c:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    170e:	5f 9a       	sbi	0x0b, 7	; 11
    1710:	90 e3       	ldi	r25, 0x30	; 48
    1712:	9a 95       	dec	r25
    1714:	f1 f7       	brne	.-4      	; 0x1712 <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    1716:	99 b1       	in	r25, 0x09	; 9
    1718:	90 78       	andi	r25, 0x80	; 128
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    171c:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    171e:	2a 98       	cbi	0x05, 2	; 5
    1720:	f0 e2       	ldi	r31, 0x20	; 32
    1722:	fa 95       	dec	r31
    1724:	f1 f7       	brne	.-4      	; 0x1722 <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    1726:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    1728:	2a 9a       	sbi	0x05, 2	; 5
    172a:	90 e3       	ldi	r25, 0x30	; 48
    172c:	9a 95       	dec	r25
    172e:	f1 f7       	brne	.-4      	; 0x172c <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    1730:	93 b1       	in	r25, 0x03	; 3
    1732:	94 70       	andi	r25, 0x04	; 4
    1734:	eb ed       	ldi	r30, 0xDB	; 219
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	31 97       	sbiw	r30, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <ds18x20GetByte+0x8e>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <ds18x20GetByte+0x94>
    173e:	00 00       	nop
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    1742:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    1744:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    1746:	91 11       	cpse	r25, r1
    1748:	80 68       	ori	r24, 0x80	; 128
    174a:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    174c:	09 f0       	breq	.+2      	; 0x1750 <ds18x20GetByte+0xa6>
    174e:	b0 cf       	rjmp	.-160    	; 0x16b0 <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    1750:	08 95       	ret

00001752 <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    175c:	0e 94 85 0a 	call	0x150a	; 0x150a <ds18x20IsOnBus>
    1760:	88 23       	and	r24, r24
    1762:	91 f1       	breq	.+100    	; 0x17c8 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    1764:	8c ec       	ldi	r24, 0xCC	; 204
    1766:	61 2f       	mov	r22, r17
    1768:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    176c:	8e eb       	ldi	r24, 0xBE	; 190
    176e:	61 2f       	mov	r22, r17
    1770:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <ds18x20SendByte>
    1774:	c8 e4       	ldi	r28, 0x48	; 72
    1776:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    1778:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    177a:	81 2f       	mov	r24, r17
    177c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <ds18x20GetByte>
    1780:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    1782:	08 27       	eor	r16, r24
    1784:	88 e0       	ldi	r24, 0x08	; 8
    1786:	9c e8       	ldi	r25, 0x8C	; 140
    1788:	06 95       	lsr	r16
    178a:	08 f4       	brcc	.+2      	; 0x178e <ds18x20ReadStratchPad+0x3c>
    178c:	09 27       	eor	r16, r25
    178e:	8a 95       	dec	r24
    1790:	d9 f7       	brne	.-10     	; 0x1788 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	c1 35       	cpi	r28, 0x51	; 81
    1796:	d8 07       	cpc	r29, r24
    1798:	81 f7       	brne	.-32     	; 0x177a <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    179a:	00 23       	and	r16, r16
    179c:	a9 f4       	brne	.+42     	; 0x17c8 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    179e:	81 2f       	mov	r24, r17
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	fc 01       	movw	r30, r24
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	23 e0       	ldi	r18, 0x03	; 3
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	2a 95       	dec	r18
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <ds18x20ReadStratchPad+0x5a>
    17b4:	e8 0f       	add	r30, r24
    17b6:	f9 1f       	adc	r31, r25
    17b8:	e0 5e       	subi	r30, 0xE0	; 224
    17ba:	fd 4f       	sbci	r31, 0xFD	; 253
    17bc:	80 91 48 02 	lds	r24, 0x0248
    17c0:	80 83       	st	Z, r24
    17c2:	80 91 49 02 	lds	r24, 0x0249
    17c6:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	08 95       	ret

000017d2 <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    17d2:	1f 93       	push	r17
    17d4:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    17d6:	0e 94 85 0a 	call	0x150a	; 0x150a <ds18x20IsOnBus>
    17da:	88 23       	and	r24, r24
    17dc:	41 f0       	breq	.+16     	; 0x17ee <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    17de:	8c ec       	ldi	r24, 0xCC	; 204
    17e0:	61 2f       	mov	r22, r17
    17e2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    17e6:	84 e4       	ldi	r24, 0x44	; 68
    17e8:	61 2f       	mov	r22, r17
    17ea:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    17ee:	12 30       	cpi	r17, 0x02	; 2
    17f0:	69 f0       	breq	.+26     	; 0x180c <ds18x20ConvertTemp+0x3a>
    17f2:	13 30       	cpi	r17, 0x03	; 3
    17f4:	18 f4       	brcc	.+6      	; 0x17fc <ds18x20ConvertTemp+0x2a>
    17f6:	11 30       	cpi	r17, 0x01	; 1
    17f8:	89 f4       	brne	.+34     	; 0x181c <ds18x20ConvertTemp+0x4a>
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <ds18x20ConvertTemp+0x34>
    17fc:	13 30       	cpi	r17, 0x03	; 3
    17fe:	49 f0       	breq	.+18     	; 0x1812 <ds18x20ConvertTemp+0x40>
    1800:	14 30       	cpi	r17, 0x04	; 4
    1802:	61 f4       	brne	.+24     	; 0x181c <ds18x20ConvertTemp+0x4a>
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1806:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1808:	21 9a       	sbi	0x04, 1	; 4
    break;
    180a:	08 c0       	rjmp	.+16     	; 0x181c <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    180c:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    180e:	20 9a       	sbi	0x04, 0	; 4
    break;
    1810:	05 c0       	rjmp	.+10     	; 0x181c <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1812:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1814:	57 9a       	sbi	0x0a, 7	; 10
    break;
    1816:	02 c0       	rjmp	.+4      	; 0x181c <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1818:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    181a:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    181c:	1f 91       	pop	r17
    181e:	08 95       	ret

00001820 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	fc 01       	movw	r30, r24
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	23 e0       	ldi	r18, 0x03	; 3
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	2a 95       	dec	r18
    1832:	e1 f7       	brne	.-8      	; 0x182c <ds18x20GetTemp+0xc>
    1834:	e8 0f       	add	r30, r24
    1836:	f9 1f       	adc	r31, r25
    1838:	e0 5e       	subi	r30, 0xE0	; 224
    183a:	fd 4f       	sbci	r31, 0xFD	; 253
    183c:	40 81       	ld	r20, Z
    183e:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    1840:	9a 01       	movw	r18, r20
    1842:	2f 70       	andi	r18, 0x0F	; 15
    1844:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    1846:	c9 01       	movw	r24, r18
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	a3 e0       	ldi	r26, 0x03	; 3
    184e:	22 0f       	add	r18, r18
    1850:	33 1f       	adc	r19, r19
    1852:	aa 95       	dec	r26
    1854:	e1 f7       	brne	.-8      	; 0x184e <ds18x20GetTemp+0x2e>
    1856:	28 0f       	add	r18, r24
    1858:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	84 2b       	or	r24, r20
    1860:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    1862:	60 e1       	ldi	r22, 0x10	; 16
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__divmodhi4>
    186a:	ab 01       	movw	r20, r22
    186c:	44 0f       	add	r20, r20
    186e:	55 1f       	adc	r21, r21
    1870:	e3 e0       	ldi	r30, 0x03	; 3
    1872:	66 0f       	add	r22, r22
    1874:	77 1f       	adc	r23, r23
    1876:	ea 95       	dec	r30
    1878:	e1 f7       	brne	.-8      	; 0x1872 <ds18x20GetTemp+0x52>
    187a:	46 0f       	add	r20, r22
    187c:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    187e:	64 e0       	ldi	r22, 0x04	; 4
    1880:	35 95       	asr	r19
    1882:	27 95       	ror	r18
    1884:	6a 95       	dec	r22
    1886:	e1 f7       	brne	.-8      	; 0x1880 <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    1888:	42 0f       	add	r20, r18
    188a:	53 1f       	adc	r21, r19
  return ret;
}
    188c:	ca 01       	movw	r24, r20
    188e:	08 95       	ret

00001890 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    1890:	e8 2f       	mov	r30, r24
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	e5 5e       	subi	r30, 0xE5	; 229
    1896:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1898:	80 81       	ld	r24, Z
    189a:	08 95       	ret

0000189c <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    189c:	e8 2f       	mov	r30, r24
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	e5 5e       	subi	r30, 0xE5	; 229
    18a2:	fd 4f       	sbci	r31, 0xFD	; 253
    18a4:	60 83       	st	Z, r22
}
    18a6:	08 95       	ret

000018a8 <__divmodhi4>:
    18a8:	97 fb       	bst	r25, 7
    18aa:	09 2e       	mov	r0, r25
    18ac:	07 26       	eor	r0, r23
    18ae:	0a d0       	rcall	.+20     	; 0x18c4 <__divmodhi4_neg1>
    18b0:	77 fd       	sbrc	r23, 7
    18b2:	04 d0       	rcall	.+8      	; 0x18bc <__divmodhi4_neg2>
    18b4:	0c d0       	rcall	.+24     	; 0x18ce <__udivmodhi4>
    18b6:	06 d0       	rcall	.+12     	; 0x18c4 <__divmodhi4_neg1>
    18b8:	00 20       	and	r0, r0
    18ba:	1a f4       	brpl	.+6      	; 0x18c2 <__divmodhi4_exit>

000018bc <__divmodhi4_neg2>:
    18bc:	70 95       	com	r23
    18be:	61 95       	neg	r22
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255

000018c2 <__divmodhi4_exit>:
    18c2:	08 95       	ret

000018c4 <__divmodhi4_neg1>:
    18c4:	f6 f7       	brtc	.-4      	; 0x18c2 <__divmodhi4_exit>
    18c6:	90 95       	com	r25
    18c8:	81 95       	neg	r24
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	08 95       	ret

000018ce <__udivmodhi4>:
    18ce:	aa 1b       	sub	r26, r26
    18d0:	bb 1b       	sub	r27, r27
    18d2:	51 e1       	ldi	r21, 0x11	; 17
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <__udivmodhi4_ep>

000018d6 <__udivmodhi4_loop>:
    18d6:	aa 1f       	adc	r26, r26
    18d8:	bb 1f       	adc	r27, r27
    18da:	a6 17       	cp	r26, r22
    18dc:	b7 07       	cpc	r27, r23
    18de:	10 f0       	brcs	.+4      	; 0x18e4 <__udivmodhi4_ep>
    18e0:	a6 1b       	sub	r26, r22
    18e2:	b7 0b       	sbc	r27, r23

000018e4 <__udivmodhi4_ep>:
    18e4:	88 1f       	adc	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	5a 95       	dec	r21
    18ea:	a9 f7       	brne	.-22     	; 0x18d6 <__udivmodhi4_loop>
    18ec:	80 95       	com	r24
    18ee:	90 95       	com	r25
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	08 95       	ret

000018f6 <__eerd_byte_m328p>:
    18f6:	f9 99       	sbic	0x1f, 1	; 31
    18f8:	fe cf       	rjmp	.-4      	; 0x18f6 <__eerd_byte_m328p>
    18fa:	92 bd       	out	0x22, r25	; 34
    18fc:	81 bd       	out	0x21, r24	; 33
    18fe:	f8 9a       	sbi	0x1f, 0	; 31
    1900:	99 27       	eor	r25, r25
    1902:	80 b5       	in	r24, 0x20	; 32
    1904:	08 95       	ret

00001906 <__eerd_word_m328p>:
    1906:	a8 e1       	ldi	r26, 0x18	; 24
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	42 e0       	ldi	r20, 0x02	; 2
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__eerd_blraw_m328p>

00001912 <__eewr_byte_m328p>:
    1912:	26 2f       	mov	r18, r22

00001914 <__eewr_r18_m328p>:
    1914:	f9 99       	sbic	0x1f, 1	; 31
    1916:	fe cf       	rjmp	.-4      	; 0x1914 <__eewr_r18_m328p>
    1918:	1f ba       	out	0x1f, r1	; 31
    191a:	92 bd       	out	0x22, r25	; 34
    191c:	81 bd       	out	0x21, r24	; 33
    191e:	20 bd       	out	0x20, r18	; 32
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	fa 9a       	sbi	0x1f, 2	; 31
    1926:	f9 9a       	sbi	0x1f, 1	; 31
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	08 95       	ret

0000192e <__eewr_word_m328p>:
    192e:	0e 94 89 0c 	call	0x1912	; 0x1912 <__eewr_byte_m328p>
    1932:	27 2f       	mov	r18, r23
    1934:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__eewr_r18_m328p>

00001938 <__eerd_block_m328p>:
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22

0000193c <__eerd_blraw_m328p>:
    193c:	fc 01       	movw	r30, r24
    193e:	f9 99       	sbic	0x1f, 1	; 31
    1940:	fe cf       	rjmp	.-4      	; 0x193e <__eerd_blraw_m328p+0x2>
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <__eerd_blraw_m328p+0x14>
    1944:	f2 bd       	out	0x22, r31	; 34
    1946:	e1 bd       	out	0x21, r30	; 33
    1948:	f8 9a       	sbi	0x1f, 0	; 31
    194a:	31 96       	adiw	r30, 0x01	; 1
    194c:	00 b4       	in	r0, 0x20	; 32
    194e:	0d 92       	st	X+, r0
    1950:	41 50       	subi	r20, 0x01	; 1
    1952:	50 40       	sbci	r21, 0x00	; 0
    1954:	b8 f7       	brcc	.-18     	; 0x1944 <__eerd_blraw_m328p+0x8>
    1956:	08 95       	ret

00001958 <_exit>:
    1958:	f8 94       	cli

0000195a <__stop_program>:
    195a:	ff cf       	rjmp	.-2      	; 0x195a <__stop_program>
