
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  000019e6  00001a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  008001a6  008001a6  00001b20  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005a7  00000000  00000000  0000285d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c54  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007d4  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020fd  00000000  00000000  0000522c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  0000732c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000610  00000000  00000000  0000772c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001385  00000000  00000000  00007d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000013a  00000000  00000000  000090c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ee       	ldi	r30, 0xE6	; 230
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 35       	cpi	r26, 0x53	; 83
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 9a       	sbi	0x0b, 3	; 11
  OUT_2_init();
      be:	53 9a       	sbi	0x0a, 3	; 10
      c0:	5b 9a       	sbi	0x0b, 3	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 65 08 	call	0x10ca	; 0x10ca <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000);  // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	44 ef       	ldi	r20, 0xF4	; 244
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 10);        // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	4a e0       	ldi	r20, 0x0A	; 10
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);    // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 af 02 	call	0x55e	; 0x55e <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 c1 02 	call	0x582	; 0x582 <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 b8 02 	call	0x570	; 0x570 <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 ca 02 	call	0x594	; 0x594 <load_min_temp_2>
  load_type1();
     112:	0e 94 ed 02 	call	0x5da	; 0x5da <load_type1>
  load_type2();
     116:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 1f 09 	call	0x123e	; 0x123e <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <set_outport>:
  }    
}
//=============================================================================
void set_outport(uint8_t chanel, uint8_t val)
{
  if (chanel == 1) {
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	51 f4       	brne	.+20     	; 0x176 <set_outport+0x18>
    if (val == 1) {
     162:	61 30       	cpi	r22, 0x01	; 1
     164:	21 f4       	brne	.+8      	; 0x16e <set_outport+0x10>
	  OUT_1_1();
     166:	5b 9a       	sbi	0x0b, 3	; 11
	  outs[0] = 1;
     168:	60 93 b1 01 	sts	0x01B1, r22
     16c:	08 95       	ret
	} else {
	  OUT_1_0();
     16e:	5b 98       	cbi	0x0b, 3	; 11
	  outs[0] = 0;
     170:	10 92 b1 01 	sts	0x01B1, r1
     174:	08 95       	ret
	}
  }
  if (chanel == 2) {
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	49 f4       	brne	.+18     	; 0x18c <set_outport+0x2e>
    if (val == 1) {
     17a:	61 30       	cpi	r22, 0x01	; 1
     17c:	21 f4       	brne	.+8      	; 0x186 <set_outport+0x28>
	  OUT_2_1();
     17e:	5b 9a       	sbi	0x0b, 3	; 11
	  outs[1] = 1;
     180:	60 93 b2 01 	sts	0x01B2, r22
     184:	08 95       	ret
	} else {
	  OUT_2_0();
     186:	5b 98       	cbi	0x0b, 3	; 11
	  outs[1] = 0;
     188:	10 92 b2 01 	sts	0x01B2, r1
     18c:	08 95       	ret

0000018e <check_temp>:
	}
  }
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     18e:	1f 93       	push	r17
     190:	18 2f       	mov	r17, r24
  int16_t t = ds18x20GetTemp(chanel);
     192:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
     196:	ac 01       	movw	r20, r24
  if (status[chanel - 1] == T_OTSLED_MAX) {
     198:	21 2f       	mov	r18, r17
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	30 40       	sbci	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	e7 5c       	subi	r30, 0xC7	; 199
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 81       	ld	r24, Z
     1a8:	b9 01       	movw	r22, r18
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	66 0f       	add	r22, r22
     1b0:	77 1f       	adc	r23, r23
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	89 f4       	brne	.+34     	; 0x1d8 <check_temp+0x4a>
 // отслеживаем превышение максимума
    if (t > temps[chanel - 1][T_MAX]) {
     1b6:	67 55       	subi	r22, 0x57	; 87
     1b8:	7e 4f       	sbci	r23, 0xFE	; 254
     1ba:	db 01       	movw	r26, r22
     1bc:	8d 91       	ld	r24, X+
     1be:	9c 91       	ld	r25, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	84 17       	cp	r24, r20
     1c4:	95 07       	cpc	r25, r21
     1c6:	0c f5       	brge	.+66     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MIN;
     1c8:	10 82       	st	Z, r1
      if (types[chanel - 1] == T_HEATER) {
     1ca:	29 5c       	subi	r18, 0xC9	; 201
     1cc:	3e 4f       	sbci	r19, 0xFE	; 254
     1ce:	f9 01       	movw	r30, r18
     1d0:	80 81       	ld	r24, Z
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	99 f4       	brne	.+38     	; 0x1fc <check_temp+0x6e>
     1d6:	15 c0       	rjmp	.+42     	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
	  }
    }
  } else {
   // отслеживаем превышение минимума
    if (t < temps[chanel - 1][T_MIN]) {
     1d8:	67 55       	subi	r22, 0x57	; 87
     1da:	7e 4f       	sbci	r23, 0xFE	; 254
     1dc:	db 01       	movw	r26, r22
     1de:	12 96       	adiw	r26, 0x02	; 2
     1e0:	6d 91       	ld	r22, X+
     1e2:	7c 91       	ld	r23, X
     1e4:	13 97       	sbiw	r26, 0x03	; 3
     1e6:	46 17       	cp	r20, r22
     1e8:	57 07       	cpc	r21, r23
     1ea:	7c f4       	brge	.+30     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MAX;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 83       	st	Z, r24
      if (types[chanel - 1] == T_HEATER) {
     1f0:	29 5c       	subi	r18, 0xC9	; 201
     1f2:	3e 4f       	sbci	r19, 0xFE	; 254
     1f4:	f9 01       	movw	r30, r18
     1f6:	80 81       	ld	r24, Z
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	19 f4       	brne	.+6      	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
     1fc:	81 2f       	mov	r24, r17
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	02 c0       	rjmp	.+4      	; 0x206 <check_temp+0x78>
	  } else {
        set_outport(chanel, 0);
     202:	81 2f       	mov	r24, r17
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
    }
  }
}
     20a:	1f 91       	pop	r17
     20c:	08 95       	ret

0000020e <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     20e:	80 91 a8 01 	lds	r24, 0x01A8
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <DS18x20_scan+0x10>
    dscount--;
     216:	81 50       	subi	r24, 0x01	; 1
     218:	80 93 a8 01 	sts	0x01A8, r24
	return;
     21c:	08 95       	ret
  }
  switch(ds_state) {
     21e:	80 91 b5 01 	lds	r24, 0x01B5
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	b9 f0       	breq	.+46     	; 0x254 <DS18x20_scan+0x46>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	20 f0       	brcs	.+8      	; 0x232 <DS18x20_scan+0x24>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	09 f0       	breq	.+2      	; 0x230 <DS18x20_scan+0x22>
     22e:	59 c0       	rjmp	.+178    	; 0x2e2 <DS18x20_scan+0xd4>
     230:	24 c0       	rjmp	.+72     	; 0x27a <DS18x20_scan+0x6c>
    case 0:
      ds18x20ConvertTemp(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
	  dscount = 10;
     24a:	8a e0       	ldi	r24, 0x0A	; 10
     24c:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	10 c0       	rjmp	.+32     	; 0x274 <DS18x20_scan+0x66>
    break;
    case 1:
      ds18x20ReadStratchPad(1);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
	  dscount = 10;
     26c:	8a e0       	ldi	r24, 0x0A	; 10
     26e:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 2;
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	80 93 b5 01 	sts	0x01B5, r24
    break;
     278:	08 95       	ret
    case 2:
      if (ds18x20GetDevCount(1) == 1) {
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	31 f4       	brne	.+12     	; 0x290 <DS18x20_scan+0x82>
	    ds18x20GetTemp(1);
     284:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
        check_temp(1);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
     28e:	04 c0       	rjmp	.+8      	; 0x298 <DS18x20_scan+0x8a>
	  } else {
        set_outport(1, 0);;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
      if (ds18x20GetDevCount(2) == 1) {
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	39 f4       	brne	.+14     	; 0x2b0 <DS18x20_scan+0xa2>
        ds18x20GetTemp(2);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
        check_temp(2);
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <DS18x20_scan+0xaa>
	  } else {
        set_outport(2, 0);;
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
      if (ds18x20GetDevCount(3) == 1) {
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	19 f4       	brne	.+6      	; 0x2c8 <DS18x20_scan+0xba>
        ds18x20GetTemp(3);
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
	  }
      if (ds18x20GetDevCount(4) == 1) {
     2c8:	84 e0       	ldi	r24, 0x04	; 4
     2ca:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <DS18x20_scan+0xca>
        ds18x20GetTemp(4);
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
	  }
	  dscount = SCAN_TIME / 100;
     2d8:	84 e1       	ldi	r24, 0x14	; 20
     2da:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 0;
     2de:	10 92 b5 01 	sts	0x01B5, r1
     2e2:	08 95       	ret

000002e4 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     2e4:	89 3c       	cpi	r24, 0xC9	; 201
     2e6:	29 f0       	breq	.+10     	; 0x2f2 <events_default+0xe>
     2e8:	8c 3c       	cpi	r24, 0xCC	; 204
     2ea:	71 f0       	breq	.+28     	; 0x308 <events_default+0x24>
     2ec:	88 3c       	cpi	r24, 0xC8	; 200
     2ee:	71 f4       	brne	.+28     	; 0x30c <events_default+0x28>
     2f0:	08 c0       	rjmp	.+16     	; 0x302 <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 91 32 01 	lds	r25, 0x0132
     2f8:	91 11       	cpse	r25, r1
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	80 93 32 01 	sts	0x0132, r24
    break;
     300:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     302:	0e 94 0f 08 	call	0x101e	; 0x101e <KBD_scan>
    break;
     306:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     308:	0e 94 07 01 	call	0x20e	; 0x20e <DS18x20_scan>
     30c:	08 95       	ret

0000030e <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
     30e:	85 36       	cpi	r24, 0x65	; 101
     310:	09 f4       	brne	.+2      	; 0x314 <run_start+0x6>
     312:	b9 c0       	rjmp	.+370    	; 0x486 <run_start+0x178>
     314:	87 36       	cpi	r24, 0x67	; 103
     316:	09 f4       	brne	.+2      	; 0x31a <run_start+0xc>
     318:	8f c0       	rjmp	.+286    	; 0x438 <run_start+0x12a>
     31a:	84 36       	cpi	r24, 0x64	; 100
     31c:	09 f0       	breq	.+2      	; 0x320 <run_start+0x12>
     31e:	04 c1       	rjmp	.+520    	; 0x528 <run_start+0x21a>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	6d e2       	ldi	r22, 0x2D	; 45
     32e:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
	  ds_count = 0;
     332:	10 92 a6 01 	sts	0x01A6, r1
      ds18x20IsOnBus(1);
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	0e 94 ca 0a 	call	0x1594	; 0x1594 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	0e 94 ca 0a 	call	0x1594	; 0x1594 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	41 f4       	brne	.+16     	; 0x368 <run_start+0x5a>
     358:	80 91 a6 01 	lds	r24, 0x01A6
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	80 93 a6 01 	sts	0x01A6, r24
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	61 e3       	ldi	r22, 0x31	; 49
     366:	02 c0       	rjmp	.+4      	; 0x36c <run_start+0x5e>
     368:	85 e0       	ldi	r24, 0x05	; 5
     36a:	60 e2       	ldi	r22, 0x20	; 32
     36c:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	41 f4       	brne	.+16     	; 0x38a <run_start+0x7c>
     37a:	80 91 a6 01 	lds	r24, 0x01A6
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	80 93 a6 01 	sts	0x01A6, r24
     384:	86 e0       	ldi	r24, 0x06	; 6
     386:	61 e3       	ldi	r22, 0x31	; 49
     388:	02 c0       	rjmp	.+4      	; 0x38e <run_start+0x80>
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	60 e2       	ldi	r22, 0x20	; 32
     38e:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	41 f4       	brne	.+16     	; 0x3ac <run_start+0x9e>
     39c:	80 91 a6 01 	lds	r24, 0x01A6
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 a6 01 	sts	0x01A6, r24
     3a6:	87 e0       	ldi	r24, 0x07	; 7
     3a8:	61 e3       	ldi	r22, 0x31	; 49
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <run_start+0xa2>
     3ac:	87 e0       	ldi	r24, 0x07	; 7
     3ae:	60 e2       	ldi	r22, 0x20	; 32
     3b0:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	41 f4       	brne	.+16     	; 0x3ce <run_start+0xc0>
     3be:	80 91 a6 01 	lds	r24, 0x01A6
     3c2:	8f 5f       	subi	r24, 0xFF	; 255
     3c4:	80 93 a6 01 	sts	0x01A6, r24
     3c8:	88 e0       	ldi	r24, 0x08	; 8
     3ca:	61 e3       	ldi	r22, 0x31	; 49
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <run_start+0xc4>
     3ce:	88 e0       	ldi	r24, 0x08	; 8
     3d0:	60 e2       	ldi	r22, 0x20	; 32
     3d2:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
	  if (ds_count == 0) {
     3d6:	60 91 a6 01 	lds	r22, 0x01A6
     3da:	66 23       	and	r22, r22
     3dc:	21 f4       	brne	.+8      	; 0x3e6 <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     3de:	84 e6       	ldi	r24, 0x64	; 100
     3e0:	68 eb       	ldi	r22, 0xB8	; 184
     3e2:	7b e0       	ldi	r23, 0x0B	; 11
     3e4:	4b c0       	rjmp	.+150    	; 0x47c <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	20 e2       	ldi	r18, 0x20	; 32
     3ee:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	11 f4       	brne	.+4      	; 0x400 <run_start+0xf2>
     3fc:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	19 f4       	brne	.+6      	; 0x410 <run_start+0x102>
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	19 f4       	brne	.+6      	; 0x420 <run_start+0x112>
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     420:	84 e0       	ldi	r24, 0x04	; 4
     422:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	19 f4       	brne	.+6      	; 0x430 <run_start+0x122>
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	0e 94 2e 0c 	call	0x185c	; 0x185c <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     430:	87 e6       	ldi	r24, 0x67	; 103
     432:	68 ee       	ldi	r22, 0xE8	; 232
     434:	73 e0       	ldi	r23, 0x03	; 3
     436:	22 c0       	rjmp	.+68     	; 0x47c <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	11 f4       	brne	.+4      	; 0x446 <run_start+0x138>
     442:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	19 f4       	brne	.+6      	; 0x456 <run_start+0x148>
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	19 f4       	brne	.+6      	; 0x466 <run_start+0x158>
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	19 f4       	brne	.+6      	; 0x476 <run_start+0x168>
     470:	84 e0       	ldi	r24, 0x04	; 4
     472:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     476:	85 e6       	ldi	r24, 0x65	; 101
     478:	64 e6       	ldi	r22, 0x64	; 100
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
    break;
     484:	08 95       	ret
    case EVENT_RUN_MAIN:
	  if (ds18x20GetTemp(1) < temps[0][0]) {
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
     48c:	20 91 a9 01 	lds	r18, 0x01A9
     490:	30 91 aa 01 	lds	r19, 0x01AA
     494:	40 91 37 01 	lds	r20, 0x0137
     498:	82 17       	cp	r24, r18
     49a:	93 07       	cpc	r25, r19
     49c:	34 f4       	brge	.+12     	; 0x4aa <run_start+0x19c>
	    status[0] = T_OTSLED_MAX;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 39 01 	sts	0x0139, r24
		if (types[0] == T_HEATER) set_outport(1, 1); else set_outport(1, 0);
     4a4:	41 30       	cpi	r20, 0x01	; 1
     4a6:	29 f4       	brne	.+10     	; 0x4b2 <run_start+0x1a4>
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <run_start+0x1ac>
	  } else {
	    status[0] = T_OTSLED_MIN;
     4aa:	10 92 39 01 	sts	0x0139, r1
		if (types[0] == T_HEATER) set_outport(1, 0); else set_outport(1, 1);
     4ae:	41 30       	cpi	r20, 0x01	; 1
     4b0:	19 f4       	brne	.+6      	; 0x4b8 <run_start+0x1aa>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <run_start+0x1ae>
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
	  if (ds18x20GetTemp(2) < temps[1][0]) {
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
     4c6:	20 91 ad 01 	lds	r18, 0x01AD
     4ca:	30 91 ae 01 	lds	r19, 0x01AE
     4ce:	40 91 38 01 	lds	r20, 0x0138
     4d2:	82 17       	cp	r24, r18
     4d4:	93 07       	cpc	r25, r19
     4d6:	34 f4       	brge	.+12     	; 0x4e4 <run_start+0x1d6>
	    status[1] = T_OTSLED_MAX;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 3a 01 	sts	0x013A, r24
		if (types[1] == T_HEATER) set_outport(2, 1); else set_outport(2, 0);
     4de:	41 30       	cpi	r20, 0x01	; 1
     4e0:	29 f4       	brne	.+10     	; 0x4ec <run_start+0x1de>
     4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <run_start+0x1e4>
	  } else {
	    status[1] = T_OTSLED_MIN;
     4e4:	10 92 3a 01 	sts	0x013A, r1
		if (types[1] == T_HEATER) set_outport(2, 0); else set_outport(2, 1);
     4e8:	41 30       	cpi	r20, 0x01	; 1
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <run_start+0x1e4>
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <run_start+0x1e8>
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
      MAX7219_clearDisplay();
     4fa:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     4fe:	8c ec       	ldi	r24, 0xCC	; 204
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	44 e6       	ldi	r20, 0x64	; 100
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     50c:	88 e6       	ldi	r24, 0x68	; 104
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
      SET_STATE(run_main);
     51a:	8c e9       	ldi	r24, 0x9C	; 156
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	90 93 3e 01 	sts	0x013E, r25
     522:	80 93 3d 01 	sts	0x013D, r24
    break;
     526:	08 95       	ret
	default:
	  events_default(event);
     528:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     52c:	08 95       	ret

0000052e <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     52e:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     530:	80 e1       	ldi	r24, 0x10	; 16
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__eewr_word_m328p>
}
     538:	08 95       	ret

0000053a <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     53a:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     53c:	80 e2       	ldi	r24, 0x20	; 32
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__eewr_word_m328p>
}
     544:	08 95       	ret

00000546 <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     546:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     548:	82 e1       	ldi	r24, 0x12	; 18
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__eewr_word_m328p>
}
     550:	08 95       	ret

00000552 <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     552:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     554:	82 e2       	ldi	r24, 0x22	; 34
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__eewr_word_m328p>
}
     55c:	08 95       	ret

0000055e <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     55e:	80 e1       	ldi	r24, 0x10	; 16
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     566:	80 93 a9 01 	sts	0x01A9, r24
     56a:	90 93 aa 01 	sts	0x01AA, r25
  return (int16_t)tu;
}
     56e:	08 95       	ret

00000570 <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     570:	82 e1       	ldi	r24, 0x12	; 18
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     578:	80 93 ab 01 	sts	0x01AB, r24
     57c:	90 93 ac 01 	sts	0x01AC, r25
  return (int16_t)tu;
}
     580:	08 95       	ret

00000582 <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     582:	80 e2       	ldi	r24, 0x20	; 32
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     58a:	80 93 ad 01 	sts	0x01AD, r24
     58e:	90 93 ae 01 	sts	0x01AE, r25
  return (int16_t)tu;
}
     592:	08 95       	ret

00000594 <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     594:	82 e2       	ldi	r24, 0x22	; 34
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     59c:	80 93 af 01 	sts	0x01AF, r24
     5a0:	90 93 b0 01 	sts	0x01B0, r25
  return (int16_t)tu;
}
     5a4:	08 95       	ret

000005a6 <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     5a6:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     5a8:	80 e3       	ldi	r24, 0x30	; 48
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 ce 0c 	call	0x199c	; 0x199c <__eewr_byte_m328p>
}
     5b0:	08 95       	ret

000005b2 <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     5b2:	80 e3       	ldi	r24, 0x30	; 48
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__eerd_byte_m328p>
     5ba:	80 93 36 01 	sts	0x0136, r24
  if (brightnes > 15) brightnes = 2;
     5be:	80 31       	cpi	r24, 0x10	; 16
     5c0:	18 f0       	brcs	.+6      	; 0x5c8 <load_brightnes+0x16>
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	80 93 36 01 	sts	0x0136, r24
  return brightnes;
}
     5c8:	80 91 36 01 	lds	r24, 0x0136
     5cc:	08 95       	ret

000005ce <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     5ce:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     5d0:	84 e1       	ldi	r24, 0x14	; 20
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 ce 0c 	call	0x199c	; 0x199c <__eewr_byte_m328p>
}
     5d8:	08 95       	ret

000005da <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     5da:	84 e1       	ldi	r24, 0x14	; 20
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__eerd_byte_m328p>
     5e2:	81 11       	cpse	r24, r1
     5e4:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     5e6:	80 93 37 01 	sts	0x0137, r24
  return t;
}
     5ea:	08 95       	ret

000005ec <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     5ec:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     5ee:	84 e2       	ldi	r24, 0x24	; 36
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 ce 0c 	call	0x199c	; 0x199c <__eewr_byte_m328p>
}
     5f6:	08 95       	ret

000005f8 <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     5f8:	84 e2       	ldi	r24, 0x24	; 36
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__eerd_byte_m328p>
     600:	81 11       	cpse	r24, r1
     602:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     604:	80 93 38 01 	sts	0x0138, r24
  return t;
}
     608:	08 95       	ret

0000060a <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     60a:	e0 91 b3 01 	lds	r30, 0x01B3
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	e6 5d       	subi	r30, 0xD6	; 214
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	60 81       	ld	r22, Z
     61a:	71 81       	ldd	r23, Z+1	; 0x01
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
}
     622:	08 95       	ret

00000624 <run_error>:
  }    
}
//=============================================================================
void run_error(unsigned char event)
{
  switch(event) {
     624:	8e 31       	cpi	r24, 0x1E	; 30
     626:	09 f4       	brne	.+2      	; 0x62a <run_error+0x6>
     628:	3e c0       	rjmp	.+124    	; 0x6a6 <run_error+0x82>
     62a:	8f 31       	cpi	r24, 0x1F	; 31
     62c:	30 f4       	brcc	.+12     	; 0x63a <run_error+0x16>
     62e:	8a 30       	cpi	r24, 0x0A	; 10
     630:	d1 f1       	breq	.+116    	; 0x6a6 <run_error+0x82>
     632:	84 31       	cpi	r24, 0x14	; 20
     634:	09 f0       	breq	.+2      	; 0x638 <run_error+0x14>
     636:	44 c0       	rjmp	.+136    	; 0x6c0 <run_error+0x9c>
     638:	36 c0       	rjmp	.+108    	; 0x6a6 <run_error+0x82>
     63a:	89 3c       	cpi	r24, 0xC9	; 201
     63c:	21 f0       	breq	.+8      	; 0x646 <run_error+0x22>
     63e:	8a 3c       	cpi	r24, 0xCA	; 202
     640:	09 f0       	breq	.+2      	; 0x644 <run_error+0x20>
     642:	3e c0       	rjmp	.+124    	; 0x6c0 <run_error+0x9c>
     644:	1d c0       	rjmp	.+58     	; 0x680 <run_error+0x5c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 91 32 01 	lds	r25, 0x0132
     64c:	91 11       	cpse	r25, r1
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	80 93 32 01 	sts	0x0132, r24
	  if (error_cnt > 0) error_cnt--; else {
     654:	80 91 35 01 	lds	r24, 0x0135
     658:	88 23       	and	r24, r24
     65a:	21 f0       	breq	.+8      	; 0x664 <run_error+0x40>
     65c:	81 50       	subi	r24, 0x01	; 1
     65e:	80 93 35 01 	sts	0x0135, r24
     662:	08 95       	ret
        wait_menu = WAIT_MENU_TIME;
     664:	84 e1       	ldi	r24, 0x14	; 20
     666:	80 93 34 01 	sts	0x0134, r24
        SET_STATE(run_menu);
     66a:	8e ec       	ldi	r24, 0xCE	; 206
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	90 93 3e 01 	sts	0x013E, r25
     672:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_clearDisplay();
     676:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        show_menu();
     67a:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
     67e:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 91 33 01 	lds	r25, 0x0133
     686:	91 11       	cpse	r25, r1
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     68e:	88 23       	and	r24, r24
     690:	21 f0       	breq	.+8      	; 0x69a <run_error+0x76>
        MAX7219_printStr(1, "Err ");
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	63 e0       	ldi	r22, 0x03	; 3
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	03 c0       	rjmp	.+6      	; 0x6a0 <run_error+0x7c>
	  } else {
        MAX7219_printStr(1, "    ");
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	68 e0       	ldi	r22, 0x08	; 8
     69e:	71 e0       	ldi	r23, 0x01	; 1
     6a0:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
     6a4:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     6a6:	84 e1       	ldi	r24, 0x14	; 20
     6a8:	80 93 34 01 	sts	0x0134, r24
      SET_STATE(run_menu);
     6ac:	8e ec       	ldi	r24, 0xCE	; 206
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	90 93 3e 01 	sts	0x013E, r25
     6b4:	80 93 3d 01 	sts	0x013D, r24
      MAX7219_clearDisplay();
     6b8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
      show_menu();
     6bc:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
     6c0:	08 95       	ret

000006c2 <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     6c2:	8e 31       	cpi	r24, 0x1E	; 30
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <run_set_brightnes+0x6>
     6c6:	3f c0       	rjmp	.+126    	; 0x746 <run_set_brightnes+0x84>
     6c8:	8f 31       	cpi	r24, 0x1F	; 31
     6ca:	38 f4       	brcc	.+14     	; 0x6da <run_set_brightnes+0x18>
     6cc:	8a 30       	cpi	r24, 0x0A	; 10
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <run_set_brightnes+0x10>
     6d0:	54 c0       	rjmp	.+168    	; 0x77a <run_set_brightnes+0xb8>
     6d2:	84 31       	cpi	r24, 0x14	; 20
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <run_set_brightnes+0x16>
     6d6:	5f c0       	rjmp	.+190    	; 0x796 <run_set_brightnes+0xd4>
     6d8:	3f c0       	rjmp	.+126    	; 0x758 <run_set_brightnes+0x96>
     6da:	89 3c       	cpi	r24, 0xC9	; 201
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <run_set_brightnes+0x24>
     6de:	8a 3c       	cpi	r24, 0xCA	; 202
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <run_set_brightnes+0x22>
     6e2:	59 c0       	rjmp	.+178    	; 0x796 <run_set_brightnes+0xd4>
     6e4:	18 c0       	rjmp	.+48     	; 0x716 <run_set_brightnes+0x54>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 91 32 01 	lds	r25, 0x0132
     6ec:	91 11       	cpse	r25, r1
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     6f4:	80 91 34 01 	lds	r24, 0x0134
     6f8:	88 23       	and	r24, r24
     6fa:	21 f0       	breq	.+8      	; 0x704 <run_set_brightnes+0x42>
     6fc:	81 50       	subi	r24, 0x01	; 1
     6fe:	80 93 34 01 	sts	0x0134, r24
     702:	08 95       	ret
        MAX7219_clearDisplay();
     704:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     708:	8e ec       	ldi	r24, 0xCE	; 206
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	90 93 3e 01 	sts	0x013E, r25
     710:	80 93 3d 01 	sts	0x013D, r24
     714:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 91 33 01 	lds	r25, 0x0133
     71c:	91 11       	cpse	r25, r1
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     724:	88 23       	and	r24, r24
     726:	49 f0       	breq	.+18     	; 0x73a <run_set_brightnes+0x78>
        MAX7219_printNum(4, brightnes, 2, ' ');
     728:	60 91 36 01 	lds	r22, 0x0136
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	42 e0       	ldi	r20, 0x02	; 2
     732:	20 e2       	ldi	r18, 0x20	; 32
     734:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_printNum>
     738:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	6d e0       	ldi	r22, 0x0D	; 13
     73e:	71 e0       	ldi	r23, 0x01	; 1
     740:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
     744:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     746:	84 e1       	ldi	r24, 0x14	; 20
     748:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes > 0) {
     74c:	60 91 36 01 	lds	r22, 0x0136
     750:	66 23       	and	r22, r22
     752:	19 f1       	breq	.+70     	; 0x79a <run_set_brightnes+0xd8>
	    brightnes--;
     754:	61 50       	subi	r22, 0x01	; 1
     756:	19 c0       	rjmp	.+50     	; 0x78a <run_set_brightnes+0xc8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     758:	80 93 34 01 	sts	0x0134, r24
	  save_brightnes(brightnes);
     75c:	80 91 36 01 	lds	r24, 0x0136
     760:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <save_brightnes>
      MAX7219_clearDisplay();
     764:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     768:	8e ec       	ldi	r24, 0xCE	; 206
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	90 93 3e 01 	sts	0x013E, r25
     770:	80 93 3d 01 	sts	0x013D, r24
      show_menu();
     774:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
    break;
     778:	08 95       	ret
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     77a:	84 e1       	ldi	r24, 0x14	; 20
     77c:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes < 15) {
     780:	60 91 36 01 	lds	r22, 0x0136
     784:	6f 30       	cpi	r22, 0x0F	; 15
     786:	48 f4       	brcc	.+18     	; 0x79a <run_set_brightnes+0xd8>
	    brightnes++;
     788:	6f 5f       	subi	r22, 0xFF	; 255
     78a:	60 93 36 01 	sts	0x0136, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     78e:	8a e0       	ldi	r24, 0x0A	; 10
     790:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
     794:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     796:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     79a:	08 95       	ret

0000079c <run_menu>:
    break;
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
     79c:	1f 93       	push	r17
  switch(event) {
     79e:	8e 31       	cpi	r24, 0x1E	; 30
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <run_menu+0x8>
     7a2:	b1 c0       	rjmp	.+354    	; 0x906 <__stack+0x7>
     7a4:	8f 31       	cpi	r24, 0x1F	; 31
     7a6:	30 f4       	brcc	.+12     	; 0x7b4 <run_menu+0x18>
     7a8:	8a 30       	cpi	r24, 0x0A	; 10
     7aa:	41 f1       	breq	.+80     	; 0x7fc <run_menu+0x60>
     7ac:	84 31       	cpi	r24, 0x14	; 20
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <run_menu+0x16>
     7b0:	bf c0       	rjmp	.+382    	; 0x930 <__stack+0x31>
     7b2:	38 c0       	rjmp	.+112    	; 0x824 <run_menu+0x88>
     7b4:	89 36       	cpi	r24, 0x69	; 105
     7b6:	09 f4       	brne	.+2      	; 0x7ba <run_menu+0x1e>
     7b8:	70 c0       	rjmp	.+224    	; 0x89a <run_menu+0xfe>
     7ba:	89 3c       	cpi	r24, 0xC9	; 201
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <run_menu+0x24>
     7be:	b8 c0       	rjmp	.+368    	; 0x930 <__stack+0x31>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 91 32 01 	lds	r25, 0x0132
     7c6:	91 11       	cpse	r25, r1
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     7ce:	80 91 34 01 	lds	r24, 0x0134
     7d2:	88 23       	and	r24, r24
     7d4:	21 f0       	breq	.+8      	; 0x7de <run_menu+0x42>
     7d6:	81 50       	subi	r24, 0x01	; 1
     7d8:	80 93 34 01 	sts	0x0134, r24
     7dc:	07 c0       	rjmp	.+14     	; 0x7ec <run_menu+0x50>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     7de:	89 e6       	ldi	r24, 0x69	; 105
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     7ec:	80 91 b3 01 	lds	r24, 0x01B3
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	f1 f1       	breq	.+124    	; 0x870 <run_menu+0xd4>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	6d e0       	ldi	r22, 0x0D	; 13
     7f8:	71 e0       	ldi	r23, 0x01	; 1
     7fa:	11 c0       	rjmp	.+34     	; 0x81e <run_menu+0x82>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     7fc:	84 e1       	ldi	r24, 0x14	; 20
     7fe:	80 93 34 01 	sts	0x0134, r24
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     802:	80 91 b3 01 	lds	r24, 0x01B3
     806:	88 23       	and	r24, r24
     808:	11 f0       	breq	.+4      	; 0x80e <run_menu+0x72>
     80a:	81 50       	subi	r24, 0x01	; 1
     80c:	01 c0       	rjmp	.+2      	; 0x810 <run_menu+0x74>
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	80 93 b3 01 	sts	0x01B3, r24
	  show_menu();
     814:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
      MAX7219_printStr(5, "    ");
     818:	85 e0       	ldi	r24, 0x05	; 5
     81a:	68 e0       	ldi	r22, 0x08	; 8
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
    break;
     822:	88 c0       	rjmp	.+272    	; 0x934 <__stack+0x35>
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     824:	80 93 34 01 	sts	0x0134, r24
	  n_edit = 0;
     828:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     82c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
	  if (m_menu == MM_D1) {
     830:	80 91 b3 01 	lds	r24, 0x01B3
     834:	88 23       	and	r24, r24
     836:	29 f4       	brne	.+10     	; 0x842 <run_menu+0xa6>
		KBD_set_type(0);
     838:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
        SET_STATE(run_set_1);
     83c:	80 eb       	ldi	r24, 0xB0	; 176
     83e:	96 e0       	ldi	r25, 0x06	; 6
     840:	07 c0       	rjmp	.+14     	; 0x850 <run_menu+0xb4>
	  } else if (m_menu == MM_D2) {
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	51 f4       	brne	.+20     	; 0x85a <run_menu+0xbe>
		KBD_set_type(0);
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
        SET_STATE(run_set_2);
     84c:	81 ec       	ldi	r24, 0xC1	; 193
     84e:	95 e0       	ldi	r25, 0x05	; 5
     850:	90 93 3e 01 	sts	0x013E, r25
     854:	80 93 3d 01 	sts	0x013D, r24
     858:	6d c0       	rjmp	.+218    	; 0x934 <__stack+0x35>
	  } else if (m_menu == MM_BRIGHTNES) {
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	91 f4       	brne	.+36     	; 0x882 <run_menu+0xe6>
		KBD_set_type(1);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
        SET_STATE(run_set_brightnes);
     864:	81 e6       	ldi	r24, 0x61	; 97
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	90 93 3e 01 	sts	0x013E, r25
     86c:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     870:	60 91 36 01 	lds	r22, 0x0136
     874:	84 e0       	ldi	r24, 0x04	; 4
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	42 e0       	ldi	r20, 0x02	; 2
     87a:	20 e2       	ldi	r18, 0x20	; 32
     87c:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_printNum>
     880:	59 c0       	rjmp	.+178    	; 0x934 <__stack+0x35>
	  } else if (m_menu == MM_END) {
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	09 f0       	breq	.+2      	; 0x888 <run_menu+0xec>
     886:	56 c0       	rjmp	.+172    	; 0x934 <__stack+0x35>
		KBD_set_type(1);
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     88e:	89 e6       	ldi	r24, 0x69	; 105
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	33 c0       	rjmp	.+102    	; 0x900 <__stack+0x1>
	  }
    break;
    case EVENT_EXIT_MENU:
      MAX7219_clearDisplay();
     89a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
	  chanel = 1;
     89e:	11 e0       	ldi	r17, 0x01	; 1
     8a0:	10 93 3b 01 	sts	0x013B, r17
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
     8aa:	20 91 a9 01 	lds	r18, 0x01A9
     8ae:	30 91 aa 01 	lds	r19, 0x01AA
     8b2:	82 17       	cp	r24, r18
     8b4:	93 07       	cpc	r25, r19
     8b6:	1c f4       	brge	.+6      	; 0x8be <run_menu+0x122>
     8b8:	10 93 39 01 	sts	0x0139, r17
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <run_menu+0x126>
     8be:	10 92 39 01 	sts	0x0139, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
     8c8:	20 91 ad 01 	lds	r18, 0x01AD
     8cc:	30 91 ae 01 	lds	r19, 0x01AE
     8d0:	82 17       	cp	r24, r18
     8d2:	93 07       	cpc	r25, r19
     8d4:	24 f4       	brge	.+8      	; 0x8de <run_menu+0x142>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 3a 01 	sts	0x013A, r24
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <run_menu+0x146>
     8de:	10 92 3a 01 	sts	0x013A, r1
      check_temp(chanel);
     8e2:	80 91 3b 01 	lds	r24, 0x013B
     8e6:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      SET_STATE(run_main);
     8ea:	8c e9       	ldi	r24, 0x9C	; 156
     8ec:	94 e0       	ldi	r25, 0x04	; 4
     8ee:	90 93 3e 01 	sts	0x013E, r25
     8f2:	80 93 3d 01 	sts	0x013D, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     8f6:	88 e6       	ldi	r24, 0x68	; 104
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	40 ed       	ldi	r20, 0xD0	; 208
     8fe:	57 e0       	ldi	r21, 0x07	; 7
     900:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
    break;
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0x35>
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     906:	84 e1       	ldi	r24, 0x14	; 20
     908:	80 93 34 01 	sts	0x0134, r24
      MAX7219_printStr(5, "    ");
     90c:	85 e0       	ldi	r24, 0x05	; 5
     90e:	68 e0       	ldi	r22, 0x08	; 8
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     916:	80 91 b3 01 	lds	r24, 0x01B3
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	20 f4       	brcc	.+8      	; 0x926 <__stack+0x27>
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 b3 01 	sts	0x01B3, r24
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
     926:	10 92 b3 01 	sts	0x01B3, r1
	  show_menu();
     92a:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
    break;
     92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
	default:
	  events_default(event);
     930:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     934:	1f 91       	pop	r17
     936:	08 95       	ret

00000938 <run_main>:
    }
  }
}
//=============================================================================
void run_main(unsigned char event)
{
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	0f 92       	push	r0
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
  switch(event) {
     942:	84 31       	cpi	r24, 0x14	; 20
     944:	09 f4       	brne	.+2      	; 0x948 <run_main+0x10>
     946:	82 c0       	rjmp	.+260    	; 0xa4c <run_main+0x114>
     948:	85 31       	cpi	r24, 0x15	; 21
     94a:	20 f4       	brcc	.+8      	; 0x954 <run_main+0x1c>
     94c:	8a 30       	cpi	r24, 0x0A	; 10
     94e:	09 f0       	breq	.+2      	; 0x952 <run_main+0x1a>
     950:	90 c0       	rjmp	.+288    	; 0xa72 <run_main+0x13a>
     952:	5f c0       	rjmp	.+190    	; 0xa12 <run_main+0xda>
     954:	8e 31       	cpi	r24, 0x1E	; 30
     956:	09 f4       	brne	.+2      	; 0x95a <run_main+0x22>
     958:	5c c0       	rjmp	.+184    	; 0xa12 <run_main+0xda>
     95a:	88 36       	cpi	r24, 0x68	; 104
     95c:	09 f0       	breq	.+2      	; 0x960 <run_main+0x28>
     95e:	89 c0       	rjmp	.+274    	; 0xa72 <run_main+0x13a>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     960:	80 91 3b 01 	lds	r24, 0x013B
     964:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	e1 f5       	brne	.+120    	; 0x9e4 <run_main+0xac>
	    MAX7219_printChar(3, 'd');
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	64 e6       	ldi	r22, 0x64	; 100
     970:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     974:	60 91 3b 01 	lds	r22, 0x013B
     978:	60 5d       	subi	r22, 0xD0	; 208
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     980:	80 91 3b 01 	lds	r24, 0x013B
     984:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ds18x20GetTemp>
     988:	bc 01       	movw	r22, r24
     98a:	85 e0       	ldi	r24, 0x05	; 5
     98c:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     990:	e0 91 3b 01 	lds	r30, 0x013B
     994:	e3 30       	cpi	r30, 0x03	; 3
     996:	a8 f4       	brcc	.+42     	; 0x9c2 <run_main+0x8a>
		  if (types[chanel - 1]) {
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	ea 5c       	subi	r30, 0xCA	; 202
     99c:	fe 4f       	sbci	r31, 0xFE	; 254
     99e:	80 81       	ld	r24, Z
     9a0:	88 23       	and	r24, r24
     9a2:	19 f0       	breq	.+6      	; 0x9aa <run_main+0x72>
	        MAX7219_printChar(1, 'H');
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	68 e4       	ldi	r22, 0x48	; 72
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <run_main+0x76>
		  } else {
	        MAX7219_printChar(1, 'F');
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	66 e4       	ldi	r22, 0x46	; 70
     9ae:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
		  }
          MAX7219_setCommaPos(1, outs[chanel - 1]);
     9b2:	e0 91 3b 01 	lds	r30, 0x013B
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	e0 55       	subi	r30, 0x50	; 80
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	60 81       	ld	r22, Z
     9c0:	06 c0       	rjmp	.+12     	; 0x9ce <run_main+0x96>
		} else {
	      MAX7219_printChar(1, ' ');
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	60 e2       	ldi	r22, 0x20	; 32
     9c6:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     9d2:	87 e0       	ldi	r24, 0x07	; 7
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	60 91 a7 01 	lds	r22, 0x01A7
     9e0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
	  }
      if (!one_sensor_flag) {
     9e4:	80 91 a7 01 	lds	r24, 0x01A7
     9e8:	88 23       	and	r24, r24
     9ea:	49 f4       	brne	.+18     	; 0x9fe <run_main+0xc6>
        if (chanel < 4) {
     9ec:	80 91 3b 01 	lds	r24, 0x013B
     9f0:	84 30       	cpi	r24, 0x04	; 4
     9f2:	10 f4       	brcc	.+4      	; 0x9f8 <run_main+0xc0>
          chanel++; 
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <run_main+0xc2>
	    } else { 
	      chanel = 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 3b 01 	sts	0x013B, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     9fe:	80 91 3b 01 	lds	r24, 0x013B
     a02:	0e 94 8d 0c 	call	0x191a	; 0x191a <ds18x20GetDevCount>
     a06:	88 23       	and	r24, r24
     a08:	c9 f0       	breq	.+50     	; 0xa3c <run_main+0x104>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     a0a:	88 e6       	ldi	r24, 0x68	; 104
     a0c:	60 ed       	ldi	r22, 0xD0	; 208
     a0e:	77 e0       	ldi	r23, 0x07	; 7
     a10:	18 c0       	rjmp	.+48     	; 0xa42 <run_main+0x10a>
	  }
    break;
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     a12:	88 e6       	ldi	r24, 0x68	; 104
     a14:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <RTOS_deleteTask>
      one_sensor_flag = !one_sensor_flag;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 91 a7 01 	lds	r25, 0x01A7
     a1e:	91 11       	cpse	r25, r1
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	80 93 a7 01 	sts	0x01A7, r24
	  if (one_sensor_flag) {
     a26:	88 23       	and	r24, r24
     a28:	49 f0       	breq	.+18     	; 0xa3c <run_main+0x104>
	    if (chanel > 1) chanel--; else chanel = 4;
     a2a:	80 91 3b 01 	lds	r24, 0x013B
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	10 f0       	brcs	.+4      	; 0xa36 <run_main+0xfe>
     a32:	81 50       	subi	r24, 0x01	; 1
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <run_main+0x100>
     a36:	84 e0       	ldi	r24, 0x04	; 4
     a38:	80 93 3b 01 	sts	0x013B, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     a3c:	88 e6       	ldi	r24, 0x68	; 104
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
    break;
     a4a:	15 c0       	rjmp	.+42     	; 0xa76 <run_main+0x13e>
    case EVENT_KEY_SET:
	  m_menu = MM_D1;
     a4c:	10 92 b3 01 	sts	0x01B3, r1
	  n_edit = 0;
     a50:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     a5a:	2e ec       	ldi	r18, 0xCE	; 206
     a5c:	33 e0       	ldi	r19, 0x03	; 3
     a5e:	30 93 3e 01 	sts	0x013E, r19
     a62:	20 93 3d 01 	sts	0x013D, r18
      wait_menu = WAIT_MENU_TIME;
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	80 93 34 01 	sts	0x0134, r24
	  show_menu();
     a6c:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
    break;
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <run_main+0x13e>
	default:
	  events_default(event);
     a72:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     a76:	0f 90       	pop	r0
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     a7e:	1f 93       	push	r17
     a80:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     a82:	80 91 b4 01 	lds	r24, 0x01B4
     a86:	88 23       	and	r24, r24
     a88:	61 f5       	brne	.+88     	; 0xae2 <show_set_temp+0x64>
    if (blink05) {
     a8a:	80 91 33 01 	lds	r24, 0x0133
     a8e:	88 23       	and	r24, r24
     a90:	91 f0       	breq	.+36     	; 0xab6 <show_set_temp+0x38>
      print_temperature(1, temps[temp][0]);
     a92:	e1 2f       	mov	r30, r17
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	e7 55       	subi	r30, 0x57	; 87
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	60 81       	ld	r22, Z
     aa4:	71 81       	ldd	r23, Z+1	; 0x01
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <show_set_temp+0x42>
    } else {
      MAX7219_printStr(1, "    ");
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	68 e0       	ldi	r22, 0x08	; 8
     aba:	71 e0       	ldi	r23, 0x01	; 1
     abc:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     ac0:	e1 2f       	mov	r30, r17
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	e7 55       	subi	r30, 0x57	; 87
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	62 81       	ldd	r22, Z+2	; 0x02
     ad2:	73 81       	ldd	r23, Z+3	; 0x03
     ad4:	85 e0       	ldi	r24, 0x05	; 5
     ad6:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     ada:	87 e0       	ldi	r24, 0x07	; 7
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     ae2:	80 91 b4 01 	lds	r24, 0x01B4
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	61 f5       	brne	.+88     	; 0xb42 <show_set_temp+0xc4>
    if (blink05) {
     aea:	80 91 33 01 	lds	r24, 0x0133
     aee:	88 23       	and	r24, r24
     af0:	91 f0       	breq	.+36     	; 0xb16 <show_set_temp+0x98>
      print_temperature(5, temps[temp][1]);
     af2:	e1 2f       	mov	r30, r17
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	e7 55       	subi	r30, 0x57	; 87
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	62 81       	ldd	r22, Z+2	; 0x02
     b04:	73 81       	ldd	r23, Z+3	; 0x03
     b06:	85 e0       	ldi	r24, 0x05	; 5
     b08:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     b0c:	87 e0       	ldi	r24, 0x07	; 7
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <show_set_temp+0xa2>
    } else {
      MAX7219_printStr(5, "    ");
     b16:	85 e0       	ldi	r24, 0x05	; 5
     b18:	68 e0       	ldi	r22, 0x08	; 8
     b1a:	71 e0       	ldi	r23, 0x01	; 1
     b1c:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     b20:	e1 2f       	mov	r30, r17
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	e7 55       	subi	r30, 0x57	; 87
     b2e:	fe 4f       	sbci	r31, 0xFE	; 254
     b30:	60 81       	ld	r22, Z
     b32:	71 81       	ldd	r23, Z+1	; 0x01
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     b42:	80 91 b4 01 	lds	r24, 0x01B4
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	d1 f4       	brne	.+52     	; 0xb7e <show_set_temp+0x100>
    MAX7219_printStr(1, "out-");
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	61 e1       	ldi	r22, 0x11	; 17
     b4e:	71 e0       	ldi	r23, 0x01	; 1
     b50:	0e 94 98 0a 	call	0x1530	; 0x1530 <MAX7219_printStr>
    if (blink05) {
     b54:	80 91 33 01 	lds	r24, 0x0133
     b58:	88 23       	and	r24, r24
     b5a:	69 f0       	breq	.+26     	; 0xb76 <show_set_temp+0xf8>
	  if (types[temp]) MAX7219_printChar(5, 'H'); else MAX7219_printChar(5, 'F');
     b5c:	e1 2f       	mov	r30, r17
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	e9 5c       	subi	r30, 0xC9	; 201
     b62:	fe 4f       	sbci	r31, 0xFE	; 254
     b64:	80 81       	ld	r24, Z
     b66:	88 23       	and	r24, r24
     b68:	19 f0       	breq	.+6      	; 0xb70 <show_set_temp+0xf2>
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	68 e4       	ldi	r22, 0x48	; 72
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <show_set_temp+0xfc>
     b70:	85 e0       	ldi	r24, 0x05	; 5
     b72:	66 e4       	ldi	r22, 0x46	; 70
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <show_set_temp+0xfc>
    } else {
	  MAX7219_printChar(5, ' ');
     b76:	85 e0       	ldi	r24, 0x05	; 5
     b78:	60 e2       	ldi	r22, 0x20	; 32
     b7a:	0e 94 88 0a 	call	0x1510	; 0x1510 <MAX7219_printChar>
	}
  }
}
     b7e:	1f 91       	pop	r17
     b80:	08 95       	ret

00000b82 <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     b82:	8e 31       	cpi	r24, 0x1E	; 30
     b84:	b1 f1       	breq	.+108    	; 0xbf2 <run_set_2+0x70>
     b86:	8f 31       	cpi	r24, 0x1F	; 31
     b88:	38 f4       	brcc	.+14     	; 0xb98 <run_set_2+0x16>
     b8a:	8a 30       	cpi	r24, 0x0A	; 10
     b8c:	09 f4       	brne	.+2      	; 0xb90 <run_set_2+0xe>
     b8e:	b0 c0       	rjmp	.+352    	; 0xcf0 <run_set_2+0x16e>
     b90:	84 31       	cpi	r24, 0x14	; 20
     b92:	09 f0       	breq	.+2      	; 0xb96 <run_set_2+0x14>
     b94:	e2 c0       	rjmp	.+452    	; 0xd5a <run_set_2+0x1d8>
     b96:	50 c0       	rjmp	.+160    	; 0xc38 <run_set_2+0xb6>
     b98:	89 3c       	cpi	r24, 0xC9	; 201
     b9a:	31 f0       	breq	.+12     	; 0xba8 <run_set_2+0x26>
     b9c:	8a 3c       	cpi	r24, 0xCA	; 202
     b9e:	09 f1       	breq	.+66     	; 0xbe2 <run_set_2+0x60>
     ba0:	89 36       	cpi	r24, 0x69	; 105
     ba2:	09 f0       	breq	.+2      	; 0xba6 <run_set_2+0x24>
     ba4:	da c0       	rjmp	.+436    	; 0xd5a <run_set_2+0x1d8>
     ba6:	65 c0       	rjmp	.+202    	; 0xc72 <run_set_2+0xf0>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 91 32 01 	lds	r25, 0x0132
     bae:	91 11       	cpse	r25, r1
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     bb6:	80 91 34 01 	lds	r24, 0x0134
     bba:	88 23       	and	r24, r24
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <run_set_2+0x44>
     bbe:	81 50       	subi	r24, 0x01	; 1
     bc0:	80 93 34 01 	sts	0x0134, r24
     bc4:	08 95       	ret
	    KBD_set_type(1);
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
        MAX7219_clearDisplay();
     bcc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     bd0:	8e ec       	ldi	r24, 0xCE	; 206
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	90 93 3e 01 	sts	0x013E, r25
     bd8:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     bdc:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
     be0:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 91 33 01 	lds	r25, 0x0133
     be8:	91 11       	cpse	r25, r1
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	80 93 33 01 	sts	0x0133, r24
     bf0:	b0 c0       	rjmp	.+352    	; 0xd52 <run_set_2+0x1d0>
	  show_set_temp(1);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     bf2:	84 e1       	ldi	r24, 0x14	; 20
     bf4:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     bfe:	80 91 b4 01 	lds	r24, 0x01B4
     c02:	88 23       	and	r24, r24
     c04:	59 f4       	brne	.+22     	; 0xc1c <run_set_2+0x9a>
        if (temps[1][0] > -550) {
     c06:	80 91 ad 01 	lds	r24, 0x01AD
     c0a:	90 91 ae 01 	lds	r25, 0x01AE
     c0e:	2d ef       	ldi	r18, 0xFD	; 253
     c10:	8b 3d       	cpi	r24, 0xDB	; 219
     c12:	92 07       	cpc	r25, r18
     c14:	0c f4       	brge	.+2      	; 0xc18 <run_set_2+0x96>
     c16:	9d c0       	rjmp	.+314    	; 0xd52 <run_set_2+0x1d0>
		  temps[1][0]--;
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	7d c0       	rjmp	.+250    	; 0xd16 <run_set_2+0x194>
		}
	  }
	  if (n_edit == 1) {
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <run_set_2+0xa0>
     c20:	8f c0       	rjmp	.+286    	; 0xd40 <run_set_2+0x1be>
        if (temps[1][1] > -550) {
     c22:	80 91 af 01 	lds	r24, 0x01AF
     c26:	90 91 b0 01 	lds	r25, 0x01B0
     c2a:	2d ef       	ldi	r18, 0xFD	; 253
     c2c:	8b 3d       	cpi	r24, 0xDB	; 219
     c2e:	92 07       	cpc	r25, r18
     c30:	0c f4       	brge	.+2      	; 0xc34 <run_set_2+0xb2>
     c32:	8f c0       	rjmp	.+286    	; 0xd52 <run_set_2+0x1d0>
		  temps[1][1]--;
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	7f c0       	rjmp	.+254    	; 0xd36 <run_set_2+0x1b4>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     c38:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     c3c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     c40:	80 91 b4 01 	lds	r24, 0x01B4
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	20 f4       	brcc	.+8      	; 0xc50 <run_set_2+0xce>
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 b4 01 	sts	0x01B4, r24
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <run_set_2+0xdc>
     c50:	89 e6       	ldi	r24, 0x69	; 105
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     c5e:	80 91 b4 01 	lds	r24, 0x01B4
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	11 f4       	brne	.+4      	; 0xc6a <run_set_2+0xe8>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <run_set_2+0xea>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
     c70:	70 c0       	rjmp	.+224    	; 0xd52 <run_set_2+0x1d0>
	  show_set_temp(1);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     c72:	84 e1       	ldi	r24, 0x14	; 20
     c74:	80 93 34 01 	sts	0x0134, r24
	  if (temps[1][0] > temps[1][1]) {
     c78:	20 91 ad 01 	lds	r18, 0x01AD
     c7c:	30 91 ae 01 	lds	r19, 0x01AE
     c80:	80 91 af 01 	lds	r24, 0x01AF
     c84:	90 91 b0 01 	lds	r25, 0x01B0
     c88:	82 17       	cp	r24, r18
     c8a:	93 07       	cpc	r25, r19
     c8c:	f4 f4       	brge	.+60     	; 0xcca <run_set_2+0x148>
        MAX7219_clearDisplay();
     c8e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     c92:	8e ec       	ldi	r24, 0xCE	; 206
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	90 93 3e 01 	sts	0x013E, r25
     c9a:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_2(temps[1][0]);
     c9e:	80 91 ad 01 	lds	r24, 0x01AD
     ca2:	90 91 ae 01 	lds	r25, 0x01AE
     ca6:	0e 94 9d 02 	call	0x53a	; 0x53a <save_max_temp_2>
        save_min_temp_2(temps[1][1]);
     caa:	80 91 af 01 	lds	r24, 0x01AF
     cae:	90 91 b0 01 	lds	r25, 0x01B0
     cb2:	0e 94 a9 02 	call	0x552	; 0x552 <save_min_temp_2>
	    save_type_2(types[1]);
     cb6:	80 91 38 01 	lds	r24, 0x0138
     cba:	0e 94 f6 02 	call	0x5ec	; 0x5ec <save_type_2>
        show_menu();
     cbe:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
	    KBD_set_type(1);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
     cc8:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     cca:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     cce:	82 e1       	ldi	r24, 0x12	; 18
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	90 93 3e 01 	sts	0x013E, r25
     cd6:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     ce0:	8a ec       	ldi	r24, 0xCA	; 202
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	44 ef       	ldi	r20, 0xF4	; 244
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
     cee:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     cf0:	84 e1       	ldi	r24, 0x14	; 20
     cf2:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     cfc:	80 91 b4 01 	lds	r24, 0x01B4
     d00:	88 23       	and	r24, r24
     d02:	71 f4       	brne	.+28     	; 0xd20 <run_set_2+0x19e>
        if (temps[1][0] < 790) {
     d04:	80 91 ad 01 	lds	r24, 0x01AD
     d08:	90 91 ae 01 	lds	r25, 0x01AE
     d0c:	23 e0       	ldi	r18, 0x03	; 3
     d0e:	86 31       	cpi	r24, 0x16	; 22
     d10:	92 07       	cpc	r25, r18
     d12:	fc f4       	brge	.+62     	; 0xd52 <run_set_2+0x1d0>
		  temps[1][0]++;
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	90 93 ae 01 	sts	0x01AE, r25
     d1a:	80 93 ad 01 	sts	0x01AD, r24
     d1e:	19 c0       	rjmp	.+50     	; 0xd52 <run_set_2+0x1d0>
		}
	  }
	  if (n_edit == 1) {
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	71 f4       	brne	.+28     	; 0xd40 <run_set_2+0x1be>
        if (temps[1][1] < 790) {
     d24:	80 91 af 01 	lds	r24, 0x01AF
     d28:	90 91 b0 01 	lds	r25, 0x01B0
     d2c:	23 e0       	ldi	r18, 0x03	; 3
     d2e:	86 31       	cpi	r24, 0x16	; 22
     d30:	92 07       	cpc	r25, r18
     d32:	7c f4       	brge	.+30     	; 0xd52 <run_set_2+0x1d0>
		  temps[1][1]++;
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	90 93 b0 01 	sts	0x01B0, r25
     d3a:	80 93 af 01 	sts	0x01AF, r24
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <run_set_2+0x1d0>
		}
	  }
	  if (n_edit == 2) {
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	39 f4       	brne	.+14     	; 0xd52 <run_set_2+0x1d0>
        types[1] = !types[1];
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 91 38 01 	lds	r25, 0x0138
     d4a:	91 11       	cpse	r25, r1
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	80 93 38 01 	sts	0x0138, r24
	  }
	  show_set_temp(1);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 3f 05 	call	0xa7e	; 0xa7e <show_set_temp>
    break;
     d58:	08 95       	ret
	default:
	  events_default(event);
     d5a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     d5e:	08 95       	ret

00000d60 <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     d60:	8e 31       	cpi	r24, 0x1E	; 30
     d62:	b1 f1       	breq	.+108    	; 0xdd0 <run_set_1+0x70>
     d64:	8f 31       	cpi	r24, 0x1F	; 31
     d66:	38 f4       	brcc	.+14     	; 0xd76 <run_set_1+0x16>
     d68:	8a 30       	cpi	r24, 0x0A	; 10
     d6a:	09 f4       	brne	.+2      	; 0xd6e <run_set_1+0xe>
     d6c:	b0 c0       	rjmp	.+352    	; 0xece <run_set_1+0x16e>
     d6e:	84 31       	cpi	r24, 0x14	; 20
     d70:	09 f0       	breq	.+2      	; 0xd74 <run_set_1+0x14>
     d72:	e2 c0       	rjmp	.+452    	; 0xf38 <run_set_1+0x1d8>
     d74:	50 c0       	rjmp	.+160    	; 0xe16 <run_set_1+0xb6>
     d76:	89 3c       	cpi	r24, 0xC9	; 201
     d78:	31 f0       	breq	.+12     	; 0xd86 <run_set_1+0x26>
     d7a:	8a 3c       	cpi	r24, 0xCA	; 202
     d7c:	09 f1       	breq	.+66     	; 0xdc0 <run_set_1+0x60>
     d7e:	89 36       	cpi	r24, 0x69	; 105
     d80:	09 f0       	breq	.+2      	; 0xd84 <run_set_1+0x24>
     d82:	da c0       	rjmp	.+436    	; 0xf38 <run_set_1+0x1d8>
     d84:	65 c0       	rjmp	.+202    	; 0xe50 <run_set_1+0xf0>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 91 32 01 	lds	r25, 0x0132
     d8c:	91 11       	cpse	r25, r1
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     d94:	80 91 34 01 	lds	r24, 0x0134
     d98:	88 23       	and	r24, r24
     d9a:	21 f0       	breq	.+8      	; 0xda4 <run_set_1+0x44>
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	80 93 34 01 	sts	0x0134, r24
     da2:	08 95       	ret
	    KBD_set_type(1);
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
        MAX7219_clearDisplay();
     daa:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     dae:	8e ec       	ldi	r24, 0xCE	; 206
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	90 93 3e 01 	sts	0x013E, r25
     db6:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     dba:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
     dbe:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 91 33 01 	lds	r25, 0x0133
     dc6:	91 11       	cpse	r25, r1
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	80 93 33 01 	sts	0x0133, r24
     dce:	b0 c0       	rjmp	.+352    	; 0xf30 <run_set_1+0x1d0>
	  show_set_temp(0);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     dd0:	84 e1       	ldi	r24, 0x14	; 20
     dd2:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     ddc:	80 91 b4 01 	lds	r24, 0x01B4
     de0:	88 23       	and	r24, r24
     de2:	59 f4       	brne	.+22     	; 0xdfa <run_set_1+0x9a>
        if (temps[0][0] > -550) {
     de4:	80 91 a9 01 	lds	r24, 0x01A9
     de8:	90 91 aa 01 	lds	r25, 0x01AA
     dec:	2d ef       	ldi	r18, 0xFD	; 253
     dee:	8b 3d       	cpi	r24, 0xDB	; 219
     df0:	92 07       	cpc	r25, r18
     df2:	0c f4       	brge	.+2      	; 0xdf6 <run_set_1+0x96>
     df4:	9d c0       	rjmp	.+314    	; 0xf30 <run_set_1+0x1d0>
		  temps[0][0]--;
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	7d c0       	rjmp	.+250    	; 0xef4 <run_set_1+0x194>
		}
	  }
	  if (n_edit == 1) {
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	09 f0       	breq	.+2      	; 0xe00 <run_set_1+0xa0>
     dfe:	8f c0       	rjmp	.+286    	; 0xf1e <run_set_1+0x1be>
        if (temps[0][1] > -550) {
     e00:	80 91 ab 01 	lds	r24, 0x01AB
     e04:	90 91 ac 01 	lds	r25, 0x01AC
     e08:	2d ef       	ldi	r18, 0xFD	; 253
     e0a:	8b 3d       	cpi	r24, 0xDB	; 219
     e0c:	92 07       	cpc	r25, r18
     e0e:	0c f4       	brge	.+2      	; 0xe12 <run_set_1+0xb2>
     e10:	8f c0       	rjmp	.+286    	; 0xf30 <run_set_1+0x1d0>
		  temps[0][1]--;
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	7f c0       	rjmp	.+254    	; 0xf14 <run_set_1+0x1b4>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     e16:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     e1a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     e1e:	80 91 b4 01 	lds	r24, 0x01B4
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	20 f4       	brcc	.+8      	; 0xe2e <run_set_1+0xce>
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 b4 01 	sts	0x01B4, r24
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <run_set_1+0xdc>
     e2e:	89 e6       	ldi	r24, 0x69	; 105
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     e3c:	80 91 b4 01 	lds	r24, 0x01B4
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	11 f4       	brne	.+4      	; 0xe48 <run_set_1+0xe8>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <run_set_1+0xea>
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
     e4e:	70 c0       	rjmp	.+224    	; 0xf30 <run_set_1+0x1d0>
	  show_set_temp(0);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     e50:	84 e1       	ldi	r24, 0x14	; 20
     e52:	80 93 34 01 	sts	0x0134, r24
	  if (temps[0][0] > temps[0][1]) {
     e56:	20 91 a9 01 	lds	r18, 0x01A9
     e5a:	30 91 aa 01 	lds	r19, 0x01AA
     e5e:	80 91 ab 01 	lds	r24, 0x01AB
     e62:	90 91 ac 01 	lds	r25, 0x01AC
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	f4 f4       	brge	.+60     	; 0xea8 <run_set_1+0x148>
        MAX7219_clearDisplay();
     e6c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     e70:	8e ec       	ldi	r24, 0xCE	; 206
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	90 93 3e 01 	sts	0x013E, r25
     e78:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_1(temps[0][0]);
     e7c:	80 91 a9 01 	lds	r24, 0x01A9
     e80:	90 91 aa 01 	lds	r25, 0x01AA
     e84:	0e 94 97 02 	call	0x52e	; 0x52e <save_max_temp_1>
        save_min_temp_1(temps[0][1]);
     e88:	80 91 ab 01 	lds	r24, 0x01AB
     e8c:	90 91 ac 01 	lds	r25, 0x01AC
     e90:	0e 94 a3 02 	call	0x546	; 0x546 <save_min_temp_1>
	    save_type_1(types[0]);
     e94:	80 91 37 01 	lds	r24, 0x0137
     e98:	0e 94 e7 02 	call	0x5ce	; 0x5ce <save_type_1>
        show_menu();
     e9c:	0e 94 05 03 	call	0x60a	; 0x60a <show_menu>
	    KBD_set_type(1);
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 a9 07 	call	0xf52	; 0xf52 <KBD_set_type>
     ea6:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     ea8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     eac:	82 e1       	ldi	r24, 0x12	; 18
     eae:	93 e0       	ldi	r25, 0x03	; 3
     eb0:	90 93 3e 01 	sts	0x013E, r25
     eb4:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     eb8:	85 e0       	ldi	r24, 0x05	; 5
     eba:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     ebe:	8a ec       	ldi	r24, 0xCA	; 202
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	44 ef       	ldi	r20, 0xF4	; 244
     ec6:	51 e0       	ldi	r21, 0x01	; 1
     ec8:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
     ecc:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     ece:	84 e1       	ldi	r24, 0x14	; 20
     ed0:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     eda:	80 91 b4 01 	lds	r24, 0x01B4
     ede:	88 23       	and	r24, r24
     ee0:	71 f4       	brne	.+28     	; 0xefe <run_set_1+0x19e>
        if (temps[0][0] < 790) {
     ee2:	80 91 a9 01 	lds	r24, 0x01A9
     ee6:	90 91 aa 01 	lds	r25, 0x01AA
     eea:	23 e0       	ldi	r18, 0x03	; 3
     eec:	86 31       	cpi	r24, 0x16	; 22
     eee:	92 07       	cpc	r25, r18
     ef0:	fc f4       	brge	.+62     	; 0xf30 <run_set_1+0x1d0>
		  temps[0][0]++;
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	90 93 aa 01 	sts	0x01AA, r25
     ef8:	80 93 a9 01 	sts	0x01A9, r24
     efc:	19 c0       	rjmp	.+50     	; 0xf30 <run_set_1+0x1d0>
		}
	  }
	  if (n_edit == 1) {
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	71 f4       	brne	.+28     	; 0xf1e <run_set_1+0x1be>
        if (temps[0][1] < 790) {
     f02:	80 91 ab 01 	lds	r24, 0x01AB
     f06:	90 91 ac 01 	lds	r25, 0x01AC
     f0a:	23 e0       	ldi	r18, 0x03	; 3
     f0c:	86 31       	cpi	r24, 0x16	; 22
     f0e:	92 07       	cpc	r25, r18
     f10:	7c f4       	brge	.+30     	; 0xf30 <run_set_1+0x1d0>
		  temps[0][1]++;
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	90 93 ac 01 	sts	0x01AC, r25
     f18:	80 93 ab 01 	sts	0x01AB, r24
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <run_set_1+0x1d0>
		}
	  }
	  if (n_edit == 2) {
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	39 f4       	brne	.+14     	; 0xf30 <run_set_1+0x1d0>
        types[0] = !types[0];
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 91 37 01 	lds	r25, 0x0137
     f28:	91 11       	cpse	r25, r1
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	80 93 37 01 	sts	0x0137, r24
	  }
	  show_set_temp(0);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 3f 05 	call	0xa7e	; 0xa7e <show_set_temp>
    break;
     f36:	08 95       	ret
	default:
	  events_default(event);
     f38:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     f3c:	08 95       	ret

00000f3e <KBD_init>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_PLUS) &= ~BUT_PLUS_LINE;
     f3e:	54 98       	cbi	0x0a, 4	; 10
  PORT(BUT_PLUS) |= BUT_PLUS_LINE;
     f40:	5c 9a       	sbi	0x0b, 4	; 11
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     f42:	55 98       	cbi	0x0a, 5	; 10
  PORT(BUT_SET) |= BUT_SET_LINE;
     f44:	5d 9a       	sbi	0x0b, 5	; 11
  DDR(BUT_MINUS) &= ~BUT_MINUS_LINE;
     f46:	56 98       	cbi	0x0a, 6	; 10
  PORT(BUT_MINUS) |= BUT_MINUS_LINE;
     f48:	5e 9a       	sbi	0x0b, 6	; 11
  kbd_type = 1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 3c 01 	sts	0x013C, r24
}
     f50:	08 95       	ret

00000f52 <KBD_set_type>:
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     f52:	80 93 3c 01 	sts	0x013C, r24
}
     f56:	08 95       	ret

00000f58 <debounce_sw_plus>:
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
     f58:	80 91 ba 01 	lds	r24, 0x01BA
     f5c:	90 91 bb 01 	lds	r25, 0x01BB
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	90 6e       	ori	r25, 0xE0	; 224
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4c 99       	sbic	0x09, 4	; 9
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <debounce_sw_plus+0x1a>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	82 2b       	or	r24, r18
     f74:	93 2b       	or	r25, r19
     f76:	90 93 bb 01 	sts	0x01BB, r25
     f7a:	80 93 ba 01 	sts	0x01BA, r24
  if (state1 == 0xF000) return 1;
     f7e:	20 ef       	ldi	r18, 0xF0	; 240
     f80:	80 30       	cpi	r24, 0x00	; 0
     f82:	92 07       	cpc	r25, r18
     f84:	31 f0       	breq	.+12     	; 0xf92 <debounce_sw_plus+0x3a>
  if (state1 == 0xE000) return 2;
     f86:	20 ee       	ldi	r18, 0xE0	; 224
     f88:	80 30       	cpi	r24, 0x00	; 0
     f8a:	92 07       	cpc	r25, r18
     f8c:	21 f4       	brne	.+8      	; 0xf96 <debounce_sw_plus+0x3e>
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
  if (state1 == 0xF000) return 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	08 95       	ret
  if (state1 == 0xE000) return 2;
  return 0;
     f96:	80 e0       	ldi	r24, 0x00	; 0
}
     f98:	08 95       	ret

00000f9a <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     f9a:	80 91 b8 01 	lds	r24, 0x01B8
     f9e:	90 91 b9 01 	lds	r25, 0x01B9
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	90 6e       	ori	r25, 0xE0	; 224
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4d 99       	sbic	0x09, 5	; 9
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <debounce_sw_set+0x1a>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	82 2b       	or	r24, r18
     fb6:	93 2b       	or	r25, r19
     fb8:	90 93 b9 01 	sts	0x01B9, r25
     fbc:	80 93 b8 01 	sts	0x01B8, r24
  if (state2 == 0xF000) return 1;
     fc0:	20 ef       	ldi	r18, 0xF0	; 240
     fc2:	80 30       	cpi	r24, 0x00	; 0
     fc4:	92 07       	cpc	r25, r18
     fc6:	31 f0       	breq	.+12     	; 0xfd4 <debounce_sw_set+0x3a>
  if (state2 == 0xE000) return 2;
     fc8:	20 ee       	ldi	r18, 0xE0	; 224
     fca:	80 30       	cpi	r24, 0x00	; 0
     fcc:	92 07       	cpc	r25, r18
     fce:	21 f4       	brne	.+8      	; 0xfd8 <debounce_sw_set+0x3e>
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
  if (state2 == 0xF000) return 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	08 95       	ret
  if (state2 == 0xE000) return 2;
  return 0;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
}
     fda:	08 95       	ret

00000fdc <debounce_sw_minus>:
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
     fdc:	80 91 b6 01 	lds	r24, 0x01B6
     fe0:	90 91 b7 01 	lds	r25, 0x01B7
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	90 6e       	ori	r25, 0xE0	; 224
     fea:	21 e0       	ldi	r18, 0x01	; 1
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4e 99       	sbic	0x09, 6	; 9
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <debounce_sw_minus+0x1a>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	82 2b       	or	r24, r18
     ff8:	93 2b       	or	r25, r19
     ffa:	90 93 b7 01 	sts	0x01B7, r25
     ffe:	80 93 b6 01 	sts	0x01B6, r24
  if (state3 == 0xF000) return 1;
    1002:	20 ef       	ldi	r18, 0xF0	; 240
    1004:	80 30       	cpi	r24, 0x00	; 0
    1006:	92 07       	cpc	r25, r18
    1008:	31 f0       	breq	.+12     	; 0x1016 <debounce_sw_minus+0x3a>
  if (state3 == 0xE000) return 2;
    100a:	20 ee       	ldi	r18, 0xE0	; 224
    100c:	80 30       	cpi	r24, 0x00	; 0
    100e:	92 07       	cpc	r25, r18
    1010:	21 f4       	brne	.+8      	; 0x101a <debounce_sw_minus+0x3e>
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
  if (state3 == 0xF000) return 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	08 95       	ret
  if (state3 == 0xE000) return 2;
  return 0;
    101a:	80 e0       	ldi	r24, 0x00	; 0
}
    101c:	08 95       	ret

0000101e <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
  if (kbd_type == 1) {
    101e:	80 91 3c 01 	lds	r24, 0x013C
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	c1 f4       	brne	.+48     	; 0x1056 <KBD_scan+0x38>
    if (debounce_sw_plus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    1026:	0e 94 ac 07 	call	0xf58	; 0xf58 <debounce_sw_plus>
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	79 f4       	brne	.+30     	; 0x104c <KBD_scan+0x2e>
    102e:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1030:	8f e3       	ldi	r24, 0x3F	; 63
    1032:	9c e9       	ldi	r25, 0x9C	; 156
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <KBD_scan+0x16>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <KBD_scan+0x1c>
    103a:	00 00       	nop
    103c:	40 98       	cbi	0x08, 0	; 8
    103e:	8a e0       	ldi	r24, 0x0A	; 10
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
    if (debounce_sw_minus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    104c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <debounce_sw_minus>
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	39 f5       	brne	.+78     	; 0x10a2 <KBD_scan+0x84>
    1054:	17 c0       	rjmp	.+46     	; 0x1084 <KBD_scan+0x66>
  } else {
    if (debounce_sw_plus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    1056:	0e 94 ac 07 	call	0xf58	; 0xf58 <debounce_sw_plus>
    105a:	88 23       	and	r24, r24
    105c:	79 f0       	breq	.+30     	; 0x107c <KBD_scan+0x5e>
    105e:	40 9a       	sbi	0x08, 0	; 8
    1060:	8f e3       	ldi	r24, 0x3F	; 63
    1062:	9c e9       	ldi	r25, 0x9C	; 156
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <KBD_scan+0x46>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <KBD_scan+0x4c>
    106a:	00 00       	nop
    106c:	40 98       	cbi	0x08, 0	; 8
    106e:	8a e0       	ldi	r24, 0x0A	; 10
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
    if (debounce_sw_minus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    107c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <debounce_sw_minus>
    1080:	88 23       	and	r24, r24
    1082:	79 f0       	breq	.+30     	; 0x10a2 <KBD_scan+0x84>
    1084:	40 9a       	sbi	0x08, 0	; 8
    1086:	8f e3       	ldi	r24, 0x3F	; 63
    1088:	9c e9       	ldi	r25, 0x9C	; 156
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <KBD_scan+0x6c>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <KBD_scan+0x72>
    1090:	00 00       	nop
    1092:	40 98       	cbi	0x08, 0	; 8
    1094:	8e e1       	ldi	r24, 0x1E	; 30
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
  }
  if (debounce_sw_set() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET, 0, 0); }
    10a2:	0e 94 cd 07 	call	0xf9a	; 0xf9a <debounce_sw_set>
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	79 f4       	brne	.+30     	; 0x10c8 <KBD_scan+0xaa>
    10aa:	40 9a       	sbi	0x08, 0	; 8
    10ac:	8f e3       	ldi	r24, 0x3F	; 63
    10ae:	9c e9       	ldi	r25, 0x9C	; 156
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <KBD_scan+0x92>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <KBD_scan+0x98>
    10b6:	00 00       	nop
    10b8:	40 98       	cbi	0x08, 0	; 8
    10ba:	84 e1       	ldi	r24, 0x14	; 20
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	0e 94 77 08 	call	0x10ee	; 0x10ee <RTOS_setTask>
    10c8:	08 95       	ret

000010ca <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    10ca:	e1 eb       	ldi	r30, 0xB1	; 177
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	84 60       	ori	r24, 0x04	; 4
    10d2:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    10d8:	e0 e7       	ldi	r30, 0x70	; 112
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    10e2:	86 e0       	ldi	r24, 0x06	; 6
    10e4:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    10e8:	10 92 1d 02 	sts	0x021D, r1
}
    10ec:	08 95       	ret

000010ee <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    10ee:	88 23       	and	r24, r24
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <RTOS_setTask+0x6>
    10f2:	6f c0       	rjmp	.+222    	; 0x11d2 <RTOS_setTask+0xe4>
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	1b c0       	rjmp	.+54     	; 0x112e <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    10f8:	29 2f       	mov	r18, r25
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	f9 01       	movw	r30, r18
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	e2 0f       	add	r30, r18
    1104:	f3 1f       	adc	r31, r19
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	e3 54       	subi	r30, 0x43	; 67
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	20 81       	ld	r18, Z
    1110:	28 17       	cp	r18, r24
    1112:	61 f4       	brne	.+24     	; 0x112c <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    1114:	72 83       	std	Z+2, r23	; 0x02
    1116:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    1118:	54 83       	std	Z+4, r21	; 0x04
    111a:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    111c:	61 15       	cp	r22, r1
    111e:	71 05       	cpc	r23, r1
    1120:	19 f4       	brne	.+6      	; 0x1128 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	85 83       	std	Z+5, r24	; 0x05
    1126:	08 95       	ret
      } else TaskArray[i].run = 0;   
    1128:	15 82       	std	Z+5, r1	; 0x05
    112a:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    112c:	9f 5f       	subi	r25, 0xFF	; 255
    112e:	20 91 1d 02 	lds	r18, 0x021D
    1132:	92 17       	cp	r25, r18
    1134:	08 f3       	brcs	.-62     	; 0x10f8 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    1136:	20 91 1d 02 	lds	r18, 0x021D
    113a:	20 31       	cpi	r18, 0x10	; 16
    113c:	08 f0       	brcs	.+2      	; 0x1140 <RTOS_setTask+0x52>
    113e:	49 c0       	rjmp	.+146    	; 0x11d2 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    1140:	20 91 1d 02 	lds	r18, 0x021D
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	f9 01       	movw	r30, r18
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	e2 0f       	add	r30, r18
    114e:	f3 1f       	adc	r31, r19
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	e3 54       	subi	r30, 0x43	; 67
    1156:	fe 4f       	sbci	r31, 0xFE	; 254
    1158:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    115a:	20 91 1d 02 	lds	r18, 0x021D
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	f9 01       	movw	r30, r18
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	e3 54       	subi	r30, 0x43	; 67
    1170:	fe 4f       	sbci	r31, 0xFE	; 254
    1172:	72 83       	std	Z+2, r23	; 0x02
    1174:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    1176:	20 91 1d 02 	lds	r18, 0x021D
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	f9 01       	movw	r30, r18
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e2 0f       	add	r30, r18
    1184:	f3 1f       	adc	r31, r19
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	e3 54       	subi	r30, 0x43	; 67
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	54 83       	std	Z+4, r21	; 0x04
    1190:	43 83       	std	Z+3, r20	; 0x03
    1192:	89 2f       	mov	r24, r25
    1194:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    1196:	61 15       	cp	r22, r1
    1198:	71 05       	cpc	r23, r1
    119a:	61 f4       	brne	.+24     	; 0x11b4 <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    119c:	fc 01       	movw	r30, r24
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	e8 0f       	add	r30, r24
    11a4:	f9 1f       	adc	r31, r25
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	e3 54       	subi	r30, 0x43	; 67
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	85 83       	std	Z+5, r24	; 0x05
    11b2:	0a c0       	rjmp	.+20     	; 0x11c8 <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    11b4:	fc 01       	movw	r30, r24
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	e8 0f       	add	r30, r24
    11bc:	f9 1f       	adc	r31, r25
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	e3 54       	subi	r30, 0x43	; 67
    11c4:	fe 4f       	sbci	r31, 0xFE	; 254
    11c6:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    11c8:	80 91 1d 02 	lds	r24, 0x021D
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	80 93 1d 02 	sts	0x021D, r24
    11d2:	08 95       	ret

000011d4 <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	2e c0       	rjmp	.+92     	; 0x1234 <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    11d8:	29 2f       	mov	r18, r25
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	d9 01       	movw	r26, r18
    11de:	aa 0f       	add	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	a2 0f       	add	r26, r18
    11e4:	b3 1f       	adc	r27, r19
    11e6:	aa 0f       	add	r26, r26
    11e8:	bb 1f       	adc	r27, r27
    11ea:	a3 54       	subi	r26, 0x43	; 67
    11ec:	be 4f       	sbci	r27, 0xFE	; 254
    11ee:	4c 91       	ld	r20, X
    11f0:	48 17       	cp	r20, r24
    11f2:	f9 f4       	brne	.+62     	; 0x1232 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    11f4:	80 91 1d 02 	lds	r24, 0x021D
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	91 f0       	breq	.+36     	; 0x1226 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1202:	80 91 1d 02 	lds	r24, 0x021D
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	fc 01       	movw	r30, r24
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	e8 0f       	add	r30, r24
    1212:	f9 1f       	adc	r31, r25
    1214:	ee 0f       	add	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	e3 54       	subi	r30, 0x43	; 67
    121a:	fe 4f       	sbci	r31, 0xFE	; 254
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	01 90       	ld	r0, Z+
    1220:	0d 92       	st	X+, r0
    1222:	81 50       	subi	r24, 0x01	; 1
    1224:	e1 f7       	brne	.-8      	; 0x121e <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    1226:	80 91 1d 02 	lds	r24, 0x021D
    122a:	81 50       	subi	r24, 0x01	; 1
    122c:	80 93 1d 02 	sts	0x021D, r24
      return;
    1230:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1232:	9f 5f       	subi	r25, 0xFF	; 255
    1234:	20 91 1d 02 	lds	r18, 0x021D
    1238:	92 17       	cp	r25, r18
    123a:	70 f2       	brcs	.-100    	; 0x11d8 <RTOS_deleteTask+0x4>
    123c:	08 95       	ret

0000123e <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    1242:	80 91 bc 01 	lds	r24, 0x01BC
    1246:	88 23       	and	r24, r24
    1248:	11 f4       	brne	.+4      	; 0x124e <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	4e c0       	rjmp	.+156    	; 0x12ea <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    124e:	10 92 bc 01 	sts	0x01BC, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1252:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    1254:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1256:	17 c0       	rjmp	.+46     	; 0x1286 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    1258:	82 2f       	mov	r24, r18
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	e3 54       	subi	r30, 0x43	; 67
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	81 81       	ldd	r24, Z+1	; 0x01
    1270:	92 81       	ldd	r25, Z+2	; 0x02
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	11 f4       	brne	.+4      	; 0x127a <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    1276:	35 83       	std	Z+5, r19	; 0x05
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	92 81       	ldd	r25, Z+2	; 0x02
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	92 83       	std	Z+2, r25	; 0x02
    1282:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	80 91 1d 02 	lds	r24, 0x021D
    128a:	28 17       	cp	r18, r24
    128c:	28 f3       	brcs	.-54     	; 0x1258 <RTOS_dispatchTask+0x1a>
    128e:	dd cf       	rjmp	.-70     	; 0x124a <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1290:	81 2f       	mov	r24, r17
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	fc 01       	movw	r30, r24
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	e8 0f       	add	r30, r24
    129c:	f9 1f       	adc	r31, r25
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	e3 54       	subi	r30, 0x43	; 67
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	85 81       	ldd	r24, Z+5	; 0x05
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	f1 f4       	brne	.+60     	; 0x12e8 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    12ac:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    12ae:	23 81       	ldd	r18, Z+3	; 0x03
    12b0:	34 81       	ldd	r19, Z+4	; 0x04
    12b2:	21 15       	cp	r18, r1
    12b4:	31 05       	cpc	r19, r1
    12b6:	31 f4       	brne	.+12     	; 0x12c4 <RTOS_dispatchTask+0x86>
      {  
        cli();
    12b8:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    12ba:	80 81       	ld	r24, Z
    12bc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <RTOS_deleteTask>
        sei();
    12c0:	78 94       	sei
    12c2:	0c c0       	rjmp	.+24     	; 0x12dc <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    12c4:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    12c6:	21 81       	ldd	r18, Z+1	; 0x01
    12c8:	32 81       	ldd	r19, Z+2	; 0x02
    12ca:	21 15       	cp	r18, r1
    12cc:	31 05       	cpc	r19, r1
    12ce:	31 f4       	brne	.+12     	; 0x12dc <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    12d0:	23 81       	ldd	r18, Z+3	; 0x03
    12d2:	34 81       	ldd	r19, Z+4	; 0x04
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	30 40       	sbci	r19, 0x00	; 0
    12d8:	32 83       	std	Z+2, r19	; 0x02
    12da:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    12dc:	e0 91 3d 01 	lds	r30, 0x013D
    12e0:	f0 91 3e 01 	lds	r31, 0x013E
    12e4:	80 2f       	mov	r24, r16
    12e6:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    12e8:	1f 5f       	subi	r17, 0xFF	; 255
    12ea:	80 91 1d 02 	lds	r24, 0x021D
    12ee:	18 17       	cp	r17, r24
    12f0:	78 f2       	brcs	.-98     	; 0x1290 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    12f8:	1f 92       	push	r1
    12fa:	0f 92       	push	r0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	0f 92       	push	r0
    1300:	11 24       	eor	r1, r1
    1302:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    1304:	86 e0       	ldi	r24, 0x06	; 6
    1306:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 bc 01 	sts	0x01BC, r24
}
    1310:	8f 91       	pop	r24
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    131c:	80 52       	subi	r24, 0x20	; 32
    131e:	86 35       	cpi	r24, 0x56	; 86
    1320:	30 f4       	brcc	.+12     	; 0x132e <MAX7219_lookupCode+0x12>
    1322:	e8 2f       	mov	r30, r24
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	e1 5b       	subi	r30, 0xB1	; 177
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	80 81       	ld	r24, Z
    132c:	08 95       	ret
    132e:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    1330:	08 95       	ret

00001332 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    1332:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    1334:	87 ff       	sbrs	r24, 7
    1336:	02 c0       	rjmp	.+4      	; 0x133c <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1338:	43 9a       	sbi	0x08, 3	; 8
    133a:	01 c0       	rjmp	.+2      	; 0x133e <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    133c:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    133e:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    1340:	00 00       	nop
	asm("nop");
    1342:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    1344:	42 9a       	sbi	0x08, 2	; 8
    1346:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    1348:	11 f0       	breq	.+4      	; 0x134e <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    134a:	88 0f       	add	r24, r24
    134c:	f3 cf       	rjmp	.-26     	; 0x1334 <MAX7219_SendByte+0x2>
    134e:	08 95       	ret

00001350 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	18 2f       	mov	r17, r24
    1358:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    135a:	41 98       	cbi	0x08, 1	; 8
    135c:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    135e:	81 2f       	mov	r24, r17
    1360:	0e 94 99 09 	call	0x1332	; 0x1332 <MAX7219_SendByte>
	MAX7219_SendByte(data);
    1364:	8f 2d       	mov	r24, r15
    1366:	0e 94 99 09 	call	0x1332	; 0x1332 <MAX7219_SendByte>
    136a:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    136c:	c1 f7       	brne	.-16     	; 0x135e <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    136e:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	08 95       	ret

00001378 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cf e3       	ldi	r28, 0x3F	; 63
    1382:	d1 e0       	ldi	r29, 0x01	; 1
    1384:	07 e4       	ldi	r16, 0x47	; 71
    1386:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    1388:	89 91       	ld	r24, Y+
    138a:	f8 01       	movw	r30, r16
    138c:	61 91       	ld	r22, Z+
    138e:	8f 01       	movw	r16, r30
    1390:	8f 5f       	subi	r24, 0xFF	; 255
    1392:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    1396:	f1 e0       	ldi	r31, 0x01	; 1
    1398:	c7 34       	cpi	r28, 0x47	; 71
    139a:	df 07       	cpc	r29, r31
    139c:	a9 f7       	brne	.-22     	; 0x1388 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	08 95       	ret

000013a8 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    13a8:	10 92 47 01 	sts	0x0147, r1
    13ac:	10 92 48 01 	sts	0x0148, r1
    13b0:	10 92 49 01 	sts	0x0149, r1
    13b4:	10 92 4a 01 	sts	0x014A, r1
    13b8:	10 92 4b 01 	sts	0x014B, r1
    13bc:	10 92 4c 01 	sts	0x014C, r1
    13c0:	10 92 4d 01 	sts	0x014D, r1
    13c4:	10 92 4e 01 	sts	0x014E, r1
  }
  MAX7219_updateDisplay();
    13c8:	0e 94 bc 09 	call	0x1378	; 0x1378 <MAX7219_updateDisplay>
}
    13cc:	08 95       	ret

000013ce <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    13ce:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    13d0:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    13d2:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    13d4:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    13d6:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    13d8:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    13da:	8c e0       	ldi	r24, 0x0C	; 12
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    13e2:	8f e0       	ldi	r24, 0x0F	; 15
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    13ea:	89 e0       	ldi	r24, 0x09	; 9
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    13f2:	8a e0       	ldi	r24, 0x0A	; 10
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    13fa:	8b e0       	ldi	r24, 0x0B	; 11
    13fc:	67 e0       	ldi	r22, 0x07	; 7
    13fe:	0e 94 a8 09 	call	0x1350	; 0x1350 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    1402:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <MAX7219_clearDisplay>
  return;
}
    1406:	08 95       	ret

00001408 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	27 97       	sbiw	r28, 0x07	; 7
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	b8 2e       	mov	r11, r24
    142c:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    142e:	77 ff       	sbrs	r23, 7
    1430:	05 c0       	rjmp	.+10     	; 0x143c <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    1432:	90 95       	com	r25
    1434:	81 95       	neg	r24
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    1438:	31 e0       	ldi	r19, 0x01	; 1
    143a:	01 c0       	rjmp	.+2      	; 0x143e <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    143c:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    143e:	e4 2f       	mov	r30, r20
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8e 01       	movw	r16, r28
    1444:	0f 5f       	subi	r16, 0xFF	; 255
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	e0 0f       	add	r30, r16
    144a:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    144c:	5a e0       	ldi	r21, 0x0A	; 10
    144e:	e5 2e       	mov	r14, r21
    1450:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <MAX7219_printNum+0x5a>
    1454:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    1456:	b7 01       	movw	r22, r14
    1458:	0e 94 99 0c 	call	0x1932	; 0x1932 <__divmodhi4>
    145c:	80 5d       	subi	r24, 0xD0	; 208
    145e:	80 83       	st	Z, r24
    x /= 10;
    1460:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    1462:	e0 17       	cp	r30, r16
    1464:	f1 07       	cpc	r31, r17
    1466:	b1 f7       	brne	.-20     	; 0x1454 <MAX7219_printNum+0x4c>
    1468:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    146a:	84 2f       	mov	r24, r20
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    1470:	de 01       	movw	r26, r28
    1472:	11 96       	adiw	r26, 0x01	; 1
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <MAX7219_printNum+0x7e>
    1476:	fd 01       	movw	r30, r26
    1478:	e6 0f       	add	r30, r22
    147a:	f7 1f       	adc	r31, r23
    147c:	60 81       	ld	r22, Z
    147e:	60 33       	cpi	r22, 0x30	; 48
    1480:	11 f5       	brne	.+68     	; 0x14c6 <MAX7219_printNum+0xbe>
    1482:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    1484:	5f 5f       	subi	r21, 0xFF	; 255
    1486:	65 2f       	mov	r22, r21
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	68 17       	cp	r22, r24
    148c:	79 07       	cpc	r23, r25
    148e:	9c f3       	brlt	.-26     	; 0x1476 <MAX7219_printNum+0x6e>
    1490:	1a c0       	rjmp	.+52     	; 0x14c6 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1492:	82 2f       	mov	r24, r18
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	8c 01       	movw	r16, r24
    1498:	0c 0d       	add	r16, r12
    149a:	1d 1d       	adc	r17, r13
    149c:	08 30       	cpi	r16, 0x08	; 8
    149e:	11 05       	cpc	r17, r1
    14a0:	84 f4       	brge	.+32     	; 0x14c2 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    14a2:	8e 0d       	add	r24, r14
    14a4:	9f 1d       	adc	r25, r15
    14a6:	fc 01       	movw	r30, r24
    14a8:	80 81       	ld	r24, Z
    14aa:	2d 83       	std	Y+5, r18	; 0x05
    14ac:	3e 83       	std	Y+6, r19	; 0x06
    14ae:	4f 83       	std	Y+7, r20	; 0x07
    14b0:	0e 94 8e 09 	call	0x131c	; 0x131c <MAX7219_lookupCode>
    14b4:	f8 01       	movw	r30, r16
    14b6:	e9 5b       	subi	r30, 0xB9	; 185
    14b8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ba:	80 83       	st	Z, r24
    14bc:	4f 81       	ldd	r20, Y+7	; 0x07
    14be:	3e 81       	ldd	r19, Y+6	; 0x06
    14c0:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    14c2:	2f 5f       	subi	r18, 0xFF	; 255
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    14c6:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    14c8:	cb 2c       	mov	r12, r11
    14ca:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    14cc:	7e 01       	movw	r14, r28
    14ce:	08 94       	sec
    14d0:	e1 1c       	adc	r14, r1
    14d2:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    14d4:	24 17       	cp	r18, r20
    14d6:	e8 f2       	brcs	.-70     	; 0x1492 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    14d8:	33 23       	and	r19, r19
    14da:	41 f0       	breq	.+16     	; 0x14ec <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    14dc:	8d e2       	ldi	r24, 0x2D	; 45
    14de:	0e 94 8e 09 	call	0x131c	; 0x131c <MAX7219_lookupCode>
    14e2:	eb 2d       	mov	r30, r11
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	ea 5b       	subi	r30, 0xBA	; 186
    14e8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ea:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    14ec:	0e 94 bc 09 	call	0x1378	; 0x1378 <MAX7219_updateDisplay>
}
    14f0:	27 96       	adiw	r28, 0x07	; 7
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	08 95       	ret

00001510 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    1510:	1f 93       	push	r17
    1512:	18 2f       	mov	r17, r24
    1514:	86 2f       	mov	r24, r22
  if (pos < 9) {
    1516:	19 30       	cpi	r17, 0x09	; 9
    1518:	48 f4       	brcc	.+18     	; 0x152c <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    151a:	0e 94 8e 09 	call	0x131c	; 0x131c <MAX7219_lookupCode>
    151e:	e1 2f       	mov	r30, r17
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	ea 5b       	subi	r30, 0xBA	; 186
    1524:	fe 4f       	sbci	r31, 0xFE	; 254
    1526:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    1528:	0e 94 bc 09 	call	0x1378	; 0x1378 <MAX7219_updateDisplay>
  }
}
    152c:	1f 91       	pop	r17
    152e:	08 95       	ret

00001530 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
  unsigned char i = pos;
    153a:	e6 2e       	mov	r14, r22
    153c:	e7 01       	movw	r28, r14
    153e:	7e 01       	movw	r14, r28
    1540:	f7 2e       	mov	r15, r23
    1542:	e7 01       	movw	r28, r14
    1544:	18 2f       	mov	r17, r24
  while(*data) {
    1546:	0a c0       	rjmp	.+20     	; 0x155c <MAX7219_printStr+0x2c>
    if (i < 9) {
    1548:	19 30       	cpi	r17, 0x09	; 9
    154a:	58 f4       	brcc	.+22     	; 0x1562 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    154c:	0e 94 8e 09 	call	0x131c	; 0x131c <MAX7219_lookupCode>
    1550:	e1 2f       	mov	r30, r17
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	ea 5b       	subi	r30, 0xBA	; 186
    1556:	fe 4f       	sbci	r31, 0xFE	; 254
    1558:	80 83       	st	Z, r24
      i++;
    155a:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    155c:	89 91       	ld	r24, Y+
    155e:	88 23       	and	r24, r24
    1560:	99 f7       	brne	.-26     	; 0x1548 <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    1562:	0e 94 bc 09 	call	0x1378	; 0x1378 <MAX7219_updateDisplay>
}
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	08 95       	ret

00001572 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    1572:	e8 2f       	mov	r30, r24
    1574:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    1576:	61 30       	cpi	r22, 0x01	; 1
    1578:	29 f4       	brne	.+10     	; 0x1584 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    157a:	ea 5b       	subi	r30, 0xBA	; 186
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	80 81       	ld	r24, Z
    1580:	80 68       	ori	r24, 0x80	; 128
    1582:	04 c0       	rjmp	.+8      	; 0x158c <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    1584:	ea 5b       	subi	r30, 0xBA	; 186
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	80 81       	ld	r24, Z
    158a:	8f 77       	andi	r24, 0x7F	; 127
    158c:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    158e:	0e 94 bc 09 	call	0x1378	; 0x1378 <MAX7219_updateDisplay>
}
    1592:	08 95       	ret

00001594 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    1594:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    1596:	f8 94       	cli
  switch(chanel) {
    1598:	82 30       	cpi	r24, 0x02	; 2
    159a:	01 f1       	breq	.+64     	; 0x15dc <ds18x20IsOnBus+0x48>
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	20 f4       	brcc	.+8      	; 0x15a8 <ds18x20IsOnBus+0x14>
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <ds18x20IsOnBus+0x12>
    15a4:	57 c0       	rjmp	.+174    	; 0x1654 <ds18x20IsOnBus+0xc0>
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <ds18x20IsOnBus+0x20>
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	61 f1       	breq	.+88     	; 0x1604 <ds18x20IsOnBus+0x70>
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <ds18x20IsOnBus+0x1e>
    15b0:	51 c0       	rjmp	.+162    	; 0x1654 <ds18x20IsOnBus+0xc0>
    15b2:	3e c0       	rjmp	.+124    	; 0x1630 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    15b4:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    15b6:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15b8:	8f e7       	ldi	r24, 0x7F	; 127
    15ba:	97 e0       	ldi	r25, 0x07	; 7
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <ds18x20IsOnBus+0x28>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <ds18x20IsOnBus+0x2e>
    15c2:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    15c4:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    15c6:	29 9a       	sbi	0x05, 1	; 5
    15c8:	a7 e1       	ldi	r26, 0x17	; 23
    15ca:	b1 e0       	ldi	r27, 0x01	; 1
    15cc:	11 97       	sbiw	r26, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <ds18x20IsOnBus+0x38>
    15d0:	00 c0       	rjmp	.+0      	; 0x15d2 <ds18x20IsOnBus+0x3e>
    15d2:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	19 9b       	sbis	0x03, 1	; 3
    15d8:	3e c0       	rjmp	.+124    	; 0x1656 <ds18x20IsOnBus+0xc2>
    15da:	3c c0       	rjmp	.+120    	; 0x1654 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    15dc:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    15de:	28 98       	cbi	0x05, 0	; 5
    15e0:	8f e7       	ldi	r24, 0x7F	; 127
    15e2:	97 e0       	ldi	r25, 0x07	; 7
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <ds18x20IsOnBus+0x50>
    15e8:	00 c0       	rjmp	.+0      	; 0x15ea <ds18x20IsOnBus+0x56>
    15ea:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    15ec:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    15ee:	28 9a       	sbi	0x05, 0	; 5
    15f0:	a7 e1       	ldi	r26, 0x17	; 23
    15f2:	b1 e0       	ldi	r27, 0x01	; 1
    15f4:	11 97       	sbiw	r26, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <ds18x20IsOnBus+0x60>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <ds18x20IsOnBus+0x66>
    15fa:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	18 9b       	sbis	0x03, 0	; 3
    1600:	2a c0       	rjmp	.+84     	; 0x1656 <ds18x20IsOnBus+0xc2>
    1602:	28 c0       	rjmp	.+80     	; 0x1654 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1604:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1606:	5f 98       	cbi	0x0b, 7	; 11
    1608:	8f e7       	ldi	r24, 0x7F	; 127
    160a:	97 e0       	ldi	r25, 0x07	; 7
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <ds18x20IsOnBus+0x78>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <ds18x20IsOnBus+0x7e>
    1612:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    1614:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    1616:	5f 9a       	sbi	0x0b, 7	; 11
    1618:	a7 e1       	ldi	r26, 0x17	; 23
    161a:	b1 e0       	ldi	r27, 0x01	; 1
    161c:	11 97       	sbiw	r26, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <ds18x20IsOnBus+0x88>
    1620:	00 c0       	rjmp	.+0      	; 0x1622 <ds18x20IsOnBus+0x8e>
    1622:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    1624:	89 b1       	in	r24, 0x09	; 9
    1626:	80 95       	com	r24
    1628:	88 1f       	adc	r24, r24
    162a:	88 27       	eor	r24, r24
    162c:	88 1f       	adc	r24, r24
    break;
    162e:	13 c0       	rjmp	.+38     	; 0x1656 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    1630:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    1632:	2a 98       	cbi	0x05, 2	; 5
    1634:	8f e7       	ldi	r24, 0x7F	; 127
    1636:	97 e0       	ldi	r25, 0x07	; 7
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <ds18x20IsOnBus+0xa4>
    163c:	00 c0       	rjmp	.+0      	; 0x163e <ds18x20IsOnBus+0xaa>
    163e:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    1640:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    1642:	2a 9a       	sbi	0x05, 2	; 5
    1644:	a7 e1       	ldi	r26, 0x17	; 23
    1646:	b1 e0       	ldi	r27, 0x01	; 1
    1648:	11 97       	sbiw	r26, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <ds18x20IsOnBus+0xb4>
    164c:	00 c0       	rjmp	.+0      	; 0x164e <ds18x20IsOnBus+0xba>
    164e:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	a7 e6       	ldi	r26, 0x67	; 103
    1658:	b6 e0       	ldi	r27, 0x06	; 6
    165a:	11 97       	sbiw	r26, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <ds18x20IsOnBus+0xc6>
    165e:	00 c0       	rjmp	.+0      	; 0x1660 <ds18x20IsOnBus+0xcc>
    1660:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	e3 5e       	subi	r30, 0xE3	; 227
    1666:	fd 4f       	sbci	r31, 0xFD	; 253
    1668:	80 83       	st	Z, r24
  sei();
    166a:	78 94       	sei
  return ret;
}
    166c:	08 95       	ret

0000166e <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    166e:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    1670:	98 2f       	mov	r25, r24
    1672:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    1674:	f8 94       	cli
  switch(chanel) {
    1676:	62 30       	cpi	r22, 0x02	; 2
    1678:	e1 f0       	breq	.+56     	; 0x16b2 <ds18x20SendByte+0x44>
    167a:	63 30       	cpi	r22, 0x03	; 3
    167c:	20 f4       	brcc	.+8      	; 0x1686 <ds18x20SendByte+0x18>
    167e:	61 30       	cpi	r22, 0x01	; 1
    1680:	09 f0       	breq	.+2      	; 0x1684 <ds18x20SendByte+0x16>
    1682:	52 c0       	rjmp	.+164    	; 0x1728 <ds18x20SendByte+0xba>
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <ds18x20SendByte+0x24>
    1686:	63 30       	cpi	r22, 0x03	; 3
    1688:	21 f1       	breq	.+72     	; 0x16d2 <ds18x20SendByte+0x64>
    168a:	64 30       	cpi	r22, 0x04	; 4
    168c:	09 f0       	breq	.+2      	; 0x1690 <ds18x20SendByte+0x22>
    168e:	4c c0       	rjmp	.+152    	; 0x1728 <ds18x20SendByte+0xba>
    1690:	30 c0       	rjmp	.+96     	; 0x16f2 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1692:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1694:	29 98       	cbi	0x05, 1	; 5
    1696:	30 e2       	ldi	r19, 0x20	; 32
    1698:	3a 95       	dec	r19
    169a:	f1 f7       	brne	.-4      	; 0x1698 <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    169c:	99 23       	and	r25, r25
    169e:	31 f4       	brne	.+12     	; 0x16ac <ds18x20SendByte+0x3e>
    16a0:	e7 ed       	ldi	r30, 0xD7	; 215
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	31 97       	sbiw	r30, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <ds18x20SendByte+0x36>
    16a8:	00 c0       	rjmp	.+0      	; 0x16aa <ds18x20SendByte+0x3c>
    16aa:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    16ac:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    16ae:	29 9a       	sbi	0x05, 1	; 5
    16b0:	2f c0       	rjmp	.+94     	; 0x1710 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    16b2:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    16b4:	28 98       	cbi	0x05, 0	; 5
    16b6:	f0 e2       	ldi	r31, 0x20	; 32
    16b8:	fa 95       	dec	r31
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16bc:	99 23       	and	r25, r25
    16be:	31 f4       	brne	.+12     	; 0x16cc <ds18x20SendByte+0x5e>
    16c0:	e7 ed       	ldi	r30, 0xD7	; 215
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	31 97       	sbiw	r30, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <ds18x20SendByte+0x56>
    16c8:	00 c0       	rjmp	.+0      	; 0x16ca <ds18x20SendByte+0x5c>
    16ca:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    16cc:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    16ce:	28 9a       	sbi	0x05, 0	; 5
    16d0:	1f c0       	rjmp	.+62     	; 0x1710 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    16d2:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    16d4:	5f 98       	cbi	0x0b, 7	; 11
    16d6:	f0 e2       	ldi	r31, 0x20	; 32
    16d8:	fa 95       	dec	r31
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16dc:	99 23       	and	r25, r25
    16de:	31 f4       	brne	.+12     	; 0x16ec <ds18x20SendByte+0x7e>
    16e0:	e7 ed       	ldi	r30, 0xD7	; 215
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	31 97       	sbiw	r30, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <ds18x20SendByte+0x76>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <ds18x20SendByte+0x7c>
    16ea:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    16ec:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    16ee:	5f 9a       	sbi	0x0b, 7	; 11
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    16f2:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    16f4:	2a 98       	cbi	0x05, 2	; 5
    16f6:	f0 e2       	ldi	r31, 0x20	; 32
    16f8:	fa 95       	dec	r31
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16fc:	99 23       	and	r25, r25
    16fe:	31 f4       	brne	.+12     	; 0x170c <ds18x20SendByte+0x9e>
    1700:	e7 ed       	ldi	r30, 0xD7	; 215
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	31 97       	sbiw	r30, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <ds18x20SendByte+0x96>
    1708:	00 c0       	rjmp	.+0      	; 0x170a <ds18x20SendByte+0x9c>
    170a:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    170c:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    170e:	2a 9a       	sbi	0x05, 2	; 5
    1710:	f5 e3       	ldi	r31, 0x35	; 53
    1712:	fa 95       	dec	r31
    1714:	f1 f7       	brne	.-4      	; 0x1712 <ds18x20SendByte+0xa4>
    1716:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    1718:	99 23       	and	r25, r25
    171a:	31 f0       	breq	.+12     	; 0x1728 <ds18x20SendByte+0xba>
    171c:	e7 ed       	ldi	r30, 0xD7	; 215
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	31 97       	sbiw	r30, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <ds18x20SendByte+0xb2>
    1724:	00 c0       	rjmp	.+0      	; 0x1726 <ds18x20SendByte+0xb8>
    1726:	00 00       	nop
    break;
  }
  sei();
    1728:	78 94       	sei
    172a:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    172c:	11 f0       	breq	.+4      	; 0x1732 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    172e:	86 95       	lsr	r24
    1730:	9f cf       	rjmp	.-194    	; 0x1670 <ds18x20SendByte+0x2>
    1732:	08 95       	ret

00001734 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    1734:	28 2f       	mov	r18, r24
    1736:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    1738:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    173a:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    173c:	f8 94       	cli
  switch(chanel) {
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	c1 f0       	breq	.+48     	; 0x1772 <ds18x20GetByte+0x3e>
    1742:	23 30       	cpi	r18, 0x03	; 3
    1744:	20 f4       	brcc	.+8      	; 0x174e <ds18x20GetByte+0x1a>
    1746:	21 30       	cpi	r18, 0x01	; 1
    1748:	09 f0       	breq	.+2      	; 0x174c <ds18x20GetByte+0x18>
    174a:	40 c0       	rjmp	.+128    	; 0x17cc <ds18x20GetByte+0x98>
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <ds18x20GetByte+0x24>
    174e:	23 30       	cpi	r18, 0x03	; 3
    1750:	e9 f0       	breq	.+58     	; 0x178c <ds18x20GetByte+0x58>
    1752:	24 30       	cpi	r18, 0x04	; 4
    1754:	d9 f5       	brne	.+118    	; 0x17cc <ds18x20GetByte+0x98>
    1756:	27 c0       	rjmp	.+78     	; 0x17a6 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    1758:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    175a:	29 98       	cbi	0x05, 1	; 5
    175c:	90 e2       	ldi	r25, 0x20	; 32
    175e:	9a 95       	dec	r25
    1760:	f1 f7       	brne	.-4      	; 0x175e <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    1762:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    1764:	29 9a       	sbi	0x05, 1	; 5
    1766:	e0 e3       	ldi	r30, 0x30	; 48
    1768:	ea 95       	dec	r30
    176a:	f1 f7       	brne	.-4      	; 0x1768 <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    176c:	93 b1       	in	r25, 0x03	; 3
    176e:	92 70       	andi	r25, 0x02	; 2
    1770:	26 c0       	rjmp	.+76     	; 0x17be <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    1772:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    1774:	28 98       	cbi	0x05, 0	; 5
    1776:	f0 e2       	ldi	r31, 0x20	; 32
    1778:	fa 95       	dec	r31
    177a:	f1 f7       	brne	.-4      	; 0x1778 <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    177c:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    177e:	28 9a       	sbi	0x05, 0	; 5
    1780:	90 e3       	ldi	r25, 0x30	; 48
    1782:	9a 95       	dec	r25
    1784:	f1 f7       	brne	.-4      	; 0x1782 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    1786:	93 b1       	in	r25, 0x03	; 3
    1788:	91 70       	andi	r25, 0x01	; 1
    178a:	19 c0       	rjmp	.+50     	; 0x17be <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    178c:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    178e:	5f 98       	cbi	0x0b, 7	; 11
    1790:	f0 e2       	ldi	r31, 0x20	; 32
    1792:	fa 95       	dec	r31
    1794:	f1 f7       	brne	.-4      	; 0x1792 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    1796:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    1798:	5f 9a       	sbi	0x0b, 7	; 11
    179a:	90 e3       	ldi	r25, 0x30	; 48
    179c:	9a 95       	dec	r25
    179e:	f1 f7       	brne	.-4      	; 0x179c <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    17a0:	99 b1       	in	r25, 0x09	; 9
    17a2:	90 78       	andi	r25, 0x80	; 128
    17a4:	0c c0       	rjmp	.+24     	; 0x17be <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    17a6:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    17a8:	2a 98       	cbi	0x05, 2	; 5
    17aa:	f0 e2       	ldi	r31, 0x20	; 32
    17ac:	fa 95       	dec	r31
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    17b0:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    17b2:	2a 9a       	sbi	0x05, 2	; 5
    17b4:	90 e3       	ldi	r25, 0x30	; 48
    17b6:	9a 95       	dec	r25
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    17ba:	93 b1       	in	r25, 0x03	; 3
    17bc:	94 70       	andi	r25, 0x04	; 4
    17be:	eb ed       	ldi	r30, 0xDB	; 219
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	31 97       	sbiw	r30, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <ds18x20GetByte+0x8e>
    17c6:	00 c0       	rjmp	.+0      	; 0x17c8 <ds18x20GetByte+0x94>
    17c8:	00 00       	nop
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    17cc:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    17ce:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    17d0:	91 11       	cpse	r25, r1
    17d2:	80 68       	ori	r24, 0x80	; 128
    17d4:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    17d6:	09 f0       	breq	.+2      	; 0x17da <ds18x20GetByte+0xa6>
    17d8:	b0 cf       	rjmp	.-160    	; 0x173a <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    17da:	08 95       	ret

000017dc <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    17e6:	0e 94 ca 0a 	call	0x1594	; 0x1594 <ds18x20IsOnBus>
    17ea:	88 23       	and	r24, r24
    17ec:	91 f1       	breq	.+100    	; 0x1852 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    17ee:	8c ec       	ldi	r24, 0xCC	; 204
    17f0:	61 2f       	mov	r22, r17
    17f2:	0e 94 37 0b 	call	0x166e	; 0x166e <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    17f6:	8e eb       	ldi	r24, 0xBE	; 190
    17f8:	61 2f       	mov	r22, r17
    17fa:	0e 94 37 0b 	call	0x166e	; 0x166e <ds18x20SendByte>
    17fe:	ca e4       	ldi	r28, 0x4A	; 74
    1800:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    1802:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    1804:	81 2f       	mov	r24, r17
    1806:	0e 94 9a 0b 	call	0x1734	; 0x1734 <ds18x20GetByte>
    180a:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    180c:	08 27       	eor	r16, r24
    180e:	88 e0       	ldi	r24, 0x08	; 8
    1810:	9c e8       	ldi	r25, 0x8C	; 140
    1812:	06 95       	lsr	r16
    1814:	08 f4       	brcc	.+2      	; 0x1818 <ds18x20ReadStratchPad+0x3c>
    1816:	09 27       	eor	r16, r25
    1818:	8a 95       	dec	r24
    181a:	d9 f7       	brne	.-10     	; 0x1812 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	c3 35       	cpi	r28, 0x53	; 83
    1820:	d8 07       	cpc	r29, r24
    1822:	81 f7       	brne	.-32     	; 0x1804 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    1824:	00 23       	and	r16, r16
    1826:	a9 f4       	brne	.+42     	; 0x1852 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    1828:	81 2f       	mov	r24, r17
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	fc 01       	movw	r30, r24
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	23 e0       	ldi	r18, 0x03	; 3
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	2a 95       	dec	r18
    183c:	e1 f7       	brne	.-8      	; 0x1836 <ds18x20ReadStratchPad+0x5a>
    183e:	e8 0f       	add	r30, r24
    1840:	f9 1f       	adc	r31, r25
    1842:	ee 5d       	subi	r30, 0xDE	; 222
    1844:	fd 4f       	sbci	r31, 0xFD	; 253
    1846:	80 91 4a 02 	lds	r24, 0x024A
    184a:	80 83       	st	Z, r24
    184c:	80 91 4b 02 	lds	r24, 0x024B
    1850:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    185c:	1f 93       	push	r17
    185e:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    1860:	0e 94 ca 0a 	call	0x1594	; 0x1594 <ds18x20IsOnBus>
    1864:	88 23       	and	r24, r24
    1866:	41 f0       	breq	.+16     	; 0x1878 <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    1868:	8c ec       	ldi	r24, 0xCC	; 204
    186a:	61 2f       	mov	r22, r17
    186c:	0e 94 37 0b 	call	0x166e	; 0x166e <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    1870:	84 e4       	ldi	r24, 0x44	; 68
    1872:	61 2f       	mov	r22, r17
    1874:	0e 94 37 0b 	call	0x166e	; 0x166e <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    1878:	12 30       	cpi	r17, 0x02	; 2
    187a:	69 f0       	breq	.+26     	; 0x1896 <ds18x20ConvertTemp+0x3a>
    187c:	13 30       	cpi	r17, 0x03	; 3
    187e:	18 f4       	brcc	.+6      	; 0x1886 <ds18x20ConvertTemp+0x2a>
    1880:	11 30       	cpi	r17, 0x01	; 1
    1882:	89 f4       	brne	.+34     	; 0x18a6 <ds18x20ConvertTemp+0x4a>
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <ds18x20ConvertTemp+0x34>
    1886:	13 30       	cpi	r17, 0x03	; 3
    1888:	49 f0       	breq	.+18     	; 0x189c <ds18x20ConvertTemp+0x40>
    188a:	14 30       	cpi	r17, 0x04	; 4
    188c:	61 f4       	brne	.+24     	; 0x18a6 <ds18x20ConvertTemp+0x4a>
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1890:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1892:	21 9a       	sbi	0x04, 1	; 4
    break;
    1894:	08 c0       	rjmp	.+16     	; 0x18a6 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1896:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1898:	20 9a       	sbi	0x04, 0	; 4
    break;
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    189c:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    189e:	57 9a       	sbi	0x0a, 7	; 10
    break;
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    18a2:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    18a4:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    18a6:	1f 91       	pop	r17
    18a8:	08 95       	ret

000018aa <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	fc 01       	movw	r30, r24
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	23 e0       	ldi	r18, 0x03	; 3
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	2a 95       	dec	r18
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <ds18x20GetTemp+0xc>
    18be:	e8 0f       	add	r30, r24
    18c0:	f9 1f       	adc	r31, r25
    18c2:	ee 5d       	subi	r30, 0xDE	; 222
    18c4:	fd 4f       	sbci	r31, 0xFD	; 253
    18c6:	40 81       	ld	r20, Z
    18c8:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    18ca:	9a 01       	movw	r18, r20
    18cc:	2f 70       	andi	r18, 0x0F	; 15
    18ce:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    18d0:	c9 01       	movw	r24, r18
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	a3 e0       	ldi	r26, 0x03	; 3
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	aa 95       	dec	r26
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <ds18x20GetTemp+0x2e>
    18e0:	28 0f       	add	r18, r24
    18e2:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	84 2b       	or	r24, r20
    18ea:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    18ec:	60 e1       	ldi	r22, 0x10	; 16
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	0e 94 99 0c 	call	0x1932	; 0x1932 <__divmodhi4>
    18f4:	ab 01       	movw	r20, r22
    18f6:	44 0f       	add	r20, r20
    18f8:	55 1f       	adc	r21, r21
    18fa:	e3 e0       	ldi	r30, 0x03	; 3
    18fc:	66 0f       	add	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	ea 95       	dec	r30
    1902:	e1 f7       	brne	.-8      	; 0x18fc <ds18x20GetTemp+0x52>
    1904:	46 0f       	add	r20, r22
    1906:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    1908:	64 e0       	ldi	r22, 0x04	; 4
    190a:	35 95       	asr	r19
    190c:	27 95       	ror	r18
    190e:	6a 95       	dec	r22
    1910:	e1 f7       	brne	.-8      	; 0x190a <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    1912:	42 0f       	add	r20, r18
    1914:	53 1f       	adc	r21, r19
  return ret;
}
    1916:	ca 01       	movw	r24, r20
    1918:	08 95       	ret

0000191a <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    191a:	e8 2f       	mov	r30, r24
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	e3 5e       	subi	r30, 0xE3	; 227
    1920:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1922:	80 81       	ld	r24, Z
    1924:	08 95       	ret

00001926 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    1926:	e8 2f       	mov	r30, r24
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	e3 5e       	subi	r30, 0xE3	; 227
    192c:	fd 4f       	sbci	r31, 0xFD	; 253
    192e:	60 83       	st	Z, r22
}
    1930:	08 95       	ret

00001932 <__divmodhi4>:
    1932:	97 fb       	bst	r25, 7
    1934:	09 2e       	mov	r0, r25
    1936:	07 26       	eor	r0, r23
    1938:	0a d0       	rcall	.+20     	; 0x194e <__divmodhi4_neg1>
    193a:	77 fd       	sbrc	r23, 7
    193c:	04 d0       	rcall	.+8      	; 0x1946 <__divmodhi4_neg2>
    193e:	0c d0       	rcall	.+24     	; 0x1958 <__udivmodhi4>
    1940:	06 d0       	rcall	.+12     	; 0x194e <__divmodhi4_neg1>
    1942:	00 20       	and	r0, r0
    1944:	1a f4       	brpl	.+6      	; 0x194c <__divmodhi4_exit>

00001946 <__divmodhi4_neg2>:
    1946:	70 95       	com	r23
    1948:	61 95       	neg	r22
    194a:	7f 4f       	sbci	r23, 0xFF	; 255

0000194c <__divmodhi4_exit>:
    194c:	08 95       	ret

0000194e <__divmodhi4_neg1>:
    194e:	f6 f7       	brtc	.-4      	; 0x194c <__divmodhi4_exit>
    1950:	90 95       	com	r25
    1952:	81 95       	neg	r24
    1954:	9f 4f       	sbci	r25, 0xFF	; 255
    1956:	08 95       	ret

00001958 <__udivmodhi4>:
    1958:	aa 1b       	sub	r26, r26
    195a:	bb 1b       	sub	r27, r27
    195c:	51 e1       	ldi	r21, 0x11	; 17
    195e:	07 c0       	rjmp	.+14     	; 0x196e <__udivmodhi4_ep>

00001960 <__udivmodhi4_loop>:
    1960:	aa 1f       	adc	r26, r26
    1962:	bb 1f       	adc	r27, r27
    1964:	a6 17       	cp	r26, r22
    1966:	b7 07       	cpc	r27, r23
    1968:	10 f0       	brcs	.+4      	; 0x196e <__udivmodhi4_ep>
    196a:	a6 1b       	sub	r26, r22
    196c:	b7 0b       	sbc	r27, r23

0000196e <__udivmodhi4_ep>:
    196e:	88 1f       	adc	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	5a 95       	dec	r21
    1974:	a9 f7       	brne	.-22     	; 0x1960 <__udivmodhi4_loop>
    1976:	80 95       	com	r24
    1978:	90 95       	com	r25
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	08 95       	ret

00001980 <__eerd_byte_m328p>:
    1980:	f9 99       	sbic	0x1f, 1	; 31
    1982:	fe cf       	rjmp	.-4      	; 0x1980 <__eerd_byte_m328p>
    1984:	92 bd       	out	0x22, r25	; 34
    1986:	81 bd       	out	0x21, r24	; 33
    1988:	f8 9a       	sbi	0x1f, 0	; 31
    198a:	99 27       	eor	r25, r25
    198c:	80 b5       	in	r24, 0x20	; 32
    198e:	08 95       	ret

00001990 <__eerd_word_m328p>:
    1990:	a8 e1       	ldi	r26, 0x18	; 24
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	42 e0       	ldi	r20, 0x02	; 2
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__eerd_blraw_m328p>

0000199c <__eewr_byte_m328p>:
    199c:	26 2f       	mov	r18, r22

0000199e <__eewr_r18_m328p>:
    199e:	f9 99       	sbic	0x1f, 1	; 31
    19a0:	fe cf       	rjmp	.-4      	; 0x199e <__eewr_r18_m328p>
    19a2:	1f ba       	out	0x1f, r1	; 31
    19a4:	92 bd       	out	0x22, r25	; 34
    19a6:	81 bd       	out	0x21, r24	; 33
    19a8:	20 bd       	out	0x20, r18	; 32
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	fa 9a       	sbi	0x1f, 2	; 31
    19b0:	f9 9a       	sbi	0x1f, 1	; 31
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	08 95       	ret

000019b8 <__eewr_word_m328p>:
    19b8:	0e 94 ce 0c 	call	0x199c	; 0x199c <__eewr_byte_m328p>
    19bc:	27 2f       	mov	r18, r23
    19be:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__eewr_r18_m328p>

000019c2 <__eerd_block_m328p>:
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22

000019c6 <__eerd_blraw_m328p>:
    19c6:	fc 01       	movw	r30, r24
    19c8:	f9 99       	sbic	0x1f, 1	; 31
    19ca:	fe cf       	rjmp	.-4      	; 0x19c8 <__eerd_blraw_m328p+0x2>
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <__eerd_blraw_m328p+0x14>
    19ce:	f2 bd       	out	0x22, r31	; 34
    19d0:	e1 bd       	out	0x21, r30	; 33
    19d2:	f8 9a       	sbi	0x1f, 0	; 31
    19d4:	31 96       	adiw	r30, 0x01	; 1
    19d6:	00 b4       	in	r0, 0x20	; 32
    19d8:	0d 92       	st	X+, r0
    19da:	41 50       	subi	r20, 0x01	; 1
    19dc:	50 40       	sbci	r21, 0x00	; 0
    19de:	b8 f7       	brcc	.-18     	; 0x19ce <__eerd_blraw_m328p+0x8>
    19e0:	08 95       	ret

000019e2 <_exit>:
    19e2:	f8 94       	cli

000019e4 <__stop_program>:
    19e4:	ff cf       	rjmp	.-2      	; 0x19e4 <__stop_program>
