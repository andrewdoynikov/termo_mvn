
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000f1c  00000fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ab  0080016c  0080016c  0000101c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000332  00000000  00000000  0000182d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001829  00000000  00000000  00001b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000752  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000174f  00000000  00000000  00003ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000290  00000000  00000000  0000522c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000472  00000000  00000000  000054bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000143a  00000000  00000000  0000592e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000115  00000000  00000000  00006d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
  a6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MAX7219_Init>
  KBD_init();
  aa:	0e 94 8f 02 	call	0x51e	; 0x51e <KBD_init>
  OUT_1_init();
  ae:	53 9a       	sbi	0x0a, 3	; 10
  b0:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
  b2:	53 9a       	sbi	0x0a, 3	; 10
  b4:	5b 98       	cbi	0x0b, 3	; 11
  BEEPER_init();
  b6:	38 9a       	sbi	0x07, 0	; 7
  b8:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
  ba:	0e 94 59 03 	call	0x6b2	; 0x6b2 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000); // запускаем секундный таймер,
  be:	89 ec       	ldi	r24, 0xC9	; 201
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	48 ee       	ldi	r20, 0xE8	; 232
  c6:	53 e0       	ldi	r21, 0x03	; 3
  c8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 10);       // запускаем сканирование клавиатуры
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	4a e0       	ldi	r20, 0x0A	; 10
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);   // запускаем сканирование сенсоров
  da:	84 e6       	ldi	r24, 0x64	; 100
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <RTOS_setTask>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
  e8:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
  ea:	0e 94 13 04 	call	0x826	; 0x826 <RTOS_dispatchTask>
  ee:	fd cf       	rjmp	.-6      	; 0xea <main+0x44>

000000f0 <print_temperature>:
unsigned char ds_count = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
  f6:	77 ff       	sbrs	r23, 7
  f8:	05 c0       	rjmp	.+10     	; 0x104 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
  fa:	70 95       	com	r23
  fc:	61 95       	neg	r22
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
 100:	01 e0       	ldi	r16, 0x01	; 1
 102:	01 c0       	rjmp	.+2      	; 0x106 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
 104:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
 106:	81 2f       	mov	r24, r17
 108:	43 e0       	ldi	r20, 0x03	; 3
 10a:	20 e2       	ldi	r18, 0x20	; 32
 10c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
 110:	81 2f       	mov	r24, r17
 112:	8e 5f       	subi	r24, 0xFE	; 254
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	0e 94 93 05 	call	0xb26	; 0xb26 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
 11a:	01 30       	cpi	r16, 0x01	; 1
 11c:	21 f4       	brne	.+8      	; 0x126 <print_temperature+0x36>
 11e:	81 2f       	mov	r24, r17
 120:	6d e2       	ldi	r22, 0x2D	; 45
 122:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
 12c:	88 3c       	cpi	r24, 0xC8	; 200
 12e:	51 f0       	breq	.+20     	; 0x144 <events_default+0x18>
 130:	89 3c       	cpi	r24, 0xC9	; 201
 132:	51 f4       	brne	.+20     	; 0x148 <events_default+0x1c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 91 6c 01 	lds	r25, 0x016C
 13a:	91 11       	cpse	r25, r1
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	80 93 6c 01 	sts	0x016C, r24
    break;
 142:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
 144:	0e 94 cb 02 	call	0x596	; 0x596 <KBD_scan>
 148:	08 95       	ret

0000014a <run_menu>:
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
  switch(event) {
 14a:	87 31       	cpi	r24, 0x17	; 23
 14c:	38 f4       	brcc	.+14     	; 0x15c <run_menu+0x12>
 14e:	84 31       	cpi	r24, 0x14	; 20
 150:	58 f4       	brcc	.+22     	; 0x168 <run_menu+0x1e>
 152:	98 2f       	mov	r25, r24
 154:	9a 50       	subi	r25, 0x0A	; 10
 156:	93 30       	cpi	r25, 0x03	; 3
 158:	28 f4       	brcc	.+10     	; 0x164 <run_menu+0x1a>
 15a:	08 95       	ret
 15c:	98 2f       	mov	r25, r24
 15e:	9e 51       	subi	r25, 0x1E	; 30
 160:	93 30       	cpi	r25, 0x03	; 3
 162:	10 f0       	brcs	.+4      	; 0x168 <run_menu+0x1e>
    case EVENT_KEY_MINUS:
    case EVENT_KEY_MINUS_LONG:
    case EVENT_KEY_MINUS_HOLD:
    break;
	default:
	  events_default(event);
 164:	0e 94 96 00 	call	0x12c	; 0x12c <events_default>
 168:	08 95       	ret

0000016a <run_main>:
  }    
}
//=============================================================================
void run_main(unsigned char event)
{
  switch(event) {
 16a:	81 32       	cpi	r24, 0x21	; 33
 16c:	78 f4       	brcc	.+30     	; 0x18c <run_main+0x22>
 16e:	8e 31       	cpi	r24, 0x1E	; 30
 170:	08 f0       	brcs	.+2      	; 0x174 <run_main+0xa>
 172:	86 c0       	rjmp	.+268    	; 0x280 <run_main+0x116>
 174:	8a 30       	cpi	r24, 0x0A	; 10
 176:	08 f4       	brcc	.+2      	; 0x17a <run_main+0x10>
 178:	81 c0       	rjmp	.+258    	; 0x27c <run_main+0x112>
 17a:	8d 30       	cpi	r24, 0x0D	; 13
 17c:	08 f4       	brcc	.+2      	; 0x180 <run_main+0x16>
 17e:	80 c0       	rjmp	.+256    	; 0x280 <run_main+0x116>
 180:	98 2f       	mov	r25, r24
 182:	94 51       	subi	r25, 0x14	; 20
 184:	93 30       	cpi	r25, 0x03	; 3
 186:	08 f0       	brcs	.+2      	; 0x18a <run_main+0x20>
 188:	79 c0       	rjmp	.+242    	; 0x27c <run_main+0x112>
 18a:	08 95       	ret
 18c:	8a 36       	cpi	r24, 0x6A	; 106
 18e:	29 f1       	breq	.+74     	; 0x1da <run_main+0x70>
 190:	8b 36       	cpi	r24, 0x6B	; 107
 192:	20 f4       	brcc	.+8      	; 0x19c <run_main+0x32>
 194:	89 36       	cpi	r24, 0x69	; 105
 196:	09 f0       	breq	.+2      	; 0x19a <run_main+0x30>
 198:	71 c0       	rjmp	.+226    	; 0x27c <run_main+0x112>
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <run_main+0x3e>
 19c:	8b 36       	cpi	r24, 0x6B	; 107
 19e:	b1 f1       	breq	.+108    	; 0x20c <run_main+0xa2>
 1a0:	8c 36       	cpi	r24, 0x6C	; 108
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <run_main+0x3c>
 1a4:	6b c0       	rjmp	.+214    	; 0x27c <run_main+0x112>
 1a6:	4b c0       	rjmp	.+150    	; 0x23e <run_main+0xd4>
    case EVENT_SHOW_TEMP_1:
	  MAX7219_printChar(2, 'd');
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	64 e6       	ldi	r22, 0x64	; 100
 1ac:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(3, '-');
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	6d e2       	ldi	r22, 0x2D	; 45
 1b4:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(4, '1');
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	61 e3       	ldi	r22, 0x31	; 49
 1bc:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
      print_temperature(5, ds18x20GetTemp(1));
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <ds18x20GetTemp>
 1c6:	bc 01       	movw	r22, r24
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	0e 94 78 00 	call	0xf0	; 0xf0 <print_temperature>
      MAX7219_setCommaPos(7,1);
 1ce:	87 e0       	ldi	r24, 0x07	; 7
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	0e 94 93 05 	call	0xb26	; 0xb26 <MAX7219_setCommaPos>
      RTOS_setTask(EVENT_SHOW_TEMP_2, 1000, 0);
 1d6:	8a e6       	ldi	r24, 0x6A	; 106
 1d8:	4a c0       	rjmp	.+148    	; 0x26e <run_main+0x104>
    break;
    case EVENT_SHOW_TEMP_2:
	  MAX7219_printChar(2, 'd');
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	64 e6       	ldi	r22, 0x64	; 100
 1de:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(3, '-');
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	6d e2       	ldi	r22, 0x2D	; 45
 1e6:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(4, '2');
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	62 e3       	ldi	r22, 0x32	; 50
 1ee:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
      print_temperature(5, ds18x20GetTemp(2));
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 2f 07 	call	0xe5e	; 0xe5e <ds18x20GetTemp>
 1f8:	bc 01       	movw	r22, r24
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	0e 94 78 00 	call	0xf0	; 0xf0 <print_temperature>
      MAX7219_setCommaPos(7,1);
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	0e 94 93 05 	call	0xb26	; 0xb26 <MAX7219_setCommaPos>
      RTOS_setTask(EVENT_SHOW_TEMP_3, 1000, 0);
 208:	8b e6       	ldi	r24, 0x6B	; 107
 20a:	31 c0       	rjmp	.+98     	; 0x26e <run_main+0x104>
    break;
    case EVENT_SHOW_TEMP_3:
	  MAX7219_printChar(2, 'd');
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	64 e6       	ldi	r22, 0x64	; 100
 210:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(3, '-');
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	6d e2       	ldi	r22, 0x2D	; 45
 218:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(4, '3');
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	63 e3       	ldi	r22, 0x33	; 51
 220:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
      print_temperature(5, ds18x20GetTemp(3));
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	0e 94 2f 07 	call	0xe5e	; 0xe5e <ds18x20GetTemp>
 22a:	bc 01       	movw	r22, r24
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	0e 94 78 00 	call	0xf0	; 0xf0 <print_temperature>
      MAX7219_setCommaPos(7,1);
 232:	87 e0       	ldi	r24, 0x07	; 7
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	0e 94 93 05 	call	0xb26	; 0xb26 <MAX7219_setCommaPos>
      RTOS_setTask(EVENT_SHOW_TEMP_4, 1000, 0);
 23a:	8c e6       	ldi	r24, 0x6C	; 108
 23c:	18 c0       	rjmp	.+48     	; 0x26e <run_main+0x104>
    break;
    case EVENT_SHOW_TEMP_4:
	  MAX7219_printChar(2, 'd');
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	64 e6       	ldi	r22, 0x64	; 100
 242:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(3, '-');
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	6d e2       	ldi	r22, 0x2D	; 45
 24a:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  MAX7219_printChar(4, '4');
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	64 e3       	ldi	r22, 0x34	; 52
 252:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
      print_temperature(5, ds18x20GetTemp(4));
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	0e 94 2f 07 	call	0xe5e	; 0xe5e <ds18x20GetTemp>
 25c:	bc 01       	movw	r22, r24
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	0e 94 78 00 	call	0xf0	; 0xf0 <print_temperature>
      MAX7219_setCommaPos(7,1);
 264:	87 e0       	ldi	r24, 0x07	; 7
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	0e 94 93 05 	call	0xb26	; 0xb26 <MAX7219_setCommaPos>
      RTOS_setTask(EVENT_SHOW_TEMP_1, 1000, 0);
 26c:	89 e6       	ldi	r24, 0x69	; 105
 26e:	68 ee       	ldi	r22, 0xE8	; 232
 270:	73 e0       	ldi	r23, 0x03	; 3
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <RTOS_setTask>
    break;
 27a:	08 95       	ret
    case EVENT_KEY_MINUS:
    case EVENT_KEY_MINUS_LONG:
    case EVENT_KEY_MINUS_HOLD:
    break;
	default:
	  events_default(event);
 27c:	0e 94 96 00 	call	0x12c	; 0x12c <events_default>
 280:	08 95       	ret

00000282 <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
 282:	86 36       	cpi	r24, 0x66	; 102
 284:	09 f4       	brne	.+2      	; 0x288 <run_start+0x6>
 286:	c4 c0       	rjmp	.+392    	; 0x410 <run_start+0x18e>
 288:	87 36       	cpi	r24, 0x67	; 103
 28a:	30 f4       	brcc	.+12     	; 0x298 <run_start+0x16>
 28c:	84 36       	cpi	r24, 0x64	; 100
 28e:	59 f0       	breq	.+22     	; 0x2a6 <run_start+0x24>
 290:	85 36       	cpi	r24, 0x65	; 101
 292:	09 f0       	breq	.+2      	; 0x296 <run_start+0x14>
 294:	cd c0       	rjmp	.+410    	; 0x430 <run_start+0x1ae>
 296:	20 c0       	rjmp	.+64     	; 0x2d8 <run_start+0x56>
 298:	87 36       	cpi	r24, 0x67	; 103
 29a:	09 f4       	brne	.+2      	; 0x29e <run_start+0x1c>
 29c:	73 c0       	rjmp	.+230    	; 0x384 <run_start+0x102>
 29e:	88 36       	cpi	r24, 0x68	; 104
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <run_start+0x22>
 2a2:	c6 c0       	rjmp	.+396    	; 0x430 <run_start+0x1ae>
 2a4:	92 c0       	rjmp	.+292    	; 0x3ca <run_start+0x148>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	71 e0       	ldi	r23, 0x01	; 1
 2ac:	0e 94 72 05 	call	0xae4	; 0xae4 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	6d e2       	ldi	r22, 0x2D	; 45
 2b4:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  ds_count = 0;
 2b8:	10 92 6d 01 	sts	0x016D, r1
      ds18x20IsOnBus(1);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 a4 05 	call	0xb48	; 0xb48 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 a4 05 	call	0xb48	; 0xb48 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 a4 05 	call	0xb48	; 0xb48 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	0e 94 a4 05 	call	0xb48	; 0xb48 <ds18x20IsOnBus>
      RTOS_setTask(EVENT_PRINT_COUNT, 0, 0);
 2d4:	85 e6       	ldi	r24, 0x65	; 101
 2d6:	a5 c0       	rjmp	.+330    	; 0x422 <run_start+0x1a0>
    break;
    case EVENT_PRINT_COUNT:
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	41 f4       	brne	.+16     	; 0x2f2 <run_start+0x70>
 2e2:	80 91 6d 01 	lds	r24, 0x016D
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 6d 01 	sts	0x016D, r24
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	61 e3       	ldi	r22, 0x31	; 49
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <run_start+0x74>
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	60 e2       	ldi	r22, 0x20	; 32
 2f6:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	41 f4       	brne	.+16     	; 0x314 <run_start+0x92>
 304:	80 91 6d 01 	lds	r24, 0x016D
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 6d 01 	sts	0x016D, r24
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	61 e3       	ldi	r22, 0x31	; 49
 312:	02 c0       	rjmp	.+4      	; 0x318 <run_start+0x96>
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	60 e2       	ldi	r22, 0x20	; 32
 318:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	41 f4       	brne	.+16     	; 0x336 <run_start+0xb4>
 326:	80 91 6d 01 	lds	r24, 0x016D
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 6d 01 	sts	0x016D, r24
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	61 e3       	ldi	r22, 0x31	; 49
 334:	02 c0       	rjmp	.+4      	; 0x33a <run_start+0xb8>
 336:	87 e0       	ldi	r24, 0x07	; 7
 338:	60 e2       	ldi	r22, 0x20	; 32
 33a:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	41 f4       	brne	.+16     	; 0x358 <run_start+0xd6>
 348:	80 91 6d 01 	lds	r24, 0x016D
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 6d 01 	sts	0x016D, r24
 352:	88 e0       	ldi	r24, 0x08	; 8
 354:	61 e3       	ldi	r22, 0x31	; 49
 356:	02 c0       	rjmp	.+4      	; 0x35c <run_start+0xda>
 358:	88 e0       	ldi	r24, 0x08	; 8
 35a:	60 e2       	ldi	r22, 0x20	; 32
 35c:	0e 94 62 05 	call	0xac4	; 0xac4 <MAX7219_printChar>
	  if (ds_count == 0) {
 360:	60 91 6d 01 	lds	r22, 0x016D
 364:	66 23       	and	r22, r22
 366:	21 f4       	brne	.+8      	; 0x370 <run_start+0xee>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
 368:	84 e6       	ldi	r24, 0x64	; 100
 36a:	68 eb       	ldi	r22, 0xB8	; 184
 36c:	7b e0       	ldi	r23, 0x0B	; 11
 36e:	5b c0       	rjmp	.+182    	; 0x426 <run_start+0x1a4>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	20 e2       	ldi	r18, 0x20	; 32
 378:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <MAX7219_printNum>
        RTOS_setTask(EVENT_START_CONVERTIONS, 10, 0);
 37c:	87 e6       	ldi	r24, 0x67	; 103
 37e:	6a e0       	ldi	r22, 0x0A	; 10
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	51 c0       	rjmp	.+162    	; 0x426 <run_start+0x1a4>
	  }
    break;
    case EVENT_START_CONVERTIONS:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	11 f4       	brne	.+4      	; 0x392 <run_start+0x110>
 38e:	0e 94 08 07 	call	0xe10	; 0xe10 <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	19 f4       	brne	.+6      	; 0x3a2 <run_start+0x120>
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	0e 94 08 07 	call	0xe10	; 0xe10 <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <run_start+0x130>
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 08 07 	call	0xe10	; 0xe10 <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	19 f4       	brne	.+6      	; 0x3c2 <run_start+0x140>
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	0e 94 08 07 	call	0xe10	; 0xe10 <ds18x20ConvertTemp>
      RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
 3c2:	88 e6       	ldi	r24, 0x68	; 104
 3c4:	68 ee       	ldi	r22, 0xE8	; 232
 3c6:	73 e0       	ldi	r23, 0x03	; 3
 3c8:	2e c0       	rjmp	.+92     	; 0x426 <run_start+0x1a4>
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <run_start+0x156>
 3d4:	0e 94 c8 06 	call	0xd90	; 0xd90 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <run_start+0x166>
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 c8 06 	call	0xd90	; 0xd90 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	19 f4       	brne	.+6      	; 0x3f8 <run_start+0x176>
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0e 94 c8 06 	call	0xd90	; 0xd90 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ds18x20GetDevCount>
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	19 f4       	brne	.+6      	; 0x408 <run_start+0x186>
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	0e 94 c8 06 	call	0xd90	; 0xd90 <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
 408:	86 e6       	ldi	r24, 0x66	; 102
 40a:	64 e6       	ldi	r22, 0x64	; 100
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	0b c0       	rjmp	.+22     	; 0x426 <run_start+0x1a4>
    break;
    case EVENT_RUN_MAIN:
      MAX7219_clearDisplay();
 410:	0e 94 c8 04 	call	0x990	; 0x990 <MAX7219_clearDisplay>
      SET_STATE(run_main);
 414:	85 eb       	ldi	r24, 0xB5	; 181
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	90 93 04 01 	sts	0x0104, r25
 41c:	80 93 03 01 	sts	0x0103, r24
      RTOS_setTask(EVENT_SHOW_TEMP_1, 0, 0);
 420:	89 e6       	ldi	r24, 0x69	; 105
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <RTOS_setTask>
    break;
 42e:	08 95       	ret
	default:
	  events_default(event);
 430:	0e 94 96 00 	call	0x12c	; 0x12c <events_default>
 434:	08 95       	ret

00000436 <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
 436:	20 91 75 01 	lds	r18, 0x0175
 43a:	28 30       	cpi	r18, 0x08	; 8
 43c:	78 f4       	brcc	.+30     	; 0x45c <PutBut+0x26>
     buf[head] = but;
 43e:	90 91 76 01 	lds	r25, 0x0176
 442:	e9 2f       	mov	r30, r25
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e9 58       	subi	r30, 0x89	; 137
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	80 83       	st	Z, r24
     count++;
 44c:	2f 5f       	subi	r18, 0xFF	; 255
 44e:	20 93 75 01 	sts	0x0175, r18
     head++;
 452:	89 2f       	mov	r24, r25
 454:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
 456:	87 70       	andi	r24, 0x07	; 7
 458:	80 93 76 01 	sts	0x0176, r24
 45c:	08 95       	ret

0000045e <BUT_Check.clone.0>:
  }
  
  return but;
}
//=============================================================================
static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
 466:	96 2f       	mov	r25, r22
 468:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
 46a:	c9 2f       	mov	r28, r25
 46c:	d0 e0       	ldi	r29, 0x00	; 0
 46e:	fe 01       	movw	r30, r28
 470:	e2 59       	subi	r30, 0x92	; 146
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	10 81       	ld	r17, Z

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
#endif

 countDebTmp = countDeb[i];
 476:	fe 01       	movw	r30, r28
 478:	ef 58       	subi	r30, 0x8F	; 143
 47a:	fe 4f       	sbci	r31, 0xFE	; 254
 47c:	90 81       	ld	r25, Z
 47e:	90 93 74 01 	sts	0x0174, r25
  
 if (state){
 482:	88 23       	and	r24, r24
 484:	a9 f0       	breq	.+42     	; 0x4b0 <BUT_Check.clone.0+0x52>
    if (countDebTmp < BUT_COUNT_MAX){
 486:	97 39       	cpi	r25, 0x97	; 151
 488:	28 f5       	brcc	.+74     	; 0x4d4 <BUT_Check.clone.0+0x76>
       countDebTmp++;
 48a:	9f 5f       	subi	r25, 0xFF	; 255
 48c:	90 93 74 01 	sts	0x0174, r25

       if (countDebTmp > BUT_COUNT_THR){
 490:	95 31       	cpi	r25, 0x15	; 21
 492:	00 f1       	brcs	.+64     	; 0x4d4 <BUT_Check.clone.0+0x76>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
 494:	10 fd       	sbrc	r17, 0
 496:	03 c0       	rjmp	.+6      	; 0x49e <BUT_Check.clone.0+0x40>
             stateTmp |= FLAG_BUT_PRESSED;
 498:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
 49a:	01 e0       	ldi	r16, 0x01	; 1
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <BUT_Check.clone.0+0x42>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 49e:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
 4a0:	97 39       	cpi	r25, 0x97	; 151
 4a2:	81 f4       	brne	.+32     	; 0x4c4 <BUT_Check.clone.0+0x66>
         if (!(stateTmp & FLAG_BUT_HOLD)){
 4a4:	11 fd       	sbrc	r17, 1
 4a6:	0e c0       	rjmp	.+28     	; 0x4c4 <BUT_Check.clone.0+0x66>
            stateTmp &= ~(FLAG_BUT_RELEASED);
 4a8:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
 4aa:	12 60       	ori	r17, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
 4ac:	02 e0       	ldi	r16, 0x02	; 2
 4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <BUT_Check.clone.0+0x6a>
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
  #endif           
        }
     }
#else
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
 4b0:	10 ff       	sbrs	r17, 0
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <BUT_Check.clone.0+0x5e>
 4b4:	11 fd       	sbrc	r17, 1
 4b6:	1c c0       	rjmp	.+56     	; 0x4f0 <BUT_Check.clone.0+0x92>
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
 4b8:	03 e0       	ldi	r16, 0x03	; 3
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <BUT_Check.clone.0+0x60>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 4bc:	00 e0       	ldi	r16, 0x00	; 0
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
 4be:	10 92 74 01 	sts	0x0174, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
 4c2:	1c 7f       	andi	r17, 0xFC	; 252
  }
 
  countHold[i] = countHoldTmp;
#endif       
  
  if (event){
 4c4:	00 23       	and	r16, r16
 4c6:	31 f0       	breq	.+12     	; 0x4d4 <BUT_Check.clone.0+0x76>
     PutBut(i+1);
 4c8:	86 2f       	mov	r24, r22
 4ca:	0e 94 1b 02 	call	0x436	; 0x436 <PutBut>
     PutBut(event);
 4ce:	80 2f       	mov	r24, r16
 4d0:	0e 94 1b 02 	call	0x436	; 0x436 <PutBut>
  }
  
  countDeb[i] = countDebTmp;
 4d4:	fe 01       	movw	r30, r28
 4d6:	ef 58       	subi	r30, 0x8F	; 143
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	80 91 74 01 	lds	r24, 0x0174
 4de:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
 4e0:	c2 59       	subi	r28, 0x92	; 146
 4e2:	de 4f       	sbci	r29, 0xFE	; 254
 4e4:	18 83       	st	Y, r17
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
 4f0:	04 e0       	ldi	r16, 0x04	; 4
 4f2:	e5 cf       	rjmp	.-54     	; 0x4be <BUT_Check.clone.0+0x60>

000004f4 <KBD_getBut>:

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    
  if (count){
 4f4:	20 91 75 01 	lds	r18, 0x0175
 4f8:	22 23       	and	r18, r18
 4fa:	79 f0       	breq	.+30     	; 0x51a <KBD_getBut+0x26>
     but = buf[tail];
 4fc:	90 91 7f 01 	lds	r25, 0x017F
 500:	e9 2f       	mov	r30, r25
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	e9 58       	subi	r30, 0x89	; 137
 506:	fe 4f       	sbci	r31, 0xFE	; 254
 508:	80 81       	ld	r24, Z
     count--;
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	20 93 75 01 	sts	0x0175, r18
     tail++;
 510:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
 512:	97 70       	andi	r25, 0x07	; 7
 514:	90 93 7f 01 	sts	0x017F, r25
 518:	08 95       	ret
  }
}

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
 51a:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
 51c:	08 95       	ret

0000051e <KBD_init>:
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 51e:	10 92 71 01 	sts	0x0171, r1
     stateBut[i] = 0;
 522:	10 92 6e 01 	sts	0x016E, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 526:	10 92 72 01 	sts	0x0172, r1
     stateBut[i] = 0;
 52a:	10 92 6f 01 	sts	0x016F, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 52e:	10 92 73 01 	sts	0x0173, r1
     stateBut[i] = 0;
 532:	10 92 70 01 	sts	0x0170, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
 536:	10 92 77 01 	sts	0x0177, r1
 53a:	10 92 78 01 	sts	0x0178, r1
 53e:	10 92 79 01 	sts	0x0179, r1
 542:	10 92 7a 01 	sts	0x017A, r1
 546:	10 92 7b 01 	sts	0x017B, r1
 54a:	10 92 7c 01 	sts	0x017C, r1
 54e:	10 92 7d 01 	sts	0x017D, r1
 552:	10 92 7e 01 	sts	0x017E, r1
  }
  
  head = 0;
 556:	10 92 76 01 	sts	0x0176, r1
  tail = 0;  
 55a:	10 92 7f 01 	sts	0x017F, r1
  count = 0;
 55e:	10 92 75 01 	sts	0x0175, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
 562:	54 98       	cbi	0x0a, 4	; 10
 564:	5c 9a       	sbi	0x0b, 4	; 11
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
 566:	55 98       	cbi	0x0a, 5	; 10
 568:	5d 9a       	sbi	0x0b, 5	; 11
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
 56a:	56 98       	cbi	0x0a, 6	; 10
 56c:	5e 9a       	sbi	0x0b, 6	; 11
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
 56e:	08 95       	ret

00000570 <KBD_poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	4c 99       	sbic	0x09, 4	; 9
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	0e 94 2f 02 	call	0x45e	; 0x45e <BUT_Check.clone.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	4d 99       	sbic	0x09, 5	; 9
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	62 e0       	ldi	r22, 0x02	; 2
 584:	0e 94 2f 02 	call	0x45e	; 0x45e <BUT_Check.clone.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	4e 99       	sbic	0x09, 6	; 9
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	63 e0       	ldi	r22, 0x03	; 3
 590:	0e 94 2f 02 	call	0x45e	; 0x45e <BUT_Check.clone.0>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
 594:	08 95       	ret

00000596 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
 596:	1f 93       	push	r17
  uint8_t but = 0;
  uint8_t code = 0;
  KBD_poll();
 598:	0e 94 b8 02 	call	0x570	; 0x570 <KBD_poll>
  but = KBD_getBut();
 59c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <KBD_getBut>
 5a0:	18 2f       	mov	r17, r24
  if (but) {
 5a2:	88 23       	and	r24, r24
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <KBD_scan+0x12>
 5a6:	83 c0       	rjmp	.+262    	; 0x6ae <KBD_scan+0x118>
    code = KBD_getBut(); 
 5a8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <KBD_getBut>
    if (but == 1) {
 5ac:	11 30       	cpi	r17, 0x01	; 1
 5ae:	41 f5       	brne	.+80     	; 0x600 <KBD_scan+0x6a>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	51 f4       	brne	.+20     	; 0x5c8 <KBD_scan+0x32>
 5b4:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b6:	8f e3       	ldi	r24, 0x3F	; 63
 5b8:	9c e9       	ldi	r25, 0x9C	; 156
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <KBD_scan+0x24>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <KBD_scan+0x2a>
 5c0:	00 00       	nop
 5c2:	40 98       	cbi	0x08, 0	; 8
 5c4:	8a e0       	ldi	r24, 0x0A	; 10
 5c6:	6d c0       	rjmp	.+218    	; 0x6a2 <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_PLUS_HOLD, 0, 0); }
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	69 f4       	brne	.+26     	; 0x5e6 <KBD_scan+0x50>
 5cc:	40 9a       	sbi	0x08, 0	; 8
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	97 ee       	ldi	r25, 0xE7	; 231
 5d2:	a3 e0       	ldi	r26, 0x03	; 3
 5d4:	81 50       	subi	r24, 0x01	; 1
 5d6:	90 40       	sbci	r25, 0x00	; 0
 5d8:	a0 40       	sbci	r26, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <KBD_scan+0x3e>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <KBD_scan+0x48>
 5de:	00 00       	nop
 5e0:	40 98       	cbi	0x08, 0	; 8
 5e2:	8c e0       	ldi	r24, 0x0C	; 12
 5e4:	5e c0       	rjmp	.+188    	; 0x6a2 <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS_LONG, 0, 0); }
 5e6:	84 30       	cpi	r24, 0x04	; 4
 5e8:	09 f0       	breq	.+2      	; 0x5ec <KBD_scan+0x56>
 5ea:	61 c0       	rjmp	.+194    	; 0x6ae <KBD_scan+0x118>
 5ec:	40 9a       	sbi	0x08, 0	; 8
 5ee:	af e3       	ldi	r26, 0x3F	; 63
 5f0:	bc e9       	ldi	r27, 0x9C	; 156
 5f2:	11 97       	sbiw	r26, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <KBD_scan+0x5c>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <KBD_scan+0x62>
 5f8:	00 00       	nop
 5fa:	40 98       	cbi	0x08, 0	; 8
 5fc:	8b e0       	ldi	r24, 0x0B	; 11
 5fe:	51 c0       	rjmp	.+162    	; 0x6a2 <KBD_scan+0x10c>
    } 
	if (but == 2) {
 600:	12 30       	cpi	r17, 0x02	; 2
 602:	39 f5       	brne	.+78     	; 0x652 <KBD_scan+0xbc>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET, 0, 0); }
 604:	83 30       	cpi	r24, 0x03	; 3
 606:	51 f4       	brne	.+20     	; 0x61c <KBD_scan+0x86>
 608:	40 9a       	sbi	0x08, 0	; 8
 60a:	8f e3       	ldi	r24, 0x3F	; 63
 60c:	9c e9       	ldi	r25, 0x9C	; 156
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <KBD_scan+0x78>
 612:	00 c0       	rjmp	.+0      	; 0x614 <KBD_scan+0x7e>
 614:	00 00       	nop
 616:	40 98       	cbi	0x08, 0	; 8
 618:	84 e1       	ldi	r24, 0x14	; 20
 61a:	43 c0       	rjmp	.+134    	; 0x6a2 <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_HOLD, 0, 0); }
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	69 f4       	brne	.+26     	; 0x63a <KBD_scan+0xa4>
 620:	40 9a       	sbi	0x08, 0	; 8
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	97 ee       	ldi	r25, 0xE7	; 231
 626:	a3 e0       	ldi	r26, 0x03	; 3
 628:	81 50       	subi	r24, 0x01	; 1
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	a0 40       	sbci	r26, 0x00	; 0
 62e:	e1 f7       	brne	.-8      	; 0x628 <KBD_scan+0x92>
 630:	00 c0       	rjmp	.+0      	; 0x632 <KBD_scan+0x9c>
 632:	00 00       	nop
 634:	40 98       	cbi	0x08, 0	; 8
 636:	86 e1       	ldi	r24, 0x16	; 22
 638:	34 c0       	rjmp	.+104    	; 0x6a2 <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
 63a:	84 30       	cpi	r24, 0x04	; 4
 63c:	c1 f5       	brne	.+112    	; 0x6ae <KBD_scan+0x118>
 63e:	40 9a       	sbi	0x08, 0	; 8
 640:	af e3       	ldi	r26, 0x3F	; 63
 642:	bc e9       	ldi	r27, 0x9C	; 156
 644:	11 97       	sbiw	r26, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <KBD_scan+0xae>
 648:	00 c0       	rjmp	.+0      	; 0x64a <KBD_scan+0xb4>
 64a:	00 00       	nop
 64c:	40 98       	cbi	0x08, 0	; 8
 64e:	85 e1       	ldi	r24, 0x15	; 21
 650:	28 c0       	rjmp	.+80     	; 0x6a2 <KBD_scan+0x10c>
    }
	if (but == 3) {
 652:	13 30       	cpi	r17, 0x03	; 3
 654:	61 f5       	brne	.+88     	; 0x6ae <KBD_scan+0x118>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	51 f4       	brne	.+20     	; 0x66e <KBD_scan+0xd8>
 65a:	40 9a       	sbi	0x08, 0	; 8
 65c:	8f e3       	ldi	r24, 0x3F	; 63
 65e:	9c e9       	ldi	r25, 0x9C	; 156
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <KBD_scan+0xca>
 664:	00 c0       	rjmp	.+0      	; 0x666 <KBD_scan+0xd0>
 666:	00 00       	nop
 668:	40 98       	cbi	0x08, 0	; 8
 66a:	8e e1       	ldi	r24, 0x1E	; 30
 66c:	1a c0       	rjmp	.+52     	; 0x6a2 <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_MINUS_HOLD, 0, 0); }
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	69 f4       	brne	.+26     	; 0x68c <KBD_scan+0xf6>
 672:	40 9a       	sbi	0x08, 0	; 8
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	97 ee       	ldi	r25, 0xE7	; 231
 678:	a3 e0       	ldi	r26, 0x03	; 3
 67a:	81 50       	subi	r24, 0x01	; 1
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	a0 40       	sbci	r26, 0x00	; 0
 680:	e1 f7       	brne	.-8      	; 0x67a <KBD_scan+0xe4>
 682:	00 c0       	rjmp	.+0      	; 0x684 <KBD_scan+0xee>
 684:	00 00       	nop
 686:	40 98       	cbi	0x08, 0	; 8
 688:	80 e2       	ldi	r24, 0x20	; 32
 68a:	0b c0       	rjmp	.+22     	; 0x6a2 <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS_LONG, 0, 0); }
 68c:	84 30       	cpi	r24, 0x04	; 4
 68e:	79 f4       	brne	.+30     	; 0x6ae <KBD_scan+0x118>
 690:	40 9a       	sbi	0x08, 0	; 8
 692:	af e3       	ldi	r26, 0x3F	; 63
 694:	bc e9       	ldi	r27, 0x9C	; 156
 696:	11 97       	sbiw	r26, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <KBD_scan+0x100>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <KBD_scan+0x106>
 69c:	00 00       	nop
 69e:	40 98       	cbi	0x08, 0	; 8
 6a0:	8f e1       	ldi	r24, 0x1F	; 31
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <RTOS_setTask>
    }
  }
}
 6ae:	1f 91       	pop	r17
 6b0:	08 95       	ret

000006b2 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
 6b2:	e1 eb       	ldi	r30, 0xB1	; 177
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	84 60       	ori	r24, 0x04	; 4
 6ba:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
 6c0:	e0 e7       	ldi	r30, 0x70	; 112
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	81 60       	ori	r24, 0x01	; 1
 6c8:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
 6ca:	86 e0       	ldi	r24, 0x06	; 6
 6cc:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
 6d0:	10 92 e1 01 	sts	0x01E1, r1
}
 6d4:	08 95       	ret

000006d6 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
 6d6:	88 23       	and	r24, r24
 6d8:	09 f4       	brne	.+2      	; 0x6dc <RTOS_setTask+0x6>
 6da:	6f c0       	rjmp	.+222    	; 0x7ba <RTOS_setTask+0xe4>
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	1b c0       	rjmp	.+54     	; 0x716 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
 6e0:	29 2f       	mov	r18, r25
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	f9 01       	movw	r30, r18
 6e6:	ee 0f       	add	r30, r30
 6e8:	ff 1f       	adc	r31, r31
 6ea:	e2 0f       	add	r30, r18
 6ec:	f3 1f       	adc	r31, r19
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	ef 57       	subi	r30, 0x7F	; 127
 6f4:	fe 4f       	sbci	r31, 0xFE	; 254
 6f6:	20 81       	ld	r18, Z
 6f8:	28 17       	cp	r18, r24
 6fa:	61 f4       	brne	.+24     	; 0x714 <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
 6fc:	72 83       	std	Z+2, r23	; 0x02
 6fe:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
 700:	54 83       	std	Z+4, r21	; 0x04
 702:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
 704:	61 15       	cp	r22, r1
 706:	71 05       	cpc	r23, r1
 708:	19 f4       	brne	.+6      	; 0x710 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	85 83       	std	Z+5, r24	; 0x05
 70e:	08 95       	ret
      } else TaskArray[i].run = 0;   
 710:	15 82       	std	Z+5, r1	; 0x05
 712:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
 714:	9f 5f       	subi	r25, 0xFF	; 255
 716:	20 91 e1 01 	lds	r18, 0x01E1
 71a:	92 17       	cp	r25, r18
 71c:	08 f3       	brcs	.-62     	; 0x6e0 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
 71e:	20 91 e1 01 	lds	r18, 0x01E1
 722:	20 31       	cpi	r18, 0x10	; 16
 724:	08 f0       	brcs	.+2      	; 0x728 <RTOS_setTask+0x52>
 726:	49 c0       	rjmp	.+146    	; 0x7ba <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
 728:	20 91 e1 01 	lds	r18, 0x01E1
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	f9 01       	movw	r30, r18
 730:	ee 0f       	add	r30, r30
 732:	ff 1f       	adc	r31, r31
 734:	e2 0f       	add	r30, r18
 736:	f3 1f       	adc	r31, r19
 738:	ee 0f       	add	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	ef 57       	subi	r30, 0x7F	; 127
 73e:	fe 4f       	sbci	r31, 0xFE	; 254
 740:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
 742:	20 91 e1 01 	lds	r18, 0x01E1
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	f9 01       	movw	r30, r18
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	e2 0f       	add	r30, r18
 750:	f3 1f       	adc	r31, r19
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	ef 57       	subi	r30, 0x7F	; 127
 758:	fe 4f       	sbci	r31, 0xFE	; 254
 75a:	72 83       	std	Z+2, r23	; 0x02
 75c:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
 75e:	20 91 e1 01 	lds	r18, 0x01E1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	f9 01       	movw	r30, r18
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	e2 0f       	add	r30, r18
 76c:	f3 1f       	adc	r31, r19
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	ef 57       	subi	r30, 0x7F	; 127
 774:	fe 4f       	sbci	r31, 0xFE	; 254
 776:	54 83       	std	Z+4, r21	; 0x04
 778:	43 83       	std	Z+3, r20	; 0x03
 77a:	89 2f       	mov	r24, r25
 77c:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
 77e:	61 15       	cp	r22, r1
 780:	71 05       	cpc	r23, r1
 782:	61 f4       	brne	.+24     	; 0x79c <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
 784:	fc 01       	movw	r30, r24
 786:	ee 0f       	add	r30, r30
 788:	ff 1f       	adc	r31, r31
 78a:	e8 0f       	add	r30, r24
 78c:	f9 1f       	adc	r31, r25
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	ef 57       	subi	r30, 0x7F	; 127
 794:	fe 4f       	sbci	r31, 0xFE	; 254
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	85 83       	std	Z+5, r24	; 0x05
 79a:	0a c0       	rjmp	.+20     	; 0x7b0 <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
 79c:	fc 01       	movw	r30, r24
 79e:	ee 0f       	add	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	e8 0f       	add	r30, r24
 7a4:	f9 1f       	adc	r31, r25
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31
 7aa:	ef 57       	subi	r30, 0x7F	; 127
 7ac:	fe 4f       	sbci	r31, 0xFE	; 254
 7ae:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
 7b0:	80 91 e1 01 	lds	r24, 0x01E1
 7b4:	8f 5f       	subi	r24, 0xFF	; 255
 7b6:	80 93 e1 01 	sts	0x01E1, r24
 7ba:	08 95       	ret

000007bc <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	2e c0       	rjmp	.+92     	; 0x81c <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
 7c0:	29 2f       	mov	r18, r25
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	d9 01       	movw	r26, r18
 7c6:	aa 0f       	add	r26, r26
 7c8:	bb 1f       	adc	r27, r27
 7ca:	a2 0f       	add	r26, r18
 7cc:	b3 1f       	adc	r27, r19
 7ce:	aa 0f       	add	r26, r26
 7d0:	bb 1f       	adc	r27, r27
 7d2:	af 57       	subi	r26, 0x7F	; 127
 7d4:	be 4f       	sbci	r27, 0xFE	; 254
 7d6:	4c 91       	ld	r20, X
 7d8:	48 17       	cp	r20, r24
 7da:	f9 f4       	brne	.+62     	; 0x81a <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
 7dc:	80 91 e1 01 	lds	r24, 0x01E1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	28 17       	cp	r18, r24
 7e6:	39 07       	cpc	r19, r25
 7e8:	91 f0       	breq	.+36     	; 0x80e <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
 7ea:	80 91 e1 01 	lds	r24, 0x01E1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	fc 01       	movw	r30, r24
 7f4:	ee 0f       	add	r30, r30
 7f6:	ff 1f       	adc	r31, r31
 7f8:	e8 0f       	add	r30, r24
 7fa:	f9 1f       	adc	r31, r25
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	ef 57       	subi	r30, 0x7F	; 127
 802:	fe 4f       	sbci	r31, 0xFE	; 254
 804:	86 e0       	ldi	r24, 0x06	; 6
 806:	01 90       	ld	r0, Z+
 808:	0d 92       	st	X+, r0
 80a:	81 50       	subi	r24, 0x01	; 1
 80c:	e1 f7       	brne	.-8      	; 0x806 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
 80e:	80 91 e1 01 	lds	r24, 0x01E1
 812:	81 50       	subi	r24, 0x01	; 1
 814:	80 93 e1 01 	sts	0x01E1, r24
      return;
 818:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 81a:	9f 5f       	subi	r25, 0xFF	; 255
 81c:	20 91 e1 01 	lds	r18, 0x01E1
 820:	92 17       	cp	r25, r18
 822:	70 f2       	brcs	.-100    	; 0x7c0 <RTOS_deleteTask+0x4>
 824:	08 95       	ret

00000826 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
 826:	0f 93       	push	r16
 828:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
 82a:	80 91 80 01 	lds	r24, 0x0180
 82e:	88 23       	and	r24, r24
 830:	11 f4       	brne	.+4      	; 0x836 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 832:	10 e0       	ldi	r17, 0x00	; 0
 834:	4e c0       	rjmp	.+156    	; 0x8d2 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
 836:	10 92 80 01 	sts	0x0180, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 83a:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
 83c:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 83e:	17 c0       	rjmp	.+46     	; 0x86e <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
 840:	82 2f       	mov	r24, r18
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	fc 01       	movw	r30, r24
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	e8 0f       	add	r30, r24
 84c:	f9 1f       	adc	r31, r25
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	ef 57       	subi	r30, 0x7F	; 127
 854:	fe 4f       	sbci	r31, 0xFE	; 254
 856:	81 81       	ldd	r24, Z+1	; 0x01
 858:	92 81       	ldd	r25, Z+2	; 0x02
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	11 f4       	brne	.+4      	; 0x862 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
 85e:	35 83       	std	Z+5, r19	; 0x05
 860:	05 c0       	rjmp	.+10     	; 0x86c <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
 862:	81 81       	ldd	r24, Z+1	; 0x01
 864:	92 81       	ldd	r25, Z+2	; 0x02
 866:	01 97       	sbiw	r24, 0x01	; 1
 868:	92 83       	std	Z+2, r25	; 0x02
 86a:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 86c:	2f 5f       	subi	r18, 0xFF	; 255
 86e:	80 91 e1 01 	lds	r24, 0x01E1
 872:	28 17       	cp	r18, r24
 874:	28 f3       	brcs	.-54     	; 0x840 <RTOS_dispatchTask+0x1a>
 876:	dd cf       	rjmp	.-70     	; 0x832 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
 878:	81 2f       	mov	r24, r17
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	fc 01       	movw	r30, r24
 87e:	ee 0f       	add	r30, r30
 880:	ff 1f       	adc	r31, r31
 882:	e8 0f       	add	r30, r24
 884:	f9 1f       	adc	r31, r25
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	ef 57       	subi	r30, 0x7F	; 127
 88c:	fe 4f       	sbci	r31, 0xFE	; 254
 88e:	85 81       	ldd	r24, Z+5	; 0x05
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	f1 f4       	brne	.+60     	; 0x8d0 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
 894:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
 896:	23 81       	ldd	r18, Z+3	; 0x03
 898:	34 81       	ldd	r19, Z+4	; 0x04
 89a:	21 15       	cp	r18, r1
 89c:	31 05       	cpc	r19, r1
 89e:	31 f4       	brne	.+12     	; 0x8ac <RTOS_dispatchTask+0x86>
      {  
        cli();
 8a0:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
 8a2:	80 81       	ld	r24, Z
 8a4:	0e 94 de 03 	call	0x7bc	; 0x7bc <RTOS_deleteTask>
        sei();
 8a8:	78 94       	sei
 8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
 8ac:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
 8ae:	21 81       	ldd	r18, Z+1	; 0x01
 8b0:	32 81       	ldd	r19, Z+2	; 0x02
 8b2:	21 15       	cp	r18, r1
 8b4:	31 05       	cpc	r19, r1
 8b6:	31 f4       	brne	.+12     	; 0x8c4 <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
 8b8:	23 81       	ldd	r18, Z+3	; 0x03
 8ba:	34 81       	ldd	r19, Z+4	; 0x04
 8bc:	21 50       	subi	r18, 0x01	; 1
 8be:	30 40       	sbci	r19, 0x00	; 0
 8c0:	32 83       	std	Z+2, r19	; 0x02
 8c2:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
 8c4:	e0 91 03 01 	lds	r30, 0x0103
 8c8:	f0 91 04 01 	lds	r31, 0x0104
 8cc:	80 2f       	mov	r24, r16
 8ce:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
 8d0:	1f 5f       	subi	r17, 0xFF	; 255
 8d2:	80 91 e1 01 	lds	r24, 0x01E1
 8d6:	18 17       	cp	r17, r24
 8d8:	78 f2       	brcs	.-98     	; 0x878 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
 8da:	1f 91       	pop	r17
 8dc:	0f 91       	pop	r16
 8de:	08 95       	ret

000008e0 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
 8e0:	1f 92       	push	r1
 8e2:	0f 92       	push	r0
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	0f 92       	push	r0
 8e8:	11 24       	eor	r1, r1
 8ea:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
 8ec:	86 e0       	ldi	r24, 0x06	; 6
 8ee:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	80 93 80 01 	sts	0x0180, r24
}
 8f8:	8f 91       	pop	r24
 8fa:	0f 90       	pop	r0
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	0f 90       	pop	r0
 900:	1f 90       	pop	r1
 902:	18 95       	reti

00000904 <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
 904:	80 52       	subi	r24, 0x20	; 32
 906:	86 35       	cpi	r24, 0x56	; 86
 908:	30 f4       	brcc	.+12     	; 0x916 <MAX7219_lookupCode+0x12>
 90a:	e8 2f       	mov	r30, r24
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	eb 5e       	subi	r30, 0xEB	; 235
 910:	fe 4f       	sbci	r31, 0xFE	; 254
 912:	80 81       	ld	r24, Z
 914:	08 95       	ret
 916:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
 918:	08 95       	ret

0000091a <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
 91a:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
 91c:	87 ff       	sbrs	r24, 7
 91e:	02 c0       	rjmp	.+4      	; 0x924 <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
 920:	43 9a       	sbi	0x08, 3	; 8
 922:	01 c0       	rjmp	.+2      	; 0x926 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 924:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 926:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
 928:	00 00       	nop
	asm("nop");
 92a:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
 92c:	42 9a       	sbi	0x08, 2	; 8
 92e:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
 930:	11 f0       	breq	.+4      	; 0x936 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
 932:	88 0f       	add	r24, r24
 934:	f3 cf       	rjmp	.-26     	; 0x91c <MAX7219_SendByte+0x2>
 936:	08 95       	ret

00000938 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
 938:	ff 92       	push	r15
 93a:	0f 93       	push	r16
 93c:	1f 93       	push	r17
 93e:	18 2f       	mov	r17, r24
 940:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
 942:	41 98       	cbi	0x08, 1	; 8
 944:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
 946:	81 2f       	mov	r24, r17
 948:	0e 94 8d 04 	call	0x91a	; 0x91a <MAX7219_SendByte>
	MAX7219_SendByte(data);
 94c:	8f 2d       	mov	r24, r15
 94e:	0e 94 8d 04 	call	0x91a	; 0x91a <MAX7219_SendByte>
 952:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
 954:	c1 f7       	brne	.-16     	; 0x946 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 956:	41 9a       	sbi	0x08, 1	; 8
  return;
}
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	08 95       	ret

00000960 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	c5 e0       	ldi	r28, 0x05	; 5
 96a:	d1 e0       	ldi	r29, 0x01	; 1
 96c:	0d e0       	ldi	r16, 0x0D	; 13
 96e:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
 970:	89 91       	ld	r24, Y+
 972:	f8 01       	movw	r30, r16
 974:	61 91       	ld	r22, Z+
 976:	8f 01       	movw	r16, r30
 978:	8f 5f       	subi	r24, 0xFF	; 255
 97a:	0e 94 9c 04 	call	0x938	; 0x938 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
 97e:	f1 e0       	ldi	r31, 0x01	; 1
 980:	cd 30       	cpi	r28, 0x0D	; 13
 982:	df 07       	cpc	r29, r31
 984:	a9 f7       	brne	.-22     	; 0x970 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	08 95       	ret

00000990 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
 990:	10 92 0d 01 	sts	0x010D, r1
 994:	10 92 0e 01 	sts	0x010E, r1
 998:	10 92 0f 01 	sts	0x010F, r1
 99c:	10 92 10 01 	sts	0x0110, r1
 9a0:	10 92 11 01 	sts	0x0111, r1
 9a4:	10 92 12 01 	sts	0x0112, r1
 9a8:	10 92 13 01 	sts	0x0113, r1
 9ac:	10 92 14 01 	sts	0x0114, r1
  }
  MAX7219_updateDisplay();
 9b0:	0e 94 b0 04 	call	0x960	; 0x960 <MAX7219_updateDisplay>
}
 9b4:	08 95       	ret

000009b6 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 9b6:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
 9b8:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
 9ba:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 9bc:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 9be:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 9c0:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
 9c2:	8c e0       	ldi	r24, 0x0C	; 12
 9c4:	61 e0       	ldi	r22, 0x01	; 1
 9c6:	0e 94 9c 04 	call	0x938	; 0x938 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
 9ca:	8f e0       	ldi	r24, 0x0F	; 15
 9cc:	60 e0       	ldi	r22, 0x00	; 0
 9ce:	0e 94 9c 04 	call	0x938	; 0x938 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
 9d2:	89 e0       	ldi	r24, 0x09	; 9
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	0e 94 9c 04 	call	0x938	; 0x938 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 4);
 9da:	8a e0       	ldi	r24, 0x0A	; 10
 9dc:	64 e0       	ldi	r22, 0x04	; 4
 9de:	0e 94 9c 04 	call	0x938	; 0x938 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
 9e2:	8b e0       	ldi	r24, 0x0B	; 11
 9e4:	67 e0       	ldi	r22, 0x07	; 7
 9e6:	0e 94 9c 04 	call	0x938	; 0x938 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
 9ea:	0e 94 c8 04 	call	0x990	; 0x990 <MAX7219_clearDisplay>
  return;
}
 9ee:	08 95       	ret

000009f0 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, uint16_t x, unsigned char n, unsigned char fillch)
{
 9f0:	cf 92       	push	r12
 9f2:	df 92       	push	r13
 9f4:	ef 92       	push	r14
 9f6:	ff 92       	push	r15
 9f8:	0f 93       	push	r16
 9fa:	1f 93       	push	r17
 9fc:	df 93       	push	r29
 9fe:	cf 93       	push	r28
 a00:	00 d0       	rcall	.+0      	; 0xa02 <MAX7219_printNum+0x12>
 a02:	00 d0       	rcall	.+0      	; 0xa04 <MAX7219_printNum+0x14>
 a04:	00 d0       	rcall	.+0      	; 0xa06 <MAX7219_printNum+0x16>
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
 a0a:	c8 2e       	mov	r12, r24
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, uint16_t x, unsigned char n, unsigned char fillch)
 a0c:	e4 2f       	mov	r30, r20
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	8e 01       	movw	r16, r28
 a12:	0f 5f       	subi	r16, 0xFF	; 255
 a14:	1f 4f       	sbci	r17, 0xFF	; 255
 a16:	e0 0f       	add	r30, r16
 a18:	f1 1f       	adc	r31, r17
{
  unsigned char i;
  unsigned char s[4];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
 a1a:	8a e0       	ldi	r24, 0x0A	; 10
 a1c:	e8 2e       	mov	r14, r24
 a1e:	f1 2c       	mov	r15, r1
//=============================================================================
void MAX7219_printNum(uint8_t pos, uint16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[4];
  for (i = 0; i < n; i++) {
 a20:	07 c0       	rjmp	.+14     	; 0xa30 <MAX7219_printNum+0x40>
 a22:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
 a24:	cb 01       	movw	r24, r22
 a26:	b7 01       	movw	r22, r14
 a28:	0e 94 65 07 	call	0xeca	; 0xeca <__udivmodhi4>
 a2c:	80 5d       	subi	r24, 0xD0	; 208
 a2e:	80 83       	st	Z, r24
//=============================================================================
void MAX7219_printNum(uint8_t pos, uint16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[4];
  for (i = 0; i < n; i++) {
 a30:	e0 17       	cp	r30, r16
 a32:	f1 07       	cpc	r31, r17
 a34:	b1 f7       	brne	.-20     	; 0xa22 <MAX7219_printNum+0x32>
 a36:	30 e0       	ldi	r19, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 a38:	64 2f       	mov	r22, r20
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	61 50       	subi	r22, 0x01	; 1
 a3e:	70 40       	sbci	r23, 0x00	; 0
    if (s[i] == '0') s[i] = fillch; else break;
 a40:	de 01       	movw	r26, r28
 a42:	11 96       	adiw	r26, 0x01	; 1
 a44:	08 c0       	rjmp	.+16     	; 0xa56 <MAX7219_printNum+0x66>
 a46:	fd 01       	movw	r30, r26
 a48:	e8 0f       	add	r30, r24
 a4a:	f9 1f       	adc	r31, r25
 a4c:	80 81       	ld	r24, Z
 a4e:	80 33       	cpi	r24, 0x30	; 48
 a50:	01 f5       	brne	.+64     	; 0xa92 <MAX7219_printNum+0xa2>
 a52:	20 83       	st	Z, r18
  unsigned char s[4];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 a54:	3f 5f       	subi	r19, 0xFF	; 255
 a56:	83 2f       	mov	r24, r19
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	86 17       	cp	r24, r22
 a5c:	97 07       	cpc	r25, r23
 a5e:	9c f3       	brlt	.-26     	; 0xa46 <MAX7219_printNum+0x56>
 a60:	18 c0       	rjmp	.+48     	; 0xa92 <MAX7219_printNum+0xa2>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 a62:	82 2f       	mov	r24, r18
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	8c 01       	movw	r16, r24
 a68:	0c 0d       	add	r16, r12
 a6a:	1d 1d       	adc	r17, r13
 a6c:	08 30       	cpi	r16, 0x08	; 8
 a6e:	11 05       	cpc	r17, r1
 a70:	74 f4       	brge	.+28     	; 0xa8e <MAX7219_printNum+0x9e>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 a72:	8e 0d       	add	r24, r14
 a74:	9f 1d       	adc	r25, r15
 a76:	fc 01       	movw	r30, r24
 a78:	80 81       	ld	r24, Z
 a7a:	2d 83       	std	Y+5, r18	; 0x05
 a7c:	4e 83       	std	Y+6, r20	; 0x06
 a7e:	0e 94 82 04 	call	0x904	; 0x904 <MAX7219_lookupCode>
 a82:	f8 01       	movw	r30, r16
 a84:	e3 5f       	subi	r30, 0xF3	; 243
 a86:	fe 4f       	sbci	r31, 0xFE	; 254
 a88:	80 83       	st	Z, r24
 a8a:	4e 81       	ldd	r20, Y+6	; 0x06
 a8c:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	06 c0       	rjmp	.+12     	; 0xa9e <MAX7219_printNum+0xae>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
 a92:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 a94:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 a96:	7e 01       	movw	r14, r28
 a98:	08 94       	sec
 a9a:	e1 1c       	adc	r14, r1
 a9c:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 a9e:	24 17       	cp	r18, r20
 aa0:	00 f3       	brcs	.-64     	; 0xa62 <MAX7219_printNum+0x72>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  MAX7219_updateDisplay();
 aa2:	0e 94 b0 04 	call	0x960	; 0x960 <MAX7219_updateDisplay>
}
 aa6:	26 96       	adiw	r28, 0x06	; 6
 aa8:	0f b6       	in	r0, 0x3f	; 63
 aaa:	f8 94       	cli
 aac:	de bf       	out	0x3e, r29	; 62
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	cd bf       	out	0x3d, r28	; 61
 ab2:	cf 91       	pop	r28
 ab4:	df 91       	pop	r29
 ab6:	1f 91       	pop	r17
 ab8:	0f 91       	pop	r16
 aba:	ff 90       	pop	r15
 abc:	ef 90       	pop	r14
 abe:	df 90       	pop	r13
 ac0:	cf 90       	pop	r12
 ac2:	08 95       	ret

00000ac4 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
 ac4:	1f 93       	push	r17
 ac6:	18 2f       	mov	r17, r24
 ac8:	86 2f       	mov	r24, r22
  if (pos < 9) {
 aca:	19 30       	cpi	r17, 0x09	; 9
 acc:	48 f4       	brcc	.+18     	; 0xae0 <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
 ace:	0e 94 82 04 	call	0x904	; 0x904 <MAX7219_lookupCode>
 ad2:	e1 2f       	mov	r30, r17
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	e4 5f       	subi	r30, 0xF4	; 244
 ad8:	fe 4f       	sbci	r31, 0xFE	; 254
 ada:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
 adc:	0e 94 b0 04 	call	0x960	; 0x960 <MAX7219_updateDisplay>
  }
}
 ae0:	1f 91       	pop	r17
 ae2:	08 95       	ret

00000ae4 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
 ae4:	ef 92       	push	r14
 ae6:	ff 92       	push	r15
 ae8:	1f 93       	push	r17
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
  unsigned char i = pos;
 aee:	e6 2e       	mov	r14, r22
 af0:	e7 01       	movw	r28, r14
 af2:	7e 01       	movw	r14, r28
 af4:	f7 2e       	mov	r15, r23
 af6:	e7 01       	movw	r28, r14
 af8:	18 2f       	mov	r17, r24
  while(*data) {
 afa:	0a c0       	rjmp	.+20     	; 0xb10 <MAX7219_printStr+0x2c>
    if (i < 9) {
 afc:	19 30       	cpi	r17, 0x09	; 9
 afe:	58 f4       	brcc	.+22     	; 0xb16 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
 b00:	0e 94 82 04 	call	0x904	; 0x904 <MAX7219_lookupCode>
 b04:	e1 2f       	mov	r30, r17
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	e4 5f       	subi	r30, 0xF4	; 244
 b0a:	fe 4f       	sbci	r31, 0xFE	; 254
 b0c:	80 83       	st	Z, r24
      i++;
 b0e:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
 b10:	89 91       	ld	r24, Y+
 b12:	88 23       	and	r24, r24
 b14:	99 f7       	brne	.-26     	; 0xafc <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
 b16:	0e 94 b0 04 	call	0x960	; 0x960 <MAX7219_updateDisplay>
}
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	1f 91       	pop	r17
 b20:	ff 90       	pop	r15
 b22:	ef 90       	pop	r14
 b24:	08 95       	ret

00000b26 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
 b26:	e8 2f       	mov	r30, r24
 b28:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
 b2a:	61 30       	cpi	r22, 0x01	; 1
 b2c:	29 f4       	brne	.+10     	; 0xb38 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
 b2e:	e4 5f       	subi	r30, 0xF4	; 244
 b30:	fe 4f       	sbci	r31, 0xFE	; 254
 b32:	80 81       	ld	r24, Z
 b34:	80 68       	ori	r24, 0x80	; 128
 b36:	04 c0       	rjmp	.+8      	; 0xb40 <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
 b38:	e4 5f       	subi	r30, 0xF4	; 244
 b3a:	fe 4f       	sbci	r31, 0xFE	; 254
 b3c:	80 81       	ld	r24, Z
 b3e:	8f 77       	andi	r24, 0x7F	; 127
 b40:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
 b42:	0e 94 b0 04 	call	0x960	; 0x960 <MAX7219_updateDisplay>
}
 b46:	08 95       	ret

00000b48 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
 b48:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
 b4a:	f8 94       	cli
  switch(chanel) {
 b4c:	82 30       	cpi	r24, 0x02	; 2
 b4e:	01 f1       	breq	.+64     	; 0xb90 <ds18x20IsOnBus+0x48>
 b50:	83 30       	cpi	r24, 0x03	; 3
 b52:	20 f4       	brcc	.+8      	; 0xb5c <ds18x20IsOnBus+0x14>
 b54:	81 30       	cpi	r24, 0x01	; 1
 b56:	09 f0       	breq	.+2      	; 0xb5a <ds18x20IsOnBus+0x12>
 b58:	57 c0       	rjmp	.+174    	; 0xc08 <ds18x20IsOnBus+0xc0>
 b5a:	06 c0       	rjmp	.+12     	; 0xb68 <ds18x20IsOnBus+0x20>
 b5c:	83 30       	cpi	r24, 0x03	; 3
 b5e:	61 f1       	breq	.+88     	; 0xbb8 <ds18x20IsOnBus+0x70>
 b60:	84 30       	cpi	r24, 0x04	; 4
 b62:	09 f0       	breq	.+2      	; 0xb66 <ds18x20IsOnBus+0x1e>
 b64:	51 c0       	rjmp	.+162    	; 0xc08 <ds18x20IsOnBus+0xc0>
 b66:	3e c0       	rjmp	.+124    	; 0xbe4 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
 b68:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 b6a:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b6c:	8f e7       	ldi	r24, 0x7F	; 127
 b6e:	97 e0       	ldi	r25, 0x07	; 7
 b70:	01 97       	sbiw	r24, 0x01	; 1
 b72:	f1 f7       	brne	.-4      	; 0xb70 <ds18x20IsOnBus+0x28>
 b74:	00 c0       	rjmp	.+0      	; 0xb76 <ds18x20IsOnBus+0x2e>
 b76:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 b78:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 b7a:	29 9a       	sbi	0x05, 1	; 5
 b7c:	a7 e1       	ldi	r26, 0x17	; 23
 b7e:	b1 e0       	ldi	r27, 0x01	; 1
 b80:	11 97       	sbiw	r26, 0x01	; 1
 b82:	f1 f7       	brne	.-4      	; 0xb80 <ds18x20IsOnBus+0x38>
 b84:	00 c0       	rjmp	.+0      	; 0xb86 <ds18x20IsOnBus+0x3e>
 b86:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
 b88:	81 e0       	ldi	r24, 0x01	; 1
 b8a:	19 9b       	sbis	0x03, 1	; 3
 b8c:	3e c0       	rjmp	.+124    	; 0xc0a <ds18x20IsOnBus+0xc2>
 b8e:	3c c0       	rjmp	.+120    	; 0xc08 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
 b90:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
 b92:	28 98       	cbi	0x05, 0	; 5
 b94:	8f e7       	ldi	r24, 0x7F	; 127
 b96:	97 e0       	ldi	r25, 0x07	; 7
 b98:	01 97       	sbiw	r24, 0x01	; 1
 b9a:	f1 f7       	brne	.-4      	; 0xb98 <ds18x20IsOnBus+0x50>
 b9c:	00 c0       	rjmp	.+0      	; 0xb9e <ds18x20IsOnBus+0x56>
 b9e:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
 ba0:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
 ba2:	28 9a       	sbi	0x05, 0	; 5
 ba4:	a7 e1       	ldi	r26, 0x17	; 23
 ba6:	b1 e0       	ldi	r27, 0x01	; 1
 ba8:	11 97       	sbiw	r26, 0x01	; 1
 baa:	f1 f7       	brne	.-4      	; 0xba8 <ds18x20IsOnBus+0x60>
 bac:	00 c0       	rjmp	.+0      	; 0xbae <ds18x20IsOnBus+0x66>
 bae:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
 bb0:	81 e0       	ldi	r24, 0x01	; 1
 bb2:	18 9b       	sbis	0x03, 0	; 3
 bb4:	2a c0       	rjmp	.+84     	; 0xc0a <ds18x20IsOnBus+0xc2>
 bb6:	28 c0       	rjmp	.+80     	; 0xc08 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
 bb8:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
 bba:	5f 98       	cbi	0x0b, 7	; 11
 bbc:	8f e7       	ldi	r24, 0x7F	; 127
 bbe:	97 e0       	ldi	r25, 0x07	; 7
 bc0:	01 97       	sbiw	r24, 0x01	; 1
 bc2:	f1 f7       	brne	.-4      	; 0xbc0 <ds18x20IsOnBus+0x78>
 bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <ds18x20IsOnBus+0x7e>
 bc6:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
 bc8:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
 bca:	5f 9a       	sbi	0x0b, 7	; 11
 bcc:	a7 e1       	ldi	r26, 0x17	; 23
 bce:	b1 e0       	ldi	r27, 0x01	; 1
 bd0:	11 97       	sbiw	r26, 0x01	; 1
 bd2:	f1 f7       	brne	.-4      	; 0xbd0 <ds18x20IsOnBus+0x88>
 bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <ds18x20IsOnBus+0x8e>
 bd6:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
 bd8:	89 b1       	in	r24, 0x09	; 9
 bda:	80 95       	com	r24
 bdc:	88 1f       	adc	r24, r24
 bde:	88 27       	eor	r24, r24
 be0:	88 1f       	adc	r24, r24
    break;
 be2:	13 c0       	rjmp	.+38     	; 0xc0a <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
 be4:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
 be6:	2a 98       	cbi	0x05, 2	; 5
 be8:	8f e7       	ldi	r24, 0x7F	; 127
 bea:	97 e0       	ldi	r25, 0x07	; 7
 bec:	01 97       	sbiw	r24, 0x01	; 1
 bee:	f1 f7       	brne	.-4      	; 0xbec <ds18x20IsOnBus+0xa4>
 bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <ds18x20IsOnBus+0xaa>
 bf2:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
 bf4:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
 bf6:	2a 9a       	sbi	0x05, 2	; 5
 bf8:	a7 e1       	ldi	r26, 0x17	; 23
 bfa:	b1 e0       	ldi	r27, 0x01	; 1
 bfc:	11 97       	sbiw	r26, 0x01	; 1
 bfe:	f1 f7       	brne	.-4      	; 0xbfc <ds18x20IsOnBus+0xb4>
 c00:	00 c0       	rjmp	.+0      	; 0xc02 <ds18x20IsOnBus+0xba>
 c02:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
 c08:	80 e0       	ldi	r24, 0x00	; 0
 c0a:	a7 e6       	ldi	r26, 0x67	; 103
 c0c:	b6 e0       	ldi	r27, 0x06	; 6
 c0e:	11 97       	sbiw	r26, 0x01	; 1
 c10:	f1 f7       	brne	.-4      	; 0xc0e <ds18x20IsOnBus+0xc6>
 c12:	00 c0       	rjmp	.+0      	; 0xc14 <ds18x20IsOnBus+0xcc>
 c14:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
 c16:	f0 e0       	ldi	r31, 0x00	; 0
 c18:	ef 51       	subi	r30, 0x1F	; 31
 c1a:	fe 4f       	sbci	r31, 0xFE	; 254
 c1c:	80 83       	st	Z, r24
  sei();
 c1e:	78 94       	sei
  return ret;
}
 c20:	08 95       	ret

00000c22 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
 c22:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
 c24:	98 2f       	mov	r25, r24
 c26:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
 c28:	f8 94       	cli
  switch(chanel) {
 c2a:	62 30       	cpi	r22, 0x02	; 2
 c2c:	e1 f0       	breq	.+56     	; 0xc66 <ds18x20SendByte+0x44>
 c2e:	63 30       	cpi	r22, 0x03	; 3
 c30:	20 f4       	brcc	.+8      	; 0xc3a <ds18x20SendByte+0x18>
 c32:	61 30       	cpi	r22, 0x01	; 1
 c34:	09 f0       	breq	.+2      	; 0xc38 <ds18x20SendByte+0x16>
 c36:	52 c0       	rjmp	.+164    	; 0xcdc <ds18x20SendByte+0xba>
 c38:	06 c0       	rjmp	.+12     	; 0xc46 <ds18x20SendByte+0x24>
 c3a:	63 30       	cpi	r22, 0x03	; 3
 c3c:	21 f1       	breq	.+72     	; 0xc86 <ds18x20SendByte+0x64>
 c3e:	64 30       	cpi	r22, 0x04	; 4
 c40:	09 f0       	breq	.+2      	; 0xc44 <ds18x20SendByte+0x22>
 c42:	4c c0       	rjmp	.+152    	; 0xcdc <ds18x20SendByte+0xba>
 c44:	30 c0       	rjmp	.+96     	; 0xca6 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
 c46:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 c48:	29 98       	cbi	0x05, 1	; 5
 c4a:	30 e2       	ldi	r19, 0x20	; 32
 c4c:	3a 95       	dec	r19
 c4e:	f1 f7       	brne	.-4      	; 0xc4c <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c50:	99 23       	and	r25, r25
 c52:	31 f4       	brne	.+12     	; 0xc60 <ds18x20SendByte+0x3e>
 c54:	e7 ed       	ldi	r30, 0xD7	; 215
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	31 97       	sbiw	r30, 0x01	; 1
 c5a:	f1 f7       	brne	.-4      	; 0xc58 <ds18x20SendByte+0x36>
 c5c:	00 c0       	rjmp	.+0      	; 0xc5e <ds18x20SendByte+0x3c>
 c5e:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 c60:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 c62:	29 9a       	sbi	0x05, 1	; 5
 c64:	2f c0       	rjmp	.+94     	; 0xcc4 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
 c66:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
 c68:	28 98       	cbi	0x05, 0	; 5
 c6a:	f0 e2       	ldi	r31, 0x20	; 32
 c6c:	fa 95       	dec	r31
 c6e:	f1 f7       	brne	.-4      	; 0xc6c <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c70:	99 23       	and	r25, r25
 c72:	31 f4       	brne	.+12     	; 0xc80 <ds18x20SendByte+0x5e>
 c74:	e7 ed       	ldi	r30, 0xD7	; 215
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	31 97       	sbiw	r30, 0x01	; 1
 c7a:	f1 f7       	brne	.-4      	; 0xc78 <ds18x20SendByte+0x56>
 c7c:	00 c0       	rjmp	.+0      	; 0xc7e <ds18x20SendByte+0x5c>
 c7e:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
 c80:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
 c82:	28 9a       	sbi	0x05, 0	; 5
 c84:	1f c0       	rjmp	.+62     	; 0xcc4 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
 c86:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
 c88:	5f 98       	cbi	0x0b, 7	; 11
 c8a:	f0 e2       	ldi	r31, 0x20	; 32
 c8c:	fa 95       	dec	r31
 c8e:	f1 f7       	brne	.-4      	; 0xc8c <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c90:	99 23       	and	r25, r25
 c92:	31 f4       	brne	.+12     	; 0xca0 <ds18x20SendByte+0x7e>
 c94:	e7 ed       	ldi	r30, 0xD7	; 215
 c96:	f0 e0       	ldi	r31, 0x00	; 0
 c98:	31 97       	sbiw	r30, 0x01	; 1
 c9a:	f1 f7       	brne	.-4      	; 0xc98 <ds18x20SendByte+0x76>
 c9c:	00 c0       	rjmp	.+0      	; 0xc9e <ds18x20SendByte+0x7c>
 c9e:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
 ca0:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
 ca2:	5f 9a       	sbi	0x0b, 7	; 11
 ca4:	0f c0       	rjmp	.+30     	; 0xcc4 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
 ca6:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
 ca8:	2a 98       	cbi	0x05, 2	; 5
 caa:	f0 e2       	ldi	r31, 0x20	; 32
 cac:	fa 95       	dec	r31
 cae:	f1 f7       	brne	.-4      	; 0xcac <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 cb0:	99 23       	and	r25, r25
 cb2:	31 f4       	brne	.+12     	; 0xcc0 <ds18x20SendByte+0x9e>
 cb4:	e7 ed       	ldi	r30, 0xD7	; 215
 cb6:	f0 e0       	ldi	r31, 0x00	; 0
 cb8:	31 97       	sbiw	r30, 0x01	; 1
 cba:	f1 f7       	brne	.-4      	; 0xcb8 <ds18x20SendByte+0x96>
 cbc:	00 c0       	rjmp	.+0      	; 0xcbe <ds18x20SendByte+0x9c>
 cbe:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
 cc0:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
 cc2:	2a 9a       	sbi	0x05, 2	; 5
 cc4:	f5 e3       	ldi	r31, 0x35	; 53
 cc6:	fa 95       	dec	r31
 cc8:	f1 f7       	brne	.-4      	; 0xcc6 <ds18x20SendByte+0xa4>
 cca:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
 ccc:	99 23       	and	r25, r25
 cce:	31 f0       	breq	.+12     	; 0xcdc <ds18x20SendByte+0xba>
 cd0:	e7 ed       	ldi	r30, 0xD7	; 215
 cd2:	f0 e0       	ldi	r31, 0x00	; 0
 cd4:	31 97       	sbiw	r30, 0x01	; 1
 cd6:	f1 f7       	brne	.-4      	; 0xcd4 <ds18x20SendByte+0xb2>
 cd8:	00 c0       	rjmp	.+0      	; 0xcda <ds18x20SendByte+0xb8>
 cda:	00 00       	nop
    break;
  }
  sei();
 cdc:	78 94       	sei
 cde:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
 ce0:	11 f0       	breq	.+4      	; 0xce6 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
 ce2:	86 95       	lsr	r24
 ce4:	9f cf       	rjmp	.-194    	; 0xc24 <ds18x20SendByte+0x2>
 ce6:	08 95       	ret

00000ce8 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
 ce8:	28 2f       	mov	r18, r24
 cea:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
 cec:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
 cee:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
 cf0:	f8 94       	cli
  switch(chanel) {
 cf2:	22 30       	cpi	r18, 0x02	; 2
 cf4:	c1 f0       	breq	.+48     	; 0xd26 <ds18x20GetByte+0x3e>
 cf6:	23 30       	cpi	r18, 0x03	; 3
 cf8:	20 f4       	brcc	.+8      	; 0xd02 <ds18x20GetByte+0x1a>
 cfa:	21 30       	cpi	r18, 0x01	; 1
 cfc:	09 f0       	breq	.+2      	; 0xd00 <ds18x20GetByte+0x18>
 cfe:	40 c0       	rjmp	.+128    	; 0xd80 <ds18x20GetByte+0x98>
 d00:	05 c0       	rjmp	.+10     	; 0xd0c <ds18x20GetByte+0x24>
 d02:	23 30       	cpi	r18, 0x03	; 3
 d04:	e9 f0       	breq	.+58     	; 0xd40 <ds18x20GetByte+0x58>
 d06:	24 30       	cpi	r18, 0x04	; 4
 d08:	d9 f5       	brne	.+118    	; 0xd80 <ds18x20GetByte+0x98>
 d0a:	27 c0       	rjmp	.+78     	; 0xd5a <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
 d0c:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
 d0e:	29 98       	cbi	0x05, 1	; 5
 d10:	90 e2       	ldi	r25, 0x20	; 32
 d12:	9a 95       	dec	r25
 d14:	f1 f7       	brne	.-4      	; 0xd12 <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
 d16:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
 d18:	29 9a       	sbi	0x05, 1	; 5
 d1a:	e0 e3       	ldi	r30, 0x30	; 48
 d1c:	ea 95       	dec	r30
 d1e:	f1 f7       	brne	.-4      	; 0xd1c <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
 d20:	93 b1       	in	r25, 0x03	; 3
 d22:	92 70       	andi	r25, 0x02	; 2
 d24:	26 c0       	rjmp	.+76     	; 0xd72 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
 d26:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
 d28:	28 98       	cbi	0x05, 0	; 5
 d2a:	f0 e2       	ldi	r31, 0x20	; 32
 d2c:	fa 95       	dec	r31
 d2e:	f1 f7       	brne	.-4      	; 0xd2c <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
 d30:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
 d32:	28 9a       	sbi	0x05, 0	; 5
 d34:	90 e3       	ldi	r25, 0x30	; 48
 d36:	9a 95       	dec	r25
 d38:	f1 f7       	brne	.-4      	; 0xd36 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
 d3a:	93 b1       	in	r25, 0x03	; 3
 d3c:	91 70       	andi	r25, 0x01	; 1
 d3e:	19 c0       	rjmp	.+50     	; 0xd72 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
 d40:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
 d42:	5f 98       	cbi	0x0b, 7	; 11
 d44:	f0 e2       	ldi	r31, 0x20	; 32
 d46:	fa 95       	dec	r31
 d48:	f1 f7       	brne	.-4      	; 0xd46 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
 d4a:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
 d4c:	5f 9a       	sbi	0x0b, 7	; 11
 d4e:	90 e3       	ldi	r25, 0x30	; 48
 d50:	9a 95       	dec	r25
 d52:	f1 f7       	brne	.-4      	; 0xd50 <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
 d54:	99 b1       	in	r25, 0x09	; 9
 d56:	90 78       	andi	r25, 0x80	; 128
 d58:	0c c0       	rjmp	.+24     	; 0xd72 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
 d5a:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
 d5c:	2a 98       	cbi	0x05, 2	; 5
 d5e:	f0 e2       	ldi	r31, 0x20	; 32
 d60:	fa 95       	dec	r31
 d62:	f1 f7       	brne	.-4      	; 0xd60 <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
 d64:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
 d66:	2a 9a       	sbi	0x05, 2	; 5
 d68:	90 e3       	ldi	r25, 0x30	; 48
 d6a:	9a 95       	dec	r25
 d6c:	f1 f7       	brne	.-4      	; 0xd6a <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
 d6e:	93 b1       	in	r25, 0x03	; 3
 d70:	94 70       	andi	r25, 0x04	; 4
 d72:	eb ed       	ldi	r30, 0xDB	; 219
 d74:	f0 e0       	ldi	r31, 0x00	; 0
 d76:	31 97       	sbiw	r30, 0x01	; 1
 d78:	f1 f7       	brne	.-4      	; 0xd76 <ds18x20GetByte+0x8e>
 d7a:	00 c0       	rjmp	.+0      	; 0xd7c <ds18x20GetByte+0x94>
 d7c:	00 00       	nop
 d7e:	01 c0       	rjmp	.+2      	; 0xd82 <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
 d80:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
 d82:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
 d84:	91 11       	cpse	r25, r1
 d86:	80 68       	ori	r24, 0x80	; 128
 d88:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
 d8a:	09 f0       	breq	.+2      	; 0xd8e <ds18x20GetByte+0xa6>
 d8c:	b0 cf       	rjmp	.-160    	; 0xcee <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
 d8e:	08 95       	ret

00000d90 <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
 d90:	0f 93       	push	r16
 d92:	1f 93       	push	r17
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
 d9a:	0e 94 a4 05 	call	0xb48	; 0xb48 <ds18x20IsOnBus>
 d9e:	88 23       	and	r24, r24
 da0:	91 f1       	breq	.+100    	; 0xe06 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
 da2:	8c ec       	ldi	r24, 0xCC	; 204
 da4:	61 2f       	mov	r22, r17
 da6:	0e 94 11 06 	call	0xc22	; 0xc22 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
 daa:	8e eb       	ldi	r24, 0xBE	; 190
 dac:	61 2f       	mov	r22, r17
 dae:	0e 94 11 06 	call	0xc22	; 0xc22 <ds18x20SendByte>
 db2:	ce e0       	ldi	r28, 0x0E	; 14
 db4:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
 db6:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
 db8:	81 2f       	mov	r24, r17
 dba:	0e 94 74 06 	call	0xce8	; 0xce8 <ds18x20GetByte>
 dbe:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
 dc0:	08 27       	eor	r16, r24
 dc2:	88 e0       	ldi	r24, 0x08	; 8
 dc4:	9c e8       	ldi	r25, 0x8C	; 140
 dc6:	06 95       	lsr	r16
 dc8:	08 f4       	brcc	.+2      	; 0xdcc <ds18x20ReadStratchPad+0x3c>
 dca:	09 27       	eor	r16, r25
 dcc:	8a 95       	dec	r24
 dce:	d9 f7       	brne	.-10     	; 0xdc6 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
 dd0:	82 e0       	ldi	r24, 0x02	; 2
 dd2:	c7 31       	cpi	r28, 0x17	; 23
 dd4:	d8 07       	cpc	r29, r24
 dd6:	81 f7       	brne	.-32     	; 0xdb8 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
 dd8:	00 23       	and	r16, r16
 dda:	a9 f4       	brne	.+42     	; 0xe06 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
 ddc:	81 2f       	mov	r24, r17
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	01 97       	sbiw	r24, 0x01	; 1
 de2:	fc 01       	movw	r30, r24
 de4:	ee 0f       	add	r30, r30
 de6:	ff 1f       	adc	r31, r31
 de8:	23 e0       	ldi	r18, 0x03	; 3
 dea:	88 0f       	add	r24, r24
 dec:	99 1f       	adc	r25, r25
 dee:	2a 95       	dec	r18
 df0:	e1 f7       	brne	.-8      	; 0xdea <ds18x20ReadStratchPad+0x5a>
 df2:	e8 0f       	add	r30, r24
 df4:	f9 1f       	adc	r31, r25
 df6:	ea 51       	subi	r30, 0x1A	; 26
 df8:	fe 4f       	sbci	r31, 0xFE	; 254
 dfa:	80 91 0e 02 	lds	r24, 0x020E
 dfe:	80 83       	st	Z, r24
 e00:	80 91 0f 02 	lds	r24, 0x020F
 e04:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
 e06:	df 91       	pop	r29
 e08:	cf 91       	pop	r28
 e0a:	1f 91       	pop	r17
 e0c:	0f 91       	pop	r16
 e0e:	08 95       	ret

00000e10 <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
 e10:	1f 93       	push	r17
 e12:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
 e14:	0e 94 a4 05 	call	0xb48	; 0xb48 <ds18x20IsOnBus>
 e18:	88 23       	and	r24, r24
 e1a:	41 f0       	breq	.+16     	; 0xe2c <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
 e1c:	8c ec       	ldi	r24, 0xCC	; 204
 e1e:	61 2f       	mov	r22, r17
 e20:	0e 94 11 06 	call	0xc22	; 0xc22 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
 e24:	84 e4       	ldi	r24, 0x44	; 68
 e26:	61 2f       	mov	r22, r17
 e28:	0e 94 11 06 	call	0xc22	; 0xc22 <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
 e2c:	12 30       	cpi	r17, 0x02	; 2
 e2e:	69 f0       	breq	.+26     	; 0xe4a <ds18x20ConvertTemp+0x3a>
 e30:	13 30       	cpi	r17, 0x03	; 3
 e32:	18 f4       	brcc	.+6      	; 0xe3a <ds18x20ConvertTemp+0x2a>
 e34:	11 30       	cpi	r17, 0x01	; 1
 e36:	89 f4       	brne	.+34     	; 0xe5a <ds18x20ConvertTemp+0x4a>
 e38:	05 c0       	rjmp	.+10     	; 0xe44 <ds18x20ConvertTemp+0x34>
 e3a:	13 30       	cpi	r17, 0x03	; 3
 e3c:	49 f0       	breq	.+18     	; 0xe50 <ds18x20ConvertTemp+0x40>
 e3e:	14 30       	cpi	r17, 0x04	; 4
 e40:	61 f4       	brne	.+24     	; 0xe5a <ds18x20ConvertTemp+0x4a>
 e42:	09 c0       	rjmp	.+18     	; 0xe56 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 e44:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 e46:	21 9a       	sbi	0x04, 1	; 4
    break;
 e48:	08 c0       	rjmp	.+16     	; 0xe5a <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
 e4a:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
 e4c:	20 9a       	sbi	0x04, 0	; 4
    break;
 e4e:	05 c0       	rjmp	.+10     	; 0xe5a <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
 e50:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
 e52:	57 9a       	sbi	0x0a, 7	; 10
    break;
 e54:	02 c0       	rjmp	.+4      	; 0xe5a <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
 e56:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
 e58:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
 e5a:	1f 91       	pop	r17
 e5c:	08 95       	ret

00000e5e <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret = devs[chanel - 1].temp;
 e5e:	90 e0       	ldi	r25, 0x00	; 0
 e60:	01 97       	sbiw	r24, 0x01	; 1
 e62:	fc 01       	movw	r30, r24
 e64:	ee 0f       	add	r30, r30
 e66:	ff 1f       	adc	r31, r31
 e68:	63 e0       	ldi	r22, 0x03	; 3
 e6a:	88 0f       	add	r24, r24
 e6c:	99 1f       	adc	r25, r25
 e6e:	6a 95       	dec	r22
 e70:	e1 f7       	brne	.-8      	; 0xe6a <ds18x20GetTemp+0xc>
 e72:	e8 0f       	add	r30, r24
 e74:	f9 1f       	adc	r31, r25
 e76:	ea 51       	subi	r30, 0x1A	; 26
 e78:	fe 4f       	sbci	r31, 0xFE	; 254
 e7a:	60 81       	ld	r22, Z
 e7c:	71 81       	ldd	r23, Z+1	; 0x01
  if (devs[chanel - 1].id[0] == 0x28) /* DS18B20 */
 e7e:	82 81       	ldd	r24, Z+2	; 0x02
 e80:	88 32       	cpi	r24, 0x28	; 40
 e82:	61 f4       	brne	.+24     	; 0xe9c <ds18x20GetTemp+0x3e>
	ret = ret * 5 / 8;
 e84:	cb 01       	movw	r24, r22
 e86:	88 0f       	add	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	88 0f       	add	r24, r24
 e8c:	99 1f       	adc	r25, r25
 e8e:	86 0f       	add	r24, r22
 e90:	97 1f       	adc	r25, r23
 e92:	68 e0       	ldi	r22, 0x08	; 8
 e94:	70 e0       	ldi	r23, 0x00	; 0
 e96:	0e 94 79 07 	call	0xef2	; 0xef2 <__divmodhi4>
 e9a:	09 c0       	rjmp	.+18     	; 0xeae <ds18x20GetTemp+0x50>
  else if (devs[chanel - 1].id[0] == 0x10) /* DS18S20 */
 e9c:	80 31       	cpi	r24, 0x10	; 16
 e9e:	39 f4       	brne	.+14     	; 0xeae <ds18x20GetTemp+0x50>
	ret = ret * 5;
 ea0:	cb 01       	movw	r24, r22
 ea2:	88 0f       	add	r24, r24
 ea4:	99 1f       	adc	r25, r25
 ea6:	88 0f       	add	r24, r24
 ea8:	99 1f       	adc	r25, r25
 eaa:	68 0f       	add	r22, r24
 eac:	79 1f       	adc	r23, r25
	/* Return value is in 0.1В°C units */
  return ret;
}
 eae:	cb 01       	movw	r24, r22
 eb0:	08 95       	ret

00000eb2 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
 eb2:	e8 2f       	mov	r30, r24
 eb4:	f0 e0       	ldi	r31, 0x00	; 0
 eb6:	ef 51       	subi	r30, 0x1F	; 31
 eb8:	fe 4f       	sbci	r31, 0xFE	; 254
}
 eba:	80 81       	ld	r24, Z
 ebc:	08 95       	ret

00000ebe <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
 ebe:	e8 2f       	mov	r30, r24
 ec0:	f0 e0       	ldi	r31, 0x00	; 0
 ec2:	ef 51       	subi	r30, 0x1F	; 31
 ec4:	fe 4f       	sbci	r31, 0xFE	; 254
 ec6:	60 83       	st	Z, r22
}
 ec8:	08 95       	ret

00000eca <__udivmodhi4>:
 eca:	aa 1b       	sub	r26, r26
 ecc:	bb 1b       	sub	r27, r27
 ece:	51 e1       	ldi	r21, 0x11	; 17
 ed0:	07 c0       	rjmp	.+14     	; 0xee0 <__udivmodhi4_ep>

00000ed2 <__udivmodhi4_loop>:
 ed2:	aa 1f       	adc	r26, r26
 ed4:	bb 1f       	adc	r27, r27
 ed6:	a6 17       	cp	r26, r22
 ed8:	b7 07       	cpc	r27, r23
 eda:	10 f0       	brcs	.+4      	; 0xee0 <__udivmodhi4_ep>
 edc:	a6 1b       	sub	r26, r22
 ede:	b7 0b       	sbc	r27, r23

00000ee0 <__udivmodhi4_ep>:
 ee0:	88 1f       	adc	r24, r24
 ee2:	99 1f       	adc	r25, r25
 ee4:	5a 95       	dec	r21
 ee6:	a9 f7       	brne	.-22     	; 0xed2 <__udivmodhi4_loop>
 ee8:	80 95       	com	r24
 eea:	90 95       	com	r25
 eec:	bc 01       	movw	r22, r24
 eee:	cd 01       	movw	r24, r26
 ef0:	08 95       	ret

00000ef2 <__divmodhi4>:
 ef2:	97 fb       	bst	r25, 7
 ef4:	09 2e       	mov	r0, r25
 ef6:	07 26       	eor	r0, r23
 ef8:	0a d0       	rcall	.+20     	; 0xf0e <__divmodhi4_neg1>
 efa:	77 fd       	sbrc	r23, 7
 efc:	04 d0       	rcall	.+8      	; 0xf06 <__divmodhi4_neg2>
 efe:	e5 df       	rcall	.-54     	; 0xeca <__udivmodhi4>
 f00:	06 d0       	rcall	.+12     	; 0xf0e <__divmodhi4_neg1>
 f02:	00 20       	and	r0, r0
 f04:	1a f4       	brpl	.+6      	; 0xf0c <__divmodhi4_exit>

00000f06 <__divmodhi4_neg2>:
 f06:	70 95       	com	r23
 f08:	61 95       	neg	r22
 f0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f0c <__divmodhi4_exit>:
 f0c:	08 95       	ret

00000f0e <__divmodhi4_neg1>:
 f0e:	f6 f7       	brtc	.-4      	; 0xf0c <__divmodhi4_exit>
 f10:	90 95       	com	r25
 f12:	81 95       	neg	r24
 f14:	9f 4f       	sbci	r25, 0xFF	; 255
 f16:	08 95       	ret

00000f18 <_exit>:
 f18:	f8 94       	cli

00000f1a <__stop_program>:
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <__stop_program>
