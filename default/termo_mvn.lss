
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00001934  000019c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ab  0080019e  0080019e  00001a66  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000026e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000058e  00000000  00000000  000027a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ff5  00000000  00000000  00002d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000087c  00000000  00000000  00004d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002200  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f0  00000000  00000000  000077a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005ff  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018a6  00000000  00000000  00008193  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000147  00000000  00000000  00009a39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e3       	ldi	r30, 0x34	; 52
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 39       	cpi	r26, 0x9E	; 158
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ae e9       	ldi	r26, 0x9E	; 158
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 34       	cpi	r26, 0x49	; 73
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 8e 09 	call	0x131c	; 0x131c <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 8f 02 	call	0x51e	; 0x51e <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 6b 07 	call	0xed6	; 0xed6 <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 9a       	sbi	0x0b, 3	; 11
  OUT_2_init();
      be:	53 9a       	sbi	0x0a, 3	; 10
      c0:	5b 9a       	sbi	0x0b, 3	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 0c 08 	call	0x1018	; 0x1018 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000); // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	44 ef       	ldi	r20, 0xF4	; 244
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 5);        // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	45 e0       	ldi	r20, 0x05	; 5
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);   // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 65 02 	call	0x4ca	; 0x4ca <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 77 02 	call	0x4ee	; 0x4ee <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 80 02 	call	0x500	; 0x500 <load_min_temp_2>
  load_type1();
     112:	0e 94 a3 02 	call	0x546	; 0x546 <load_type1>
  load_type2();
     116:	0e 94 b2 02 	call	0x564	; 0x564 <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 c6 08 	call	0x118c	; 0x118c <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 ab 09 	call	0x1356	; 0x1356 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <check_temp>:
    break;
  }    
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     15e:	1f 93       	push	r17
     160:	18 2f       	mov	r17, r24
 int16_t t = ds18x20GetTemp(chanel);
     162:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
     166:	ac 01       	movw	r20, r24
 if (status[chanel - 1] == T_OTSLED_MAX) {
     168:	21 2f       	mov	r18, r17
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	30 40       	sbci	r19, 0x00	; 0
     170:	d9 01       	movw	r26, r18
     172:	ae 5c       	subi	r26, 0xCE	; 206
     174:	be 4f       	sbci	r27, 0xFE	; 254
     176:	8c 91       	ld	r24, X
     178:	b9 01       	movw	r22, r18
     17a:	66 0f       	add	r22, r22
     17c:	77 1f       	adc	r23, r23
     17e:	66 0f       	add	r22, r22
     180:	77 1f       	adc	r23, r23
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	69 f4       	brne	.+26     	; 0x1a0 <check_temp+0x42>
 // отслеживаем превышение максимума
   if (t > temps[chanel - 1][T_MAX]) {
     186:	6f 55       	subi	r22, 0x5F	; 95
     188:	7e 4f       	sbci	r23, 0xFE	; 254
     18a:	fb 01       	movw	r30, r22
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	f9 01       	movw	r30, r18
     192:	e0 5d       	subi	r30, 0xD0	; 208
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	84 17       	cp	r24, r20
     198:	95 07       	cpc	r25, r21
     19a:	7c f4       	brge	.+30     	; 0x1ba <check_temp+0x5c>
     status[chanel - 1] = T_OTSLED_MIN;
     19c:	1c 92       	st	X, r1
     19e:	11 c0       	rjmp	.+34     	; 0x1c2 <check_temp+0x64>
       MAX7219_setCommaPos(1, 0);
	 }
   }
 } else {
   // отслеживаем превышение минимума
   if (t < temps[chanel - 1][T_MIN]) {
     1a0:	6f 55       	subi	r22, 0x5F	; 95
     1a2:	7e 4f       	sbci	r23, 0xFE	; 254
     1a4:	fb 01       	movw	r30, r22
     1a6:	62 81       	ldd	r22, Z+2	; 0x02
     1a8:	73 81       	ldd	r23, Z+3	; 0x03
     1aa:	f9 01       	movw	r30, r18
     1ac:	e0 5d       	subi	r30, 0xD0	; 208
     1ae:	fe 4f       	sbci	r31, 0xFE	; 254
     1b0:	46 17       	cp	r20, r22
     1b2:	57 07       	cpc	r21, r23
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <check_temp+0x64>
     status[chanel - 1] = T_OTSLED_MAX;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	8c 93       	st	X, r24
     if (types[chanel - 1] == T_HEATER) {
     1ba:	80 81       	ld	r24, Z
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	21 f4       	brne	.+8      	; 0x1c8 <check_temp+0x6a>
     1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <check_temp+0x7a>
       if (chanel == 1) OUT_1_0();
       if (chanel == 2) OUT_2_0();
       MAX7219_setCommaPos(1, 0);
	 }
   } else {
     if (types[chanel - 1] == T_HEATER) {
     1c2:	80 81       	ld	r24, Z
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	41 f4       	brne	.+16     	; 0x1d8 <check_temp+0x7a>
       if (chanel == 1) OUT_1_0();
     1c8:	11 30       	cpi	r17, 0x01	; 1
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <check_temp+0x72>
       if (chanel == 2) OUT_2_0();
     1cc:	12 30       	cpi	r17, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <check_temp+0x74>
     1d0:	5b 98       	cbi	0x0b, 3	; 11
       MAX7219_setCommaPos(1, 0);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <check_temp+0x88>
	 } else {
       if (chanel == 1) OUT_1_1();
     1d8:	11 30       	cpi	r17, 0x01	; 1
     1da:	11 f0       	breq	.+4      	; 0x1e0 <check_temp+0x82>
       if (chanel == 2) OUT_2_1();
     1dc:	12 30       	cpi	r17, 0x02	; 2
     1de:	09 f4       	brne	.+2      	; 0x1e2 <check_temp+0x84>
     1e0:	5b 9a       	sbi	0x0b, 3	; 11
       MAX7219_setCommaPos(1, 1);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
	 }
   }
 }
}
     1ea:	1f 91       	pop	r17
     1ec:	08 95       	ret

000001ee <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     1ee:	80 91 a0 01 	lds	r24, 0x01A0
     1f2:	88 23       	and	r24, r24
     1f4:	21 f0       	breq	.+8      	; 0x1fe <DS18x20_scan+0x10>
    dscount--;
     1f6:	81 50       	subi	r24, 0x01	; 1
     1f8:	80 93 a0 01 	sts	0x01A0, r24
	return;
     1fc:	08 95       	ret
  }
  switch(ds_state) {
     1fe:	80 91 ab 01 	lds	r24, 0x01AB
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	b1 f0       	breq	.+44     	; 0x232 <DS18x20_scan+0x44>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	18 f0       	brcs	.+6      	; 0x210 <DS18x20_scan+0x22>
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	b1 f5       	brne	.+108    	; 0x27a <DS18x20_scan+0x8c>
     20e:	24 c0       	rjmp	.+72     	; 0x258 <DS18x20_scan+0x6a>
    case 0:
      ds18x20ConvertTemp(1);
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     222:	84 e0       	ldi	r24, 0x04	; 4
     224:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
	  dscount = 10;
     228:	8a e0       	ldi	r24, 0x0A	; 10
     22a:	80 93 a0 01 	sts	0x01A0, r24
	  ds_state = 1;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	10 c0       	rjmp	.+32     	; 0x252 <DS18x20_scan+0x64>
    break;
    case 1:
      ds18x20ReadStratchPad(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
	  dscount = 10;
     24a:	8a e0       	ldi	r24, 0x0A	; 10
     24c:	80 93 a0 01 	sts	0x01A0, r24
	  ds_state = 2;
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	80 93 ab 01 	sts	0x01AB, r24
    break;
     256:	08 95       	ret
    case 2:
      ds18x20GetTemp(1);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
      ds18x20GetTemp(2);
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
      ds18x20GetTemp(3);
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
      ds18x20GetTemp(4);
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
	  dscount = SCAN_TIME / 100;
     270:	84 e1       	ldi	r24, 0x14	; 20
     272:	80 93 a0 01 	sts	0x01A0, r24
	  ds_state = 0;
     276:	10 92 ab 01 	sts	0x01AB, r1
     27a:	08 95       	ret

0000027c <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     27c:	89 3c       	cpi	r24, 0xC9	; 201
     27e:	29 f0       	breq	.+10     	; 0x28a <events_default+0xe>
     280:	8c 3c       	cpi	r24, 0xCC	; 204
     282:	71 f0       	breq	.+28     	; 0x2a0 <events_default+0x24>
     284:	88 3c       	cpi	r24, 0xC8	; 200
     286:	71 f4       	brne	.+28     	; 0x2a4 <events_default+0x28>
     288:	08 c0       	rjmp	.+16     	; 0x29a <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 91 2b 01 	lds	r25, 0x012B
     290:	91 11       	cpse	r25, r1
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	80 93 2b 01 	sts	0x012B, r24
    break;
     298:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     29a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <KBD_scan>
    break;
     29e:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     2a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DS18x20_scan>
     2a4:	08 95       	ret

000002a6 <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
     2a6:	85 36       	cpi	r24, 0x65	; 101
     2a8:	09 f4       	brne	.+2      	; 0x2ac <run_start+0x6>
     2aa:	b9 c0       	rjmp	.+370    	; 0x41e <run_start+0x178>
     2ac:	87 36       	cpi	r24, 0x67	; 103
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <run_start+0xc>
     2b0:	8f c0       	rjmp	.+286    	; 0x3d0 <run_start+0x12a>
     2b2:	84 36       	cpi	r24, 0x64	; 100
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <run_start+0x12>
     2b6:	ee c0       	rjmp	.+476    	; 0x494 <run_start+0x1ee>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	71 e0       	ldi	r23, 0x01	; 1
     2be:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	6d e2       	ldi	r22, 0x2D	; 45
     2c6:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
	  ds_count = 0;
     2ca:	10 92 9e 01 	sts	0x019E, r1
      ds18x20IsOnBus(1);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     2e0:	84 e0       	ldi	r24, 0x04	; 4
     2e2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	41 f4       	brne	.+16     	; 0x300 <run_start+0x5a>
     2f0:	80 91 9e 01 	lds	r24, 0x019E
     2f4:	8f 5f       	subi	r24, 0xFF	; 255
     2f6:	80 93 9e 01 	sts	0x019E, r24
     2fa:	85 e0       	ldi	r24, 0x05	; 5
     2fc:	61 e3       	ldi	r22, 0x31	; 49
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <run_start+0x5e>
     300:	85 e0       	ldi	r24, 0x05	; 5
     302:	60 e2       	ldi	r22, 0x20	; 32
     304:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	41 f4       	brne	.+16     	; 0x322 <run_start+0x7c>
     312:	80 91 9e 01 	lds	r24, 0x019E
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 9e 01 	sts	0x019E, r24
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	61 e3       	ldi	r22, 0x31	; 49
     320:	02 c0       	rjmp	.+4      	; 0x326 <run_start+0x80>
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	60 e2       	ldi	r22, 0x20	; 32
     326:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	41 f4       	brne	.+16     	; 0x344 <run_start+0x9e>
     334:	80 91 9e 01 	lds	r24, 0x019E
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	80 93 9e 01 	sts	0x019E, r24
     33e:	87 e0       	ldi	r24, 0x07	; 7
     340:	61 e3       	ldi	r22, 0x31	; 49
     342:	02 c0       	rjmp	.+4      	; 0x348 <run_start+0xa2>
     344:	87 e0       	ldi	r24, 0x07	; 7
     346:	60 e2       	ldi	r22, 0x20	; 32
     348:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	41 f4       	brne	.+16     	; 0x366 <run_start+0xc0>
     356:	80 91 9e 01 	lds	r24, 0x019E
     35a:	8f 5f       	subi	r24, 0xFF	; 255
     35c:	80 93 9e 01 	sts	0x019E, r24
     360:	88 e0       	ldi	r24, 0x08	; 8
     362:	61 e3       	ldi	r22, 0x31	; 49
     364:	02 c0       	rjmp	.+4      	; 0x36a <run_start+0xc4>
     366:	88 e0       	ldi	r24, 0x08	; 8
     368:	60 e2       	ldi	r22, 0x20	; 32
     36a:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
	  if (ds_count == 0) {
     36e:	60 91 9e 01 	lds	r22, 0x019E
     372:	66 23       	and	r22, r22
     374:	21 f4       	brne	.+8      	; 0x37e <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     376:	84 e6       	ldi	r24, 0x64	; 100
     378:	68 eb       	ldi	r22, 0xB8	; 184
     37a:	7b e0       	ldi	r23, 0x0B	; 11
     37c:	4b c0       	rjmp	.+150    	; 0x414 <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	20 e2       	ldi	r18, 0x20	; 32
     386:	0e 94 ab 09 	call	0x1356	; 0x1356 <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	11 f4       	brne	.+4      	; 0x398 <run_start+0xf2>
     394:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	19 f4       	brne	.+6      	; 0x3a8 <run_start+0x102>
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	19 f4       	brne	.+6      	; 0x3b8 <run_start+0x112>
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	19 f4       	brne	.+6      	; 0x3c8 <run_start+0x122>
     3c2:	84 e0       	ldi	r24, 0x04	; 4
     3c4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     3c8:	87 e6       	ldi	r24, 0x67	; 103
     3ca:	68 ee       	ldi	r22, 0xE8	; 232
     3cc:	73 e0       	ldi	r23, 0x03	; 3
     3ce:	22 c0       	rjmp	.+68     	; 0x414 <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	11 f4       	brne	.+4      	; 0x3de <run_start+0x138>
     3da:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	19 f4       	brne	.+6      	; 0x3ee <run_start+0x148>
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	19 f4       	brne	.+6      	; 0x3fe <run_start+0x158>
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	19 f4       	brne	.+6      	; 0x40e <run_start+0x168>
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	0e 94 95 0b 	call	0x172a	; 0x172a <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     40e:	85 e6       	ldi	r24, 0x65	; 101
     410:	64 e6       	ldi	r22, 0x64	; 100
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
    break;
     41c:	08 95       	ret
    case EVENT_RUN_MAIN:
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
     424:	20 91 a1 01 	lds	r18, 0x01A1
     428:	30 91 a2 01 	lds	r19, 0x01A2
     42c:	82 17       	cp	r24, r18
     42e:	93 07       	cpc	r25, r19
     430:	24 f4       	brge	.+8      	; 0x43a <run_start+0x194>
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 32 01 	sts	0x0132, r24
     438:	02 c0       	rjmp	.+4      	; 0x43e <run_start+0x198>
     43a:	10 92 32 01 	sts	0x0132, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
     444:	20 91 a5 01 	lds	r18, 0x01A5
     448:	30 91 a6 01 	lds	r19, 0x01A6
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	24 f4       	brge	.+8      	; 0x45a <run_start+0x1b4>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 33 01 	sts	0x0133, r24
     458:	02 c0       	rjmp	.+4      	; 0x45e <run_start+0x1b8>
     45a:	10 92 33 01 	sts	0x0133, r1
      check_temp(chanel);
     45e:	80 91 34 01 	lds	r24, 0x0134
     462:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
      MAX7219_clearDisplay();
     466:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     46a:	8c ec       	ldi	r24, 0xCC	; 204
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	44 e6       	ldi	r20, 0x64	; 100
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     478:	88 e6       	ldi	r24, 0x68	; 104
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
      SET_STATE(run_main);
     486:	8d e5       	ldi	r24, 0x5D	; 93
     488:	94 e0       	ldi	r25, 0x04	; 4
     48a:	90 93 37 01 	sts	0x0137, r25
     48e:	80 93 36 01 	sts	0x0136, r24
    break;
     492:	08 95       	ret
	default:
	  events_default(event);
     494:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     498:	08 95       	ret

0000049a <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     49a:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     49c:	80 e1       	ldi	r24, 0x10	; 16
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eewr_word_m328p>
}
     4a4:	08 95       	ret

000004a6 <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     4a6:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     4a8:	80 e2       	ldi	r24, 0x20	; 32
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eewr_word_m328p>
}
     4b0:	08 95       	ret

000004b2 <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     4b2:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     4b4:	82 e1       	ldi	r24, 0x12	; 18
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eewr_word_m328p>
}
     4bc:	08 95       	ret

000004be <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     4be:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     4c0:	82 e2       	ldi	r24, 0x22	; 34
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 83 0c 	call	0x1906	; 0x1906 <__eewr_word_m328p>
}
     4c8:	08 95       	ret

000004ca <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     4ca:	80 e1       	ldi	r24, 0x10	; 16
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 6f 0c 	call	0x18de	; 0x18de <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     4d2:	80 93 a1 01 	sts	0x01A1, r24
     4d6:	90 93 a2 01 	sts	0x01A2, r25
  return (int16_t)tu;
}
     4da:	08 95       	ret

000004dc <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     4dc:	82 e1       	ldi	r24, 0x12	; 18
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 6f 0c 	call	0x18de	; 0x18de <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     4e4:	80 93 a3 01 	sts	0x01A3, r24
     4e8:	90 93 a4 01 	sts	0x01A4, r25
  return (int16_t)tu;
}
     4ec:	08 95       	ret

000004ee <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 6f 0c 	call	0x18de	; 0x18de <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     4f6:	80 93 a5 01 	sts	0x01A5, r24
     4fa:	90 93 a6 01 	sts	0x01A6, r25
  return (int16_t)tu;
}
     4fe:	08 95       	ret

00000500 <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     500:	82 e2       	ldi	r24, 0x22	; 34
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 6f 0c 	call	0x18de	; 0x18de <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     508:	80 93 a7 01 	sts	0x01A7, r24
     50c:	90 93 a8 01 	sts	0x01A8, r25
  return (int16_t)tu;
}
     510:	08 95       	ret

00000512 <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     512:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     514:	80 e3       	ldi	r24, 0x30	; 48
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__eewr_byte_m328p>
}
     51c:	08 95       	ret

0000051e <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     51e:	80 e3       	ldi	r24, 0x30	; 48
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__eerd_byte_m328p>
     526:	80 93 2f 01 	sts	0x012F, r24
  if (brightnes > 15) brightnes = 2;
     52a:	80 31       	cpi	r24, 0x10	; 16
     52c:	18 f0       	brcs	.+6      	; 0x534 <load_brightnes+0x16>
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 2f 01 	sts	0x012F, r24
  return brightnes;
}
     534:	80 91 2f 01 	lds	r24, 0x012F
     538:	08 95       	ret

0000053a <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     53a:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     53c:	84 e1       	ldi	r24, 0x14	; 20
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__eewr_byte_m328p>
}
     544:	08 95       	ret

00000546 <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     546:	84 e1       	ldi	r24, 0x14	; 20
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__eerd_byte_m328p>
     54e:	81 11       	cpse	r24, r1
     550:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     552:	80 93 30 01 	sts	0x0130, r24
  return t;
}
     556:	08 95       	ret

00000558 <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     558:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     55a:	84 e2       	ldi	r24, 0x24	; 36
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__eewr_byte_m328p>
}
     562:	08 95       	ret

00000564 <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     564:	84 e2       	ldi	r24, 0x24	; 36
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__eerd_byte_m328p>
     56c:	81 11       	cpse	r24, r1
     56e:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     570:	80 93 31 01 	sts	0x0131, r24
  return t;
}
     574:	08 95       	ret

00000576 <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     576:	e0 91 a9 01 	lds	r30, 0x01A9
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	eb 5d       	subi	r30, 0xDB	; 219
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	60 81       	ld	r22, Z
     586:	71 81       	ldd	r23, Z+1	; 0x01
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
}
     58e:	08 95       	ret

00000590 <run_error>:
  }    
}
//=============================================================================
void run_error(unsigned char event)
{
  switch(event) {
     590:	8e 31       	cpi	r24, 0x1E	; 30
     592:	09 f4       	brne	.+2      	; 0x596 <run_error+0x6>
     594:	3e c0       	rjmp	.+124    	; 0x612 <run_error+0x82>
     596:	8f 31       	cpi	r24, 0x1F	; 31
     598:	30 f4       	brcc	.+12     	; 0x5a6 <run_error+0x16>
     59a:	8a 30       	cpi	r24, 0x0A	; 10
     59c:	d1 f1       	breq	.+116    	; 0x612 <run_error+0x82>
     59e:	84 31       	cpi	r24, 0x14	; 20
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <run_error+0x14>
     5a2:	4c c0       	rjmp	.+152    	; 0x63c <run_error+0xac>
     5a4:	36 c0       	rjmp	.+108    	; 0x612 <run_error+0x82>
     5a6:	89 3c       	cpi	r24, 0xC9	; 201
     5a8:	21 f0       	breq	.+8      	; 0x5b2 <run_error+0x22>
     5aa:	8a 3c       	cpi	r24, 0xCA	; 202
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <run_error+0x20>
     5ae:	46 c0       	rjmp	.+140    	; 0x63c <run_error+0xac>
     5b0:	1d c0       	rjmp	.+58     	; 0x5ec <run_error+0x5c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 91 2b 01 	lds	r25, 0x012B
     5b8:	91 11       	cpse	r25, r1
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	80 93 2b 01 	sts	0x012B, r24
	  if (error_cnt > 0) error_cnt--; else {
     5c0:	80 91 2e 01 	lds	r24, 0x012E
     5c4:	88 23       	and	r24, r24
     5c6:	21 f0       	breq	.+8      	; 0x5d0 <run_error+0x40>
     5c8:	81 50       	subi	r24, 0x01	; 1
     5ca:	80 93 2e 01 	sts	0x012E, r24
     5ce:	08 95       	ret
        wait_menu = WAIT_MENU_TIME;
     5d0:	84 e1       	ldi	r24, 0x14	; 20
     5d2:	80 93 2d 01 	sts	0x012D, r24
        SET_STATE(run_menu);
     5d6:	84 ea       	ldi	r24, 0xA4	; 164
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	90 93 37 01 	sts	0x0137, r25
     5de:	80 93 36 01 	sts	0x0136, r24
        MAX7219_clearDisplay();
     5e2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        show_menu();
     5e6:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     5ea:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 91 2c 01 	lds	r25, 0x012C
     5f2:	91 11       	cpse	r25, r1
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	80 93 2c 01 	sts	0x012C, r24
	  if (blink05) {
     5fa:	88 23       	and	r24, r24
     5fc:	21 f0       	breq	.+8      	; 0x606 <run_error+0x76>
        MAX7219_printStr(5, "Err ");
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	63 e0       	ldi	r22, 0x03	; 3
     602:	71 e0       	ldi	r23, 0x01	; 1
     604:	03 c0       	rjmp	.+6      	; 0x60c <run_error+0x7c>
	  } else {
        MAX7219_printStr(5, "    ");
     606:	85 e0       	ldi	r24, 0x05	; 5
     608:	68 e0       	ldi	r22, 0x08	; 8
     60a:	71 e0       	ldi	r23, 0x01	; 1
     60c:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
     610:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
	  BEEPER_TICK();
     612:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     614:	8f e3       	ldi	r24, 0x3F	; 63
     616:	9c e9       	ldi	r25, 0x9C	; 156
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <run_error+0x88>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <run_error+0x8e>
     61e:	00 00       	nop
     620:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     622:	84 e1       	ldi	r24, 0x14	; 20
     624:	80 93 2d 01 	sts	0x012D, r24
      SET_STATE(run_menu);
     628:	84 ea       	ldi	r24, 0xA4	; 164
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	90 93 37 01 	sts	0x0137, r25
     630:	80 93 36 01 	sts	0x0136, r24
      MAX7219_clearDisplay();
     634:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
      show_menu();
     638:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     63c:	08 95       	ret

0000063e <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     63e:	86 31       	cpi	r24, 0x16	; 22
     640:	38 f4       	brcc	.+14     	; 0x650 <run_set_brightnes+0x12>
     642:	84 31       	cpi	r24, 0x14	; 20
     644:	08 f0       	brcs	.+2      	; 0x648 <run_set_brightnes+0xa>
     646:	4d c0       	rjmp	.+154    	; 0x6e2 <run_set_brightnes+0xa4>
     648:	8a 30       	cpi	r24, 0x0A	; 10
     64a:	09 f0       	breq	.+2      	; 0x64e <run_set_brightnes+0x10>
     64c:	7a c0       	rjmp	.+244    	; 0x742 <run_set_brightnes+0x104>
     64e:	38 c0       	rjmp	.+112    	; 0x6c0 <run_set_brightnes+0x82>
     650:	89 3c       	cpi	r24, 0xC9	; 201
     652:	31 f0       	breq	.+12     	; 0x660 <run_set_brightnes+0x22>
     654:	8a 3c       	cpi	r24, 0xCA	; 202
     656:	e1 f0       	breq	.+56     	; 0x690 <run_set_brightnes+0x52>
     658:	8e 31       	cpi	r24, 0x1E	; 30
     65a:	09 f0       	breq	.+2      	; 0x65e <run_set_brightnes+0x20>
     65c:	72 c0       	rjmp	.+228    	; 0x742 <run_set_brightnes+0x104>
     65e:	5b c0       	rjmp	.+182    	; 0x716 <run_set_brightnes+0xd8>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 91 2b 01 	lds	r25, 0x012B
     666:	91 11       	cpse	r25, r1
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     66e:	80 91 2d 01 	lds	r24, 0x012D
     672:	88 23       	and	r24, r24
     674:	21 f0       	breq	.+8      	; 0x67e <run_set_brightnes+0x40>
     676:	81 50       	subi	r24, 0x01	; 1
     678:	80 93 2d 01 	sts	0x012D, r24
     67c:	08 95       	ret
        MAX7219_clearDisplay();
     67e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     682:	84 ea       	ldi	r24, 0xA4	; 164
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	90 93 37 01 	sts	0x0137, r25
     68a:	80 93 36 01 	sts	0x0136, r24
     68e:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 91 2c 01 	lds	r25, 0x012C
     696:	91 11       	cpse	r25, r1
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	80 93 2c 01 	sts	0x012C, r24
	  if (blink05) {
     69e:	88 23       	and	r24, r24
     6a0:	49 f0       	breq	.+18     	; 0x6b4 <run_set_brightnes+0x76>
        MAX7219_printNum(4, brightnes, 2, ' ');
     6a2:	60 91 2f 01 	lds	r22, 0x012F
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	42 e0       	ldi	r20, 0x02	; 2
     6ac:	20 e2       	ldi	r18, 0x20	; 32
     6ae:	0e 94 ab 09 	call	0x1356	; 0x1356 <MAX7219_printNum>
     6b2:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     6b4:	84 e0       	ldi	r24, 0x04	; 4
     6b6:	6d e0       	ldi	r22, 0x0D	; 13
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
     6be:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     6c0:	84 e1       	ldi	r24, 0x14	; 20
     6c2:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     6c6:	40 9a       	sbi	0x08, 0	; 8
     6c8:	8f e3       	ldi	r24, 0x3F	; 63
     6ca:	9c e9       	ldi	r25, 0x9C	; 156
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <run_set_brightnes+0x8e>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <run_set_brightnes+0x94>
     6d2:	00 00       	nop
     6d4:	40 98       	cbi	0x08, 0	; 8
	  if (brightnes > 0) {
     6d6:	60 91 2f 01 	lds	r22, 0x012F
     6da:	66 23       	and	r22, r22
     6dc:	a1 f1       	breq	.+104    	; 0x746 <run_set_brightnes+0x108>
	    brightnes--;
     6de:	61 50       	subi	r22, 0x01	; 1
     6e0:	2a c0       	rjmp	.+84     	; 0x736 <run_set_brightnes+0xf8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_SET_LONG:
      wait_menu = WAIT_MENU_TIME;
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     6e8:	40 9a       	sbi	0x08, 0	; 8
     6ea:	8f e3       	ldi	r24, 0x3F	; 63
     6ec:	9c e9       	ldi	r25, 0x9C	; 156
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <run_set_brightnes+0xb0>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <run_set_brightnes+0xb6>
     6f4:	00 00       	nop
     6f6:	40 98       	cbi	0x08, 0	; 8
	  save_brightnes(brightnes);
     6f8:	80 91 2f 01 	lds	r24, 0x012F
     6fc:	0e 94 89 02 	call	0x512	; 0x512 <save_brightnes>
      MAX7219_clearDisplay();
     700:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     704:	84 ea       	ldi	r24, 0xA4	; 164
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	90 93 37 01 	sts	0x0137, r25
     70c:	80 93 36 01 	sts	0x0136, r24
      show_menu();
     710:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
    break;
     714:	08 95       	ret
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     716:	84 e1       	ldi	r24, 0x14	; 20
     718:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     71c:	40 9a       	sbi	0x08, 0	; 8
     71e:	8f e3       	ldi	r24, 0x3F	; 63
     720:	9c e9       	ldi	r25, 0x9C	; 156
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <run_set_brightnes+0xe4>
     726:	00 c0       	rjmp	.+0      	; 0x728 <run_set_brightnes+0xea>
     728:	00 00       	nop
     72a:	40 98       	cbi	0x08, 0	; 8
	  if (brightnes < 15) {
     72c:	60 91 2f 01 	lds	r22, 0x012F
     730:	6f 30       	cpi	r22, 0x0F	; 15
     732:	48 f4       	brcc	.+18     	; 0x746 <run_set_brightnes+0x108>
	    brightnes++;
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	60 93 2f 01 	sts	0x012F, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     73a:	8a e0       	ldi	r24, 0x0A	; 10
     73c:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
     740:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     742:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     746:	08 95       	ret

00000748 <run_menu>:
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
  switch(event) {
     748:	85 31       	cpi	r24, 0x15	; 21
     74a:	09 f4       	brne	.+2      	; 0x74e <run_menu+0x6>
     74c:	7b c0       	rjmp	.+246    	; 0x844 <run_menu+0xfc>
     74e:	86 31       	cpi	r24, 0x16	; 22
     750:	30 f4       	brcc	.+12     	; 0x75e <run_menu+0x16>
     752:	8a 30       	cpi	r24, 0x0A	; 10
     754:	49 f1       	breq	.+82     	; 0x7a8 <run_menu+0x60>
     756:	84 31       	cpi	r24, 0x14	; 20
     758:	09 f0       	breq	.+2      	; 0x75c <run_menu+0x14>
     75a:	ac c0       	rjmp	.+344    	; 0x8b4 <run_menu+0x16c>
     75c:	41 c0       	rjmp	.+130    	; 0x7e0 <run_menu+0x98>
     75e:	8e 31       	cpi	r24, 0x1E	; 30
     760:	09 f4       	brne	.+2      	; 0x764 <run_menu+0x1c>
     762:	8b c0       	rjmp	.+278    	; 0x87a <run_menu+0x132>
     764:	89 3c       	cpi	r24, 0xC9	; 201
     766:	09 f0       	breq	.+2      	; 0x76a <run_menu+0x22>
     768:	a5 c0       	rjmp	.+330    	; 0x8b4 <run_menu+0x16c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 91 2b 01 	lds	r25, 0x012B
     770:	91 11       	cpse	r25, r1
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     778:	80 91 2d 01 	lds	r24, 0x012D
     77c:	88 23       	and	r24, r24
     77e:	21 f0       	breq	.+8      	; 0x788 <run_menu+0x40>
     780:	81 50       	subi	r24, 0x01	; 1
     782:	80 93 2d 01 	sts	0x012D, r24
     786:	07 c0       	rjmp	.+14     	; 0x796 <run_menu+0x4e>
        RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); 
     788:	85 e1       	ldi	r24, 0x15	; 21
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     796:	80 91 a9 01 	lds	r24, 0x01A9
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	09 f4       	brne	.+2      	; 0x7a0 <run_menu+0x58>
     79e:	49 c0       	rjmp	.+146    	; 0x832 <run_menu+0xea>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	6d e0       	ldi	r22, 0x0D	; 13
     7a4:	71 e0       	ldi	r23, 0x01	; 1
     7a6:	19 c0       	rjmp	.+50     	; 0x7da <run_menu+0x92>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     7a8:	84 e1       	ldi	r24, 0x14	; 20
     7aa:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     7ae:	40 9a       	sbi	0x08, 0	; 8
     7b0:	8f e3       	ldi	r24, 0x3F	; 63
     7b2:	9c e9       	ldi	r25, 0x9C	; 156
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <run_menu+0x6c>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <run_menu+0x72>
     7ba:	00 00       	nop
     7bc:	40 98       	cbi	0x08, 0	; 8
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     7be:	80 91 a9 01 	lds	r24, 0x01A9
     7c2:	88 23       	and	r24, r24
     7c4:	11 f0       	breq	.+4      	; 0x7ca <run_menu+0x82>
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <run_menu+0x84>
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	80 93 a9 01 	sts	0x01A9, r24
	  show_menu();
     7d0:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
      MAX7219_printStr(5, "    ");
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	68 e0       	ldi	r22, 0x08	; 8
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
    break;
     7de:	08 95       	ret
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     7e0:	80 93 2d 01 	sts	0x012D, r24
	  n_edit = 0;
     7e4:	10 92 aa 01 	sts	0x01AA, r1
	  BEEPER_TICK();
     7e8:	40 9a       	sbi	0x08, 0	; 8
     7ea:	8f e3       	ldi	r24, 0x3F	; 63
     7ec:	9c e9       	ldi	r25, 0x9C	; 156
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <run_menu+0xa6>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <run_menu+0xac>
     7f4:	00 00       	nop
     7f6:	40 98       	cbi	0x08, 0	; 8
	  if (m_menu == MM_D1) {
     7f8:	80 91 a9 01 	lds	r24, 0x01A9
     7fc:	88 23       	and	r24, r24
     7fe:	29 f4       	brne	.+10     	; 0x80a <run_menu+0xc2>
        MAX7219_clearDisplay();
     800:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_set_1);
     804:	88 e7       	ldi	r24, 0x78	; 120
     806:	96 e0       	ldi	r25, 0x06	; 6
     808:	06 c0       	rjmp	.+12     	; 0x816 <run_menu+0xce>
	  } else if (m_menu == MM_D2) {
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	49 f4       	brne	.+18     	; 0x820 <run_menu+0xd8>
        MAX7219_clearDisplay();
     80e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_set_2);
     812:	85 e8       	ldi	r24, 0x85	; 133
     814:	95 e0       	ldi	r25, 0x05	; 5
     816:	90 93 37 01 	sts	0x0137, r25
     81a:	80 93 36 01 	sts	0x0136, r24
     81e:	08 95       	ret
	  } else if (m_menu == MM_BRIGHTNES) {
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	09 f0       	breq	.+2      	; 0x826 <run_menu+0xde>
     824:	49 c0       	rjmp	.+146    	; 0x8b8 <run_menu+0x170>
        SET_STATE(run_set_brightnes);
     826:	8f e1       	ldi	r24, 0x1F	; 31
     828:	93 e0       	ldi	r25, 0x03	; 3
     82a:	90 93 37 01 	sts	0x0137, r25
     82e:	80 93 36 01 	sts	0x0136, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     832:	60 91 2f 01 	lds	r22, 0x012F
     836:	84 e0       	ldi	r24, 0x04	; 4
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	42 e0       	ldi	r20, 0x02	; 2
     83c:	20 e2       	ldi	r18, 0x20	; 32
     83e:	0e 94 ab 09 	call	0x1356	; 0x1356 <MAX7219_printNum>
     842:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     844:	40 9a       	sbi	0x08, 0	; 8
     846:	8f e3       	ldi	r24, 0x3F	; 63
     848:	9c e9       	ldi	r25, 0x9C	; 156
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <run_menu+0x102>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <run_menu+0x108>
     850:	00 00       	nop
     852:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     854:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
	  chanel = 1;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 34 01 	sts	0x0134, r24
      SET_STATE(run_main);
     85e:	8d e5       	ldi	r24, 0x5D	; 93
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	90 93 37 01 	sts	0x0137, r25
     866:	80 93 36 01 	sts	0x0136, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     86a:	88 e6       	ldi	r24, 0x68	; 104
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	40 ed       	ldi	r20, 0xD0	; 208
     872:	57 e0       	ldi	r21, 0x07	; 7
     874:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
    break;
     878:	08 95       	ret
    case EVENT_KEY_MINUS:
	  BEEPER_TICK();
     87a:	40 9a       	sbi	0x08, 0	; 8
     87c:	8f e3       	ldi	r24, 0x3F	; 63
     87e:	9c e9       	ldi	r25, 0x9C	; 156
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <run_menu+0x138>
     884:	00 c0       	rjmp	.+0      	; 0x886 <run_menu+0x13e>
     886:	00 00       	nop
     888:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     88a:	84 e1       	ldi	r24, 0x14	; 20
     88c:	80 93 2d 01 	sts	0x012D, r24
      MAX7219_printStr(5, "    ");
     890:	85 e0       	ldi	r24, 0x05	; 5
     892:	68 e0       	ldi	r22, 0x08	; 8
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     89a:	80 91 a9 01 	lds	r24, 0x01A9
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	20 f4       	brcc	.+8      	; 0x8aa <run_menu+0x162>
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
     8a4:	80 93 a9 01 	sts	0x01A9, r24
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <run_menu+0x166>
     8aa:	10 92 a9 01 	sts	0x01A9, r1
	  show_menu();
     8ae:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
    break;
     8b2:	08 95       	ret
	default:
	  events_default(event);
     8b4:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     8b8:	08 95       	ret

000008ba <run_main>:
 }
}
//=============================================================================
void run_main(unsigned char event)
{
  switch(event) {
     8ba:	85 31       	cpi	r24, 0x15	; 21
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <run_main+0x6>
     8be:	92 c0       	rjmp	.+292    	; 0x9e4 <__stack+0xe5>
     8c0:	86 31       	cpi	r24, 0x16	; 22
     8c2:	38 f4       	brcc	.+14     	; 0x8d2 <run_main+0x18>
     8c4:	8a 30       	cpi	r24, 0x0A	; 10
     8c6:	09 f4       	brne	.+2      	; 0x8ca <run_main+0x10>
     8c8:	9d c0       	rjmp	.+314    	; 0xa04 <__stack+0x105>
     8ca:	84 31       	cpi	r24, 0x14	; 20
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <run_main+0x16>
     8ce:	98 c0       	rjmp	.+304    	; 0xa00 <__stack+0x101>
     8d0:	64 c0       	rjmp	.+200    	; 0x99a <__stack+0x9b>
     8d2:	8e 31       	cpi	r24, 0x1E	; 30
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <run_main+0x1e>
     8d6:	96 c0       	rjmp	.+300    	; 0xa04 <__stack+0x105>
     8d8:	88 36       	cpi	r24, 0x68	; 104
     8da:	09 f0       	breq	.+2      	; 0x8de <run_main+0x24>
     8dc:	91 c0       	rjmp	.+290    	; 0xa00 <__stack+0x101>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     8de:	80 91 34 01 	lds	r24, 0x0134
     8e2:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	d1 f5       	brne	.+116    	; 0x95e <__stack+0x5f>
	    MAX7219_printChar(3, 'd');
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	64 e6       	ldi	r22, 0x64	; 100
     8ee:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     8f2:	60 91 34 01 	lds	r22, 0x0134
     8f6:	60 5d       	subi	r22, 0xD0	; 208
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     8fe:	80 91 34 01 	lds	r24, 0x0134
     902:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ds18x20GetTemp>
     906:	bc 01       	movw	r22, r24
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     90e:	e0 91 34 01 	lds	r30, 0x0134
     912:	e3 30       	cpi	r30, 0x03	; 3
     914:	90 f4       	brcc	.+36     	; 0x93a <__stack+0x3b>
		  if (types[chanel - 1]) {
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	e1 5d       	subi	r30, 0xD1	; 209
     91a:	fe 4f       	sbci	r31, 0xFE	; 254
     91c:	80 81       	ld	r24, Z
     91e:	88 23       	and	r24, r24
     920:	19 f0       	breq	.+6      	; 0x928 <__stack+0x29>
	        MAX7219_printChar(1, '^');
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	6e e5       	ldi	r22, 0x5E	; 94
     926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
		  } else {
	        MAX7219_printChar(1, '_');
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	6f e5       	ldi	r22, 0x5F	; 95
     92c:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
		  }
          check_temp(chanel);
     930:	80 91 34 01 	lds	r24, 0x0134
     934:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
     938:	08 c0       	rjmp	.+16     	; 0x94a <__stack+0x4b>
		} else {
	      MAX7219_printChar(1, ' ');
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	60 e2       	ldi	r22, 0x20	; 32
     93e:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     94a:	87 e0       	ldi	r24, 0x07	; 7
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	60 91 9f 01 	lds	r22, 0x019F
     958:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
     95c:	07 c0       	rjmp	.+14     	; 0x96c <__stack+0x6d>
	  } else {
		if (chanel == 1) { OUT_1_0(); }
     95e:	80 91 34 01 	lds	r24, 0x0134
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	11 f0       	breq	.+4      	; 0x96a <__stack+0x6b>
		if (chanel == 2) { OUT_2_0(); }
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	09 f4       	brne	.+2      	; 0x96c <__stack+0x6d>
     96a:	5b 98       	cbi	0x0b, 3	; 11
	  }
      if (!one_sensor_flag) {
     96c:	80 91 9f 01 	lds	r24, 0x019F
     970:	88 23       	and	r24, r24
     972:	49 f4       	brne	.+18     	; 0x986 <__stack+0x87>
        if (chanel < 4) {
     974:	80 91 34 01 	lds	r24, 0x0134
     978:	84 30       	cpi	r24, 0x04	; 4
     97a:	10 f4       	brcc	.+4      	; 0x980 <__stack+0x81>
          chanel++; 
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__stack+0x83>
	    } else { 
	      chanel = 1;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 34 01 	sts	0x0134, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     986:	80 91 34 01 	lds	r24, 0x0134
     98a:	0e 94 34 0c 	call	0x1868	; 0x1868 <ds18x20GetDevCount>
     98e:	88 23       	and	r24, r24
     990:	09 f1       	breq	.+66     	; 0x9d4 <__stack+0xd5>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     992:	88 e6       	ldi	r24, 0x68	; 104
     994:	60 ed       	ldi	r22, 0xD0	; 208
     996:	77 e0       	ldi	r23, 0x07	; 7
     998:	20 c0       	rjmp	.+64     	; 0x9da <__stack+0xdb>
	  }
    break;
    case EVENT_KEY_PLUS:
    break;
    case EVENT_KEY_SET:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     99a:	88 e6       	ldi	r24, 0x68	; 104
     99c:	0e 94 91 08 	call	0x1122	; 0x1122 <RTOS_deleteTask>
	  BEEPER_TICK();
     9a0:	40 9a       	sbi	0x08, 0	; 8
     9a2:	8f e3       	ldi	r24, 0x3F	; 63
     9a4:	9c e9       	ldi	r25, 0x9C	; 156
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <__stack+0xa7>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <__stack+0xad>
     9ac:	00 00       	nop
     9ae:	40 98       	cbi	0x08, 0	; 8
      one_sensor_flag = !one_sensor_flag;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 91 9f 01 	lds	r25, 0x019F
     9b6:	91 11       	cpse	r25, r1
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	80 93 9f 01 	sts	0x019F, r24
	  if (one_sensor_flag) {
     9be:	88 23       	and	r24, r24
     9c0:	49 f0       	breq	.+18     	; 0x9d4 <__stack+0xd5>
	    if (chanel > 1) chanel--; else chanel = 4;
     9c2:	80 91 34 01 	lds	r24, 0x0134
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	10 f0       	brcs	.+4      	; 0x9ce <__stack+0xcf>
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__stack+0xd1>
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	80 93 34 01 	sts	0x0134, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     9d4:	88 e6       	ldi	r24, 0x68	; 104
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
    break;
     9e2:	08 95       	ret
    case EVENT_KEY_SET_LONG:
      MAX7219_clearDisplay();
     9e4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     9e8:	84 ea       	ldi	r24, 0xA4	; 164
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	90 93 37 01 	sts	0x0137, r25
     9f0:	80 93 36 01 	sts	0x0136, r24
      wait_menu = WAIT_MENU_TIME;
     9f4:	84 e1       	ldi	r24, 0x14	; 20
     9f6:	80 93 2d 01 	sts	0x012D, r24
	  show_menu();
     9fa:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
    break;
     9fe:	08 95       	ret
    case EVENT_KEY_MINUS:
    break;
	default:
	  events_default(event);
     a00:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     a04:	08 95       	ret

00000a06 <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     a06:	1f 93       	push	r17
     a08:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     a0a:	80 91 aa 01 	lds	r24, 0x01AA
     a0e:	88 23       	and	r24, r24
     a10:	61 f5       	brne	.+88     	; 0xa6a <show_set_temp+0x64>
    if (blink05) {
     a12:	80 91 2c 01 	lds	r24, 0x012C
     a16:	88 23       	and	r24, r24
     a18:	91 f0       	breq	.+36     	; 0xa3e <show_set_temp+0x38>
      print_temperature(1, temps[temp][0]);
     a1a:	e1 2f       	mov	r30, r17
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ef 55       	subi	r30, 0x5F	; 95
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	60 81       	ld	r22, Z
     a2c:	71 81       	ldd	r23, Z+1	; 0x01
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
     a3c:	05 c0       	rjmp	.+10     	; 0xa48 <show_set_temp+0x42>
    } else {
      MAX7219_printStr(1, "    ");
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	68 e0       	ldi	r22, 0x08	; 8
     a42:	71 e0       	ldi	r23, 0x01	; 1
     a44:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     a48:	e1 2f       	mov	r30, r17
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ef 55       	subi	r30, 0x5F	; 95
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	62 81       	ldd	r22, Z+2	; 0x02
     a5a:	73 81       	ldd	r23, Z+3	; 0x03
     a5c:	85 e0       	ldi	r24, 0x05	; 5
     a5e:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     a62:	87 e0       	ldi	r24, 0x07	; 7
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     a6a:	80 91 aa 01 	lds	r24, 0x01AA
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	61 f5       	brne	.+88     	; 0xaca <show_set_temp+0xc4>
    if (blink05) {
     a72:	80 91 2c 01 	lds	r24, 0x012C
     a76:	88 23       	and	r24, r24
     a78:	91 f0       	breq	.+36     	; 0xa9e <show_set_temp+0x98>
      print_temperature(5, temps[temp][1]);
     a7a:	e1 2f       	mov	r30, r17
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ef 55       	subi	r30, 0x5F	; 95
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	62 81       	ldd	r22, Z+2	; 0x02
     a8c:	73 81       	ldd	r23, Z+3	; 0x03
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <show_set_temp+0xa2>
    } else {
      MAX7219_printStr(5, "    ");
     a9e:	85 e0       	ldi	r24, 0x05	; 5
     aa0:	68 e0       	ldi	r22, 0x08	; 8
     aa2:	71 e0       	ldi	r23, 0x01	; 1
     aa4:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     aa8:	e1 2f       	mov	r30, r17
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	ef 55       	subi	r30, 0x5F	; 95
     ab6:	fe 4f       	sbci	r31, 0xFE	; 254
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     aca:	80 91 aa 01 	lds	r24, 0x01AA
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	d1 f4       	brne	.+52     	; 0xb06 <show_set_temp+0x100>
    MAX7219_printStr(1, "out-");
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	61 e1       	ldi	r22, 0x11	; 17
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	0e 94 3f 0a 	call	0x147e	; 0x147e <MAX7219_printStr>
    if (blink05) {
     adc:	80 91 2c 01 	lds	r24, 0x012C
     ae0:	88 23       	and	r24, r24
     ae2:	69 f0       	breq	.+26     	; 0xafe <show_set_temp+0xf8>
	  if (types[temp]) MAX7219_printChar(5, 'H'); else MAX7219_printChar(5, 'F');
     ae4:	e1 2f       	mov	r30, r17
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	e0 5d       	subi	r30, 0xD0	; 208
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	80 81       	ld	r24, Z
     aee:	88 23       	and	r24, r24
     af0:	19 f0       	breq	.+6      	; 0xaf8 <show_set_temp+0xf2>
     af2:	85 e0       	ldi	r24, 0x05	; 5
     af4:	68 e4       	ldi	r22, 0x48	; 72
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <show_set_temp+0xfc>
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	66 e4       	ldi	r22, 0x46	; 70
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <show_set_temp+0xfc>
    } else {
	  MAX7219_printChar(5, ' ');
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	60 e2       	ldi	r22, 0x20	; 32
     b02:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_printChar>
	}
  }
}
     b06:	1f 91       	pop	r17
     b08:	08 95       	ret

00000b0a <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     b0a:	85 31       	cpi	r24, 0x15	; 21
     b0c:	09 f4       	brne	.+2      	; 0xb10 <run_set_2+0x6>
     b0e:	6f c0       	rjmp	.+222    	; 0xbee <run_set_2+0xe4>
     b10:	86 31       	cpi	r24, 0x16	; 22
     b12:	30 f4       	brcc	.+12     	; 0xb20 <run_set_2+0x16>
     b14:	8a 30       	cpi	r24, 0x0A	; 10
     b16:	61 f1       	breq	.+88     	; 0xb70 <run_set_2+0x66>
     b18:	84 31       	cpi	r24, 0x14	; 20
     b1a:	09 f0       	breq	.+2      	; 0xb1e <run_set_2+0x14>
     b1c:	e6 c0       	rjmp	.+460    	; 0xcea <run_set_2+0x1e0>
     b1e:	50 c0       	rjmp	.+160    	; 0xbc0 <run_set_2+0xb6>
     b20:	89 3c       	cpi	r24, 0xC9	; 201
     b22:	31 f0       	breq	.+12     	; 0xb30 <run_set_2+0x26>
     b24:	8a 3c       	cpi	r24, 0xCA	; 202
     b26:	e1 f0       	breq	.+56     	; 0xb60 <run_set_2+0x56>
     b28:	8e 31       	cpi	r24, 0x1E	; 30
     b2a:	09 f0       	breq	.+2      	; 0xb2e <run_set_2+0x24>
     b2c:	de c0       	rjmp	.+444    	; 0xcea <run_set_2+0x1e0>
     b2e:	a3 c0       	rjmp	.+326    	; 0xc76 <run_set_2+0x16c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 91 2b 01 	lds	r25, 0x012B
     b36:	91 11       	cpse	r25, r1
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     b3e:	80 91 2d 01 	lds	r24, 0x012D
     b42:	88 23       	and	r24, r24
     b44:	21 f0       	breq	.+8      	; 0xb4e <run_set_2+0x44>
     b46:	81 50       	subi	r24, 0x01	; 1
     b48:	80 93 2d 01 	sts	0x012D, r24
     b4c:	08 95       	ret
        MAX7219_clearDisplay();
     b4e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     b52:	84 ea       	ldi	r24, 0xA4	; 164
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	90 93 37 01 	sts	0x0137, r25
     b5a:	80 93 36 01 	sts	0x0136, r24
     b5e:	75 c0       	rjmp	.+234    	; 0xc4a <run_set_2+0x140>
	    show_menu();
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 91 2c 01 	lds	r25, 0x012C
     b66:	91 11       	cpse	r25, r1
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	80 93 2c 01 	sts	0x012C, r24
     b6e:	b9 c0       	rjmp	.+370    	; 0xce2 <run_set_2+0x1d8>
	  show_set_temp(1);
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     b70:	84 e1       	ldi	r24, 0x14	; 20
     b72:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     b76:	40 9a       	sbi	0x08, 0	; 8
     b78:	8f e3       	ldi	r24, 0x3F	; 63
     b7a:	9c e9       	ldi	r25, 0x9C	; 156
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <run_set_2+0x72>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <run_set_2+0x78>
     b82:	00 00       	nop
     b84:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     b86:	80 91 aa 01 	lds	r24, 0x01AA
     b8a:	88 23       	and	r24, r24
     b8c:	59 f4       	brne	.+22     	; 0xba4 <run_set_2+0x9a>
        if (temps[1][0] > -550) {
     b8e:	80 91 a5 01 	lds	r24, 0x01A5
     b92:	90 91 a6 01 	lds	r25, 0x01A6
     b96:	2d ef       	ldi	r18, 0xFD	; 253
     b98:	8b 3d       	cpi	r24, 0xDB	; 219
     b9a:	92 07       	cpc	r25, r18
     b9c:	0c f4       	brge	.+2      	; 0xba0 <run_set_2+0x96>
     b9e:	a1 c0       	rjmp	.+322    	; 0xce2 <run_set_2+0x1d8>
		  temps[1][0]--;
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	81 c0       	rjmp	.+258    	; 0xca6 <run_set_2+0x19c>
		}
	  }
	  if (n_edit == 1) {
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	09 f0       	breq	.+2      	; 0xbaa <run_set_2+0xa0>
     ba8:	93 c0       	rjmp	.+294    	; 0xcd0 <run_set_2+0x1c6>
        if (temps[1][1] > -550) {
     baa:	80 91 a7 01 	lds	r24, 0x01A7
     bae:	90 91 a8 01 	lds	r25, 0x01A8
     bb2:	2d ef       	ldi	r18, 0xFD	; 253
     bb4:	8b 3d       	cpi	r24, 0xDB	; 219
     bb6:	92 07       	cpc	r25, r18
     bb8:	0c f4       	brge	.+2      	; 0xbbc <run_set_2+0xb2>
     bba:	93 c0       	rjmp	.+294    	; 0xce2 <run_set_2+0x1d8>
		  temps[1][1]--;
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	83 c0       	rjmp	.+262    	; 0xcc6 <run_set_2+0x1bc>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     bc0:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     bc4:	40 9a       	sbi	0x08, 0	; 8
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	9c e9       	ldi	r25, 0x9C	; 156
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <run_set_2+0xc0>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <run_set_2+0xc6>
     bd0:	00 00       	nop
     bd2:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     bd4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else n_edit = 0;
     bd8:	80 91 aa 01 	lds	r24, 0x01AA
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	20 f4       	brcc	.+8      	; 0xbe8 <run_set_2+0xde>
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	80 93 aa 01 	sts	0x01AA, r24
     be6:	7d c0       	rjmp	.+250    	; 0xce2 <run_set_2+0x1d8>
     be8:	10 92 aa 01 	sts	0x01AA, r1
     bec:	7a c0       	rjmp	.+244    	; 0xce2 <run_set_2+0x1d8>
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     bee:	40 9a       	sbi	0x08, 0	; 8
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	9c e9       	ldi	r25, 0x9C	; 156
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <run_set_2+0xea>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <run_set_2+0xf0>
     bfa:	00 00       	nop
     bfc:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     bfe:	84 e1       	ldi	r24, 0x14	; 20
     c00:	80 93 2d 01 	sts	0x012D, r24
	  if (temps[1][0] > temps[1][1]) {
     c04:	20 91 a5 01 	lds	r18, 0x01A5
     c08:	30 91 a6 01 	lds	r19, 0x01A6
     c0c:	80 91 a7 01 	lds	r24, 0x01A7
     c10:	90 91 a8 01 	lds	r25, 0x01A8
     c14:	82 17       	cp	r24, r18
     c16:	93 07       	cpc	r25, r19
     c18:	dc f4       	brge	.+54     	; 0xc50 <run_set_2+0x146>
        MAX7219_clearDisplay();
     c1a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     c1e:	84 ea       	ldi	r24, 0xA4	; 164
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	90 93 37 01 	sts	0x0137, r25
     c26:	80 93 36 01 	sts	0x0136, r24
        save_max_temp_2(temps[1][0]);
     c2a:	80 91 a5 01 	lds	r24, 0x01A5
     c2e:	90 91 a6 01 	lds	r25, 0x01A6
     c32:	0e 94 53 02 	call	0x4a6	; 0x4a6 <save_max_temp_2>
        save_min_temp_2(temps[1][1]);
     c36:	80 91 a7 01 	lds	r24, 0x01A7
     c3a:	90 91 a8 01 	lds	r25, 0x01A8
     c3e:	0e 94 5f 02 	call	0x4be	; 0x4be <save_min_temp_2>
	    save_type_2(types[1]);
     c42:	80 91 31 01 	lds	r24, 0x0131
     c46:	0e 94 ac 02 	call	0x558	; 0x558 <save_type_2>
        show_menu();
     c4a:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     c4e:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     c50:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     c54:	88 ec       	ldi	r24, 0xC8	; 200
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	90 93 37 01 	sts	0x0137, r25
     c5c:	80 93 36 01 	sts	0x0136, r24
        error_cnt = ERROR_TIME;
     c60:	85 e0       	ldi	r24, 0x05	; 5
     c62:	80 93 2e 01 	sts	0x012E, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     c66:	8a ec       	ldi	r24, 0xCA	; 202
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	44 ef       	ldi	r20, 0xF4	; 244
     c6e:	51 e0       	ldi	r21, 0x01	; 1
     c70:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
     c74:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     c76:	84 e1       	ldi	r24, 0x14	; 20
     c78:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     c7c:	40 9a       	sbi	0x08, 0	; 8
     c7e:	8f e3       	ldi	r24, 0x3F	; 63
     c80:	9c e9       	ldi	r25, 0x9C	; 156
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <run_set_2+0x178>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <run_set_2+0x17e>
     c88:	00 00       	nop
     c8a:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     c8c:	80 91 aa 01 	lds	r24, 0x01AA
     c90:	88 23       	and	r24, r24
     c92:	71 f4       	brne	.+28     	; 0xcb0 <run_set_2+0x1a6>
        if (temps[1][0] < 790) {
     c94:	80 91 a5 01 	lds	r24, 0x01A5
     c98:	90 91 a6 01 	lds	r25, 0x01A6
     c9c:	23 e0       	ldi	r18, 0x03	; 3
     c9e:	86 31       	cpi	r24, 0x16	; 22
     ca0:	92 07       	cpc	r25, r18
     ca2:	fc f4       	brge	.+62     	; 0xce2 <run_set_2+0x1d8>
		  temps[1][0]++;
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	90 93 a6 01 	sts	0x01A6, r25
     caa:	80 93 a5 01 	sts	0x01A5, r24
     cae:	19 c0       	rjmp	.+50     	; 0xce2 <run_set_2+0x1d8>
		}
	  }
	  if (n_edit == 1) {
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	71 f4       	brne	.+28     	; 0xcd0 <run_set_2+0x1c6>
        if (temps[1][1] < 790) {
     cb4:	80 91 a7 01 	lds	r24, 0x01A7
     cb8:	90 91 a8 01 	lds	r25, 0x01A8
     cbc:	23 e0       	ldi	r18, 0x03	; 3
     cbe:	86 31       	cpi	r24, 0x16	; 22
     cc0:	92 07       	cpc	r25, r18
     cc2:	7c f4       	brge	.+30     	; 0xce2 <run_set_2+0x1d8>
		  temps[1][1]++;
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	90 93 a8 01 	sts	0x01A8, r25
     cca:	80 93 a7 01 	sts	0x01A7, r24
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <run_set_2+0x1d8>
		}
	  }
	  if (n_edit == 2) {
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	39 f4       	brne	.+14     	; 0xce2 <run_set_2+0x1d8>
        types[1] = !types[1];
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 91 31 01 	lds	r25, 0x0131
     cda:	91 11       	cpse	r25, r1
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	80 93 31 01 	sts	0x0131, r24
	  }
	  show_set_temp(1);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	0e 94 03 05 	call	0xa06	; 0xa06 <show_set_temp>
    break;
     ce8:	08 95       	ret
	default:
	  events_default(event);
     cea:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     cee:	08 95       	ret

00000cf0 <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     cf0:	85 31       	cpi	r24, 0x15	; 21
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <run_set_1+0x6>
     cf4:	6f c0       	rjmp	.+222    	; 0xdd4 <run_set_1+0xe4>
     cf6:	86 31       	cpi	r24, 0x16	; 22
     cf8:	30 f4       	brcc	.+12     	; 0xd06 <run_set_1+0x16>
     cfa:	8a 30       	cpi	r24, 0x0A	; 10
     cfc:	61 f1       	breq	.+88     	; 0xd56 <run_set_1+0x66>
     cfe:	84 31       	cpi	r24, 0x14	; 20
     d00:	09 f0       	breq	.+2      	; 0xd04 <run_set_1+0x14>
     d02:	e6 c0       	rjmp	.+460    	; 0xed0 <run_set_1+0x1e0>
     d04:	50 c0       	rjmp	.+160    	; 0xda6 <run_set_1+0xb6>
     d06:	89 3c       	cpi	r24, 0xC9	; 201
     d08:	31 f0       	breq	.+12     	; 0xd16 <run_set_1+0x26>
     d0a:	8a 3c       	cpi	r24, 0xCA	; 202
     d0c:	e1 f0       	breq	.+56     	; 0xd46 <run_set_1+0x56>
     d0e:	8e 31       	cpi	r24, 0x1E	; 30
     d10:	09 f0       	breq	.+2      	; 0xd14 <run_set_1+0x24>
     d12:	de c0       	rjmp	.+444    	; 0xed0 <run_set_1+0x1e0>
     d14:	a3 c0       	rjmp	.+326    	; 0xe5c <run_set_1+0x16c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 91 2b 01 	lds	r25, 0x012B
     d1c:	91 11       	cpse	r25, r1
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     d24:	80 91 2d 01 	lds	r24, 0x012D
     d28:	88 23       	and	r24, r24
     d2a:	21 f0       	breq	.+8      	; 0xd34 <run_set_1+0x44>
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	80 93 2d 01 	sts	0x012D, r24
     d32:	08 95       	ret
        MAX7219_clearDisplay();
     d34:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     d38:	84 ea       	ldi	r24, 0xA4	; 164
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	90 93 37 01 	sts	0x0137, r25
     d40:	80 93 36 01 	sts	0x0136, r24
     d44:	75 c0       	rjmp	.+234    	; 0xe30 <run_set_1+0x140>
	    show_menu();
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 91 2c 01 	lds	r25, 0x012C
     d4c:	91 11       	cpse	r25, r1
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	80 93 2c 01 	sts	0x012C, r24
     d54:	b9 c0       	rjmp	.+370    	; 0xec8 <run_set_1+0x1d8>
	  show_set_temp(0);
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     d56:	84 e1       	ldi	r24, 0x14	; 20
     d58:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     d5c:	40 9a       	sbi	0x08, 0	; 8
     d5e:	8f e3       	ldi	r24, 0x3F	; 63
     d60:	9c e9       	ldi	r25, 0x9C	; 156
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <run_set_1+0x72>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <run_set_1+0x78>
     d68:	00 00       	nop
     d6a:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     d6c:	80 91 aa 01 	lds	r24, 0x01AA
     d70:	88 23       	and	r24, r24
     d72:	59 f4       	brne	.+22     	; 0xd8a <run_set_1+0x9a>
        if (temps[0][0] > -550) {
     d74:	80 91 a1 01 	lds	r24, 0x01A1
     d78:	90 91 a2 01 	lds	r25, 0x01A2
     d7c:	2d ef       	ldi	r18, 0xFD	; 253
     d7e:	8b 3d       	cpi	r24, 0xDB	; 219
     d80:	92 07       	cpc	r25, r18
     d82:	0c f4       	brge	.+2      	; 0xd86 <run_set_1+0x96>
     d84:	a1 c0       	rjmp	.+322    	; 0xec8 <run_set_1+0x1d8>
		  temps[0][0]--;
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	81 c0       	rjmp	.+258    	; 0xe8c <run_set_1+0x19c>
		}
	  }
	  if (n_edit == 1) {
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	09 f0       	breq	.+2      	; 0xd90 <run_set_1+0xa0>
     d8e:	93 c0       	rjmp	.+294    	; 0xeb6 <run_set_1+0x1c6>
        if (temps[0][1] > -550) {
     d90:	80 91 a3 01 	lds	r24, 0x01A3
     d94:	90 91 a4 01 	lds	r25, 0x01A4
     d98:	2d ef       	ldi	r18, 0xFD	; 253
     d9a:	8b 3d       	cpi	r24, 0xDB	; 219
     d9c:	92 07       	cpc	r25, r18
     d9e:	0c f4       	brge	.+2      	; 0xda2 <run_set_1+0xb2>
     da0:	93 c0       	rjmp	.+294    	; 0xec8 <run_set_1+0x1d8>
		  temps[0][1]--;
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	83 c0       	rjmp	.+262    	; 0xeac <run_set_1+0x1bc>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     da6:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     daa:	40 9a       	sbi	0x08, 0	; 8
     dac:	8f e3       	ldi	r24, 0x3F	; 63
     dae:	9c e9       	ldi	r25, 0x9C	; 156
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <run_set_1+0xc0>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <run_set_1+0xc6>
     db6:	00 00       	nop
     db8:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     dba:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else n_edit = 0;
     dbe:	80 91 aa 01 	lds	r24, 0x01AA
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	20 f4       	brcc	.+8      	; 0xdce <run_set_1+0xde>
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 aa 01 	sts	0x01AA, r24
     dcc:	7d c0       	rjmp	.+250    	; 0xec8 <run_set_1+0x1d8>
     dce:	10 92 aa 01 	sts	0x01AA, r1
     dd2:	7a c0       	rjmp	.+244    	; 0xec8 <run_set_1+0x1d8>
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     dd4:	40 9a       	sbi	0x08, 0	; 8
     dd6:	8f e3       	ldi	r24, 0x3F	; 63
     dd8:	9c e9       	ldi	r25, 0x9C	; 156
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <run_set_1+0xea>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <run_set_1+0xf0>
     de0:	00 00       	nop
     de2:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     de4:	84 e1       	ldi	r24, 0x14	; 20
     de6:	80 93 2d 01 	sts	0x012D, r24
	  if (temps[0][0] > temps[0][1]) {
     dea:	20 91 a1 01 	lds	r18, 0x01A1
     dee:	30 91 a2 01 	lds	r19, 0x01A2
     df2:	80 91 a3 01 	lds	r24, 0x01A3
     df6:	90 91 a4 01 	lds	r25, 0x01A4
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	dc f4       	brge	.+54     	; 0xe36 <run_set_1+0x146>
        MAX7219_clearDisplay();
     e00:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     e04:	84 ea       	ldi	r24, 0xA4	; 164
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	90 93 37 01 	sts	0x0137, r25
     e0c:	80 93 36 01 	sts	0x0136, r24
        save_max_temp_1(temps[0][0]);
     e10:	80 91 a1 01 	lds	r24, 0x01A1
     e14:	90 91 a2 01 	lds	r25, 0x01A2
     e18:	0e 94 4d 02 	call	0x49a	; 0x49a <save_max_temp_1>
        save_min_temp_1(temps[0][1]);
     e1c:	80 91 a3 01 	lds	r24, 0x01A3
     e20:	90 91 a4 01 	lds	r25, 0x01A4
     e24:	0e 94 59 02 	call	0x4b2	; 0x4b2 <save_min_temp_1>
	    save_type_1(types[0]);
     e28:	80 91 30 01 	lds	r24, 0x0130
     e2c:	0e 94 9d 02 	call	0x53a	; 0x53a <save_type_1>
        show_menu();
     e30:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     e34:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     e36:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     e3a:	88 ec       	ldi	r24, 0xC8	; 200
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	90 93 37 01 	sts	0x0137, r25
     e42:	80 93 36 01 	sts	0x0136, r24
        error_cnt = ERROR_TIME;
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	80 93 2e 01 	sts	0x012E, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     e4c:	8a ec       	ldi	r24, 0xCA	; 202
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	44 ef       	ldi	r20, 0xF4	; 244
     e54:	51 e0       	ldi	r21, 0x01	; 1
     e56:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
     e5a:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     e5c:	84 e1       	ldi	r24, 0x14	; 20
     e5e:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     e62:	40 9a       	sbi	0x08, 0	; 8
     e64:	8f e3       	ldi	r24, 0x3F	; 63
     e66:	9c e9       	ldi	r25, 0x9C	; 156
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <run_set_1+0x178>
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <run_set_1+0x17e>
     e6e:	00 00       	nop
     e70:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     e72:	80 91 aa 01 	lds	r24, 0x01AA
     e76:	88 23       	and	r24, r24
     e78:	71 f4       	brne	.+28     	; 0xe96 <run_set_1+0x1a6>
        if (temps[0][0] < 790) {
     e7a:	80 91 a1 01 	lds	r24, 0x01A1
     e7e:	90 91 a2 01 	lds	r25, 0x01A2
     e82:	23 e0       	ldi	r18, 0x03	; 3
     e84:	86 31       	cpi	r24, 0x16	; 22
     e86:	92 07       	cpc	r25, r18
     e88:	fc f4       	brge	.+62     	; 0xec8 <run_set_1+0x1d8>
		  temps[0][0]++;
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	90 93 a2 01 	sts	0x01A2, r25
     e90:	80 93 a1 01 	sts	0x01A1, r24
     e94:	19 c0       	rjmp	.+50     	; 0xec8 <run_set_1+0x1d8>
		}
	  }
	  if (n_edit == 1) {
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	71 f4       	brne	.+28     	; 0xeb6 <run_set_1+0x1c6>
        if (temps[0][1] < 790) {
     e9a:	80 91 a3 01 	lds	r24, 0x01A3
     e9e:	90 91 a4 01 	lds	r25, 0x01A4
     ea2:	23 e0       	ldi	r18, 0x03	; 3
     ea4:	86 31       	cpi	r24, 0x16	; 22
     ea6:	92 07       	cpc	r25, r18
     ea8:	7c f4       	brge	.+30     	; 0xec8 <run_set_1+0x1d8>
		  temps[0][1]++;
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	90 93 a4 01 	sts	0x01A4, r25
     eb0:	80 93 a3 01 	sts	0x01A3, r24
     eb4:	09 c0       	rjmp	.+18     	; 0xec8 <run_set_1+0x1d8>
		}
	  }
	  if (n_edit == 2) {
     eb6:	82 30       	cpi	r24, 0x02	; 2
     eb8:	39 f4       	brne	.+14     	; 0xec8 <run_set_1+0x1d8>
        types[0] = !types[0];
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 91 30 01 	lds	r25, 0x0130
     ec0:	91 11       	cpse	r25, r1
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	80 93 30 01 	sts	0x0130, r24
	  }
	  show_set_temp(0);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 03 05 	call	0xa06	; 0xa06 <show_set_temp>
    break;
     ece:	08 95       	ret
	default:
	  events_default(event);
     ed0:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     ed4:	08 95       	ret

00000ed6 <KBD_init>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_PLUS) &= ~BUT_PLUS_LINE;
     ed6:	54 98       	cbi	0x0a, 4	; 10
  PORT(BUT_PLUS) |= BUT_PLUS_LINE;
     ed8:	5c 9a       	sbi	0x0b, 4	; 11
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     eda:	55 98       	cbi	0x0a, 5	; 10
  PORT(BUT_SET) |= BUT_SET_LINE;
     edc:	5d 9a       	sbi	0x0b, 5	; 11
  DDR(BUT_MINUS) &= ~BUT_MINUS_LINE;
     ede:	56 98       	cbi	0x0a, 6	; 10
  PORT(BUT_MINUS) |= BUT_MINUS_LINE;
     ee0:	5e 9a       	sbi	0x0b, 6	; 11
}
     ee2:	08 95       	ret

00000ee4 <KBD_set_type>:
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     ee4:	80 93 35 01 	sts	0x0135, r24
}
     ee8:	08 95       	ret

00000eea <debounce_sw_plus>:
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
     eea:	80 91 b0 01 	lds	r24, 0x01B0
     eee:	90 91 b1 01 	lds	r25, 0x01B1
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	90 6e       	ori	r25, 0xE0	; 224
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	4c 99       	sbic	0x09, 4	; 9
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <debounce_sw_plus+0x1a>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	82 2b       	or	r24, r18
     f06:	93 2b       	or	r25, r19
     f08:	90 93 b1 01 	sts	0x01B1, r25
     f0c:	80 93 b0 01 	sts	0x01B0, r24
  if (state1 == 0xF000) return 1;
     f10:	20 ef       	ldi	r18, 0xF0	; 240
     f12:	80 30       	cpi	r24, 0x00	; 0
     f14:	92 07       	cpc	r25, r18
     f16:	31 f0       	breq	.+12     	; 0xf24 <debounce_sw_plus+0x3a>
  if (state1 == 0xE000) return 2;
     f18:	20 ee       	ldi	r18, 0xE0	; 224
     f1a:	80 30       	cpi	r24, 0x00	; 0
     f1c:	92 07       	cpc	r25, r18
     f1e:	21 f4       	brne	.+8      	; 0xf28 <debounce_sw_plus+0x3e>
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
  if (state1 == 0xF000) return 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	08 95       	ret
  if (state1 == 0xE000) return 2;
  return 0;
     f28:	80 e0       	ldi	r24, 0x00	; 0
}
     f2a:	08 95       	ret

00000f2c <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     f2c:	80 91 ae 01 	lds	r24, 0x01AE
     f30:	90 91 af 01 	lds	r25, 0x01AF
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	90 6e       	ori	r25, 0xE0	; 224
     f3a:	21 e0       	ldi	r18, 0x01	; 1
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	4d 99       	sbic	0x09, 5	; 9
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <debounce_sw_set+0x1a>
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	82 2b       	or	r24, r18
     f48:	93 2b       	or	r25, r19
     f4a:	90 93 af 01 	sts	0x01AF, r25
     f4e:	80 93 ae 01 	sts	0x01AE, r24
  if (state2 == 0xF000) return 1;
     f52:	20 ef       	ldi	r18, 0xF0	; 240
     f54:	80 30       	cpi	r24, 0x00	; 0
     f56:	92 07       	cpc	r25, r18
     f58:	31 f0       	breq	.+12     	; 0xf66 <debounce_sw_set+0x3a>
  if (state2 == 0xE000) return 2;
     f5a:	20 ee       	ldi	r18, 0xE0	; 224
     f5c:	80 30       	cpi	r24, 0x00	; 0
     f5e:	92 07       	cpc	r25, r18
     f60:	21 f4       	brne	.+8      	; 0xf6a <debounce_sw_set+0x3e>
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
  if (state2 == 0xF000) return 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	08 95       	ret
  if (state2 == 0xE000) return 2;
  return 0;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
}
     f6c:	08 95       	ret

00000f6e <debounce_sw_minus>:
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
     f6e:	80 91 ac 01 	lds	r24, 0x01AC
     f72:	90 91 ad 01 	lds	r25, 0x01AD
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	90 6e       	ori	r25, 0xE0	; 224
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4e 99       	sbic	0x09, 6	; 9
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <debounce_sw_minus+0x1a>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	82 2b       	or	r24, r18
     f8a:	93 2b       	or	r25, r19
     f8c:	90 93 ad 01 	sts	0x01AD, r25
     f90:	80 93 ac 01 	sts	0x01AC, r24
  if (state3 == 0xF000) return 1;
     f94:	20 ef       	ldi	r18, 0xF0	; 240
     f96:	80 30       	cpi	r24, 0x00	; 0
     f98:	92 07       	cpc	r25, r18
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <debounce_sw_minus+0x3a>
  if (state3 == 0xE000) return 2;
     f9c:	20 ee       	ldi	r18, 0xE0	; 224
     f9e:	80 30       	cpi	r24, 0x00	; 0
     fa0:	92 07       	cpc	r25, r18
     fa2:	21 f4       	brne	.+8      	; 0xfac <debounce_sw_minus+0x3e>
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
  if (state3 == 0xF000) return 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	08 95       	ret
  if (state3 == 0xE000) return 2;
  return 0;
     fac:	80 e0       	ldi	r24, 0x00	; 0
}
     fae:	08 95       	ret

00000fb0 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
     fb0:	1f 93       	push	r17
  unsigned char key = 0;
  if (debounce_sw_plus() >= 1) { key |= (1 << 0); }
     fb2:	0e 94 75 07 	call	0xeea	; 0xeea <debounce_sw_plus>
  return 0;
}
//=============================================================================
void KBD_scan(void)
{
  unsigned char key = 0;
     fb6:	11 e0       	ldi	r17, 0x01	; 1
     fb8:	88 23       	and	r24, r24
     fba:	09 f4       	brne	.+2      	; 0xfbe <KBD_scan+0xe>
     fbc:	10 e0       	ldi	r17, 0x00	; 0
  if (debounce_sw_plus() >= 1) { key |= (1 << 0); }
  if (debounce_sw_minus() >= 1) { key |= (1 << 1); }
     fbe:	0e 94 b7 07 	call	0xf6e	; 0xf6e <debounce_sw_minus>
     fc2:	81 11       	cpse	r24, r1
     fc4:	12 60       	ori	r17, 0x02	; 2
  if (debounce_sw_set() == 1) { key |= (1 << 2); }
     fc6:	0e 94 96 07 	call	0xf2c	; 0xf2c <debounce_sw_set>
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	91 f4       	brne	.+36     	; 0xff2 <KBD_scan+0x42>
     fce:	14 60       	ori	r17, 0x04	; 4
  if (key == 5) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
     fd0:	15 30       	cpi	r17, 0x05	; 5
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <KBD_scan+0x28>
  if (key == 6) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
     fd4:	16 30       	cpi	r17, 0x06	; 6
     fd6:	69 f4       	brne	.+26     	; 0xff2 <KBD_scan+0x42>
     fd8:	40 9a       	sbi	0x08, 0	; 8
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	97 ee       	ldi	r25, 0xE7	; 231
     fde:	a3 e0       	ldi	r26, 0x03	; 3
     fe0:	81 50       	subi	r24, 0x01	; 1
     fe2:	90 40       	sbci	r25, 0x00	; 0
     fe4:	a0 40       	sbci	r26, 0x00	; 0
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <KBD_scan+0x30>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <KBD_scan+0x3a>
     fea:	00 00       	nop
     fec:	40 98       	cbi	0x08, 0	; 8
     fee:	85 e1       	ldi	r24, 0x15	; 21
     ff0:	0b c0       	rjmp	.+22     	; 0x1008 <KBD_scan+0x58>
  if (key == 1) { RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
     ff2:	11 30       	cpi	r17, 0x01	; 1
     ff4:	11 f4       	brne	.+4      	; 0xffa <KBD_scan+0x4a>
     ff6:	8a e0       	ldi	r24, 0x0A	; 10
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <KBD_scan+0x58>
  if (key == 2) { RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
     ffa:	12 30       	cpi	r17, 0x02	; 2
     ffc:	11 f4       	brne	.+4      	; 0x1002 <KBD_scan+0x52>
     ffe:	8e e1       	ldi	r24, 0x1E	; 30
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <KBD_scan+0x58>
  if (key == 4) { RTOS_setTask(EVENT_KEY_SET, 0, 0); }
    1002:	14 30       	cpi	r17, 0x04	; 4
    1004:	39 f4       	brne	.+14     	; 0x1014 <KBD_scan+0x64>
    1006:	84 e1       	ldi	r24, 0x14	; 20
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	0e 94 1e 08 	call	0x103c	; 0x103c <RTOS_setTask>
}
    1014:	1f 91       	pop	r17
    1016:	08 95       	ret

00001018 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    1018:	e1 eb       	ldi	r30, 0xB1	; 177
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	84 60       	ori	r24, 0x04	; 4
    1020:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    1026:	e0 e7       	ldi	r30, 0x70	; 112
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    1036:	10 92 13 02 	sts	0x0213, r1
}
    103a:	08 95       	ret

0000103c <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    103c:	88 23       	and	r24, r24
    103e:	09 f4       	brne	.+2      	; 0x1042 <RTOS_setTask+0x6>
    1040:	6f c0       	rjmp	.+222    	; 0x1120 <RTOS_setTask+0xe4>
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	1b c0       	rjmp	.+54     	; 0x107c <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    1046:	29 2f       	mov	r18, r25
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	f9 01       	movw	r30, r18
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e2 0f       	add	r30, r18
    1052:	f3 1f       	adc	r31, r19
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ed 54       	subi	r30, 0x4D	; 77
    105a:	fe 4f       	sbci	r31, 0xFE	; 254
    105c:	20 81       	ld	r18, Z
    105e:	28 17       	cp	r18, r24
    1060:	61 f4       	brne	.+24     	; 0x107a <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    1062:	72 83       	std	Z+2, r23	; 0x02
    1064:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    1066:	54 83       	std	Z+4, r21	; 0x04
    1068:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    106a:	61 15       	cp	r22, r1
    106c:	71 05       	cpc	r23, r1
    106e:	19 f4       	brne	.+6      	; 0x1076 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	85 83       	std	Z+5, r24	; 0x05
    1074:	08 95       	ret
      } else TaskArray[i].run = 0;   
    1076:	15 82       	std	Z+5, r1	; 0x05
    1078:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	20 91 13 02 	lds	r18, 0x0213
    1080:	92 17       	cp	r25, r18
    1082:	08 f3       	brcs	.-62     	; 0x1046 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    1084:	20 91 13 02 	lds	r18, 0x0213
    1088:	20 31       	cpi	r18, 0x10	; 16
    108a:	08 f0       	brcs	.+2      	; 0x108e <RTOS_setTask+0x52>
    108c:	49 c0       	rjmp	.+146    	; 0x1120 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    108e:	20 91 13 02 	lds	r18, 0x0213
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	f9 01       	movw	r30, r18
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	ed 54       	subi	r30, 0x4D	; 77
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    10a8:	20 91 13 02 	lds	r18, 0x0213
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	ed 54       	subi	r30, 0x4D	; 77
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	72 83       	std	Z+2, r23	; 0x02
    10c2:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    10c4:	20 91 13 02 	lds	r18, 0x0213
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	f9 01       	movw	r30, r18
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	ed 54       	subi	r30, 0x4D	; 77
    10da:	fe 4f       	sbci	r31, 0xFE	; 254
    10dc:	54 83       	std	Z+4, r21	; 0x04
    10de:	43 83       	std	Z+3, r20	; 0x03
    10e0:	89 2f       	mov	r24, r25
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    10e4:	61 15       	cp	r22, r1
    10e6:	71 05       	cpc	r23, r1
    10e8:	61 f4       	brne	.+24     	; 0x1102 <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    10ea:	fc 01       	movw	r30, r24
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	e8 0f       	add	r30, r24
    10f2:	f9 1f       	adc	r31, r25
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ed 54       	subi	r30, 0x4D	; 77
    10fa:	fe 4f       	sbci	r31, 0xFE	; 254
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	85 83       	std	Z+5, r24	; 0x05
    1100:	0a c0       	rjmp	.+20     	; 0x1116 <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    1102:	fc 01       	movw	r30, r24
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	e8 0f       	add	r30, r24
    110a:	f9 1f       	adc	r31, r25
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ed 54       	subi	r30, 0x4D	; 77
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    1116:	80 91 13 02 	lds	r24, 0x0213
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	80 93 13 02 	sts	0x0213, r24
    1120:	08 95       	ret

00001122 <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	2e c0       	rjmp	.+92     	; 0x1182 <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    1126:	29 2f       	mov	r18, r25
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	d9 01       	movw	r26, r18
    112c:	aa 0f       	add	r26, r26
    112e:	bb 1f       	adc	r27, r27
    1130:	a2 0f       	add	r26, r18
    1132:	b3 1f       	adc	r27, r19
    1134:	aa 0f       	add	r26, r26
    1136:	bb 1f       	adc	r27, r27
    1138:	ad 54       	subi	r26, 0x4D	; 77
    113a:	be 4f       	sbci	r27, 0xFE	; 254
    113c:	4c 91       	ld	r20, X
    113e:	48 17       	cp	r20, r24
    1140:	f9 f4       	brne	.+62     	; 0x1180 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    1142:	80 91 13 02 	lds	r24, 0x0213
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	28 17       	cp	r18, r24
    114c:	39 07       	cpc	r19, r25
    114e:	91 f0       	breq	.+36     	; 0x1174 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1150:	80 91 13 02 	lds	r24, 0x0213
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	fc 01       	movw	r30, r24
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	e8 0f       	add	r30, r24
    1160:	f9 1f       	adc	r31, r25
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	ed 54       	subi	r30, 0x4D	; 77
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	01 90       	ld	r0, Z+
    116e:	0d 92       	st	X+, r0
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	e1 f7       	brne	.-8      	; 0x116c <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    1174:	80 91 13 02 	lds	r24, 0x0213
    1178:	81 50       	subi	r24, 0x01	; 1
    117a:	80 93 13 02 	sts	0x0213, r24
      return;
    117e:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1180:	9f 5f       	subi	r25, 0xFF	; 255
    1182:	20 91 13 02 	lds	r18, 0x0213
    1186:	92 17       	cp	r25, r18
    1188:	70 f2       	brcs	.-100    	; 0x1126 <RTOS_deleteTask+0x4>
    118a:	08 95       	ret

0000118c <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    1190:	80 91 b2 01 	lds	r24, 0x01B2
    1194:	88 23       	and	r24, r24
    1196:	11 f4       	brne	.+4      	; 0x119c <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	4e c0       	rjmp	.+156    	; 0x1238 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    119c:	10 92 b2 01 	sts	0x01B2, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    11a2:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    11a4:	17 c0       	rjmp	.+46     	; 0x11d4 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    11a6:	82 2f       	mov	r24, r18
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	fc 01       	movw	r30, r24
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	e8 0f       	add	r30, r24
    11b2:	f9 1f       	adc	r31, r25
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	ed 54       	subi	r30, 0x4D	; 77
    11ba:	fe 4f       	sbci	r31, 0xFE	; 254
    11bc:	81 81       	ldd	r24, Z+1	; 0x01
    11be:	92 81       	ldd	r25, Z+2	; 0x02
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    11c4:	35 83       	std	Z+5, r19	; 0x05
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    11c8:	81 81       	ldd	r24, Z+1	; 0x01
    11ca:	92 81       	ldd	r25, Z+2	; 0x02
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	92 83       	std	Z+2, r25	; 0x02
    11d0:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    11d2:	2f 5f       	subi	r18, 0xFF	; 255
    11d4:	80 91 13 02 	lds	r24, 0x0213
    11d8:	28 17       	cp	r18, r24
    11da:	28 f3       	brcs	.-54     	; 0x11a6 <RTOS_dispatchTask+0x1a>
    11dc:	dd cf       	rjmp	.-70     	; 0x1198 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    11de:	81 2f       	mov	r24, r17
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	e8 0f       	add	r30, r24
    11ea:	f9 1f       	adc	r31, r25
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	ed 54       	subi	r30, 0x4D	; 77
    11f2:	fe 4f       	sbci	r31, 0xFE	; 254
    11f4:	85 81       	ldd	r24, Z+5	; 0x05
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	f1 f4       	brne	.+60     	; 0x1236 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    11fa:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    11fc:	23 81       	ldd	r18, Z+3	; 0x03
    11fe:	34 81       	ldd	r19, Z+4	; 0x04
    1200:	21 15       	cp	r18, r1
    1202:	31 05       	cpc	r19, r1
    1204:	31 f4       	brne	.+12     	; 0x1212 <RTOS_dispatchTask+0x86>
      {  
        cli();
    1206:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    1208:	80 81       	ld	r24, Z
    120a:	0e 94 91 08 	call	0x1122	; 0x1122 <RTOS_deleteTask>
        sei();
    120e:	78 94       	sei
    1210:	0c c0       	rjmp	.+24     	; 0x122a <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    1212:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    1214:	21 81       	ldd	r18, Z+1	; 0x01
    1216:	32 81       	ldd	r19, Z+2	; 0x02
    1218:	21 15       	cp	r18, r1
    121a:	31 05       	cpc	r19, r1
    121c:	31 f4       	brne	.+12     	; 0x122a <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    121e:	23 81       	ldd	r18, Z+3	; 0x03
    1220:	34 81       	ldd	r19, Z+4	; 0x04
    1222:	21 50       	subi	r18, 0x01	; 1
    1224:	30 40       	sbci	r19, 0x00	; 0
    1226:	32 83       	std	Z+2, r19	; 0x02
    1228:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    122a:	e0 91 36 01 	lds	r30, 0x0136
    122e:	f0 91 37 01 	lds	r31, 0x0137
    1232:	80 2f       	mov	r24, r16
    1234:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    1236:	1f 5f       	subi	r17, 0xFF	; 255
    1238:	80 91 13 02 	lds	r24, 0x0213
    123c:	18 17       	cp	r17, r24
    123e:	78 f2       	brcs	.-98     	; 0x11de <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    1252:	86 e0       	ldi	r24, 0x06	; 6
    1254:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 b2 01 	sts	0x01B2, r24
}
    125e:	8f 91       	pop	r24
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    126a:	80 52       	subi	r24, 0x20	; 32
    126c:	86 35       	cpi	r24, 0x56	; 86
    126e:	30 f4       	brcc	.+12     	; 0x127c <MAX7219_lookupCode+0x12>
    1270:	e8 2f       	mov	r30, r24
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	e8 5b       	subi	r30, 0xB8	; 184
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	80 81       	ld	r24, Z
    127a:	08 95       	ret
    127c:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    127e:	08 95       	ret

00001280 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    1280:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    1282:	87 ff       	sbrs	r24, 7
    1284:	02 c0       	rjmp	.+4      	; 0x128a <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1286:	43 9a       	sbi	0x08, 3	; 8
    1288:	01 c0       	rjmp	.+2      	; 0x128c <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    128a:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    128c:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    128e:	00 00       	nop
	asm("nop");
    1290:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    1292:	42 9a       	sbi	0x08, 2	; 8
    1294:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    1296:	11 f0       	breq	.+4      	; 0x129c <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    1298:	88 0f       	add	r24, r24
    129a:	f3 cf       	rjmp	.-26     	; 0x1282 <MAX7219_SendByte+0x2>
    129c:	08 95       	ret

0000129e <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	18 2f       	mov	r17, r24
    12a6:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    12a8:	41 98       	cbi	0x08, 1	; 8
    12aa:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    12ac:	81 2f       	mov	r24, r17
    12ae:	0e 94 40 09 	call	0x1280	; 0x1280 <MAX7219_SendByte>
	MAX7219_SendByte(data);
    12b2:	8f 2d       	mov	r24, r15
    12b4:	0e 94 40 09 	call	0x1280	; 0x1280 <MAX7219_SendByte>
    12b8:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    12ba:	c1 f7       	brne	.-16     	; 0x12ac <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    12bc:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	08 95       	ret

000012c6 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	c8 e3       	ldi	r28, 0x38	; 56
    12d0:	d1 e0       	ldi	r29, 0x01	; 1
    12d2:	00 e4       	ldi	r16, 0x40	; 64
    12d4:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    12d6:	89 91       	ld	r24, Y+
    12d8:	f8 01       	movw	r30, r16
    12da:	61 91       	ld	r22, Z+
    12dc:	8f 01       	movw	r16, r30
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
    12e6:	c0 34       	cpi	r28, 0x40	; 64
    12e8:	df 07       	cpc	r29, r31
    12ea:	a9 f7       	brne	.-22     	; 0x12d6 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    12f6:	10 92 40 01 	sts	0x0140, r1
    12fa:	10 92 41 01 	sts	0x0141, r1
    12fe:	10 92 42 01 	sts	0x0142, r1
    1302:	10 92 43 01 	sts	0x0143, r1
    1306:	10 92 44 01 	sts	0x0144, r1
    130a:	10 92 45 01 	sts	0x0145, r1
    130e:	10 92 46 01 	sts	0x0146, r1
    1312:	10 92 47 01 	sts	0x0147, r1
  }
  MAX7219_updateDisplay();
    1316:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_updateDisplay>
}
    131a:	08 95       	ret

0000131c <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    131c:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    131e:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    1320:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1322:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    1324:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    1326:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    1328:	8c e0       	ldi	r24, 0x0C	; 12
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    1330:	8f e0       	ldi	r24, 0x0F	; 15
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    1338:	89 e0       	ldi	r24, 0x09	; 9
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    1340:	8a e0       	ldi	r24, 0x0A	; 10
    1342:	62 e0       	ldi	r22, 0x02	; 2
    1344:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    1348:	8b e0       	ldi	r24, 0x0B	; 11
    134a:	67 e0       	ldi	r22, 0x07	; 7
    134c:	0e 94 4f 09 	call	0x129e	; 0x129e <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    1350:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <MAX7219_clearDisplay>
  return;
}
    1354:	08 95       	ret

00001356 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	27 97       	sbiw	r28, 0x07	; 7
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	b8 2e       	mov	r11, r24
    137a:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    137c:	77 ff       	sbrs	r23, 7
    137e:	05 c0       	rjmp	.+10     	; 0x138a <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    1380:	90 95       	com	r25
    1382:	81 95       	neg	r24
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    1386:	31 e0       	ldi	r19, 0x01	; 1
    1388:	01 c0       	rjmp	.+2      	; 0x138c <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    138a:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    138c:	e4 2f       	mov	r30, r20
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8e 01       	movw	r16, r28
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	e0 0f       	add	r30, r16
    1398:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    139a:	5a e0       	ldi	r21, 0x0A	; 10
    139c:	e5 2e       	mov	r14, r21
    139e:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    13a0:	07 c0       	rjmp	.+14     	; 0x13b0 <MAX7219_printNum+0x5a>
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    13a4:	b7 01       	movw	r22, r14
    13a6:	0e 94 40 0c 	call	0x1880	; 0x1880 <__divmodhi4>
    13aa:	80 5d       	subi	r24, 0xD0	; 208
    13ac:	80 83       	st	Z, r24
    x /= 10;
    13ae:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    13b0:	e0 17       	cp	r30, r16
    13b2:	f1 07       	cpc	r31, r17
    13b4:	b1 f7       	brne	.-20     	; 0x13a2 <MAX7219_printNum+0x4c>
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    13b8:	84 2f       	mov	r24, r20
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    13be:	de 01       	movw	r26, r28
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <MAX7219_printNum+0x7e>
    13c4:	fd 01       	movw	r30, r26
    13c6:	e6 0f       	add	r30, r22
    13c8:	f7 1f       	adc	r31, r23
    13ca:	60 81       	ld	r22, Z
    13cc:	60 33       	cpi	r22, 0x30	; 48
    13ce:	11 f5       	brne	.+68     	; 0x1414 <MAX7219_printNum+0xbe>
    13d0:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    13d2:	5f 5f       	subi	r21, 0xFF	; 255
    13d4:	65 2f       	mov	r22, r21
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	68 17       	cp	r22, r24
    13da:	79 07       	cpc	r23, r25
    13dc:	9c f3       	brlt	.-26     	; 0x13c4 <MAX7219_printNum+0x6e>
    13de:	1a c0       	rjmp	.+52     	; 0x1414 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    13e0:	82 2f       	mov	r24, r18
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	8c 01       	movw	r16, r24
    13e6:	0c 0d       	add	r16, r12
    13e8:	1d 1d       	adc	r17, r13
    13ea:	08 30       	cpi	r16, 0x08	; 8
    13ec:	11 05       	cpc	r17, r1
    13ee:	84 f4       	brge	.+32     	; 0x1410 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    13f0:	8e 0d       	add	r24, r14
    13f2:	9f 1d       	adc	r25, r15
    13f4:	fc 01       	movw	r30, r24
    13f6:	80 81       	ld	r24, Z
    13f8:	2d 83       	std	Y+5, r18	; 0x05
    13fa:	3e 83       	std	Y+6, r19	; 0x06
    13fc:	4f 83       	std	Y+7, r20	; 0x07
    13fe:	0e 94 35 09 	call	0x126a	; 0x126a <MAX7219_lookupCode>
    1402:	f8 01       	movw	r30, r16
    1404:	e0 5c       	subi	r30, 0xC0	; 192
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	80 83       	st	Z, r24
    140a:	4f 81       	ldd	r20, Y+7	; 0x07
    140c:	3e 81       	ldd	r19, Y+6	; 0x06
    140e:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1410:	2f 5f       	subi	r18, 0xFF	; 255
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    1414:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1416:	cb 2c       	mov	r12, r11
    1418:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    141a:	7e 01       	movw	r14, r28
    141c:	08 94       	sec
    141e:	e1 1c       	adc	r14, r1
    1420:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1422:	24 17       	cp	r18, r20
    1424:	e8 f2       	brcs	.-70     	; 0x13e0 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    1426:	33 23       	and	r19, r19
    1428:	41 f0       	breq	.+16     	; 0x143a <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    142a:	8d e2       	ldi	r24, 0x2D	; 45
    142c:	0e 94 35 09 	call	0x126a	; 0x126a <MAX7219_lookupCode>
    1430:	eb 2d       	mov	r30, r11
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	e1 5c       	subi	r30, 0xC1	; 193
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    143a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_updateDisplay>
}
    143e:	27 96       	adiw	r28, 0x07	; 7
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	bf 90       	pop	r11
    145c:	08 95       	ret

0000145e <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    145e:	1f 93       	push	r17
    1460:	18 2f       	mov	r17, r24
    1462:	86 2f       	mov	r24, r22
  if (pos < 9) {
    1464:	19 30       	cpi	r17, 0x09	; 9
    1466:	48 f4       	brcc	.+18     	; 0x147a <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    1468:	0e 94 35 09 	call	0x126a	; 0x126a <MAX7219_lookupCode>
    146c:	e1 2f       	mov	r30, r17
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	e1 5c       	subi	r30, 0xC1	; 193
    1472:	fe 4f       	sbci	r31, 0xFE	; 254
    1474:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    1476:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_updateDisplay>
  }
}
    147a:	1f 91       	pop	r17
    147c:	08 95       	ret

0000147e <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
  unsigned char i = pos;
    1488:	e6 2e       	mov	r14, r22
    148a:	e7 01       	movw	r28, r14
    148c:	7e 01       	movw	r14, r28
    148e:	f7 2e       	mov	r15, r23
    1490:	e7 01       	movw	r28, r14
    1492:	18 2f       	mov	r17, r24
  while(*data) {
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <MAX7219_printStr+0x2c>
    if (i < 9) {
    1496:	19 30       	cpi	r17, 0x09	; 9
    1498:	58 f4       	brcc	.+22     	; 0x14b0 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    149a:	0e 94 35 09 	call	0x126a	; 0x126a <MAX7219_lookupCode>
    149e:	e1 2f       	mov	r30, r17
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	e1 5c       	subi	r30, 0xC1	; 193
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	80 83       	st	Z, r24
      i++;
    14a8:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    14aa:	89 91       	ld	r24, Y+
    14ac:	88 23       	and	r24, r24
    14ae:	99 f7       	brne	.-26     	; 0x1496 <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    14b0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_updateDisplay>
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	08 95       	ret

000014c0 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    14c0:	e8 2f       	mov	r30, r24
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    14c4:	61 30       	cpi	r22, 0x01	; 1
    14c6:	29 f4       	brne	.+10     	; 0x14d2 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    14c8:	e1 5c       	subi	r30, 0xC1	; 193
    14ca:	fe 4f       	sbci	r31, 0xFE	; 254
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    14d2:	e1 5c       	subi	r30, 0xC1	; 193
    14d4:	fe 4f       	sbci	r31, 0xFE	; 254
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 77       	andi	r24, 0x7F	; 127
    14da:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    14dc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MAX7219_updateDisplay>
}
    14e0:	08 95       	ret

000014e2 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    14e2:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    14e4:	f8 94       	cli
  switch(chanel) {
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	01 f1       	breq	.+64     	; 0x152a <ds18x20IsOnBus+0x48>
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	20 f4       	brcc	.+8      	; 0x14f6 <ds18x20IsOnBus+0x14>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <ds18x20IsOnBus+0x12>
    14f2:	57 c0       	rjmp	.+174    	; 0x15a2 <ds18x20IsOnBus+0xc0>
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <ds18x20IsOnBus+0x20>
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	61 f1       	breq	.+88     	; 0x1552 <ds18x20IsOnBus+0x70>
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	09 f0       	breq	.+2      	; 0x1500 <ds18x20IsOnBus+0x1e>
    14fe:	51 c0       	rjmp	.+162    	; 0x15a2 <ds18x20IsOnBus+0xc0>
    1500:	3e c0       	rjmp	.+124    	; 0x157e <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1502:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1504:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1506:	8f e7       	ldi	r24, 0x7F	; 127
    1508:	97 e0       	ldi	r25, 0x07	; 7
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <ds18x20IsOnBus+0x28>
    150e:	00 c0       	rjmp	.+0      	; 0x1510 <ds18x20IsOnBus+0x2e>
    1510:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    1512:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1514:	29 9a       	sbi	0x05, 1	; 5
    1516:	a7 e1       	ldi	r26, 0x17	; 23
    1518:	b1 e0       	ldi	r27, 0x01	; 1
    151a:	11 97       	sbiw	r26, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <ds18x20IsOnBus+0x38>
    151e:	00 c0       	rjmp	.+0      	; 0x1520 <ds18x20IsOnBus+0x3e>
    1520:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	19 9b       	sbis	0x03, 1	; 3
    1526:	3e c0       	rjmp	.+124    	; 0x15a4 <ds18x20IsOnBus+0xc2>
    1528:	3c c0       	rjmp	.+120    	; 0x15a2 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    152a:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    152c:	28 98       	cbi	0x05, 0	; 5
    152e:	8f e7       	ldi	r24, 0x7F	; 127
    1530:	97 e0       	ldi	r25, 0x07	; 7
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <ds18x20IsOnBus+0x50>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <ds18x20IsOnBus+0x56>
    1538:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    153a:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    153c:	28 9a       	sbi	0x05, 0	; 5
    153e:	a7 e1       	ldi	r26, 0x17	; 23
    1540:	b1 e0       	ldi	r27, 0x01	; 1
    1542:	11 97       	sbiw	r26, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <ds18x20IsOnBus+0x60>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <ds18x20IsOnBus+0x66>
    1548:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	18 9b       	sbis	0x03, 0	; 3
    154e:	2a c0       	rjmp	.+84     	; 0x15a4 <ds18x20IsOnBus+0xc2>
    1550:	28 c0       	rjmp	.+80     	; 0x15a2 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1552:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1554:	5f 98       	cbi	0x0b, 7	; 11
    1556:	8f e7       	ldi	r24, 0x7F	; 127
    1558:	97 e0       	ldi	r25, 0x07	; 7
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <ds18x20IsOnBus+0x78>
    155e:	00 c0       	rjmp	.+0      	; 0x1560 <ds18x20IsOnBus+0x7e>
    1560:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    1562:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    1564:	5f 9a       	sbi	0x0b, 7	; 11
    1566:	a7 e1       	ldi	r26, 0x17	; 23
    1568:	b1 e0       	ldi	r27, 0x01	; 1
    156a:	11 97       	sbiw	r26, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <ds18x20IsOnBus+0x88>
    156e:	00 c0       	rjmp	.+0      	; 0x1570 <ds18x20IsOnBus+0x8e>
    1570:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    1572:	89 b1       	in	r24, 0x09	; 9
    1574:	80 95       	com	r24
    1576:	88 1f       	adc	r24, r24
    1578:	88 27       	eor	r24, r24
    157a:	88 1f       	adc	r24, r24
    break;
    157c:	13 c0       	rjmp	.+38     	; 0x15a4 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    157e:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    1580:	2a 98       	cbi	0x05, 2	; 5
    1582:	8f e7       	ldi	r24, 0x7F	; 127
    1584:	97 e0       	ldi	r25, 0x07	; 7
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <ds18x20IsOnBus+0xa4>
    158a:	00 c0       	rjmp	.+0      	; 0x158c <ds18x20IsOnBus+0xaa>
    158c:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    158e:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    1590:	2a 9a       	sbi	0x05, 2	; 5
    1592:	a7 e1       	ldi	r26, 0x17	; 23
    1594:	b1 e0       	ldi	r27, 0x01	; 1
    1596:	11 97       	sbiw	r26, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <ds18x20IsOnBus+0xb4>
    159a:	00 c0       	rjmp	.+0      	; 0x159c <ds18x20IsOnBus+0xba>
    159c:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	a7 e6       	ldi	r26, 0x67	; 103
    15a6:	b6 e0       	ldi	r27, 0x06	; 6
    15a8:	11 97       	sbiw	r26, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <ds18x20IsOnBus+0xc6>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <ds18x20IsOnBus+0xcc>
    15ae:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	ed 5e       	subi	r30, 0xED	; 237
    15b4:	fd 4f       	sbci	r31, 0xFD	; 253
    15b6:	80 83       	st	Z, r24
  sei();
    15b8:	78 94       	sei
  return ret;
}
    15ba:	08 95       	ret

000015bc <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    15bc:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    15be:	98 2f       	mov	r25, r24
    15c0:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    15c2:	f8 94       	cli
  switch(chanel) {
    15c4:	62 30       	cpi	r22, 0x02	; 2
    15c6:	e1 f0       	breq	.+56     	; 0x1600 <ds18x20SendByte+0x44>
    15c8:	63 30       	cpi	r22, 0x03	; 3
    15ca:	20 f4       	brcc	.+8      	; 0x15d4 <ds18x20SendByte+0x18>
    15cc:	61 30       	cpi	r22, 0x01	; 1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <ds18x20SendByte+0x16>
    15d0:	52 c0       	rjmp	.+164    	; 0x1676 <ds18x20SendByte+0xba>
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <ds18x20SendByte+0x24>
    15d4:	63 30       	cpi	r22, 0x03	; 3
    15d6:	21 f1       	breq	.+72     	; 0x1620 <ds18x20SendByte+0x64>
    15d8:	64 30       	cpi	r22, 0x04	; 4
    15da:	09 f0       	breq	.+2      	; 0x15de <ds18x20SendByte+0x22>
    15dc:	4c c0       	rjmp	.+152    	; 0x1676 <ds18x20SendByte+0xba>
    15de:	30 c0       	rjmp	.+96     	; 0x1640 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    15e0:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    15e2:	29 98       	cbi	0x05, 1	; 5
    15e4:	30 e2       	ldi	r19, 0x20	; 32
    15e6:	3a 95       	dec	r19
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    15ea:	99 23       	and	r25, r25
    15ec:	31 f4       	brne	.+12     	; 0x15fa <ds18x20SendByte+0x3e>
    15ee:	e7 ed       	ldi	r30, 0xD7	; 215
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <ds18x20SendByte+0x36>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <ds18x20SendByte+0x3c>
    15f8:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    15fa:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    15fc:	29 9a       	sbi	0x05, 1	; 5
    15fe:	2f c0       	rjmp	.+94     	; 0x165e <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    1600:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    1602:	28 98       	cbi	0x05, 0	; 5
    1604:	f0 e2       	ldi	r31, 0x20	; 32
    1606:	fa 95       	dec	r31
    1608:	f1 f7       	brne	.-4      	; 0x1606 <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    160a:	99 23       	and	r25, r25
    160c:	31 f4       	brne	.+12     	; 0x161a <ds18x20SendByte+0x5e>
    160e:	e7 ed       	ldi	r30, 0xD7	; 215
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <ds18x20SendByte+0x56>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <ds18x20SendByte+0x5c>
    1618:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    161a:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    161c:	28 9a       	sbi	0x05, 0	; 5
    161e:	1f c0       	rjmp	.+62     	; 0x165e <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1620:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1622:	5f 98       	cbi	0x0b, 7	; 11
    1624:	f0 e2       	ldi	r31, 0x20	; 32
    1626:	fa 95       	dec	r31
    1628:	f1 f7       	brne	.-4      	; 0x1626 <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    162a:	99 23       	and	r25, r25
    162c:	31 f4       	brne	.+12     	; 0x163a <ds18x20SendByte+0x7e>
    162e:	e7 ed       	ldi	r30, 0xD7	; 215
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <ds18x20SendByte+0x76>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <ds18x20SendByte+0x7c>
    1638:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    163a:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    163c:	5f 9a       	sbi	0x0b, 7	; 11
    163e:	0f c0       	rjmp	.+30     	; 0x165e <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    1640:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    1642:	2a 98       	cbi	0x05, 2	; 5
    1644:	f0 e2       	ldi	r31, 0x20	; 32
    1646:	fa 95       	dec	r31
    1648:	f1 f7       	brne	.-4      	; 0x1646 <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    164a:	99 23       	and	r25, r25
    164c:	31 f4       	brne	.+12     	; 0x165a <ds18x20SendByte+0x9e>
    164e:	e7 ed       	ldi	r30, 0xD7	; 215
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	31 97       	sbiw	r30, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <ds18x20SendByte+0x96>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <ds18x20SendByte+0x9c>
    1658:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    165a:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    165c:	2a 9a       	sbi	0x05, 2	; 5
    165e:	f5 e3       	ldi	r31, 0x35	; 53
    1660:	fa 95       	dec	r31
    1662:	f1 f7       	brne	.-4      	; 0x1660 <ds18x20SendByte+0xa4>
    1664:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    1666:	99 23       	and	r25, r25
    1668:	31 f0       	breq	.+12     	; 0x1676 <ds18x20SendByte+0xba>
    166a:	e7 ed       	ldi	r30, 0xD7	; 215
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	31 97       	sbiw	r30, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <ds18x20SendByte+0xb2>
    1672:	00 c0       	rjmp	.+0      	; 0x1674 <ds18x20SendByte+0xb8>
    1674:	00 00       	nop
    break;
  }
  sei();
    1676:	78 94       	sei
    1678:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    167a:	11 f0       	breq	.+4      	; 0x1680 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    167c:	86 95       	lsr	r24
    167e:	9f cf       	rjmp	.-194    	; 0x15be <ds18x20SendByte+0x2>
    1680:	08 95       	ret

00001682 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    1682:	28 2f       	mov	r18, r24
    1684:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    1686:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    1688:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    168a:	f8 94       	cli
  switch(chanel) {
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	c1 f0       	breq	.+48     	; 0x16c0 <ds18x20GetByte+0x3e>
    1690:	23 30       	cpi	r18, 0x03	; 3
    1692:	20 f4       	brcc	.+8      	; 0x169c <ds18x20GetByte+0x1a>
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	09 f0       	breq	.+2      	; 0x169a <ds18x20GetByte+0x18>
    1698:	40 c0       	rjmp	.+128    	; 0x171a <ds18x20GetByte+0x98>
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <ds18x20GetByte+0x24>
    169c:	23 30       	cpi	r18, 0x03	; 3
    169e:	e9 f0       	breq	.+58     	; 0x16da <ds18x20GetByte+0x58>
    16a0:	24 30       	cpi	r18, 0x04	; 4
    16a2:	d9 f5       	brne	.+118    	; 0x171a <ds18x20GetByte+0x98>
    16a4:	27 c0       	rjmp	.+78     	; 0x16f4 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    16a6:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    16a8:	29 98       	cbi	0x05, 1	; 5
    16aa:	90 e2       	ldi	r25, 0x20	; 32
    16ac:	9a 95       	dec	r25
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    16b0:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    16b2:	29 9a       	sbi	0x05, 1	; 5
    16b4:	e0 e3       	ldi	r30, 0x30	; 48
    16b6:	ea 95       	dec	r30
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    16ba:	93 b1       	in	r25, 0x03	; 3
    16bc:	92 70       	andi	r25, 0x02	; 2
    16be:	26 c0       	rjmp	.+76     	; 0x170c <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    16c0:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    16c2:	28 98       	cbi	0x05, 0	; 5
    16c4:	f0 e2       	ldi	r31, 0x20	; 32
    16c6:	fa 95       	dec	r31
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    16ca:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    16cc:	28 9a       	sbi	0x05, 0	; 5
    16ce:	90 e3       	ldi	r25, 0x30	; 48
    16d0:	9a 95       	dec	r25
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    16d4:	93 b1       	in	r25, 0x03	; 3
    16d6:	91 70       	andi	r25, 0x01	; 1
    16d8:	19 c0       	rjmp	.+50     	; 0x170c <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    16da:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    16dc:	5f 98       	cbi	0x0b, 7	; 11
    16de:	f0 e2       	ldi	r31, 0x20	; 32
    16e0:	fa 95       	dec	r31
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    16e4:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    16e6:	5f 9a       	sbi	0x0b, 7	; 11
    16e8:	90 e3       	ldi	r25, 0x30	; 48
    16ea:	9a 95       	dec	r25
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    16ee:	99 b1       	in	r25, 0x09	; 9
    16f0:	90 78       	andi	r25, 0x80	; 128
    16f2:	0c c0       	rjmp	.+24     	; 0x170c <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    16f4:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    16f6:	2a 98       	cbi	0x05, 2	; 5
    16f8:	f0 e2       	ldi	r31, 0x20	; 32
    16fa:	fa 95       	dec	r31
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    16fe:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    1700:	2a 9a       	sbi	0x05, 2	; 5
    1702:	90 e3       	ldi	r25, 0x30	; 48
    1704:	9a 95       	dec	r25
    1706:	f1 f7       	brne	.-4      	; 0x1704 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    1708:	93 b1       	in	r25, 0x03	; 3
    170a:	94 70       	andi	r25, 0x04	; 4
    170c:	eb ed       	ldi	r30, 0xDB	; 219
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	31 97       	sbiw	r30, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <ds18x20GetByte+0x8e>
    1714:	00 c0       	rjmp	.+0      	; 0x1716 <ds18x20GetByte+0x94>
    1716:	00 00       	nop
    1718:	01 c0       	rjmp	.+2      	; 0x171c <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    171a:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    171c:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    171e:	91 11       	cpse	r25, r1
    1720:	80 68       	ori	r24, 0x80	; 128
    1722:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    1724:	09 f0       	breq	.+2      	; 0x1728 <ds18x20GetByte+0xa6>
    1726:	b0 cf       	rjmp	.-160    	; 0x1688 <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    1728:	08 95       	ret

0000172a <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    1734:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <ds18x20IsOnBus>
    1738:	88 23       	and	r24, r24
    173a:	91 f1       	breq	.+100    	; 0x17a0 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    173c:	8c ec       	ldi	r24, 0xCC	; 204
    173e:	61 2f       	mov	r22, r17
    1740:	0e 94 de 0a 	call	0x15bc	; 0x15bc <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    1744:	8e eb       	ldi	r24, 0xBE	; 190
    1746:	61 2f       	mov	r22, r17
    1748:	0e 94 de 0a 	call	0x15bc	; 0x15bc <ds18x20SendByte>
    174c:	c0 e4       	ldi	r28, 0x40	; 64
    174e:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    1750:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    1752:	81 2f       	mov	r24, r17
    1754:	0e 94 41 0b 	call	0x1682	; 0x1682 <ds18x20GetByte>
    1758:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    175a:	08 27       	eor	r16, r24
    175c:	88 e0       	ldi	r24, 0x08	; 8
    175e:	9c e8       	ldi	r25, 0x8C	; 140
    1760:	06 95       	lsr	r16
    1762:	08 f4       	brcc	.+2      	; 0x1766 <ds18x20ReadStratchPad+0x3c>
    1764:	09 27       	eor	r16, r25
    1766:	8a 95       	dec	r24
    1768:	d9 f7       	brne	.-10     	; 0x1760 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	c9 34       	cpi	r28, 0x49	; 73
    176e:	d8 07       	cpc	r29, r24
    1770:	81 f7       	brne	.-32     	; 0x1752 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    1772:	00 23       	and	r16, r16
    1774:	a9 f4       	brne	.+42     	; 0x17a0 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    1776:	81 2f       	mov	r24, r17
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	fc 01       	movw	r30, r24
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	23 e0       	ldi	r18, 0x03	; 3
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	2a 95       	dec	r18
    178a:	e1 f7       	brne	.-8      	; 0x1784 <ds18x20ReadStratchPad+0x5a>
    178c:	e8 0f       	add	r30, r24
    178e:	f9 1f       	adc	r31, r25
    1790:	e8 5e       	subi	r30, 0xE8	; 232
    1792:	fd 4f       	sbci	r31, 0xFD	; 253
    1794:	80 91 40 02 	lds	r24, 0x0240
    1798:	80 83       	st	Z, r24
    179a:	80 91 41 02 	lds	r24, 0x0241
    179e:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    17aa:	1f 93       	push	r17
    17ac:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    17ae:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <ds18x20IsOnBus>
    17b2:	88 23       	and	r24, r24
    17b4:	41 f0       	breq	.+16     	; 0x17c6 <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    17b6:	8c ec       	ldi	r24, 0xCC	; 204
    17b8:	61 2f       	mov	r22, r17
    17ba:	0e 94 de 0a 	call	0x15bc	; 0x15bc <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    17be:	84 e4       	ldi	r24, 0x44	; 68
    17c0:	61 2f       	mov	r22, r17
    17c2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    17c6:	12 30       	cpi	r17, 0x02	; 2
    17c8:	69 f0       	breq	.+26     	; 0x17e4 <ds18x20ConvertTemp+0x3a>
    17ca:	13 30       	cpi	r17, 0x03	; 3
    17cc:	18 f4       	brcc	.+6      	; 0x17d4 <ds18x20ConvertTemp+0x2a>
    17ce:	11 30       	cpi	r17, 0x01	; 1
    17d0:	89 f4       	brne	.+34     	; 0x17f4 <ds18x20ConvertTemp+0x4a>
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <ds18x20ConvertTemp+0x34>
    17d4:	13 30       	cpi	r17, 0x03	; 3
    17d6:	49 f0       	breq	.+18     	; 0x17ea <ds18x20ConvertTemp+0x40>
    17d8:	14 30       	cpi	r17, 0x04	; 4
    17da:	61 f4       	brne	.+24     	; 0x17f4 <ds18x20ConvertTemp+0x4a>
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    17de:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    17e0:	21 9a       	sbi	0x04, 1	; 4
    break;
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    17e4:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    17e6:	20 9a       	sbi	0x04, 0	; 4
    break;
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    17ea:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    17ec:	57 9a       	sbi	0x0a, 7	; 10
    break;
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    17f0:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    17f2:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    17f4:	1f 91       	pop	r17
    17f6:	08 95       	ret

000017f8 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	fc 01       	movw	r30, r24
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	23 e0       	ldi	r18, 0x03	; 3
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	2a 95       	dec	r18
    180a:	e1 f7       	brne	.-8      	; 0x1804 <ds18x20GetTemp+0xc>
    180c:	e8 0f       	add	r30, r24
    180e:	f9 1f       	adc	r31, r25
    1810:	e8 5e       	subi	r30, 0xE8	; 232
    1812:	fd 4f       	sbci	r31, 0xFD	; 253
    1814:	40 81       	ld	r20, Z
    1816:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    1818:	9a 01       	movw	r18, r20
    181a:	2f 70       	andi	r18, 0x0F	; 15
    181c:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    181e:	c9 01       	movw	r24, r18
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	a3 e0       	ldi	r26, 0x03	; 3
    1826:	22 0f       	add	r18, r18
    1828:	33 1f       	adc	r19, r19
    182a:	aa 95       	dec	r26
    182c:	e1 f7       	brne	.-8      	; 0x1826 <ds18x20GetTemp+0x2e>
    182e:	28 0f       	add	r18, r24
    1830:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	84 2b       	or	r24, r20
    1838:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    183a:	60 e1       	ldi	r22, 0x10	; 16
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	0e 94 40 0c 	call	0x1880	; 0x1880 <__divmodhi4>
    1842:	ab 01       	movw	r20, r22
    1844:	44 0f       	add	r20, r20
    1846:	55 1f       	adc	r21, r21
    1848:	e3 e0       	ldi	r30, 0x03	; 3
    184a:	66 0f       	add	r22, r22
    184c:	77 1f       	adc	r23, r23
    184e:	ea 95       	dec	r30
    1850:	e1 f7       	brne	.-8      	; 0x184a <ds18x20GetTemp+0x52>
    1852:	46 0f       	add	r20, r22
    1854:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    1856:	64 e0       	ldi	r22, 0x04	; 4
    1858:	35 95       	asr	r19
    185a:	27 95       	ror	r18
    185c:	6a 95       	dec	r22
    185e:	e1 f7       	brne	.-8      	; 0x1858 <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    1860:	42 0f       	add	r20, r18
    1862:	53 1f       	adc	r21, r19
  return ret;
}
    1864:	ca 01       	movw	r24, r20
    1866:	08 95       	ret

00001868 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    1868:	e8 2f       	mov	r30, r24
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	ed 5e       	subi	r30, 0xED	; 237
    186e:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1870:	80 81       	ld	r24, Z
    1872:	08 95       	ret

00001874 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    1874:	e8 2f       	mov	r30, r24
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	ed 5e       	subi	r30, 0xED	; 237
    187a:	fd 4f       	sbci	r31, 0xFD	; 253
    187c:	60 83       	st	Z, r22
}
    187e:	08 95       	ret

00001880 <__divmodhi4>:
    1880:	97 fb       	bst	r25, 7
    1882:	09 2e       	mov	r0, r25
    1884:	07 26       	eor	r0, r23
    1886:	0a d0       	rcall	.+20     	; 0x189c <__divmodhi4_neg1>
    1888:	77 fd       	sbrc	r23, 7
    188a:	04 d0       	rcall	.+8      	; 0x1894 <__divmodhi4_neg2>
    188c:	0c d0       	rcall	.+24     	; 0x18a6 <__udivmodhi4>
    188e:	06 d0       	rcall	.+12     	; 0x189c <__divmodhi4_neg1>
    1890:	00 20       	and	r0, r0
    1892:	1a f4       	brpl	.+6      	; 0x189a <__divmodhi4_exit>

00001894 <__divmodhi4_neg2>:
    1894:	70 95       	com	r23
    1896:	61 95       	neg	r22
    1898:	7f 4f       	sbci	r23, 0xFF	; 255

0000189a <__divmodhi4_exit>:
    189a:	08 95       	ret

0000189c <__divmodhi4_neg1>:
    189c:	f6 f7       	brtc	.-4      	; 0x189a <__divmodhi4_exit>
    189e:	90 95       	com	r25
    18a0:	81 95       	neg	r24
    18a2:	9f 4f       	sbci	r25, 0xFF	; 255
    18a4:	08 95       	ret

000018a6 <__udivmodhi4>:
    18a6:	aa 1b       	sub	r26, r26
    18a8:	bb 1b       	sub	r27, r27
    18aa:	51 e1       	ldi	r21, 0x11	; 17
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <__udivmodhi4_ep>

000018ae <__udivmodhi4_loop>:
    18ae:	aa 1f       	adc	r26, r26
    18b0:	bb 1f       	adc	r27, r27
    18b2:	a6 17       	cp	r26, r22
    18b4:	b7 07       	cpc	r27, r23
    18b6:	10 f0       	brcs	.+4      	; 0x18bc <__udivmodhi4_ep>
    18b8:	a6 1b       	sub	r26, r22
    18ba:	b7 0b       	sbc	r27, r23

000018bc <__udivmodhi4_ep>:
    18bc:	88 1f       	adc	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	5a 95       	dec	r21
    18c2:	a9 f7       	brne	.-22     	; 0x18ae <__udivmodhi4_loop>
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	08 95       	ret

000018ce <__eerd_byte_m328p>:
    18ce:	f9 99       	sbic	0x1f, 1	; 31
    18d0:	fe cf       	rjmp	.-4      	; 0x18ce <__eerd_byte_m328p>
    18d2:	92 bd       	out	0x22, r25	; 34
    18d4:	81 bd       	out	0x21, r24	; 33
    18d6:	f8 9a       	sbi	0x1f, 0	; 31
    18d8:	99 27       	eor	r25, r25
    18da:	80 b5       	in	r24, 0x20	; 32
    18dc:	08 95       	ret

000018de <__eerd_word_m328p>:
    18de:	a8 e1       	ldi	r26, 0x18	; 24
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	42 e0       	ldi	r20, 0x02	; 2
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__eerd_blraw_m328p>

000018ea <__eewr_byte_m328p>:
    18ea:	26 2f       	mov	r18, r22

000018ec <__eewr_r18_m328p>:
    18ec:	f9 99       	sbic	0x1f, 1	; 31
    18ee:	fe cf       	rjmp	.-4      	; 0x18ec <__eewr_r18_m328p>
    18f0:	1f ba       	out	0x1f, r1	; 31
    18f2:	92 bd       	out	0x22, r25	; 34
    18f4:	81 bd       	out	0x21, r24	; 33
    18f6:	20 bd       	out	0x20, r18	; 32
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	fa 9a       	sbi	0x1f, 2	; 31
    18fe:	f9 9a       	sbi	0x1f, 1	; 31
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	08 95       	ret

00001906 <__eewr_word_m328p>:
    1906:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__eewr_byte_m328p>
    190a:	27 2f       	mov	r18, r23
    190c:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__eewr_r18_m328p>

00001910 <__eerd_block_m328p>:
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22

00001914 <__eerd_blraw_m328p>:
    1914:	fc 01       	movw	r30, r24
    1916:	f9 99       	sbic	0x1f, 1	; 31
    1918:	fe cf       	rjmp	.-4      	; 0x1916 <__eerd_blraw_m328p+0x2>
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <__eerd_blraw_m328p+0x14>
    191c:	f2 bd       	out	0x22, r31	; 34
    191e:	e1 bd       	out	0x21, r30	; 33
    1920:	f8 9a       	sbi	0x1f, 0	; 31
    1922:	31 96       	adiw	r30, 0x01	; 1
    1924:	00 b4       	in	r0, 0x20	; 32
    1926:	0d 92       	st	X+, r0
    1928:	41 50       	subi	r20, 0x01	; 1
    192a:	50 40       	sbci	r21, 0x00	; 0
    192c:	b8 f7       	brcc	.-18     	; 0x191c <__eerd_blraw_m328p+0x8>
    192e:	08 95       	ret

00001930 <_exit>:
    1930:	f8 94       	cli

00001932 <__stop_program>:
    1932:	ff cf       	rjmp	.-2      	; 0x1932 <__stop_program>
