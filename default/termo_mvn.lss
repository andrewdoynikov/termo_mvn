
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00001a78  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  008001a6  008001a6  00001bb2  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005a7  00000000  00000000  000028f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001dce  00000000  00000000  00002e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000087a  00000000  00000000  00004c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002248  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  00007728  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000610  00000000  00000000  00007b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014a5  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000147  00000000  00000000  000095dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e7       	ldi	r30, 0x78	; 120
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 35       	cpi	r26, 0x53	; 83
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 30 0a 	call	0x1460	; 0x1460 <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 c8 07 	call	0xf90	; 0xf90 <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
      be:	52 9a       	sbi	0x0a, 2	; 10
      c0:	5a 98       	cbi	0x0b, 2	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 ae 08 	call	0x115c	; 0x115c <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000);  // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 300); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	4c e2       	ldi	r20, 0x2C	; 44
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 0);         // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);    // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 bb 02 	call	0x576	; 0x576 <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 cd 02 	call	0x59a	; 0x59a <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 c4 02 	call	0x588	; 0x588 <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <load_min_temp_2>
  load_type1();
     112:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <load_type1>
  load_type2();
     116:	0e 94 08 03 	call	0x610	; 0x610 <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 4d 0a 	call	0x149a	; 0x149a <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <set_outport>:
  }    
}
//=============================================================================
void set_outport(uint8_t chanel, uint8_t val)
{
  if (chanel == 1) {
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	51 f4       	brne	.+20     	; 0x176 <set_outport+0x18>
    if (val == 1) {
     162:	61 30       	cpi	r22, 0x01	; 1
     164:	21 f4       	brne	.+8      	; 0x16e <set_outport+0x10>
	  OUT_1_1();
     166:	5b 9a       	sbi	0x0b, 3	; 11
	  outs[0] = 1;
     168:	60 93 b1 01 	sts	0x01B1, r22
     16c:	08 95       	ret
	} else {
	  OUT_1_0();
     16e:	5b 98       	cbi	0x0b, 3	; 11
	  outs[0] = 0;
     170:	10 92 b1 01 	sts	0x01B1, r1
     174:	08 95       	ret
	}
  }
  if (chanel == 2) {
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	49 f4       	brne	.+18     	; 0x18c <set_outport+0x2e>
    if (val == 1) {
     17a:	61 30       	cpi	r22, 0x01	; 1
     17c:	21 f4       	brne	.+8      	; 0x186 <set_outport+0x28>
	  OUT_2_1();
     17e:	5a 9a       	sbi	0x0b, 2	; 11
	  outs[1] = 1;
     180:	60 93 b2 01 	sts	0x01B2, r22
     184:	08 95       	ret
	} else {
	  OUT_2_0();
     186:	5a 98       	cbi	0x0b, 2	; 11
	  outs[1] = 0;
     188:	10 92 b2 01 	sts	0x01B2, r1
     18c:	08 95       	ret

0000018e <check_temp>:
	}
  }
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     18e:	1f 93       	push	r17
     190:	18 2f       	mov	r17, r24
  int16_t t = ds18x20GetTemp(chanel);
     192:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
     196:	ac 01       	movw	r20, r24
  if (status[chanel - 1] == T_OTSLED_MAX) {
     198:	21 2f       	mov	r18, r17
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	30 40       	sbci	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	e7 5c       	subi	r30, 0xC7	; 199
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 81       	ld	r24, Z
     1a8:	b9 01       	movw	r22, r18
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	66 0f       	add	r22, r22
     1b0:	77 1f       	adc	r23, r23
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	89 f4       	brne	.+34     	; 0x1d8 <check_temp+0x4a>
 // отслеживаем превышение максимума
    if (t > temps[chanel - 1][T_MAX]) {
     1b6:	67 55       	subi	r22, 0x57	; 87
     1b8:	7e 4f       	sbci	r23, 0xFE	; 254
     1ba:	db 01       	movw	r26, r22
     1bc:	8d 91       	ld	r24, X+
     1be:	9c 91       	ld	r25, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	84 17       	cp	r24, r20
     1c4:	95 07       	cpc	r25, r21
     1c6:	0c f5       	brge	.+66     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MIN;
     1c8:	10 82       	st	Z, r1
      if (types[chanel - 1] == T_HEATER) {
     1ca:	29 5c       	subi	r18, 0xC9	; 201
     1cc:	3e 4f       	sbci	r19, 0xFE	; 254
     1ce:	f9 01       	movw	r30, r18
     1d0:	80 81       	ld	r24, Z
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	99 f4       	brne	.+38     	; 0x1fc <check_temp+0x6e>
     1d6:	15 c0       	rjmp	.+42     	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
	  }
    }
  } else {
   // отслеживаем превышение минимума
    if (t < temps[chanel - 1][T_MIN]) {
     1d8:	67 55       	subi	r22, 0x57	; 87
     1da:	7e 4f       	sbci	r23, 0xFE	; 254
     1dc:	db 01       	movw	r26, r22
     1de:	12 96       	adiw	r26, 0x02	; 2
     1e0:	6d 91       	ld	r22, X+
     1e2:	7c 91       	ld	r23, X
     1e4:	13 97       	sbiw	r26, 0x03	; 3
     1e6:	46 17       	cp	r20, r22
     1e8:	57 07       	cpc	r21, r23
     1ea:	7c f4       	brge	.+30     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MAX;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 83       	st	Z, r24
      if (types[chanel - 1] == T_HEATER) {
     1f0:	29 5c       	subi	r18, 0xC9	; 201
     1f2:	3e 4f       	sbci	r19, 0xFE	; 254
     1f4:	f9 01       	movw	r30, r18
     1f6:	80 81       	ld	r24, Z
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	19 f4       	brne	.+6      	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
     1fc:	81 2f       	mov	r24, r17
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	02 c0       	rjmp	.+4      	; 0x206 <check_temp+0x78>
	  } else {
        set_outport(chanel, 0);
     202:	81 2f       	mov	r24, r17
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
    }
  }
}
     20a:	1f 91       	pop	r17
     20c:	08 95       	ret

0000020e <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     20e:	80 91 a8 01 	lds	r24, 0x01A8
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <DS18x20_scan+0x10>
    dscount--;
     216:	81 50       	subi	r24, 0x01	; 1
     218:	80 93 a8 01 	sts	0x01A8, r24
	return;
     21c:	08 95       	ret
  }
  switch(ds_state) {
     21e:	80 91 b5 01 	lds	r24, 0x01B5
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	b9 f0       	breq	.+46     	; 0x254 <DS18x20_scan+0x46>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	20 f0       	brcs	.+8      	; 0x232 <DS18x20_scan+0x24>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	09 f0       	breq	.+2      	; 0x230 <DS18x20_scan+0x22>
     22e:	59 c0       	rjmp	.+178    	; 0x2e2 <DS18x20_scan+0xd4>
     230:	24 c0       	rjmp	.+72     	; 0x27a <DS18x20_scan+0x6c>
    case 0:
      ds18x20ConvertTemp(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
	  dscount = 10;
     24a:	8a e0       	ldi	r24, 0x0A	; 10
     24c:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	10 c0       	rjmp	.+32     	; 0x274 <DS18x20_scan+0x66>
    break;
    case 1:
      ds18x20ReadStratchPad(1);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
	  dscount = 10;
     26c:	8a e0       	ldi	r24, 0x0A	; 10
     26e:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 2;
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	80 93 b5 01 	sts	0x01B5, r24
    break;
     278:	08 95       	ret
    case 2:
	if (ds18x20GetDevCount(1) == 1) {
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	31 f4       	brne	.+12     	; 0x290 <DS18x20_scan+0x82>
      ds18x20GetTemp(1);
     284:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
      check_temp(1);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
     28e:	04 c0       	rjmp	.+8      	; 0x298 <DS18x20_scan+0x8a>
    } else {
      set_outport(1, 0);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
    }
	if (ds18x20GetDevCount(2) == 1) {
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	39 f4       	brne	.+14     	; 0x2b0 <DS18x20_scan+0xa2>
      ds18x20GetTemp(2);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
      check_temp(2);
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <DS18x20_scan+0xaa>
    } else {
      set_outport(2, 0);
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
    }
	if (ds18x20GetDevCount(3) == 1) {
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	19 f4       	brne	.+6      	; 0x2c8 <DS18x20_scan+0xba>
      ds18x20GetTemp(3);
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
    }
	if (ds18x20GetDevCount(4) == 1) {
     2c8:	84 e0       	ldi	r24, 0x04	; 4
     2ca:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <DS18x20_scan+0xca>
      ds18x20GetTemp(4);
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
    }
	  dscount = SCAN_TIME / 100;
     2d8:	84 e1       	ldi	r24, 0x14	; 20
     2da:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 0;
     2de:	10 92 b5 01 	sts	0x01B5, r1
     2e2:	08 95       	ret

000002e4 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     2e4:	89 3c       	cpi	r24, 0xC9	; 201
     2e6:	29 f0       	breq	.+10     	; 0x2f2 <events_default+0xe>
     2e8:	8c 3c       	cpi	r24, 0xCC	; 204
     2ea:	71 f0       	breq	.+28     	; 0x308 <events_default+0x24>
     2ec:	88 3c       	cpi	r24, 0xC8	; 200
     2ee:	71 f4       	brne	.+28     	; 0x30c <events_default+0x28>
     2f0:	08 c0       	rjmp	.+16     	; 0x302 <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 91 32 01 	lds	r25, 0x0132
     2f8:	91 11       	cpse	r25, r1
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	80 93 32 01 	sts	0x0132, r24
    break;
     300:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     302:	0e 94 38 08 	call	0x1070	; 0x1070 <KBD_scan>
    break;
     306:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     308:	0e 94 07 01 	call	0x20e	; 0x20e <DS18x20_scan>
     30c:	08 95       	ret

0000030e <run_start>:
  MAX7219_setCommaPos(pos + 2,1);
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
     30e:	1f 93       	push	r17
  switch(event) {
     310:	85 36       	cpi	r24, 0x65	; 101
     312:	09 f4       	brne	.+2      	; 0x316 <run_start+0x8>
     314:	b9 c0       	rjmp	.+370    	; 0x488 <run_start+0x17a>
     316:	87 36       	cpi	r24, 0x67	; 103
     318:	09 f4       	brne	.+2      	; 0x31c <run_start+0xe>
     31a:	8f c0       	rjmp	.+286    	; 0x43a <run_start+0x12c>
     31c:	84 36       	cpi	r24, 0x64	; 100
     31e:	09 f0       	breq	.+2      	; 0x322 <run_start+0x14>
     320:	0e c1       	rjmp	.+540    	; 0x53e <run_start+0x230>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	6d e2       	ldi	r22, 0x2D	; 45
     330:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
	  ds_count = 0;
     334:	10 92 a6 01 	sts	0x01A6, r1
      ds18x20IsOnBus(1);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 13 0b 	call	0x1626	; 0x1626 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 13 0b 	call	0x1626	; 0x1626 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	0e 94 13 0b 	call	0x1626	; 0x1626 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	0e 94 13 0b 	call	0x1626	; 0x1626 <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	41 f4       	brne	.+16     	; 0x36a <run_start+0x5c>
     35a:	80 91 a6 01 	lds	r24, 0x01A6
     35e:	8f 5f       	subi	r24, 0xFF	; 255
     360:	80 93 a6 01 	sts	0x01A6, r24
     364:	85 e0       	ldi	r24, 0x05	; 5
     366:	61 e3       	ldi	r22, 0x31	; 49
     368:	02 c0       	rjmp	.+4      	; 0x36e <run_start+0x60>
     36a:	85 e0       	ldi	r24, 0x05	; 5
     36c:	60 e2       	ldi	r22, 0x20	; 32
     36e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	41 f4       	brne	.+16     	; 0x38c <run_start+0x7e>
     37c:	80 91 a6 01 	lds	r24, 0x01A6
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	80 93 a6 01 	sts	0x01A6, r24
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	61 e3       	ldi	r22, 0x31	; 49
     38a:	02 c0       	rjmp	.+4      	; 0x390 <run_start+0x82>
     38c:	86 e0       	ldi	r24, 0x06	; 6
     38e:	60 e2       	ldi	r22, 0x20	; 32
     390:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	41 f4       	brne	.+16     	; 0x3ae <run_start+0xa0>
     39e:	80 91 a6 01 	lds	r24, 0x01A6
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 a6 01 	sts	0x01A6, r24
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	61 e3       	ldi	r22, 0x31	; 49
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <run_start+0xa4>
     3ae:	87 e0       	ldi	r24, 0x07	; 7
     3b0:	60 e2       	ldi	r22, 0x20	; 32
     3b2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	41 f4       	brne	.+16     	; 0x3d0 <run_start+0xc2>
     3c0:	80 91 a6 01 	lds	r24, 0x01A6
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	80 93 a6 01 	sts	0x01A6, r24
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	61 e3       	ldi	r22, 0x31	; 49
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <run_start+0xc6>
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	60 e2       	ldi	r22, 0x20	; 32
     3d4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
	  if (ds_count == 0) {
     3d8:	60 91 a6 01 	lds	r22, 0x01A6
     3dc:	66 23       	and	r22, r22
     3de:	21 f4       	brne	.+8      	; 0x3e8 <run_start+0xda>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     3e0:	84 e6       	ldi	r24, 0x64	; 100
     3e2:	68 eb       	ldi	r22, 0xB8	; 184
     3e4:	7b e0       	ldi	r23, 0x0B	; 11
     3e6:	4b c0       	rjmp	.+150    	; 0x47e <run_start+0x170>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	20 e2       	ldi	r18, 0x20	; 32
     3f0:	0e 94 4d 0a 	call	0x149a	; 0x149a <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	11 f4       	brne	.+4      	; 0x402 <run_start+0xf4>
     3fe:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	19 f4       	brne	.+6      	; 0x412 <run_start+0x104>
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	19 f4       	brne	.+6      	; 0x422 <run_start+0x114>
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	19 f4       	brne	.+6      	; 0x432 <run_start+0x124>
     42c:	84 e0       	ldi	r24, 0x04	; 4
     42e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     432:	87 e6       	ldi	r24, 0x67	; 103
     434:	68 ee       	ldi	r22, 0xE8	; 232
     436:	73 e0       	ldi	r23, 0x03	; 3
     438:	22 c0       	rjmp	.+68     	; 0x47e <run_start+0x170>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	11 f4       	brne	.+4      	; 0x448 <run_start+0x13a>
     444:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	19 f4       	brne	.+6      	; 0x458 <run_start+0x14a>
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	19 f4       	brne	.+6      	; 0x468 <run_start+0x15a>
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	19 f4       	brne	.+6      	; 0x478 <run_start+0x16a>
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	0e 94 37 0c 	call	0x186e	; 0x186e <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     478:	85 e6       	ldi	r24, 0x65	; 101
     47a:	64 e6       	ldi	r22, 0x64	; 100
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    break;
     486:	5d c0       	rjmp	.+186    	; 0x542 <run_start+0x234>
    case EVENT_RUN_MAIN:
	if (ds18x20GetDevCount(1) == 1) {
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     48e:	18 2f       	mov	r17, r24
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	c1 f4       	brne	.+48     	; 0x4c4 <run_start+0x1b6>
	  if (ds18x20GetTemp(1) < temps[0][0]) {
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
     49a:	20 91 a9 01 	lds	r18, 0x01A9
     49e:	30 91 aa 01 	lds	r19, 0x01AA
     4a2:	40 91 37 01 	lds	r20, 0x0137
     4a6:	82 17       	cp	r24, r18
     4a8:	93 07       	cpc	r25, r19
     4aa:	2c f4       	brge	.+10     	; 0x4b6 <run_start+0x1a8>
	    status[0] = T_OTSLED_MAX;
     4ac:	10 93 39 01 	sts	0x0139, r17
		if (types[0] == T_HEATER) set_outport(1, 1); else set_outport(1, 0);
     4b0:	41 30       	cpi	r20, 0x01	; 1
     4b2:	41 f4       	brne	.+16     	; 0x4c4 <run_start+0x1b6>
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <run_start+0x1b0>
	  } else {
	    status[0] = T_OTSLED_MIN;
     4b6:	10 92 39 01 	sts	0x0139, r1
		if (types[0] == T_HEATER) set_outport(1, 0); else set_outport(1, 1);
     4ba:	41 30       	cpi	r20, 0x01	; 1
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <run_start+0x1b6>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <run_start+0x1ba>
	  }
    } else {
      set_outport(1, 0);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	}
	if (ds18x20GetDevCount(2) == 1) {
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     4d2:	18 2f       	mov	r17, r24
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	c1 f4       	brne	.+48     	; 0x508 <run_start+0x1fa>
	  if (ds18x20GetTemp(2) < temps[1][0]) {
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
     4de:	20 91 ad 01 	lds	r18, 0x01AD
     4e2:	30 91 ae 01 	lds	r19, 0x01AE
     4e6:	40 91 38 01 	lds	r20, 0x0138
     4ea:	82 17       	cp	r24, r18
     4ec:	93 07       	cpc	r25, r19
     4ee:	2c f4       	brge	.+10     	; 0x4fa <run_start+0x1ec>
	    status[1] = T_OTSLED_MAX;
     4f0:	10 93 3a 01 	sts	0x013A, r17
		if (types[1] == T_HEATER) set_outport(2, 1); else set_outport(2, 0);
     4f4:	41 30       	cpi	r20, 0x01	; 1
     4f6:	41 f4       	brne	.+16     	; 0x508 <run_start+0x1fa>
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <run_start+0x1f4>
	  } else {
	    status[1] = T_OTSLED_MIN;
     4fa:	10 92 3a 01 	sts	0x013A, r1
		if (types[1] == T_HEATER) set_outport(2, 0); else set_outport(2, 1);
     4fe:	41 30       	cpi	r20, 0x01	; 1
     500:	19 f0       	breq	.+6      	; 0x508 <run_start+0x1fa>
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	02 c0       	rjmp	.+4      	; 0x50c <run_start+0x1fe>
	  }
    } else {
      set_outport(2, 0);
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	}
      MAX7219_clearDisplay();
     510:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     514:	8c ec       	ldi	r24, 0xCC	; 204
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	44 e6       	ldi	r20, 0x64	; 100
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     522:	88 e6       	ldi	r24, 0x68	; 104
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
      SET_STATE(run_main);
     530:	82 eb       	ldi	r24, 0xB2	; 178
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	90 93 3e 01 	sts	0x013E, r25
     538:	80 93 3d 01 	sts	0x013D, r24
    break;
     53c:	02 c0       	rjmp	.+4      	; 0x542 <run_start+0x234>
	default:
	  events_default(event);
     53e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     542:	1f 91       	pop	r17
     544:	08 95       	ret

00000546 <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     546:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__eewr_word_m328p>
}
     550:	08 95       	ret

00000552 <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     552:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     554:	80 e2       	ldi	r24, 0x20	; 32
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__eewr_word_m328p>
}
     55c:	08 95       	ret

0000055e <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     55e:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     560:	82 e1       	ldi	r24, 0x12	; 18
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__eewr_word_m328p>
}
     568:	08 95       	ret

0000056a <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     56a:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     56c:	82 e2       	ldi	r24, 0x22	; 34
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__eewr_word_m328p>
}
     574:	08 95       	ret

00000576 <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     576:	80 e1       	ldi	r24, 0x10	; 16
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     57e:	80 93 a9 01 	sts	0x01A9, r24
     582:	90 93 aa 01 	sts	0x01AA, r25
  return (int16_t)tu;
}
     586:	08 95       	ret

00000588 <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     588:	82 e1       	ldi	r24, 0x12	; 18
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     590:	80 93 ab 01 	sts	0x01AB, r24
     594:	90 93 ac 01 	sts	0x01AC, r25
  return (int16_t)tu;
}
     598:	08 95       	ret

0000059a <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     59a:	80 e2       	ldi	r24, 0x20	; 32
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     5a2:	80 93 ad 01 	sts	0x01AD, r24
     5a6:	90 93 ae 01 	sts	0x01AE, r25
  return (int16_t)tu;
}
     5aa:	08 95       	ret

000005ac <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     5ac:	82 e2       	ldi	r24, 0x22	; 34
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     5b4:	80 93 af 01 	sts	0x01AF, r24
     5b8:	90 93 b0 01 	sts	0x01B0, r25
  return (int16_t)tu;
}
     5bc:	08 95       	ret

000005be <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     5be:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     5c0:	80 e3       	ldi	r24, 0x30	; 48
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eewr_byte_m328p>
}
     5c8:	08 95       	ret

000005ca <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     5ca:	80 e3       	ldi	r24, 0x30	; 48
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__eerd_byte_m328p>
     5d2:	80 93 36 01 	sts	0x0136, r24
  if (brightnes > 15) brightnes = 2;
     5d6:	80 31       	cpi	r24, 0x10	; 16
     5d8:	18 f0       	brcs	.+6      	; 0x5e0 <load_brightnes+0x16>
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	80 93 36 01 	sts	0x0136, r24
  return brightnes;
}
     5e0:	80 91 36 01 	lds	r24, 0x0136
     5e4:	08 95       	ret

000005e6 <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     5e6:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     5e8:	84 e1       	ldi	r24, 0x14	; 20
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eewr_byte_m328p>
}
     5f0:	08 95       	ret

000005f2 <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     5f2:	84 e1       	ldi	r24, 0x14	; 20
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__eerd_byte_m328p>
     5fa:	81 11       	cpse	r24, r1
     5fc:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     5fe:	80 93 37 01 	sts	0x0137, r24
  return t;
}
     602:	08 95       	ret

00000604 <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     604:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     606:	84 e2       	ldi	r24, 0x24	; 36
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eewr_byte_m328p>
}
     60e:	08 95       	ret

00000610 <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     610:	84 e2       	ldi	r24, 0x24	; 36
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__eerd_byte_m328p>
     618:	81 11       	cpse	r24, r1
     61a:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     61c:	80 93 38 01 	sts	0x0138, r24
  return t;
}
     620:	08 95       	ret

00000622 <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     622:	e0 91 b3 01 	lds	r30, 0x01B3
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	e6 5d       	subi	r30, 0xD6	; 214
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
}
     63a:	08 95       	ret

0000063c <run_error>:
  }    
}
//=============================================================================
void run_error(unsigned char event)
{
  switch(event) {
     63c:	8e 31       	cpi	r24, 0x1E	; 30
     63e:	09 f4       	brne	.+2      	; 0x642 <run_error+0x6>
     640:	3e c0       	rjmp	.+124    	; 0x6be <run_error+0x82>
     642:	8f 31       	cpi	r24, 0x1F	; 31
     644:	30 f4       	brcc	.+12     	; 0x652 <run_error+0x16>
     646:	8a 30       	cpi	r24, 0x0A	; 10
     648:	d1 f1       	breq	.+116    	; 0x6be <run_error+0x82>
     64a:	84 31       	cpi	r24, 0x14	; 20
     64c:	09 f0       	breq	.+2      	; 0x650 <run_error+0x14>
     64e:	44 c0       	rjmp	.+136    	; 0x6d8 <run_error+0x9c>
     650:	36 c0       	rjmp	.+108    	; 0x6be <run_error+0x82>
     652:	89 3c       	cpi	r24, 0xC9	; 201
     654:	21 f0       	breq	.+8      	; 0x65e <run_error+0x22>
     656:	8a 3c       	cpi	r24, 0xCA	; 202
     658:	09 f0       	breq	.+2      	; 0x65c <run_error+0x20>
     65a:	3e c0       	rjmp	.+124    	; 0x6d8 <run_error+0x9c>
     65c:	1d c0       	rjmp	.+58     	; 0x698 <run_error+0x5c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 91 32 01 	lds	r25, 0x0132
     664:	91 11       	cpse	r25, r1
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	80 93 32 01 	sts	0x0132, r24
	  if (error_cnt > 0) error_cnt--; else {
     66c:	80 91 35 01 	lds	r24, 0x0135
     670:	88 23       	and	r24, r24
     672:	21 f0       	breq	.+8      	; 0x67c <run_error+0x40>
     674:	81 50       	subi	r24, 0x01	; 1
     676:	80 93 35 01 	sts	0x0135, r24
     67a:	08 95       	ret
        wait_menu = WAIT_MENU_TIME;
     67c:	84 e1       	ldi	r24, 0x14	; 20
     67e:	80 93 34 01 	sts	0x0134, r24
        SET_STATE(run_menu);
     682:	8a ed       	ldi	r24, 0xDA	; 218
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	90 93 3e 01 	sts	0x013E, r25
     68a:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_clearDisplay();
     68e:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        show_menu();
     692:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     696:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 91 33 01 	lds	r25, 0x0133
     69e:	91 11       	cpse	r25, r1
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     6a6:	88 23       	and	r24, r24
     6a8:	21 f0       	breq	.+8      	; 0x6b2 <run_error+0x76>
        MAX7219_printStr(1, "Err ");
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	63 e0       	ldi	r22, 0x03	; 3
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <run_error+0x7c>
	  } else {
        MAX7219_printStr(1, "    ");
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	68 e0       	ldi	r22, 0x08	; 8
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
     6bc:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     6be:	84 e1       	ldi	r24, 0x14	; 20
     6c0:	80 93 34 01 	sts	0x0134, r24
      SET_STATE(run_menu);
     6c4:	8a ed       	ldi	r24, 0xDA	; 218
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	90 93 3e 01 	sts	0x013E, r25
     6cc:	80 93 3d 01 	sts	0x013D, r24
      MAX7219_clearDisplay();
     6d0:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
      show_menu();
     6d4:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     6d8:	08 95       	ret

000006da <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     6da:	8e 31       	cpi	r24, 0x1E	; 30
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <run_set_brightnes+0x6>
     6de:	3f c0       	rjmp	.+126    	; 0x75e <run_set_brightnes+0x84>
     6e0:	8f 31       	cpi	r24, 0x1F	; 31
     6e2:	38 f4       	brcc	.+14     	; 0x6f2 <run_set_brightnes+0x18>
     6e4:	8a 30       	cpi	r24, 0x0A	; 10
     6e6:	09 f4       	brne	.+2      	; 0x6ea <run_set_brightnes+0x10>
     6e8:	54 c0       	rjmp	.+168    	; 0x792 <run_set_brightnes+0xb8>
     6ea:	84 31       	cpi	r24, 0x14	; 20
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <run_set_brightnes+0x16>
     6ee:	5f c0       	rjmp	.+190    	; 0x7ae <run_set_brightnes+0xd4>
     6f0:	3f c0       	rjmp	.+126    	; 0x770 <run_set_brightnes+0x96>
     6f2:	89 3c       	cpi	r24, 0xC9	; 201
     6f4:	21 f0       	breq	.+8      	; 0x6fe <run_set_brightnes+0x24>
     6f6:	8a 3c       	cpi	r24, 0xCA	; 202
     6f8:	09 f0       	breq	.+2      	; 0x6fc <run_set_brightnes+0x22>
     6fa:	59 c0       	rjmp	.+178    	; 0x7ae <run_set_brightnes+0xd4>
     6fc:	18 c0       	rjmp	.+48     	; 0x72e <run_set_brightnes+0x54>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 91 32 01 	lds	r25, 0x0132
     704:	91 11       	cpse	r25, r1
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     70c:	80 91 34 01 	lds	r24, 0x0134
     710:	88 23       	and	r24, r24
     712:	21 f0       	breq	.+8      	; 0x71c <run_set_brightnes+0x42>
     714:	81 50       	subi	r24, 0x01	; 1
     716:	80 93 34 01 	sts	0x0134, r24
     71a:	08 95       	ret
        MAX7219_clearDisplay();
     71c:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     720:	8a ed       	ldi	r24, 0xDA	; 218
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	90 93 3e 01 	sts	0x013E, r25
     728:	80 93 3d 01 	sts	0x013D, r24
     72c:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 91 33 01 	lds	r25, 0x0133
     734:	91 11       	cpse	r25, r1
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     73c:	88 23       	and	r24, r24
     73e:	49 f0       	breq	.+18     	; 0x752 <run_set_brightnes+0x78>
        MAX7219_printNum(4, brightnes, 2, ' ');
     740:	60 91 36 01 	lds	r22, 0x0136
     744:	84 e0       	ldi	r24, 0x04	; 4
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	42 e0       	ldi	r20, 0x02	; 2
     74a:	20 e2       	ldi	r18, 0x20	; 32
     74c:	0e 94 4d 0a 	call	0x149a	; 0x149a <MAX7219_printNum>
     750:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	6d e0       	ldi	r22, 0x0D	; 13
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
     75c:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     75e:	84 e1       	ldi	r24, 0x14	; 20
     760:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes > 0) {
     764:	60 91 36 01 	lds	r22, 0x0136
     768:	66 23       	and	r22, r22
     76a:	19 f1       	breq	.+70     	; 0x7b2 <run_set_brightnes+0xd8>
	    brightnes--;
     76c:	61 50       	subi	r22, 0x01	; 1
     76e:	19 c0       	rjmp	.+50     	; 0x7a2 <run_set_brightnes+0xc8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     770:	80 93 34 01 	sts	0x0134, r24
	  save_brightnes(brightnes);
     774:	80 91 36 01 	lds	r24, 0x0136
     778:	0e 94 df 02 	call	0x5be	; 0x5be <save_brightnes>
      MAX7219_clearDisplay();
     77c:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     780:	8a ed       	ldi	r24, 0xDA	; 218
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	90 93 3e 01 	sts	0x013E, r25
     788:	80 93 3d 01 	sts	0x013D, r24
      show_menu();
     78c:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
    break;
     790:	08 95       	ret
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     792:	84 e1       	ldi	r24, 0x14	; 20
     794:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes < 15) {
     798:	60 91 36 01 	lds	r22, 0x0136
     79c:	6f 30       	cpi	r22, 0x0F	; 15
     79e:	48 f4       	brcc	.+18     	; 0x7b2 <run_set_brightnes+0xd8>
	    brightnes++;
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	60 93 36 01 	sts	0x0136, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
     7ac:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     7ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     7b2:	08 95       	ret

000007b4 <run_menu>:
    break;
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
     7b4:	1f 93       	push	r17
  switch(event) {
     7b6:	8e 31       	cpi	r24, 0x1E	; 30
     7b8:	09 f4       	brne	.+2      	; 0x7bc <run_menu+0x8>
     7ba:	bb c0       	rjmp	.+374    	; 0x932 <__stack+0x33>
     7bc:	8f 31       	cpi	r24, 0x1F	; 31
     7be:	30 f4       	brcc	.+12     	; 0x7cc <run_menu+0x18>
     7c0:	8a 30       	cpi	r24, 0x0A	; 10
     7c2:	81 f1       	breq	.+96     	; 0x824 <run_menu+0x70>
     7c4:	84 31       	cpi	r24, 0x14	; 20
     7c6:	09 f0       	breq	.+2      	; 0x7ca <run_menu+0x16>
     7c8:	c9 c0       	rjmp	.+402    	; 0x95c <__stack+0x5d>
     7ca:	40 c0       	rjmp	.+128    	; 0x84c <run_menu+0x98>
     7cc:	89 36       	cpi	r24, 0x69	; 105
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <run_menu+0x1e>
     7d0:	78 c0       	rjmp	.+240    	; 0x8c2 <run_menu+0x10e>
     7d2:	89 3c       	cpi	r24, 0xC9	; 201
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <run_menu+0x24>
     7d6:	c2 c0       	rjmp	.+388    	; 0x95c <__stack+0x5d>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 91 32 01 	lds	r25, 0x0132
     7de:	91 11       	cpse	r25, r1
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     7e6:	80 91 34 01 	lds	r24, 0x0134
     7ea:	88 23       	and	r24, r24
     7ec:	21 f0       	breq	.+8      	; 0x7f6 <run_menu+0x42>
     7ee:	81 50       	subi	r24, 0x01	; 1
     7f0:	80 93 34 01 	sts	0x0134, r24
     7f4:	0f c0       	rjmp	.+30     	; 0x814 <run_menu+0x60>
        BEEPER_TICK(); 
     7f6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f8:	8f e3       	ldi	r24, 0x3F	; 63
     7fa:	9c e9       	ldi	r25, 0x9C	; 156
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <run_menu+0x48>
     800:	00 c0       	rjmp	.+0      	; 0x802 <run_menu+0x4e>
     802:	00 00       	nop
     804:	40 98       	cbi	0x08, 0	; 8
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     806:	89 e6       	ldi	r24, 0x69	; 105
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     814:	80 91 b3 01 	lds	r24, 0x01B3
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	f1 f1       	breq	.+124    	; 0x898 <run_menu+0xe4>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	6d e0       	ldi	r22, 0x0D	; 13
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	11 c0       	rjmp	.+34     	; 0x846 <run_menu+0x92>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     824:	84 e1       	ldi	r24, 0x14	; 20
     826:	80 93 34 01 	sts	0x0134, r24
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     82a:	80 91 b3 01 	lds	r24, 0x01B3
     82e:	88 23       	and	r24, r24
     830:	11 f0       	breq	.+4      	; 0x836 <run_menu+0x82>
     832:	81 50       	subi	r24, 0x01	; 1
     834:	01 c0       	rjmp	.+2      	; 0x838 <run_menu+0x84>
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	80 93 b3 01 	sts	0x01B3, r24
	  show_menu();
     83c:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
      MAX7219_printStr(5, "    ");
     840:	85 e0       	ldi	r24, 0x05	; 5
     842:	68 e0       	ldi	r22, 0x08	; 8
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
    break;
     84a:	8a c0       	rjmp	.+276    	; 0x960 <__stack+0x61>
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     84c:	80 93 34 01 	sts	0x0134, r24
	  n_edit = 0;
     850:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     854:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
	  if (m_menu == MM_D1) {
     858:	80 91 b3 01 	lds	r24, 0x01B3
     85c:	88 23       	and	r24, r24
     85e:	29 f4       	brne	.+10     	; 0x86a <run_menu+0xb6>
		KBD_set_type(0);
     860:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
        SET_STATE(run_set_1);
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	96 e0       	ldi	r25, 0x06	; 6
     868:	07 c0       	rjmp	.+14     	; 0x878 <run_menu+0xc4>
	  } else if (m_menu == MM_D2) {
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	51 f4       	brne	.+20     	; 0x882 <run_menu+0xce>
		KBD_set_type(0);
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
        SET_STATE(run_set_2);
     874:	88 ed       	ldi	r24, 0xD8	; 216
     876:	95 e0       	ldi	r25, 0x05	; 5
     878:	90 93 3e 01 	sts	0x013E, r25
     87c:	80 93 3d 01 	sts	0x013D, r24
     880:	6f c0       	rjmp	.+222    	; 0x960 <__stack+0x61>
	  } else if (m_menu == MM_BRIGHTNES) {
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	91 f4       	brne	.+36     	; 0x8aa <run_menu+0xf6>
		KBD_set_type(1);
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
        SET_STATE(run_set_brightnes);
     88c:	8d e6       	ldi	r24, 0x6D	; 109
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	90 93 3e 01 	sts	0x013E, r25
     894:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     898:	60 91 36 01 	lds	r22, 0x0136
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	42 e0       	ldi	r20, 0x02	; 2
     8a2:	20 e2       	ldi	r18, 0x20	; 32
     8a4:	0e 94 4d 0a 	call	0x149a	; 0x149a <MAX7219_printNum>
     8a8:	5b c0       	rjmp	.+182    	; 0x960 <__stack+0x61>
	  } else if (m_menu == MM_END) {
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <run_menu+0xfc>
     8ae:	58 c0       	rjmp	.+176    	; 0x960 <__stack+0x61>
		KBD_set_type(1);
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     8b6:	89 e6       	ldi	r24, 0x69	; 105
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	35 c0       	rjmp	.+106    	; 0x92c <__stack+0x2d>
	  }
    break;
    case EVENT_EXIT_MENU:
      MAX7219_clearDisplay();
     8c2:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
	  chanel = 1;
     8c6:	11 e0       	ldi	r17, 0x01	; 1
     8c8:	10 93 3b 01 	sts	0x013B, r17
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
     8d2:	20 91 a9 01 	lds	r18, 0x01A9
     8d6:	30 91 aa 01 	lds	r19, 0x01AA
     8da:	82 17       	cp	r24, r18
     8dc:	93 07       	cpc	r25, r19
     8de:	1c f4       	brge	.+6      	; 0x8e6 <run_menu+0x132>
     8e0:	10 93 39 01 	sts	0x0139, r17
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <run_menu+0x136>
     8e6:	10 92 39 01 	sts	0x0139, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
     8f0:	20 91 ad 01 	lds	r18, 0x01AD
     8f4:	30 91 ae 01 	lds	r19, 0x01AE
     8f8:	82 17       	cp	r24, r18
     8fa:	93 07       	cpc	r25, r19
     8fc:	24 f4       	brge	.+8      	; 0x906 <__stack+0x7>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 3a 01 	sts	0x013A, r24
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
     906:	10 92 3a 01 	sts	0x013A, r1
      check_temp(1);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      check_temp(2);
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      SET_STATE(run_main);
     916:	82 eb       	ldi	r24, 0xB2	; 178
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	90 93 3e 01 	sts	0x013E, r25
     91e:	80 93 3d 01 	sts	0x013D, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	40 ed       	ldi	r20, 0xD0	; 208
     92a:	57 e0       	ldi	r21, 0x07	; 7
     92c:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    break;
     930:	17 c0       	rjmp	.+46     	; 0x960 <__stack+0x61>
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     932:	84 e1       	ldi	r24, 0x14	; 20
     934:	80 93 34 01 	sts	0x0134, r24
      MAX7219_printStr(5, "    ");
     938:	85 e0       	ldi	r24, 0x05	; 5
     93a:	68 e0       	ldi	r22, 0x08	; 8
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     942:	80 91 b3 01 	lds	r24, 0x01B3
     946:	83 30       	cpi	r24, 0x03	; 3
     948:	20 f4       	brcc	.+8      	; 0x952 <__stack+0x53>
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 b3 01 	sts	0x01B3, r24
     950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
     952:	10 92 b3 01 	sts	0x01B3, r1
	  show_menu();
     956:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
    break;
     95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
	default:
	  events_default(event);
     95c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     960:	1f 91       	pop	r17
     962:	08 95       	ret

00000964 <run_main>:
    }
  }
}
//=============================================================================
void run_main(unsigned char event)
{
     964:	df 93       	push	r29
     966:	cf 93       	push	r28
     968:	0f 92       	push	r0
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
  switch(event) {
     96e:	84 31       	cpi	r24, 0x14	; 20
     970:	09 f4       	brne	.+2      	; 0x974 <run_main+0x10>
     972:	83 c0       	rjmp	.+262    	; 0xa7a <run_main+0x116>
     974:	85 31       	cpi	r24, 0x15	; 21
     976:	20 f4       	brcc	.+8      	; 0x980 <run_main+0x1c>
     978:	8a 30       	cpi	r24, 0x0A	; 10
     97a:	09 f0       	breq	.+2      	; 0x97e <run_main+0x1a>
     97c:	91 c0       	rjmp	.+290    	; 0xaa0 <run_main+0x13c>
     97e:	5f c0       	rjmp	.+190    	; 0xa3e <run_main+0xda>
     980:	8e 31       	cpi	r24, 0x1E	; 30
     982:	09 f4       	brne	.+2      	; 0x986 <run_main+0x22>
     984:	5c c0       	rjmp	.+184    	; 0xa3e <run_main+0xda>
     986:	88 36       	cpi	r24, 0x68	; 104
     988:	09 f0       	breq	.+2      	; 0x98c <run_main+0x28>
     98a:	8a c0       	rjmp	.+276    	; 0xaa0 <run_main+0x13c>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     98c:	80 91 3b 01 	lds	r24, 0x013B
     990:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	e1 f5       	brne	.+120    	; 0xa10 <run_main+0xac>
	    MAX7219_printChar(3, 'd');
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	64 e6       	ldi	r22, 0x64	; 100
     99c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     9a0:	60 91 3b 01 	lds	r22, 0x013B
     9a4:	60 5d       	subi	r22, 0xD0	; 208
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     9ac:	80 91 3b 01 	lds	r24, 0x013B
     9b0:	0e 94 9e 0c 	call	0x193c	; 0x193c <ds18x20GetTemp>
     9b4:	bc 01       	movw	r22, r24
     9b6:	85 e0       	ldi	r24, 0x05	; 5
     9b8:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     9bc:	e0 91 3b 01 	lds	r30, 0x013B
     9c0:	e3 30       	cpi	r30, 0x03	; 3
     9c2:	a8 f4       	brcc	.+42     	; 0x9ee <run_main+0x8a>
		  if (types[chanel - 1]) {
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	ea 5c       	subi	r30, 0xCA	; 202
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	80 81       	ld	r24, Z
     9cc:	88 23       	and	r24, r24
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <run_main+0x72>
	        MAX7219_printChar(1, 'H');
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	68 e4       	ldi	r22, 0x48	; 72
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <run_main+0x76>
		  } else {
	        MAX7219_printChar(1, 'F');
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	66 e4       	ldi	r22, 0x46	; 70
     9da:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
		  }
          MAX7219_setCommaPos(1, outs[chanel - 1]);
     9de:	e0 91 3b 01 	lds	r30, 0x013B
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	e0 55       	subi	r30, 0x50	; 80
     9e6:	fe 4f       	sbci	r31, 0xFE	; 254
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	60 81       	ld	r22, Z
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <run_main+0x96>
		} else {
	      MAX7219_printChar(1, ' ');
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	60 e2       	ldi	r22, 0x20	; 32
     9f2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     9fe:	87 e0       	ldi	r24, 0x07	; 7
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     a06:	84 e0       	ldi	r24, 0x04	; 4
     a08:	60 91 a7 01 	lds	r22, 0x01A7
     a0c:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
	  }
      if (!one_sensor_flag) {
     a10:	80 91 a7 01 	lds	r24, 0x01A7
     a14:	88 23       	and	r24, r24
     a16:	49 f4       	brne	.+18     	; 0xa2a <run_main+0xc6>
        if (chanel < 4) {
     a18:	80 91 3b 01 	lds	r24, 0x013B
     a1c:	84 30       	cpi	r24, 0x04	; 4
     a1e:	10 f4       	brcc	.+4      	; 0xa24 <run_main+0xc0>
          chanel++; 
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <run_main+0xc2>
	    } else { 
	      chanel = 1;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 3b 01 	sts	0x013B, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     a2a:	80 91 3b 01 	lds	r24, 0x013B
     a2e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <ds18x20GetDevCount>
     a32:	88 23       	and	r24, r24
     a34:	d1 f0       	breq	.+52     	; 0xa6a <run_main+0x106>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     a36:	88 e6       	ldi	r24, 0x68	; 104
     a38:	60 ed       	ldi	r22, 0xD0	; 208
     a3a:	77 e0       	ldi	r23, 0x07	; 7
     a3c:	19 c0       	rjmp	.+50     	; 0xa70 <run_main+0x10c>
	  }
    break;
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     a3e:	88 e6       	ldi	r24, 0x68	; 104
     a40:	0e 94 33 09 	call	0x1266	; 0x1266 <RTOS_deleteTask>
      one_sensor_flag = !one_sensor_flag;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 91 a7 01 	lds	r25, 0x01A7
     a4a:	91 11       	cpse	r25, r1
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	80 93 a7 01 	sts	0x01A7, r24
	  if (one_sensor_flag) {
     a52:	88 23       	and	r24, r24
     a54:	51 f0       	breq	.+20     	; 0xa6a <run_main+0x106>
	    if (chanel > 1) chanel--; else chanel = ds_count;
     a56:	80 91 3b 01 	lds	r24, 0x013B
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <run_main+0xfe>
     a5e:	81 50       	subi	r24, 0x01	; 1
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <run_main+0x102>
     a62:	80 91 a6 01 	lds	r24, 0x01A6
     a66:	80 93 3b 01 	sts	0x013B, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     a6a:	88 e6       	ldi	r24, 0x68	; 104
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    break;
     a78:	15 c0       	rjmp	.+42     	; 0xaa4 <run_main+0x140>
    case EVENT_KEY_SET:
	  m_menu = MM_D1;
     a7a:	10 92 b3 01 	sts	0x01B3, r1
	  n_edit = 0;
     a7e:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     a82:	89 83       	std	Y+1, r24	; 0x01
     a84:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     a88:	2a ed       	ldi	r18, 0xDA	; 218
     a8a:	33 e0       	ldi	r19, 0x03	; 3
     a8c:	30 93 3e 01 	sts	0x013E, r19
     a90:	20 93 3d 01 	sts	0x013D, r18
      wait_menu = WAIT_MENU_TIME;
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	80 93 34 01 	sts	0x0134, r24
	  show_menu();
     a9a:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
    break;
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <run_main+0x140>
	default:
	  events_default(event);
     aa0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     aa4:	0f 90       	pop	r0
     aa6:	cf 91       	pop	r28
     aa8:	df 91       	pop	r29
     aaa:	08 95       	ret

00000aac <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     aac:	1f 93       	push	r17
     aae:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     ab0:	80 91 b4 01 	lds	r24, 0x01B4
     ab4:	88 23       	and	r24, r24
     ab6:	61 f5       	brne	.+88     	; 0xb10 <show_set_temp+0x64>
    if (blink05) {
     ab8:	80 91 33 01 	lds	r24, 0x0133
     abc:	88 23       	and	r24, r24
     abe:	91 f0       	breq	.+36     	; 0xae4 <show_set_temp+0x38>
      print_temperature(1, temps[temp][0]);
     ac0:	e1 2f       	mov	r30, r17
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	e7 55       	subi	r30, 0x57	; 87
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	60 81       	ld	r22, Z
     ad2:	71 81       	ldd	r23, Z+1	; 0x01
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <show_set_temp+0x42>
    } else {
      MAX7219_printStr(1, "    ");
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	68 e0       	ldi	r22, 0x08	; 8
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     aee:	e1 2f       	mov	r30, r17
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	e7 55       	subi	r30, 0x57	; 87
     afc:	fe 4f       	sbci	r31, 0xFE	; 254
     afe:	62 81       	ldd	r22, Z+2	; 0x02
     b00:	73 81       	ldd	r23, Z+3	; 0x03
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     b08:	87 e0       	ldi	r24, 0x07	; 7
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     b10:	80 91 b4 01 	lds	r24, 0x01B4
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	61 f5       	brne	.+88     	; 0xb70 <show_set_temp+0xc4>
    if (blink05) {
     b18:	80 91 33 01 	lds	r24, 0x0133
     b1c:	88 23       	and	r24, r24
     b1e:	91 f0       	breq	.+36     	; 0xb44 <show_set_temp+0x98>
      print_temperature(5, temps[temp][1]);
     b20:	e1 2f       	mov	r30, r17
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	e7 55       	subi	r30, 0x57	; 87
     b2e:	fe 4f       	sbci	r31, 0xFE	; 254
     b30:	62 81       	ldd	r22, Z+2	; 0x02
     b32:	73 81       	ldd	r23, Z+3	; 0x03
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     b3a:	87 e0       	ldi	r24, 0x07	; 7
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
     b42:	05 c0       	rjmp	.+10     	; 0xb4e <show_set_temp+0xa2>
    } else {
      MAX7219_printStr(5, "    ");
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	68 e0       	ldi	r22, 0x08	; 8
     b48:	71 e0       	ldi	r23, 0x01	; 1
     b4a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     b4e:	e1 2f       	mov	r30, r17
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e7 55       	subi	r30, 0x57	; 87
     b5c:	fe 4f       	sbci	r31, 0xFE	; 254
     b5e:	60 81       	ld	r22, Z
     b60:	71 81       	ldd	r23, Z+1	; 0x01
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	0e 94 02 0b 	call	0x1604	; 0x1604 <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     b70:	80 91 b4 01 	lds	r24, 0x01B4
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	d1 f4       	brne	.+52     	; 0xbac <show_set_temp+0x100>
    MAX7219_printStr(1, "out-");
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	61 e1       	ldi	r22, 0x11	; 17
     b7c:	71 e0       	ldi	r23, 0x01	; 1
     b7e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <MAX7219_printStr>
    if (blink05) {
     b82:	80 91 33 01 	lds	r24, 0x0133
     b86:	88 23       	and	r24, r24
     b88:	69 f0       	breq	.+26     	; 0xba4 <show_set_temp+0xf8>
	  if (types[temp]) MAX7219_printChar(5, 'H'); else MAX7219_printChar(5, 'F');
     b8a:	e1 2f       	mov	r30, r17
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	e9 5c       	subi	r30, 0xC9	; 201
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 81       	ld	r24, Z
     b94:	88 23       	and	r24, r24
     b96:	19 f0       	breq	.+6      	; 0xb9e <show_set_temp+0xf2>
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	68 e4       	ldi	r22, 0x48	; 72
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <show_set_temp+0xfc>
     b9e:	85 e0       	ldi	r24, 0x05	; 5
     ba0:	66 e4       	ldi	r22, 0x46	; 70
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <show_set_temp+0xfc>
    } else {
	  MAX7219_printChar(5, ' ');
     ba4:	85 e0       	ldi	r24, 0x05	; 5
     ba6:	60 e2       	ldi	r22, 0x20	; 32
     ba8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MAX7219_printChar>
	}
  }
}
     bac:	1f 91       	pop	r17
     bae:	08 95       	ret

00000bb0 <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     bb0:	8e 31       	cpi	r24, 0x1E	; 30
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <run_set_2+0x6>
     bb4:	3e c0       	rjmp	.+124    	; 0xc32 <run_set_2+0x82>
     bb6:	8f 31       	cpi	r24, 0x1F	; 31
     bb8:	38 f4       	brcc	.+14     	; 0xbc8 <run_set_2+0x18>
     bba:	8a 30       	cpi	r24, 0x0A	; 10
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <run_set_2+0x10>
     bbe:	b8 c0       	rjmp	.+368    	; 0xd30 <run_set_2+0x180>
     bc0:	84 31       	cpi	r24, 0x14	; 20
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <run_set_2+0x16>
     bc4:	ea c0       	rjmp	.+468    	; 0xd9a <run_set_2+0x1ea>
     bc6:	58 c0       	rjmp	.+176    	; 0xc78 <run_set_2+0xc8>
     bc8:	89 3c       	cpi	r24, 0xC9	; 201
     bca:	31 f0       	breq	.+12     	; 0xbd8 <run_set_2+0x28>
     bcc:	8a 3c       	cpi	r24, 0xCA	; 202
     bce:	49 f1       	breq	.+82     	; 0xc22 <run_set_2+0x72>
     bd0:	89 36       	cpi	r24, 0x69	; 105
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <run_set_2+0x26>
     bd4:	e2 c0       	rjmp	.+452    	; 0xd9a <run_set_2+0x1ea>
     bd6:	6d c0       	rjmp	.+218    	; 0xcb2 <run_set_2+0x102>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 91 32 01 	lds	r25, 0x0132
     bde:	91 11       	cpse	r25, r1
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     be6:	80 91 34 01 	lds	r24, 0x0134
     bea:	88 23       	and	r24, r24
     bec:	21 f0       	breq	.+8      	; 0xbf6 <run_set_2+0x46>
     bee:	81 50       	subi	r24, 0x01	; 1
     bf0:	80 93 34 01 	sts	0x0134, r24
     bf4:	08 95       	ret
        BEEPER_TICK(); 
     bf6:	40 9a       	sbi	0x08, 0	; 8
     bf8:	8f e3       	ldi	r24, 0x3F	; 63
     bfa:	9c e9       	ldi	r25, 0x9C	; 156
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <run_set_2+0x4c>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <run_set_2+0x52>
     c02:	00 00       	nop
     c04:	40 98       	cbi	0x08, 0	; 8
	    KBD_set_type(1);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
        MAX7219_clearDisplay();
     c0c:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     c10:	8a ed       	ldi	r24, 0xDA	; 218
     c12:	93 e0       	ldi	r25, 0x03	; 3
     c14:	90 93 3e 01 	sts	0x013E, r25
     c18:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     c1c:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     c20:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 91 33 01 	lds	r25, 0x0133
     c28:	91 11       	cpse	r25, r1
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	80 93 33 01 	sts	0x0133, r24
     c30:	b0 c0       	rjmp	.+352    	; 0xd92 <run_set_2+0x1e2>
	  show_set_temp(1);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     c32:	84 e1       	ldi	r24, 0x14	; 20
     c34:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     c3e:	80 91 b4 01 	lds	r24, 0x01B4
     c42:	88 23       	and	r24, r24
     c44:	59 f4       	brne	.+22     	; 0xc5c <run_set_2+0xac>
        if (temps[1][0] > -550) {
     c46:	80 91 ad 01 	lds	r24, 0x01AD
     c4a:	90 91 ae 01 	lds	r25, 0x01AE
     c4e:	2d ef       	ldi	r18, 0xFD	; 253
     c50:	8b 3d       	cpi	r24, 0xDB	; 219
     c52:	92 07       	cpc	r25, r18
     c54:	0c f4       	brge	.+2      	; 0xc58 <run_set_2+0xa8>
     c56:	9d c0       	rjmp	.+314    	; 0xd92 <run_set_2+0x1e2>
		  temps[1][0]--;
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	7d c0       	rjmp	.+250    	; 0xd56 <run_set_2+0x1a6>
		}
	  }
	  if (n_edit == 1) {
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	09 f0       	breq	.+2      	; 0xc62 <run_set_2+0xb2>
     c60:	8f c0       	rjmp	.+286    	; 0xd80 <run_set_2+0x1d0>
        if (temps[1][1] > -550) {
     c62:	80 91 af 01 	lds	r24, 0x01AF
     c66:	90 91 b0 01 	lds	r25, 0x01B0
     c6a:	2d ef       	ldi	r18, 0xFD	; 253
     c6c:	8b 3d       	cpi	r24, 0xDB	; 219
     c6e:	92 07       	cpc	r25, r18
     c70:	0c f4       	brge	.+2      	; 0xc74 <run_set_2+0xc4>
     c72:	8f c0       	rjmp	.+286    	; 0xd92 <run_set_2+0x1e2>
		  temps[1][1]--;
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	7f c0       	rjmp	.+254    	; 0xd76 <run_set_2+0x1c6>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     c78:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     c7c:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     c80:	80 91 b4 01 	lds	r24, 0x01B4
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	20 f4       	brcc	.+8      	; 0xc90 <run_set_2+0xe0>
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	80 93 b4 01 	sts	0x01B4, r24
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <run_set_2+0xee>
     c90:	89 e6       	ldi	r24, 0x69	; 105
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     c9e:	80 91 b4 01 	lds	r24, 0x01B4
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	11 f4       	brne	.+4      	; 0xcaa <run_set_2+0xfa>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <run_set_2+0xfc>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
     cb0:	70 c0       	rjmp	.+224    	; 0xd92 <run_set_2+0x1e2>
	  show_set_temp(1);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     cb2:	84 e1       	ldi	r24, 0x14	; 20
     cb4:	80 93 34 01 	sts	0x0134, r24
	  if (temps[1][0] > temps[1][1]) {
     cb8:	20 91 ad 01 	lds	r18, 0x01AD
     cbc:	30 91 ae 01 	lds	r19, 0x01AE
     cc0:	80 91 af 01 	lds	r24, 0x01AF
     cc4:	90 91 b0 01 	lds	r25, 0x01B0
     cc8:	82 17       	cp	r24, r18
     cca:	93 07       	cpc	r25, r19
     ccc:	f4 f4       	brge	.+60     	; 0xd0a <run_set_2+0x15a>
        MAX7219_clearDisplay();
     cce:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     cd2:	8a ed       	ldi	r24, 0xDA	; 218
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	90 93 3e 01 	sts	0x013E, r25
     cda:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_2(temps[1][0]);
     cde:	80 91 ad 01 	lds	r24, 0x01AD
     ce2:	90 91 ae 01 	lds	r25, 0x01AE
     ce6:	0e 94 a9 02 	call	0x552	; 0x552 <save_max_temp_2>
        save_min_temp_2(temps[1][1]);
     cea:	80 91 af 01 	lds	r24, 0x01AF
     cee:	90 91 b0 01 	lds	r25, 0x01B0
     cf2:	0e 94 b5 02 	call	0x56a	; 0x56a <save_min_temp_2>
	    save_type_2(types[1]);
     cf6:	80 91 38 01 	lds	r24, 0x0138
     cfa:	0e 94 02 03 	call	0x604	; 0x604 <save_type_2>
        show_menu();
     cfe:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
	    KBD_set_type(1);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
     d08:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     d0a:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        SET_STATE(run_error);
     d0e:	8e e1       	ldi	r24, 0x1E	; 30
     d10:	93 e0       	ldi	r25, 0x03	; 3
     d12:	90 93 3e 01 	sts	0x013E, r25
     d16:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     d1a:	85 e0       	ldi	r24, 0x05	; 5
     d1c:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     d20:	8a ec       	ldi	r24, 0xCA	; 202
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	44 ef       	ldi	r20, 0xF4	; 244
     d28:	51 e0       	ldi	r21, 0x01	; 1
     d2a:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
     d2e:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     d30:	84 e1       	ldi	r24, 0x14	; 20
     d32:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     d3c:	80 91 b4 01 	lds	r24, 0x01B4
     d40:	88 23       	and	r24, r24
     d42:	71 f4       	brne	.+28     	; 0xd60 <run_set_2+0x1b0>
        if (temps[1][0] < 790) {
     d44:	80 91 ad 01 	lds	r24, 0x01AD
     d48:	90 91 ae 01 	lds	r25, 0x01AE
     d4c:	23 e0       	ldi	r18, 0x03	; 3
     d4e:	86 31       	cpi	r24, 0x16	; 22
     d50:	92 07       	cpc	r25, r18
     d52:	fc f4       	brge	.+62     	; 0xd92 <run_set_2+0x1e2>
		  temps[1][0]++;
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 ae 01 	sts	0x01AE, r25
     d5a:	80 93 ad 01 	sts	0x01AD, r24
     d5e:	19 c0       	rjmp	.+50     	; 0xd92 <run_set_2+0x1e2>
		}
	  }
	  if (n_edit == 1) {
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	71 f4       	brne	.+28     	; 0xd80 <run_set_2+0x1d0>
        if (temps[1][1] < 790) {
     d64:	80 91 af 01 	lds	r24, 0x01AF
     d68:	90 91 b0 01 	lds	r25, 0x01B0
     d6c:	23 e0       	ldi	r18, 0x03	; 3
     d6e:	86 31       	cpi	r24, 0x16	; 22
     d70:	92 07       	cpc	r25, r18
     d72:	7c f4       	brge	.+30     	; 0xd92 <run_set_2+0x1e2>
		  temps[1][1]++;
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	90 93 b0 01 	sts	0x01B0, r25
     d7a:	80 93 af 01 	sts	0x01AF, r24
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <run_set_2+0x1e2>
		}
	  }
	  if (n_edit == 2) {
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	39 f4       	brne	.+14     	; 0xd92 <run_set_2+0x1e2>
        types[1] = !types[1];
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 91 38 01 	lds	r25, 0x0138
     d8a:	91 11       	cpse	r25, r1
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	80 93 38 01 	sts	0x0138, r24
	  }
	  show_set_temp(1);
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	0e 94 56 05 	call	0xaac	; 0xaac <show_set_temp>
    break;
     d98:	08 95       	ret
	default:
	  events_default(event);
     d9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     d9e:	08 95       	ret

00000da0 <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     da0:	8e 31       	cpi	r24, 0x1E	; 30
     da2:	09 f4       	brne	.+2      	; 0xda6 <run_set_1+0x6>
     da4:	3e c0       	rjmp	.+124    	; 0xe22 <run_set_1+0x82>
     da6:	8f 31       	cpi	r24, 0x1F	; 31
     da8:	38 f4       	brcc	.+14     	; 0xdb8 <run_set_1+0x18>
     daa:	8a 30       	cpi	r24, 0x0A	; 10
     dac:	09 f4       	brne	.+2      	; 0xdb0 <run_set_1+0x10>
     dae:	b8 c0       	rjmp	.+368    	; 0xf20 <run_set_1+0x180>
     db0:	84 31       	cpi	r24, 0x14	; 20
     db2:	09 f0       	breq	.+2      	; 0xdb6 <run_set_1+0x16>
     db4:	ea c0       	rjmp	.+468    	; 0xf8a <run_set_1+0x1ea>
     db6:	58 c0       	rjmp	.+176    	; 0xe68 <run_set_1+0xc8>
     db8:	89 3c       	cpi	r24, 0xC9	; 201
     dba:	31 f0       	breq	.+12     	; 0xdc8 <run_set_1+0x28>
     dbc:	8a 3c       	cpi	r24, 0xCA	; 202
     dbe:	49 f1       	breq	.+82     	; 0xe12 <run_set_1+0x72>
     dc0:	89 36       	cpi	r24, 0x69	; 105
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <run_set_1+0x26>
     dc4:	e2 c0       	rjmp	.+452    	; 0xf8a <run_set_1+0x1ea>
     dc6:	6d c0       	rjmp	.+218    	; 0xea2 <run_set_1+0x102>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 91 32 01 	lds	r25, 0x0132
     dce:	91 11       	cpse	r25, r1
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     dd6:	80 91 34 01 	lds	r24, 0x0134
     dda:	88 23       	and	r24, r24
     ddc:	21 f0       	breq	.+8      	; 0xde6 <run_set_1+0x46>
     dde:	81 50       	subi	r24, 0x01	; 1
     de0:	80 93 34 01 	sts	0x0134, r24
     de4:	08 95       	ret
        BEEPER_TICK(); 
     de6:	40 9a       	sbi	0x08, 0	; 8
     de8:	8f e3       	ldi	r24, 0x3F	; 63
     dea:	9c e9       	ldi	r25, 0x9C	; 156
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <run_set_1+0x4c>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <run_set_1+0x52>
     df2:	00 00       	nop
     df4:	40 98       	cbi	0x08, 0	; 8
	    KBD_set_type(1);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
        MAX7219_clearDisplay();
     dfc:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     e00:	8a ed       	ldi	r24, 0xDA	; 218
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	90 93 3e 01 	sts	0x013E, r25
     e08:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     e0c:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     e10:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 91 33 01 	lds	r25, 0x0133
     e18:	91 11       	cpse	r25, r1
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	80 93 33 01 	sts	0x0133, r24
     e20:	b0 c0       	rjmp	.+352    	; 0xf82 <run_set_1+0x1e2>
	  show_set_temp(0);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     e22:	84 e1       	ldi	r24, 0x14	; 20
     e24:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     e2e:	80 91 b4 01 	lds	r24, 0x01B4
     e32:	88 23       	and	r24, r24
     e34:	59 f4       	brne	.+22     	; 0xe4c <run_set_1+0xac>
        if (temps[0][0] > -550) {
     e36:	80 91 a9 01 	lds	r24, 0x01A9
     e3a:	90 91 aa 01 	lds	r25, 0x01AA
     e3e:	2d ef       	ldi	r18, 0xFD	; 253
     e40:	8b 3d       	cpi	r24, 0xDB	; 219
     e42:	92 07       	cpc	r25, r18
     e44:	0c f4       	brge	.+2      	; 0xe48 <run_set_1+0xa8>
     e46:	9d c0       	rjmp	.+314    	; 0xf82 <run_set_1+0x1e2>
		  temps[0][0]--;
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	7d c0       	rjmp	.+250    	; 0xf46 <run_set_1+0x1a6>
		}
	  }
	  if (n_edit == 1) {
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <run_set_1+0xb2>
     e50:	8f c0       	rjmp	.+286    	; 0xf70 <run_set_1+0x1d0>
        if (temps[0][1] > -550) {
     e52:	80 91 ab 01 	lds	r24, 0x01AB
     e56:	90 91 ac 01 	lds	r25, 0x01AC
     e5a:	2d ef       	ldi	r18, 0xFD	; 253
     e5c:	8b 3d       	cpi	r24, 0xDB	; 219
     e5e:	92 07       	cpc	r25, r18
     e60:	0c f4       	brge	.+2      	; 0xe64 <run_set_1+0xc4>
     e62:	8f c0       	rjmp	.+286    	; 0xf82 <run_set_1+0x1e2>
		  temps[0][1]--;
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	7f c0       	rjmp	.+254    	; 0xf66 <run_set_1+0x1c6>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     e68:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     e6c:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     e70:	80 91 b4 01 	lds	r24, 0x01B4
     e74:	82 30       	cpi	r24, 0x02	; 2
     e76:	20 f4       	brcc	.+8      	; 0xe80 <run_set_1+0xe0>
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	80 93 b4 01 	sts	0x01B4, r24
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <run_set_1+0xee>
     e80:	89 e6       	ldi	r24, 0x69	; 105
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     e8e:	80 91 b4 01 	lds	r24, 0x01B4
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	11 f4       	brne	.+4      	; 0xe9a <run_set_1+0xfa>
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <run_set_1+0xfc>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
     ea0:	70 c0       	rjmp	.+224    	; 0xf82 <run_set_1+0x1e2>
	  show_set_temp(0);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     ea2:	84 e1       	ldi	r24, 0x14	; 20
     ea4:	80 93 34 01 	sts	0x0134, r24
	  if (temps[0][0] > temps[0][1]) {
     ea8:	20 91 a9 01 	lds	r18, 0x01A9
     eac:	30 91 aa 01 	lds	r19, 0x01AA
     eb0:	80 91 ab 01 	lds	r24, 0x01AB
     eb4:	90 91 ac 01 	lds	r25, 0x01AC
     eb8:	82 17       	cp	r24, r18
     eba:	93 07       	cpc	r25, r19
     ebc:	f4 f4       	brge	.+60     	; 0xefa <run_set_1+0x15a>
        MAX7219_clearDisplay();
     ebe:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     ec2:	8a ed       	ldi	r24, 0xDA	; 218
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	90 93 3e 01 	sts	0x013E, r25
     eca:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_1(temps[0][0]);
     ece:	80 91 a9 01 	lds	r24, 0x01A9
     ed2:	90 91 aa 01 	lds	r25, 0x01AA
     ed6:	0e 94 a3 02 	call	0x546	; 0x546 <save_max_temp_1>
        save_min_temp_1(temps[0][1]);
     eda:	80 91 ab 01 	lds	r24, 0x01AB
     ede:	90 91 ac 01 	lds	r25, 0x01AC
     ee2:	0e 94 af 02 	call	0x55e	; 0x55e <save_min_temp_1>
	    save_type_1(types[0]);
     ee6:	80 91 37 01 	lds	r24, 0x0137
     eea:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <save_type_1>
        show_menu();
     eee:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
	    KBD_set_type(1);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <KBD_set_type>
     ef8:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     efa:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
        SET_STATE(run_error);
     efe:	8e e1       	ldi	r24, 0x1E	; 30
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	90 93 3e 01 	sts	0x013E, r25
     f06:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     f0a:	85 e0       	ldi	r24, 0x05	; 5
     f0c:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     f10:	8a ec       	ldi	r24, 0xCA	; 202
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	44 ef       	ldi	r20, 0xF4	; 244
     f18:	51 e0       	ldi	r21, 0x01	; 1
     f1a:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
     f1e:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     f20:	84 e1       	ldi	r24, 0x14	; 20
     f22:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     f2c:	80 91 b4 01 	lds	r24, 0x01B4
     f30:	88 23       	and	r24, r24
     f32:	71 f4       	brne	.+28     	; 0xf50 <run_set_1+0x1b0>
        if (temps[0][0] < 790) {
     f34:	80 91 a9 01 	lds	r24, 0x01A9
     f38:	90 91 aa 01 	lds	r25, 0x01AA
     f3c:	23 e0       	ldi	r18, 0x03	; 3
     f3e:	86 31       	cpi	r24, 0x16	; 22
     f40:	92 07       	cpc	r25, r18
     f42:	fc f4       	brge	.+62     	; 0xf82 <run_set_1+0x1e2>
		  temps[0][0]++;
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	90 93 aa 01 	sts	0x01AA, r25
     f4a:	80 93 a9 01 	sts	0x01A9, r24
     f4e:	19 c0       	rjmp	.+50     	; 0xf82 <run_set_1+0x1e2>
		}
	  }
	  if (n_edit == 1) {
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	71 f4       	brne	.+28     	; 0xf70 <run_set_1+0x1d0>
        if (temps[0][1] < 790) {
     f54:	80 91 ab 01 	lds	r24, 0x01AB
     f58:	90 91 ac 01 	lds	r25, 0x01AC
     f5c:	23 e0       	ldi	r18, 0x03	; 3
     f5e:	86 31       	cpi	r24, 0x16	; 22
     f60:	92 07       	cpc	r25, r18
     f62:	7c f4       	brge	.+30     	; 0xf82 <run_set_1+0x1e2>
		  temps[0][1]++;
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	90 93 ac 01 	sts	0x01AC, r25
     f6a:	80 93 ab 01 	sts	0x01AB, r24
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <run_set_1+0x1e2>
		}
	  }
	  if (n_edit == 2) {
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	39 f4       	brne	.+14     	; 0xf82 <run_set_1+0x1e2>
        types[0] = !types[0];
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 91 37 01 	lds	r25, 0x0137
     f7a:	91 11       	cpse	r25, r1
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	80 93 37 01 	sts	0x0137, r24
	  }
	  show_set_temp(0);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	0e 94 56 05 	call	0xaac	; 0xaac <show_set_temp>
    break;
     f88:	08 95       	ret
	default:
	  events_default(event);
     f8a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     f8e:	08 95       	ret

00000f90 <KBD_init>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_PLUS) &= ~BUT_PLUS_LINE;
     f90:	54 98       	cbi	0x0a, 4	; 10
  PORT(BUT_PLUS) |= BUT_PLUS_LINE;
     f92:	5c 9a       	sbi	0x0b, 4	; 11
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     f94:	55 98       	cbi	0x0a, 5	; 10
  PORT(BUT_SET) |= BUT_SET_LINE;
     f96:	5d 9a       	sbi	0x0b, 5	; 11
  DDR(BUT_MINUS) &= ~BUT_MINUS_LINE;
     f98:	56 98       	cbi	0x0a, 6	; 10
  PORT(BUT_MINUS) |= BUT_MINUS_LINE;
     f9a:	5e 9a       	sbi	0x0b, 6	; 11
  kbd_type = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 3c 01 	sts	0x013C, r24
}
     fa2:	08 95       	ret

00000fa4 <KBD_set_type>:
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     fa4:	80 93 3c 01 	sts	0x013C, r24
}
     fa8:	08 95       	ret

00000faa <debounce_sw_plus>:
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
     faa:	80 91 ba 01 	lds	r24, 0x01BA
     fae:	90 91 bb 01 	lds	r25, 0x01BB
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	90 6e       	ori	r25, 0xE0	; 224
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	4c 99       	sbic	0x09, 4	; 9
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <debounce_sw_plus+0x1a>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	82 2b       	or	r24, r18
     fc6:	93 2b       	or	r25, r19
     fc8:	90 93 bb 01 	sts	0x01BB, r25
     fcc:	80 93 ba 01 	sts	0x01BA, r24
  if (state1 == 0xF000) return 1;
     fd0:	20 ef       	ldi	r18, 0xF0	; 240
     fd2:	80 30       	cpi	r24, 0x00	; 0
     fd4:	92 07       	cpc	r25, r18
     fd6:	31 f0       	breq	.+12     	; 0xfe4 <debounce_sw_plus+0x3a>
  if (state1 == 0xE000) return 2;
     fd8:	20 ee       	ldi	r18, 0xE0	; 224
     fda:	80 30       	cpi	r24, 0x00	; 0
     fdc:	92 07       	cpc	r25, r18
     fde:	21 f4       	brne	.+8      	; 0xfe8 <debounce_sw_plus+0x3e>
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
  if (state1 == 0xF000) return 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	08 95       	ret
  if (state1 == 0xE000) return 2;
  return 0;
     fe8:	80 e0       	ldi	r24, 0x00	; 0
}
     fea:	08 95       	ret

00000fec <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     fec:	80 91 b8 01 	lds	r24, 0x01B8
     ff0:	90 91 b9 01 	lds	r25, 0x01B9
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	90 6e       	ori	r25, 0xE0	; 224
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4d 99       	sbic	0x09, 5	; 9
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <debounce_sw_set+0x1a>
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	82 2b       	or	r24, r18
    1008:	93 2b       	or	r25, r19
    100a:	90 93 b9 01 	sts	0x01B9, r25
    100e:	80 93 b8 01 	sts	0x01B8, r24
  if (state2 == 0xF000) return 1;
    1012:	20 ef       	ldi	r18, 0xF0	; 240
    1014:	80 30       	cpi	r24, 0x00	; 0
    1016:	92 07       	cpc	r25, r18
    1018:	31 f0       	breq	.+12     	; 0x1026 <debounce_sw_set+0x3a>
  if (state2 == 0xE000) return 2;
    101a:	20 ee       	ldi	r18, 0xE0	; 224
    101c:	80 30       	cpi	r24, 0x00	; 0
    101e:	92 07       	cpc	r25, r18
    1020:	21 f4       	brne	.+8      	; 0x102a <debounce_sw_set+0x3e>
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
  if (state2 == 0xF000) return 1;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	08 95       	ret
  if (state2 == 0xE000) return 2;
  return 0;
    102a:	80 e0       	ldi	r24, 0x00	; 0
}
    102c:	08 95       	ret

0000102e <debounce_sw_minus>:
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
    102e:	80 91 b6 01 	lds	r24, 0x01B6
    1032:	90 91 b7 01 	lds	r25, 0x01B7
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	90 6e       	ori	r25, 0xE0	; 224
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	4e 99       	sbic	0x09, 6	; 9
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <debounce_sw_minus+0x1a>
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	82 2b       	or	r24, r18
    104a:	93 2b       	or	r25, r19
    104c:	90 93 b7 01 	sts	0x01B7, r25
    1050:	80 93 b6 01 	sts	0x01B6, r24
  if (state3 == 0xF000) return 1;
    1054:	20 ef       	ldi	r18, 0xF0	; 240
    1056:	80 30       	cpi	r24, 0x00	; 0
    1058:	92 07       	cpc	r25, r18
    105a:	31 f0       	breq	.+12     	; 0x1068 <debounce_sw_minus+0x3a>
  if (state3 == 0xE000) return 2;
    105c:	20 ee       	ldi	r18, 0xE0	; 224
    105e:	80 30       	cpi	r24, 0x00	; 0
    1060:	92 07       	cpc	r25, r18
    1062:	21 f4       	brne	.+8      	; 0x106c <debounce_sw_minus+0x3e>
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
  if (state3 == 0xF000) return 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	08 95       	ret
  if (state3 == 0xE000) return 2;
  return 0;
    106c:	80 e0       	ldi	r24, 0x00	; 0
}
    106e:	08 95       	ret

00001070 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
  if (kbd_type == 1) {
    1070:	80 91 3c 01 	lds	r24, 0x013C
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	51 f5       	brne	.+84     	; 0x10cc <KBD_scan+0x5c>
    if (debounce_sw_plus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    1078:	0e 94 d5 07 	call	0xfaa	; 0xfaa <debounce_sw_plus>
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	79 f4       	brne	.+30     	; 0x109e <KBD_scan+0x2e>
    1080:	40 9a       	sbi	0x08, 0	; 8
    1082:	8f e3       	ldi	r24, 0x3F	; 63
    1084:	9c e9       	ldi	r25, 0x9C	; 156
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <KBD_scan+0x16>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <KBD_scan+0x1c>
    108c:	00 00       	nop
    108e:	40 98       	cbi	0x08, 0	; 8
    1090:	8a e0       	ldi	r24, 0x0A	; 10
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    if (debounce_sw_minus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    109e:	0e 94 17 08 	call	0x102e	; 0x102e <debounce_sw_minus>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	79 f4       	brne	.+30     	; 0x10c4 <KBD_scan+0x54>
    10a6:	40 9a       	sbi	0x08, 0	; 8
    10a8:	8f e3       	ldi	r24, 0x3F	; 63
    10aa:	9c e9       	ldi	r25, 0x9C	; 156
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <KBD_scan+0x3c>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <KBD_scan+0x42>
    10b2:	00 00       	nop
    10b4:	40 98       	cbi	0x08, 0	; 8
    10b6:	8e e1       	ldi	r24, 0x1E	; 30
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    RTOS_setTask(EVENT_KEY_POLL, 10, 0);         // запускаем сканирование клавиатуры
    10c4:	88 ec       	ldi	r24, 0xC8	; 200
    10c6:	6a e0       	ldi	r22, 0x0A	; 10
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	29 c0       	rjmp	.+82     	; 0x111e <KBD_scan+0xae>
  } else {
    if (debounce_sw_plus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    10cc:	0e 94 d5 07 	call	0xfaa	; 0xfaa <debounce_sw_plus>
    10d0:	88 23       	and	r24, r24
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <KBD_scan+0x82>
    10d4:	40 9a       	sbi	0x08, 0	; 8
    10d6:	8f e3       	ldi	r24, 0x3F	; 63
    10d8:	9c e9       	ldi	r25, 0x9C	; 156
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <KBD_scan+0x6a>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <KBD_scan+0x70>
    10e0:	00 00       	nop
    10e2:	40 98       	cbi	0x08, 0	; 8
    10e4:	8a e0       	ldi	r24, 0x0A	; 10
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    if (debounce_sw_minus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    10f2:	0e 94 17 08 	call	0x102e	; 0x102e <debounce_sw_minus>
    10f6:	88 23       	and	r24, r24
    10f8:	79 f0       	breq	.+30     	; 0x1118 <KBD_scan+0xa8>
    10fa:	40 9a       	sbi	0x08, 0	; 8
    10fc:	8f e3       	ldi	r24, 0x3F	; 63
    10fe:	9c e9       	ldi	r25, 0x9C	; 156
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <KBD_scan+0x90>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <KBD_scan+0x96>
    1106:	00 00       	nop
    1108:	40 98       	cbi	0x08, 0	; 8
    110a:	8e e1       	ldi	r24, 0x1E	; 30
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    RTOS_setTask(EVENT_KEY_POLL, 50, 0);         // запускаем сканирование клавиатуры
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	62 e3       	ldi	r22, 0x32	; 50
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
  }
  if (debounce_sw_set() == 1) { 
    1126:	0e 94 f6 07 	call	0xfec	; 0xfec <debounce_sw_set>
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	b1 f4       	brne	.+44     	; 0x115a <KBD_scan+0xea>
    BEEPER_TICK(); 
    112e:	40 9a       	sbi	0x08, 0	; 8
    1130:	8f e3       	ldi	r24, 0x3F	; 63
    1132:	9c e9       	ldi	r25, 0x9C	; 156
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <KBD_scan+0xc4>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <KBD_scan+0xca>
    113a:	00 00       	nop
    113c:	40 98       	cbi	0x08, 0	; 8
	RTOS_setTask(EVENT_KEY_SET, 0, 0); 
    113e:	84 e1       	ldi	r24, 0x14	; 20
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    RTOS_setTask(EVENT_KEY_POLL, 10, 0);         // запускаем сканирование клавиатуры
    114c:	88 ec       	ldi	r24, 0xC8	; 200
    114e:	6a e0       	ldi	r22, 0x0A	; 10
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	0e 94 c0 08 	call	0x1180	; 0x1180 <RTOS_setTask>
    115a:	08 95       	ret

0000115c <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    115c:	e1 eb       	ldi	r30, 0xB1	; 177
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	84 60       	ori	r24, 0x04	; 4
    1164:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    116a:	e0 e7       	ldi	r30, 0x70	; 112
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	81 60       	ori	r24, 0x01	; 1
    1172:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    1174:	86 e0       	ldi	r24, 0x06	; 6
    1176:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    117a:	10 92 1d 02 	sts	0x021D, r1
}
    117e:	08 95       	ret

00001180 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    1180:	88 23       	and	r24, r24
    1182:	09 f4       	brne	.+2      	; 0x1186 <RTOS_setTask+0x6>
    1184:	6f c0       	rjmp	.+222    	; 0x1264 <RTOS_setTask+0xe4>
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	1b c0       	rjmp	.+54     	; 0x11c0 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    118a:	29 2f       	mov	r18, r25
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	f9 01       	movw	r30, r18
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	e3 54       	subi	r30, 0x43	; 67
    119e:	fe 4f       	sbci	r31, 0xFE	; 254
    11a0:	20 81       	ld	r18, Z
    11a2:	28 17       	cp	r18, r24
    11a4:	61 f4       	brne	.+24     	; 0x11be <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    11a6:	72 83       	std	Z+2, r23	; 0x02
    11a8:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    11aa:	54 83       	std	Z+4, r21	; 0x04
    11ac:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    11ae:	61 15       	cp	r22, r1
    11b0:	71 05       	cpc	r23, r1
    11b2:	19 f4       	brne	.+6      	; 0x11ba <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	85 83       	std	Z+5, r24	; 0x05
    11b8:	08 95       	ret
      } else TaskArray[i].run = 0;   
    11ba:	15 82       	std	Z+5, r1	; 0x05
    11bc:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    11be:	9f 5f       	subi	r25, 0xFF	; 255
    11c0:	20 91 1d 02 	lds	r18, 0x021D
    11c4:	92 17       	cp	r25, r18
    11c6:	08 f3       	brcs	.-62     	; 0x118a <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    11c8:	20 91 1d 02 	lds	r18, 0x021D
    11cc:	20 31       	cpi	r18, 0x10	; 16
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <RTOS_setTask+0x52>
    11d0:	49 c0       	rjmp	.+146    	; 0x1264 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    11d2:	20 91 1d 02 	lds	r18, 0x021D
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	f9 01       	movw	r30, r18
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	e3 54       	subi	r30, 0x43	; 67
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    11ec:	20 91 1d 02 	lds	r18, 0x021D
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	f9 01       	movw	r30, r18
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	e3 54       	subi	r30, 0x43	; 67
    1202:	fe 4f       	sbci	r31, 0xFE	; 254
    1204:	72 83       	std	Z+2, r23	; 0x02
    1206:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    1208:	20 91 1d 02 	lds	r18, 0x021D
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	f9 01       	movw	r30, r18
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	e2 0f       	add	r30, r18
    1216:	f3 1f       	adc	r31, r19
    1218:	ee 0f       	add	r30, r30
    121a:	ff 1f       	adc	r31, r31
    121c:	e3 54       	subi	r30, 0x43	; 67
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	54 83       	std	Z+4, r21	; 0x04
    1222:	43 83       	std	Z+3, r20	; 0x03
    1224:	89 2f       	mov	r24, r25
    1226:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    1228:	61 15       	cp	r22, r1
    122a:	71 05       	cpc	r23, r1
    122c:	61 f4       	brne	.+24     	; 0x1246 <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    122e:	fc 01       	movw	r30, r24
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	e8 0f       	add	r30, r24
    1236:	f9 1f       	adc	r31, r25
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	e3 54       	subi	r30, 0x43	; 67
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	85 83       	std	Z+5, r24	; 0x05
    1244:	0a c0       	rjmp	.+20     	; 0x125a <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    1246:	fc 01       	movw	r30, r24
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	e8 0f       	add	r30, r24
    124e:	f9 1f       	adc	r31, r25
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e3 54       	subi	r30, 0x43	; 67
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    125a:	80 91 1d 02 	lds	r24, 0x021D
    125e:	8f 5f       	subi	r24, 0xFF	; 255
    1260:	80 93 1d 02 	sts	0x021D, r24
    1264:	08 95       	ret

00001266 <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	2e c0       	rjmp	.+92     	; 0x12c6 <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    126a:	29 2f       	mov	r18, r25
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	d9 01       	movw	r26, r18
    1270:	aa 0f       	add	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	a2 0f       	add	r26, r18
    1276:	b3 1f       	adc	r27, r19
    1278:	aa 0f       	add	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	a3 54       	subi	r26, 0x43	; 67
    127e:	be 4f       	sbci	r27, 0xFE	; 254
    1280:	4c 91       	ld	r20, X
    1282:	48 17       	cp	r20, r24
    1284:	f9 f4       	brne	.+62     	; 0x12c4 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    1286:	80 91 1d 02 	lds	r24, 0x021D
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	28 17       	cp	r18, r24
    1290:	39 07       	cpc	r19, r25
    1292:	91 f0       	breq	.+36     	; 0x12b8 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1294:	80 91 1d 02 	lds	r24, 0x021D
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	fc 01       	movw	r30, r24
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	e8 0f       	add	r30, r24
    12a4:	f9 1f       	adc	r31, r25
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	e3 54       	subi	r30, 0x43	; 67
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	86 e0       	ldi	r24, 0x06	; 6
    12b0:	01 90       	ld	r0, Z+
    12b2:	0d 92       	st	X+, r0
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    12b8:	80 91 1d 02 	lds	r24, 0x021D
    12bc:	81 50       	subi	r24, 0x01	; 1
    12be:	80 93 1d 02 	sts	0x021D, r24
      return;
    12c2:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    12c4:	9f 5f       	subi	r25, 0xFF	; 255
    12c6:	20 91 1d 02 	lds	r18, 0x021D
    12ca:	92 17       	cp	r25, r18
    12cc:	70 f2       	brcs	.-100    	; 0x126a <RTOS_deleteTask+0x4>
    12ce:	08 95       	ret

000012d0 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    12d4:	80 91 bc 01 	lds	r24, 0x01BC
    12d8:	88 23       	and	r24, r24
    12da:	11 f4       	brne	.+4      	; 0x12e0 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	4e c0       	rjmp	.+156    	; 0x137c <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    12e0:	10 92 bc 01 	sts	0x01BC, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    12e6:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    12ea:	82 2f       	mov	r24, r18
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	fc 01       	movw	r30, r24
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	e8 0f       	add	r30, r24
    12f6:	f9 1f       	adc	r31, r25
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	e3 54       	subi	r30, 0x43	; 67
    12fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1300:	81 81       	ldd	r24, Z+1	; 0x01
    1302:	92 81       	ldd	r25, Z+2	; 0x02
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	11 f4       	brne	.+4      	; 0x130c <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    1308:	35 83       	std	Z+5, r19	; 0x05
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    130c:	81 81       	ldd	r24, Z+1	; 0x01
    130e:	92 81       	ldd	r25, Z+2	; 0x02
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	92 83       	std	Z+2, r25	; 0x02
    1314:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1316:	2f 5f       	subi	r18, 0xFF	; 255
    1318:	80 91 1d 02 	lds	r24, 0x021D
    131c:	28 17       	cp	r18, r24
    131e:	28 f3       	brcs	.-54     	; 0x12ea <RTOS_dispatchTask+0x1a>
    1320:	dd cf       	rjmp	.-70     	; 0x12dc <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1322:	81 2f       	mov	r24, r17
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	fc 01       	movw	r30, r24
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	e8 0f       	add	r30, r24
    132e:	f9 1f       	adc	r31, r25
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	e3 54       	subi	r30, 0x43	; 67
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	85 81       	ldd	r24, Z+5	; 0x05
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	f1 f4       	brne	.+60     	; 0x137a <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    133e:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    1340:	23 81       	ldd	r18, Z+3	; 0x03
    1342:	34 81       	ldd	r19, Z+4	; 0x04
    1344:	21 15       	cp	r18, r1
    1346:	31 05       	cpc	r19, r1
    1348:	31 f4       	brne	.+12     	; 0x1356 <RTOS_dispatchTask+0x86>
      {  
        cli();
    134a:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    134c:	80 81       	ld	r24, Z
    134e:	0e 94 33 09 	call	0x1266	; 0x1266 <RTOS_deleteTask>
        sei();
    1352:	78 94       	sei
    1354:	0c c0       	rjmp	.+24     	; 0x136e <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    1356:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    1358:	21 81       	ldd	r18, Z+1	; 0x01
    135a:	32 81       	ldd	r19, Z+2	; 0x02
    135c:	21 15       	cp	r18, r1
    135e:	31 05       	cpc	r19, r1
    1360:	31 f4       	brne	.+12     	; 0x136e <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1362:	23 81       	ldd	r18, Z+3	; 0x03
    1364:	34 81       	ldd	r19, Z+4	; 0x04
    1366:	21 50       	subi	r18, 0x01	; 1
    1368:	30 40       	sbci	r19, 0x00	; 0
    136a:	32 83       	std	Z+2, r19	; 0x02
    136c:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    136e:	e0 91 3d 01 	lds	r30, 0x013D
    1372:	f0 91 3e 01 	lds	r31, 0x013E
    1376:	80 2f       	mov	r24, r16
    1378:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    137a:	1f 5f       	subi	r17, 0xFF	; 255
    137c:	80 91 1d 02 	lds	r24, 0x021D
    1380:	18 17       	cp	r17, r24
    1382:	78 f2       	brcs	.-98     	; 0x1322 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    1396:	86 e0       	ldi	r24, 0x06	; 6
    1398:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 bc 01 	sts	0x01BC, r24
}
    13a2:	8f 91       	pop	r24
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    13ae:	80 52       	subi	r24, 0x20	; 32
    13b0:	86 35       	cpi	r24, 0x56	; 86
    13b2:	30 f4       	brcc	.+12     	; 0x13c0 <MAX7219_lookupCode+0x12>
    13b4:	e8 2f       	mov	r30, r24
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	e1 5b       	subi	r30, 0xB1	; 177
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	80 81       	ld	r24, Z
    13be:	08 95       	ret
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    13c2:	08 95       	ret

000013c4 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    13c4:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    13c6:	87 ff       	sbrs	r24, 7
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    13ca:	43 9a       	sbi	0x08, 3	; 8
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    13ce:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    13d0:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    13d2:	00 00       	nop
	asm("nop");
    13d4:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    13d6:	42 9a       	sbi	0x08, 2	; 8
    13d8:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    13da:	11 f0       	breq	.+4      	; 0x13e0 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    13dc:	88 0f       	add	r24, r24
    13de:	f3 cf       	rjmp	.-26     	; 0x13c6 <MAX7219_SendByte+0x2>
    13e0:	08 95       	ret

000013e2 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	18 2f       	mov	r17, r24
    13ea:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    13ec:	41 98       	cbi	0x08, 1	; 8
    13ee:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    13f0:	81 2f       	mov	r24, r17
    13f2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <MAX7219_SendByte>
	MAX7219_SendByte(data);
    13f6:	8f 2d       	mov	r24, r15
    13f8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <MAX7219_SendByte>
    13fc:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    13fe:	c1 f7       	brne	.-16     	; 0x13f0 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1400:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	08 95       	ret

0000140a <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cf e3       	ldi	r28, 0x3F	; 63
    1414:	d1 e0       	ldi	r29, 0x01	; 1
    1416:	07 e4       	ldi	r16, 0x47	; 71
    1418:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    141a:	89 91       	ld	r24, Y+
    141c:	f8 01       	movw	r30, r16
    141e:	61 91       	ld	r22, Z+
    1420:	8f 01       	movw	r16, r30
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    1428:	f1 e0       	ldi	r31, 0x01	; 1
    142a:	c7 34       	cpi	r28, 0x47	; 71
    142c:	df 07       	cpc	r29, r31
    142e:	a9 f7       	brne	.-22     	; 0x141a <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	08 95       	ret

0000143a <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    143a:	10 92 47 01 	sts	0x0147, r1
    143e:	10 92 48 01 	sts	0x0148, r1
    1442:	10 92 49 01 	sts	0x0149, r1
    1446:	10 92 4a 01 	sts	0x014A, r1
    144a:	10 92 4b 01 	sts	0x014B, r1
    144e:	10 92 4c 01 	sts	0x014C, r1
    1452:	10 92 4d 01 	sts	0x014D, r1
    1456:	10 92 4e 01 	sts	0x014E, r1
  }
  MAX7219_updateDisplay();
    145a:	0e 94 05 0a 	call	0x140a	; 0x140a <MAX7219_updateDisplay>
}
    145e:	08 95       	ret

00001460 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1460:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1462:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    1464:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1466:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    1468:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    146a:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    146c:	8c e0       	ldi	r24, 0x0C	; 12
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    1474:	8f e0       	ldi	r24, 0x0F	; 15
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    147c:	89 e0       	ldi	r24, 0x09	; 9
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    1484:	8a e0       	ldi	r24, 0x0A	; 10
    1486:	62 e0       	ldi	r22, 0x02	; 2
    1488:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    148c:	8b e0       	ldi	r24, 0x0B	; 11
    148e:	67 e0       	ldi	r22, 0x07	; 7
    1490:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    1494:	0e 94 1d 0a 	call	0x143a	; 0x143a <MAX7219_clearDisplay>
  return;
}
    1498:	08 95       	ret

0000149a <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	27 97       	sbiw	r28, 0x07	; 7
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	b8 2e       	mov	r11, r24
    14be:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    14c0:	77 ff       	sbrs	r23, 7
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    14c4:	90 95       	com	r25
    14c6:	81 95       	neg	r24
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    14ca:	31 e0       	ldi	r19, 0x01	; 1
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    14d0:	e4 2f       	mov	r30, r20
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8e 01       	movw	r16, r28
    14d6:	0f 5f       	subi	r16, 0xFF	; 255
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	e0 0f       	add	r30, r16
    14dc:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    14de:	5a e0       	ldi	r21, 0x0A	; 10
    14e0:	e5 2e       	mov	r14, r21
    14e2:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <MAX7219_printNum+0x5a>
    14e6:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    14e8:	b7 01       	movw	r22, r14
    14ea:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divmodhi4>
    14ee:	80 5d       	subi	r24, 0xD0	; 208
    14f0:	80 83       	st	Z, r24
    x /= 10;
    14f2:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    14f4:	e0 17       	cp	r30, r16
    14f6:	f1 07       	cpc	r31, r17
    14f8:	b1 f7       	brne	.-20     	; 0x14e6 <MAX7219_printNum+0x4c>
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    14fc:	84 2f       	mov	r24, r20
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    1502:	de 01       	movw	r26, r28
    1504:	11 96       	adiw	r26, 0x01	; 1
    1506:	08 c0       	rjmp	.+16     	; 0x1518 <MAX7219_printNum+0x7e>
    1508:	fd 01       	movw	r30, r26
    150a:	e6 0f       	add	r30, r22
    150c:	f7 1f       	adc	r31, r23
    150e:	60 81       	ld	r22, Z
    1510:	60 33       	cpi	r22, 0x30	; 48
    1512:	11 f5       	brne	.+68     	; 0x1558 <MAX7219_printNum+0xbe>
    1514:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    1516:	5f 5f       	subi	r21, 0xFF	; 255
    1518:	65 2f       	mov	r22, r21
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	68 17       	cp	r22, r24
    151e:	79 07       	cpc	r23, r25
    1520:	9c f3       	brlt	.-26     	; 0x1508 <MAX7219_printNum+0x6e>
    1522:	1a c0       	rjmp	.+52     	; 0x1558 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1524:	82 2f       	mov	r24, r18
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	8c 01       	movw	r16, r24
    152a:	0c 0d       	add	r16, r12
    152c:	1d 1d       	adc	r17, r13
    152e:	08 30       	cpi	r16, 0x08	; 8
    1530:	11 05       	cpc	r17, r1
    1532:	84 f4       	brge	.+32     	; 0x1554 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    1534:	8e 0d       	add	r24, r14
    1536:	9f 1d       	adc	r25, r15
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	2d 83       	std	Y+5, r18	; 0x05
    153e:	3e 83       	std	Y+6, r19	; 0x06
    1540:	4f 83       	std	Y+7, r20	; 0x07
    1542:	0e 94 d7 09 	call	0x13ae	; 0x13ae <MAX7219_lookupCode>
    1546:	f8 01       	movw	r30, r16
    1548:	e9 5b       	subi	r30, 0xB9	; 185
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	80 83       	st	Z, r24
    154e:	4f 81       	ldd	r20, Y+7	; 0x07
    1550:	3e 81       	ldd	r19, Y+6	; 0x06
    1552:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    1558:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    155a:	cb 2c       	mov	r12, r11
    155c:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    155e:	7e 01       	movw	r14, r28
    1560:	08 94       	sec
    1562:	e1 1c       	adc	r14, r1
    1564:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1566:	24 17       	cp	r18, r20
    1568:	e8 f2       	brcs	.-70     	; 0x1524 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    156a:	33 23       	and	r19, r19
    156c:	41 f0       	breq	.+16     	; 0x157e <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    156e:	8d e2       	ldi	r24, 0x2D	; 45
    1570:	0e 94 d7 09 	call	0x13ae	; 0x13ae <MAX7219_lookupCode>
    1574:	eb 2d       	mov	r30, r11
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	ea 5b       	subi	r30, 0xBA	; 186
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    157e:	0e 94 05 0a 	call	0x140a	; 0x140a <MAX7219_updateDisplay>
}
    1582:	27 96       	adiw	r28, 0x07	; 7
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	bf 90       	pop	r11
    15a0:	08 95       	ret

000015a2 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    15a2:	1f 93       	push	r17
    15a4:	18 2f       	mov	r17, r24
    15a6:	86 2f       	mov	r24, r22
  if (pos < 9) {
    15a8:	19 30       	cpi	r17, 0x09	; 9
    15aa:	48 f4       	brcc	.+18     	; 0x15be <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    15ac:	0e 94 d7 09 	call	0x13ae	; 0x13ae <MAX7219_lookupCode>
    15b0:	e1 2f       	mov	r30, r17
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	ea 5b       	subi	r30, 0xBA	; 186
    15b6:	fe 4f       	sbci	r31, 0xFE	; 254
    15b8:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    15ba:	0e 94 05 0a 	call	0x140a	; 0x140a <MAX7219_updateDisplay>
  }
}
    15be:	1f 91       	pop	r17
    15c0:	08 95       	ret

000015c2 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
  unsigned char i = pos;
    15cc:	e6 2e       	mov	r14, r22
    15ce:	e7 01       	movw	r28, r14
    15d0:	7e 01       	movw	r14, r28
    15d2:	f7 2e       	mov	r15, r23
    15d4:	e7 01       	movw	r28, r14
    15d6:	18 2f       	mov	r17, r24
  while(*data) {
    15d8:	0a c0       	rjmp	.+20     	; 0x15ee <MAX7219_printStr+0x2c>
    if (i < 9) {
    15da:	19 30       	cpi	r17, 0x09	; 9
    15dc:	58 f4       	brcc	.+22     	; 0x15f4 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    15de:	0e 94 d7 09 	call	0x13ae	; 0x13ae <MAX7219_lookupCode>
    15e2:	e1 2f       	mov	r30, r17
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	ea 5b       	subi	r30, 0xBA	; 186
    15e8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ea:	80 83       	st	Z, r24
      i++;
    15ec:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    15ee:	89 91       	ld	r24, Y+
    15f0:	88 23       	and	r24, r24
    15f2:	99 f7       	brne	.-26     	; 0x15da <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    15f4:	0e 94 05 0a 	call	0x140a	; 0x140a <MAX7219_updateDisplay>
}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	08 95       	ret

00001604 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    1604:	e8 2f       	mov	r30, r24
    1606:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    1608:	61 30       	cpi	r22, 0x01	; 1
    160a:	29 f4       	brne	.+10     	; 0x1616 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    160c:	ea 5b       	subi	r30, 0xBA	; 186
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	80 81       	ld	r24, Z
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	04 c0       	rjmp	.+8      	; 0x161e <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    1616:	ea 5b       	subi	r30, 0xBA	; 186
    1618:	fe 4f       	sbci	r31, 0xFE	; 254
    161a:	80 81       	ld	r24, Z
    161c:	8f 77       	andi	r24, 0x7F	; 127
    161e:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    1620:	0e 94 05 0a 	call	0x140a	; 0x140a <MAX7219_updateDisplay>
}
    1624:	08 95       	ret

00001626 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    1626:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    1628:	f8 94       	cli
  switch(chanel) {
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	01 f1       	breq	.+64     	; 0x166e <ds18x20IsOnBus+0x48>
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	20 f4       	brcc	.+8      	; 0x163a <ds18x20IsOnBus+0x14>
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	09 f0       	breq	.+2      	; 0x1638 <ds18x20IsOnBus+0x12>
    1636:	57 c0       	rjmp	.+174    	; 0x16e6 <ds18x20IsOnBus+0xc0>
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <ds18x20IsOnBus+0x20>
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	61 f1       	breq	.+88     	; 0x1696 <ds18x20IsOnBus+0x70>
    163e:	84 30       	cpi	r24, 0x04	; 4
    1640:	09 f0       	breq	.+2      	; 0x1644 <ds18x20IsOnBus+0x1e>
    1642:	51 c0       	rjmp	.+162    	; 0x16e6 <ds18x20IsOnBus+0xc0>
    1644:	3e c0       	rjmp	.+124    	; 0x16c2 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1646:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1648:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    164a:	8f e7       	ldi	r24, 0x7F	; 127
    164c:	97 e0       	ldi	r25, 0x07	; 7
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <ds18x20IsOnBus+0x28>
    1652:	00 c0       	rjmp	.+0      	; 0x1654 <ds18x20IsOnBus+0x2e>
    1654:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    1656:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1658:	29 9a       	sbi	0x05, 1	; 5
    165a:	a7 e1       	ldi	r26, 0x17	; 23
    165c:	b1 e0       	ldi	r27, 0x01	; 1
    165e:	11 97       	sbiw	r26, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <ds18x20IsOnBus+0x38>
    1662:	00 c0       	rjmp	.+0      	; 0x1664 <ds18x20IsOnBus+0x3e>
    1664:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	19 9b       	sbis	0x03, 1	; 3
    166a:	3e c0       	rjmp	.+124    	; 0x16e8 <ds18x20IsOnBus+0xc2>
    166c:	3c c0       	rjmp	.+120    	; 0x16e6 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    166e:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    1670:	28 98       	cbi	0x05, 0	; 5
    1672:	8f e7       	ldi	r24, 0x7F	; 127
    1674:	97 e0       	ldi	r25, 0x07	; 7
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <ds18x20IsOnBus+0x50>
    167a:	00 c0       	rjmp	.+0      	; 0x167c <ds18x20IsOnBus+0x56>
    167c:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    167e:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    1680:	28 9a       	sbi	0x05, 0	; 5
    1682:	a7 e1       	ldi	r26, 0x17	; 23
    1684:	b1 e0       	ldi	r27, 0x01	; 1
    1686:	11 97       	sbiw	r26, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <ds18x20IsOnBus+0x60>
    168a:	00 c0       	rjmp	.+0      	; 0x168c <ds18x20IsOnBus+0x66>
    168c:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	18 9b       	sbis	0x03, 0	; 3
    1692:	2a c0       	rjmp	.+84     	; 0x16e8 <ds18x20IsOnBus+0xc2>
    1694:	28 c0       	rjmp	.+80     	; 0x16e6 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1696:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1698:	5f 98       	cbi	0x0b, 7	; 11
    169a:	8f e7       	ldi	r24, 0x7F	; 127
    169c:	97 e0       	ldi	r25, 0x07	; 7
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <ds18x20IsOnBus+0x78>
    16a2:	00 c0       	rjmp	.+0      	; 0x16a4 <ds18x20IsOnBus+0x7e>
    16a4:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    16a6:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    16a8:	5f 9a       	sbi	0x0b, 7	; 11
    16aa:	a7 e1       	ldi	r26, 0x17	; 23
    16ac:	b1 e0       	ldi	r27, 0x01	; 1
    16ae:	11 97       	sbiw	r26, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <ds18x20IsOnBus+0x88>
    16b2:	00 c0       	rjmp	.+0      	; 0x16b4 <ds18x20IsOnBus+0x8e>
    16b4:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    16b6:	89 b1       	in	r24, 0x09	; 9
    16b8:	80 95       	com	r24
    16ba:	88 1f       	adc	r24, r24
    16bc:	88 27       	eor	r24, r24
    16be:	88 1f       	adc	r24, r24
    break;
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    16c2:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    16c4:	2a 98       	cbi	0x05, 2	; 5
    16c6:	8f e7       	ldi	r24, 0x7F	; 127
    16c8:	97 e0       	ldi	r25, 0x07	; 7
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <ds18x20IsOnBus+0xa4>
    16ce:	00 c0       	rjmp	.+0      	; 0x16d0 <ds18x20IsOnBus+0xaa>
    16d0:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    16d2:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    16d4:	2a 9a       	sbi	0x05, 2	; 5
    16d6:	a7 e1       	ldi	r26, 0x17	; 23
    16d8:	b1 e0       	ldi	r27, 0x01	; 1
    16da:	11 97       	sbiw	r26, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <ds18x20IsOnBus+0xb4>
    16de:	00 c0       	rjmp	.+0      	; 0x16e0 <ds18x20IsOnBus+0xba>
    16e0:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	a7 e6       	ldi	r26, 0x67	; 103
    16ea:	b6 e0       	ldi	r27, 0x06	; 6
    16ec:	11 97       	sbiw	r26, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <ds18x20IsOnBus+0xc6>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <ds18x20IsOnBus+0xcc>
    16f2:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	e3 5e       	subi	r30, 0xE3	; 227
    16f8:	fd 4f       	sbci	r31, 0xFD	; 253
    16fa:	80 83       	st	Z, r24
  sei();
    16fc:	78 94       	sei
  return ret;
}
    16fe:	08 95       	ret

00001700 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    1700:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    1702:	98 2f       	mov	r25, r24
    1704:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    1706:	f8 94       	cli
  switch(chanel) {
    1708:	62 30       	cpi	r22, 0x02	; 2
    170a:	e1 f0       	breq	.+56     	; 0x1744 <ds18x20SendByte+0x44>
    170c:	63 30       	cpi	r22, 0x03	; 3
    170e:	20 f4       	brcc	.+8      	; 0x1718 <ds18x20SendByte+0x18>
    1710:	61 30       	cpi	r22, 0x01	; 1
    1712:	09 f0       	breq	.+2      	; 0x1716 <ds18x20SendByte+0x16>
    1714:	52 c0       	rjmp	.+164    	; 0x17ba <ds18x20SendByte+0xba>
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <ds18x20SendByte+0x24>
    1718:	63 30       	cpi	r22, 0x03	; 3
    171a:	21 f1       	breq	.+72     	; 0x1764 <ds18x20SendByte+0x64>
    171c:	64 30       	cpi	r22, 0x04	; 4
    171e:	09 f0       	breq	.+2      	; 0x1722 <ds18x20SendByte+0x22>
    1720:	4c c0       	rjmp	.+152    	; 0x17ba <ds18x20SendByte+0xba>
    1722:	30 c0       	rjmp	.+96     	; 0x1784 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1724:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1726:	29 98       	cbi	0x05, 1	; 5
    1728:	30 e2       	ldi	r19, 0x20	; 32
    172a:	3a 95       	dec	r19
    172c:	f1 f7       	brne	.-4      	; 0x172a <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    172e:	99 23       	and	r25, r25
    1730:	31 f4       	brne	.+12     	; 0x173e <ds18x20SendByte+0x3e>
    1732:	e7 ed       	ldi	r30, 0xD7	; 215
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	31 97       	sbiw	r30, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <ds18x20SendByte+0x36>
    173a:	00 c0       	rjmp	.+0      	; 0x173c <ds18x20SendByte+0x3c>
    173c:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    173e:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1740:	29 9a       	sbi	0x05, 1	; 5
    1742:	2f c0       	rjmp	.+94     	; 0x17a2 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    1744:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    1746:	28 98       	cbi	0x05, 0	; 5
    1748:	f0 e2       	ldi	r31, 0x20	; 32
    174a:	fa 95       	dec	r31
    174c:	f1 f7       	brne	.-4      	; 0x174a <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    174e:	99 23       	and	r25, r25
    1750:	31 f4       	brne	.+12     	; 0x175e <ds18x20SendByte+0x5e>
    1752:	e7 ed       	ldi	r30, 0xD7	; 215
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	31 97       	sbiw	r30, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <ds18x20SendByte+0x56>
    175a:	00 c0       	rjmp	.+0      	; 0x175c <ds18x20SendByte+0x5c>
    175c:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    175e:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    1760:	28 9a       	sbi	0x05, 0	; 5
    1762:	1f c0       	rjmp	.+62     	; 0x17a2 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1764:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1766:	5f 98       	cbi	0x0b, 7	; 11
    1768:	f0 e2       	ldi	r31, 0x20	; 32
    176a:	fa 95       	dec	r31
    176c:	f1 f7       	brne	.-4      	; 0x176a <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    176e:	99 23       	and	r25, r25
    1770:	31 f4       	brne	.+12     	; 0x177e <ds18x20SendByte+0x7e>
    1772:	e7 ed       	ldi	r30, 0xD7	; 215
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	31 97       	sbiw	r30, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <ds18x20SendByte+0x76>
    177a:	00 c0       	rjmp	.+0      	; 0x177c <ds18x20SendByte+0x7c>
    177c:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    177e:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    1780:	5f 9a       	sbi	0x0b, 7	; 11
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    1784:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    1786:	2a 98       	cbi	0x05, 2	; 5
    1788:	f0 e2       	ldi	r31, 0x20	; 32
    178a:	fa 95       	dec	r31
    178c:	f1 f7       	brne	.-4      	; 0x178a <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    178e:	99 23       	and	r25, r25
    1790:	31 f4       	brne	.+12     	; 0x179e <ds18x20SendByte+0x9e>
    1792:	e7 ed       	ldi	r30, 0xD7	; 215
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	31 97       	sbiw	r30, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <ds18x20SendByte+0x96>
    179a:	00 c0       	rjmp	.+0      	; 0x179c <ds18x20SendByte+0x9c>
    179c:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    179e:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    17a0:	2a 9a       	sbi	0x05, 2	; 5
    17a2:	f5 e3       	ldi	r31, 0x35	; 53
    17a4:	fa 95       	dec	r31
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <ds18x20SendByte+0xa4>
    17a8:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    17aa:	99 23       	and	r25, r25
    17ac:	31 f0       	breq	.+12     	; 0x17ba <ds18x20SendByte+0xba>
    17ae:	e7 ed       	ldi	r30, 0xD7	; 215
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	31 97       	sbiw	r30, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <ds18x20SendByte+0xb2>
    17b6:	00 c0       	rjmp	.+0      	; 0x17b8 <ds18x20SendByte+0xb8>
    17b8:	00 00       	nop
    break;
  }
  sei();
    17ba:	78 94       	sei
    17bc:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    17be:	11 f0       	breq	.+4      	; 0x17c4 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    17c0:	86 95       	lsr	r24
    17c2:	9f cf       	rjmp	.-194    	; 0x1702 <ds18x20SendByte+0x2>
    17c4:	08 95       	ret

000017c6 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    17c6:	28 2f       	mov	r18, r24
    17c8:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    17ca:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    17cc:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    17ce:	f8 94       	cli
  switch(chanel) {
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	c1 f0       	breq	.+48     	; 0x1804 <ds18x20GetByte+0x3e>
    17d4:	23 30       	cpi	r18, 0x03	; 3
    17d6:	20 f4       	brcc	.+8      	; 0x17e0 <ds18x20GetByte+0x1a>
    17d8:	21 30       	cpi	r18, 0x01	; 1
    17da:	09 f0       	breq	.+2      	; 0x17de <ds18x20GetByte+0x18>
    17dc:	40 c0       	rjmp	.+128    	; 0x185e <ds18x20GetByte+0x98>
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <ds18x20GetByte+0x24>
    17e0:	23 30       	cpi	r18, 0x03	; 3
    17e2:	e9 f0       	breq	.+58     	; 0x181e <ds18x20GetByte+0x58>
    17e4:	24 30       	cpi	r18, 0x04	; 4
    17e6:	d9 f5       	brne	.+118    	; 0x185e <ds18x20GetByte+0x98>
    17e8:	27 c0       	rjmp	.+78     	; 0x1838 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    17ea:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    17ec:	29 98       	cbi	0x05, 1	; 5
    17ee:	90 e2       	ldi	r25, 0x20	; 32
    17f0:	9a 95       	dec	r25
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    17f4:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    17f6:	29 9a       	sbi	0x05, 1	; 5
    17f8:	e0 e3       	ldi	r30, 0x30	; 48
    17fa:	ea 95       	dec	r30
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    17fe:	93 b1       	in	r25, 0x03	; 3
    1800:	92 70       	andi	r25, 0x02	; 2
    1802:	26 c0       	rjmp	.+76     	; 0x1850 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    1804:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    1806:	28 98       	cbi	0x05, 0	; 5
    1808:	f0 e2       	ldi	r31, 0x20	; 32
    180a:	fa 95       	dec	r31
    180c:	f1 f7       	brne	.-4      	; 0x180a <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    180e:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    1810:	28 9a       	sbi	0x05, 0	; 5
    1812:	90 e3       	ldi	r25, 0x30	; 48
    1814:	9a 95       	dec	r25
    1816:	f1 f7       	brne	.-4      	; 0x1814 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    1818:	93 b1       	in	r25, 0x03	; 3
    181a:	91 70       	andi	r25, 0x01	; 1
    181c:	19 c0       	rjmp	.+50     	; 0x1850 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    181e:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    1820:	5f 98       	cbi	0x0b, 7	; 11
    1822:	f0 e2       	ldi	r31, 0x20	; 32
    1824:	fa 95       	dec	r31
    1826:	f1 f7       	brne	.-4      	; 0x1824 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    1828:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    182a:	5f 9a       	sbi	0x0b, 7	; 11
    182c:	90 e3       	ldi	r25, 0x30	; 48
    182e:	9a 95       	dec	r25
    1830:	f1 f7       	brne	.-4      	; 0x182e <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    1832:	99 b1       	in	r25, 0x09	; 9
    1834:	90 78       	andi	r25, 0x80	; 128
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    1838:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    183a:	2a 98       	cbi	0x05, 2	; 5
    183c:	f0 e2       	ldi	r31, 0x20	; 32
    183e:	fa 95       	dec	r31
    1840:	f1 f7       	brne	.-4      	; 0x183e <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    1842:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    1844:	2a 9a       	sbi	0x05, 2	; 5
    1846:	90 e3       	ldi	r25, 0x30	; 48
    1848:	9a 95       	dec	r25
    184a:	f1 f7       	brne	.-4      	; 0x1848 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    184c:	93 b1       	in	r25, 0x03	; 3
    184e:	94 70       	andi	r25, 0x04	; 4
    1850:	eb ed       	ldi	r30, 0xDB	; 219
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	31 97       	sbiw	r30, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <ds18x20GetByte+0x8e>
    1858:	00 c0       	rjmp	.+0      	; 0x185a <ds18x20GetByte+0x94>
    185a:	00 00       	nop
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    185e:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    1860:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    1862:	91 11       	cpse	r25, r1
    1864:	80 68       	ori	r24, 0x80	; 128
    1866:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    1868:	09 f0       	breq	.+2      	; 0x186c <ds18x20GetByte+0xa6>
    186a:	b0 cf       	rjmp	.-160    	; 0x17cc <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    186c:	08 95       	ret

0000186e <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    1878:	0e 94 13 0b 	call	0x1626	; 0x1626 <ds18x20IsOnBus>
    187c:	88 23       	and	r24, r24
    187e:	91 f1       	breq	.+100    	; 0x18e4 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    1880:	8c ec       	ldi	r24, 0xCC	; 204
    1882:	61 2f       	mov	r22, r17
    1884:	0e 94 80 0b 	call	0x1700	; 0x1700 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    1888:	8e eb       	ldi	r24, 0xBE	; 190
    188a:	61 2f       	mov	r22, r17
    188c:	0e 94 80 0b 	call	0x1700	; 0x1700 <ds18x20SendByte>
    1890:	ca e4       	ldi	r28, 0x4A	; 74
    1892:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    1894:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    1896:	81 2f       	mov	r24, r17
    1898:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <ds18x20GetByte>
    189c:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    189e:	08 27       	eor	r16, r24
    18a0:	88 e0       	ldi	r24, 0x08	; 8
    18a2:	9c e8       	ldi	r25, 0x8C	; 140
    18a4:	06 95       	lsr	r16
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <ds18x20ReadStratchPad+0x3c>
    18a8:	09 27       	eor	r16, r25
    18aa:	8a 95       	dec	r24
    18ac:	d9 f7       	brne	.-10     	; 0x18a4 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	c3 35       	cpi	r28, 0x53	; 83
    18b2:	d8 07       	cpc	r29, r24
    18b4:	81 f7       	brne	.-32     	; 0x1896 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    18b6:	00 23       	and	r16, r16
    18b8:	a9 f4       	brne	.+42     	; 0x18e4 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    18ba:	81 2f       	mov	r24, r17
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	fc 01       	movw	r30, r24
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	23 e0       	ldi	r18, 0x03	; 3
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	2a 95       	dec	r18
    18ce:	e1 f7       	brne	.-8      	; 0x18c8 <ds18x20ReadStratchPad+0x5a>
    18d0:	e8 0f       	add	r30, r24
    18d2:	f9 1f       	adc	r31, r25
    18d4:	ee 5d       	subi	r30, 0xDE	; 222
    18d6:	fd 4f       	sbci	r31, 0xFD	; 253
    18d8:	80 91 4a 02 	lds	r24, 0x024A
    18dc:	80 83       	st	Z, r24
    18de:	80 91 4b 02 	lds	r24, 0x024B
    18e2:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	08 95       	ret

000018ee <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    18ee:	1f 93       	push	r17
    18f0:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    18f2:	0e 94 13 0b 	call	0x1626	; 0x1626 <ds18x20IsOnBus>
    18f6:	88 23       	and	r24, r24
    18f8:	41 f0       	breq	.+16     	; 0x190a <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    18fa:	8c ec       	ldi	r24, 0xCC	; 204
    18fc:	61 2f       	mov	r22, r17
    18fe:	0e 94 80 0b 	call	0x1700	; 0x1700 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    1902:	84 e4       	ldi	r24, 0x44	; 68
    1904:	61 2f       	mov	r22, r17
    1906:	0e 94 80 0b 	call	0x1700	; 0x1700 <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    190a:	12 30       	cpi	r17, 0x02	; 2
    190c:	69 f0       	breq	.+26     	; 0x1928 <ds18x20ConvertTemp+0x3a>
    190e:	13 30       	cpi	r17, 0x03	; 3
    1910:	18 f4       	brcc	.+6      	; 0x1918 <ds18x20ConvertTemp+0x2a>
    1912:	11 30       	cpi	r17, 0x01	; 1
    1914:	89 f4       	brne	.+34     	; 0x1938 <ds18x20ConvertTemp+0x4a>
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <ds18x20ConvertTemp+0x34>
    1918:	13 30       	cpi	r17, 0x03	; 3
    191a:	49 f0       	breq	.+18     	; 0x192e <ds18x20ConvertTemp+0x40>
    191c:	14 30       	cpi	r17, 0x04	; 4
    191e:	61 f4       	brne	.+24     	; 0x1938 <ds18x20ConvertTemp+0x4a>
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1922:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1924:	21 9a       	sbi	0x04, 1	; 4
    break;
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1928:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    192a:	20 9a       	sbi	0x04, 0	; 4
    break;
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    192e:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1930:	57 9a       	sbi	0x0a, 7	; 10
    break;
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1934:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1936:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    1938:	1f 91       	pop	r17
    193a:	08 95       	ret

0000193c <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	fc 01       	movw	r30, r24
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	23 e0       	ldi	r18, 0x03	; 3
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	2a 95       	dec	r18
    194e:	e1 f7       	brne	.-8      	; 0x1948 <ds18x20GetTemp+0xc>
    1950:	e8 0f       	add	r30, r24
    1952:	f9 1f       	adc	r31, r25
    1954:	ee 5d       	subi	r30, 0xDE	; 222
    1956:	fd 4f       	sbci	r31, 0xFD	; 253
    1958:	40 81       	ld	r20, Z
    195a:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    195c:	9a 01       	movw	r18, r20
    195e:	2f 70       	andi	r18, 0x0F	; 15
    1960:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    1962:	c9 01       	movw	r24, r18
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	a3 e0       	ldi	r26, 0x03	; 3
    196a:	22 0f       	add	r18, r18
    196c:	33 1f       	adc	r19, r19
    196e:	aa 95       	dec	r26
    1970:	e1 f7       	brne	.-8      	; 0x196a <ds18x20GetTemp+0x2e>
    1972:	28 0f       	add	r18, r24
    1974:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	84 2b       	or	r24, r20
    197c:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    197e:	60 e1       	ldi	r22, 0x10	; 16
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divmodhi4>
    1986:	ab 01       	movw	r20, r22
    1988:	44 0f       	add	r20, r20
    198a:	55 1f       	adc	r21, r21
    198c:	e3 e0       	ldi	r30, 0x03	; 3
    198e:	66 0f       	add	r22, r22
    1990:	77 1f       	adc	r23, r23
    1992:	ea 95       	dec	r30
    1994:	e1 f7       	brne	.-8      	; 0x198e <ds18x20GetTemp+0x52>
    1996:	46 0f       	add	r20, r22
    1998:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    199a:	64 e0       	ldi	r22, 0x04	; 4
    199c:	35 95       	asr	r19
    199e:	27 95       	ror	r18
    19a0:	6a 95       	dec	r22
    19a2:	e1 f7       	brne	.-8      	; 0x199c <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    19a4:	42 0f       	add	r20, r18
    19a6:	53 1f       	adc	r21, r19
  return ret;
}
    19a8:	ca 01       	movw	r24, r20
    19aa:	08 95       	ret

000019ac <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    19ac:	e8 2f       	mov	r30, r24
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	e3 5e       	subi	r30, 0xE3	; 227
    19b2:	fd 4f       	sbci	r31, 0xFD	; 253
}
    19b4:	80 81       	ld	r24, Z
    19b6:	08 95       	ret

000019b8 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    19b8:	e8 2f       	mov	r30, r24
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	e3 5e       	subi	r30, 0xE3	; 227
    19be:	fd 4f       	sbci	r31, 0xFD	; 253
    19c0:	60 83       	st	Z, r22
}
    19c2:	08 95       	ret

000019c4 <__divmodhi4>:
    19c4:	97 fb       	bst	r25, 7
    19c6:	09 2e       	mov	r0, r25
    19c8:	07 26       	eor	r0, r23
    19ca:	0a d0       	rcall	.+20     	; 0x19e0 <__divmodhi4_neg1>
    19cc:	77 fd       	sbrc	r23, 7
    19ce:	04 d0       	rcall	.+8      	; 0x19d8 <__divmodhi4_neg2>
    19d0:	0c d0       	rcall	.+24     	; 0x19ea <__udivmodhi4>
    19d2:	06 d0       	rcall	.+12     	; 0x19e0 <__divmodhi4_neg1>
    19d4:	00 20       	and	r0, r0
    19d6:	1a f4       	brpl	.+6      	; 0x19de <__divmodhi4_exit>

000019d8 <__divmodhi4_neg2>:
    19d8:	70 95       	com	r23
    19da:	61 95       	neg	r22
    19dc:	7f 4f       	sbci	r23, 0xFF	; 255

000019de <__divmodhi4_exit>:
    19de:	08 95       	ret

000019e0 <__divmodhi4_neg1>:
    19e0:	f6 f7       	brtc	.-4      	; 0x19de <__divmodhi4_exit>
    19e2:	90 95       	com	r25
    19e4:	81 95       	neg	r24
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	08 95       	ret

000019ea <__udivmodhi4>:
    19ea:	aa 1b       	sub	r26, r26
    19ec:	bb 1b       	sub	r27, r27
    19ee:	51 e1       	ldi	r21, 0x11	; 17
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <__udivmodhi4_ep>

000019f2 <__udivmodhi4_loop>:
    19f2:	aa 1f       	adc	r26, r26
    19f4:	bb 1f       	adc	r27, r27
    19f6:	a6 17       	cp	r26, r22
    19f8:	b7 07       	cpc	r27, r23
    19fa:	10 f0       	brcs	.+4      	; 0x1a00 <__udivmodhi4_ep>
    19fc:	a6 1b       	sub	r26, r22
    19fe:	b7 0b       	sbc	r27, r23

00001a00 <__udivmodhi4_ep>:
    1a00:	88 1f       	adc	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	5a 95       	dec	r21
    1a06:	a9 f7       	brne	.-22     	; 0x19f2 <__udivmodhi4_loop>
    1a08:	80 95       	com	r24
    1a0a:	90 95       	com	r25
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	08 95       	ret

00001a12 <__eerd_byte_m328p>:
    1a12:	f9 99       	sbic	0x1f, 1	; 31
    1a14:	fe cf       	rjmp	.-4      	; 0x1a12 <__eerd_byte_m328p>
    1a16:	92 bd       	out	0x22, r25	; 34
    1a18:	81 bd       	out	0x21, r24	; 33
    1a1a:	f8 9a       	sbi	0x1f, 0	; 31
    1a1c:	99 27       	eor	r25, r25
    1a1e:	80 b5       	in	r24, 0x20	; 32
    1a20:	08 95       	ret

00001a22 <__eerd_word_m328p>:
    1a22:	a8 e1       	ldi	r26, 0x18	; 24
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	42 e0       	ldi	r20, 0x02	; 2
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__eerd_blraw_m328p>

00001a2e <__eewr_byte_m328p>:
    1a2e:	26 2f       	mov	r18, r22

00001a30 <__eewr_r18_m328p>:
    1a30:	f9 99       	sbic	0x1f, 1	; 31
    1a32:	fe cf       	rjmp	.-4      	; 0x1a30 <__eewr_r18_m328p>
    1a34:	1f ba       	out	0x1f, r1	; 31
    1a36:	92 bd       	out	0x22, r25	; 34
    1a38:	81 bd       	out	0x21, r24	; 33
    1a3a:	20 bd       	out	0x20, r18	; 32
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	fa 9a       	sbi	0x1f, 2	; 31
    1a42:	f9 9a       	sbi	0x1f, 1	; 31
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	08 95       	ret

00001a4a <__eewr_word_m328p>:
    1a4a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__eewr_byte_m328p>
    1a4e:	27 2f       	mov	r18, r23
    1a50:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__eewr_r18_m328p>

00001a54 <__eerd_block_m328p>:
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22

00001a58 <__eerd_blraw_m328p>:
    1a58:	fc 01       	movw	r30, r24
    1a5a:	f9 99       	sbic	0x1f, 1	; 31
    1a5c:	fe cf       	rjmp	.-4      	; 0x1a5a <__eerd_blraw_m328p+0x2>
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <__eerd_blraw_m328p+0x14>
    1a60:	f2 bd       	out	0x22, r31	; 34
    1a62:	e1 bd       	out	0x21, r30	; 33
    1a64:	f8 9a       	sbi	0x1f, 0	; 31
    1a66:	31 96       	adiw	r30, 0x01	; 1
    1a68:	00 b4       	in	r0, 0x20	; 32
    1a6a:	0d 92       	st	X+, r0
    1a6c:	41 50       	subi	r20, 0x01	; 1
    1a6e:	50 40       	sbci	r21, 0x00	; 0
    1a70:	b8 f7       	brcc	.-18     	; 0x1a60 <__eerd_blraw_m328p+0x8>
    1a72:	08 95       	ret

00001a74 <_exit>:
    1a74:	f8 94       	cli

00001a76 <__stop_program>:
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <__stop_program>
