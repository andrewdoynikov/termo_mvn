
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00001b58  00001bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  0080019e  0080019e  00001c8a  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002909  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000054d  00000000  00000000  000029c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002257  00000000  00000000  00002f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008f3  00000000  00000000  0000516d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000024c0  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f0  00000000  00000000  00007f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000605  00000000  00000000  00008310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ccb  00000000  00000000  00008915  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000147  00000000  00000000  0000a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e5       	ldi	r30, 0x58	; 88
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 39       	cpi	r26, 0x9E	; 158
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ae e9       	ldi	r26, 0x9E	; 158
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 35       	cpi	r26, 0x55	; 85
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 8f 02 	call	0x51e	; 0x51e <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 91 08 	call	0x1122	; 0x1122 <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 9a       	sbi	0x0b, 3	; 11
  OUT_2_init();
      be:	53 9a       	sbi	0x0a, 3	; 10
      c0:	5b 9a       	sbi	0x0b, 3	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 1e 09 	call	0x123c	; 0x123c <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000); // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	44 ef       	ldi	r20, 0xF4	; 244
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 5);        // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	45 e0       	ldi	r20, 0x05	; 5
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);   // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 65 02 	call	0x4ca	; 0x4ca <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 77 02 	call	0x4ee	; 0x4ee <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 80 02 	call	0x500	; 0x500 <load_min_temp_2>
  load_type1();
     112:	0e 94 a3 02 	call	0x546	; 0x546 <load_type1>
  load_type2();
     116:	0e 94 b2 02 	call	0x564	; 0x564 <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 bd 0a 	call	0x157a	; 0x157a <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <check_temp>:
    break;
  }    
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     15e:	1f 93       	push	r17
     160:	18 2f       	mov	r17, r24
 int16_t t = ds18x20GetTemp(chanel);
     162:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
     166:	ac 01       	movw	r20, r24
 if (status[chanel - 1] == T_OTSLED_MAX) {
     168:	21 2f       	mov	r18, r17
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	30 40       	sbci	r19, 0x00	; 0
     170:	d9 01       	movw	r26, r18
     172:	ae 5c       	subi	r26, 0xCE	; 206
     174:	be 4f       	sbci	r27, 0xFE	; 254
     176:	8c 91       	ld	r24, X
     178:	b9 01       	movw	r22, r18
     17a:	66 0f       	add	r22, r22
     17c:	77 1f       	adc	r23, r23
     17e:	66 0f       	add	r22, r22
     180:	77 1f       	adc	r23, r23
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	69 f4       	brne	.+26     	; 0x1a0 <check_temp+0x42>
 // отслеживаем превышение максимума
   if (t > temps[chanel - 1][T_MAX]) {
     186:	6f 55       	subi	r22, 0x5F	; 95
     188:	7e 4f       	sbci	r23, 0xFE	; 254
     18a:	fb 01       	movw	r30, r22
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	f9 01       	movw	r30, r18
     192:	e0 5d       	subi	r30, 0xD0	; 208
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	84 17       	cp	r24, r20
     198:	95 07       	cpc	r25, r21
     19a:	7c f4       	brge	.+30     	; 0x1ba <check_temp+0x5c>
     status[chanel - 1] = T_OTSLED_MIN;
     19c:	1c 92       	st	X, r1
     19e:	11 c0       	rjmp	.+34     	; 0x1c2 <check_temp+0x64>
       MAX7219_setCommaPos(1, 0);
	 }
   }
 } else {
   // отслеживаем превышение минимума
   if (t < temps[chanel - 1][T_MIN]) {
     1a0:	6f 55       	subi	r22, 0x5F	; 95
     1a2:	7e 4f       	sbci	r23, 0xFE	; 254
     1a4:	fb 01       	movw	r30, r22
     1a6:	62 81       	ldd	r22, Z+2	; 0x02
     1a8:	73 81       	ldd	r23, Z+3	; 0x03
     1aa:	f9 01       	movw	r30, r18
     1ac:	e0 5d       	subi	r30, 0xD0	; 208
     1ae:	fe 4f       	sbci	r31, 0xFE	; 254
     1b0:	46 17       	cp	r20, r22
     1b2:	57 07       	cpc	r21, r23
     1b4:	34 f4       	brge	.+12     	; 0x1c2 <check_temp+0x64>
     status[chanel - 1] = T_OTSLED_MAX;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	8c 93       	st	X, r24
     if (types[chanel - 1] == T_HEATER) {
     1ba:	80 81       	ld	r24, Z
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	21 f4       	brne	.+8      	; 0x1c8 <check_temp+0x6a>
     1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <check_temp+0x7a>
       if (chanel == 1) OUT_1_0();
       if (chanel == 2) OUT_2_0();
       MAX7219_setCommaPos(1, 0);
	 }
   } else {
     if (types[chanel - 1] == T_HEATER) {
     1c2:	80 81       	ld	r24, Z
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	41 f4       	brne	.+16     	; 0x1d8 <check_temp+0x7a>
       if (chanel == 1) OUT_1_0();
     1c8:	11 30       	cpi	r17, 0x01	; 1
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <check_temp+0x72>
       if (chanel == 2) OUT_2_0();
     1cc:	12 30       	cpi	r17, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <check_temp+0x74>
     1d0:	5b 98       	cbi	0x0b, 3	; 11
       MAX7219_setCommaPos(1, 0);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <check_temp+0x88>
	 } else {
       if (chanel == 1) OUT_1_1();
     1d8:	11 30       	cpi	r17, 0x01	; 1
     1da:	11 f0       	breq	.+4      	; 0x1e0 <check_temp+0x82>
       if (chanel == 2) OUT_2_1();
     1dc:	12 30       	cpi	r17, 0x02	; 2
     1de:	09 f4       	brne	.+2      	; 0x1e2 <check_temp+0x84>
     1e0:	5b 9a       	sbi	0x0b, 3	; 11
       MAX7219_setCommaPos(1, 1);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
	 }
   }
 }
}
     1ea:	1f 91       	pop	r17
     1ec:	08 95       	ret

000001ee <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     1ee:	80 91 a0 01 	lds	r24, 0x01A0
     1f2:	88 23       	and	r24, r24
     1f4:	21 f0       	breq	.+8      	; 0x1fe <DS18x20_scan+0x10>
    dscount--;
     1f6:	81 50       	subi	r24, 0x01	; 1
     1f8:	80 93 a0 01 	sts	0x01A0, r24
	return;
     1fc:	08 95       	ret
  }
  switch(ds_state) {
     1fe:	80 91 ab 01 	lds	r24, 0x01AB
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	b1 f0       	breq	.+44     	; 0x232 <DS18x20_scan+0x44>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	18 f0       	brcs	.+6      	; 0x210 <DS18x20_scan+0x22>
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	b1 f5       	brne	.+108    	; 0x27a <DS18x20_scan+0x8c>
     20e:	24 c0       	rjmp	.+72     	; 0x258 <DS18x20_scan+0x6a>
    case 0:
      ds18x20ConvertTemp(1);
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     222:	84 e0       	ldi	r24, 0x04	; 4
     224:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
	  dscount = 10;
     228:	8a e0       	ldi	r24, 0x0A	; 10
     22a:	80 93 a0 01 	sts	0x01A0, r24
	  ds_state = 1;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	10 c0       	rjmp	.+32     	; 0x252 <DS18x20_scan+0x64>
    break;
    case 1:
      ds18x20ReadStratchPad(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
	  dscount = 10;
     24a:	8a e0       	ldi	r24, 0x0A	; 10
     24c:	80 93 a0 01 	sts	0x01A0, r24
	  ds_state = 2;
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	80 93 ab 01 	sts	0x01AB, r24
    break;
     256:	08 95       	ret
    case 2:
      ds18x20GetTemp(1);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
      ds18x20GetTemp(2);
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
      ds18x20GetTemp(3);
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
      ds18x20GetTemp(4);
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
	  dscount = SCAN_TIME / 100;
     270:	84 e1       	ldi	r24, 0x14	; 20
     272:	80 93 a0 01 	sts	0x01A0, r24
	  ds_state = 0;
     276:	10 92 ab 01 	sts	0x01AB, r1
     27a:	08 95       	ret

0000027c <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     27c:	89 3c       	cpi	r24, 0xC9	; 201
     27e:	29 f0       	breq	.+10     	; 0x28a <events_default+0xe>
     280:	8c 3c       	cpi	r24, 0xCC	; 204
     282:	71 f0       	breq	.+28     	; 0x2a0 <events_default+0x24>
     284:	88 3c       	cpi	r24, 0xC8	; 200
     286:	71 f4       	brne	.+28     	; 0x2a4 <events_default+0x28>
     288:	08 c0       	rjmp	.+16     	; 0x29a <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 91 2b 01 	lds	r25, 0x012B
     290:	91 11       	cpse	r25, r1
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	80 93 2b 01 	sts	0x012B, r24
    break;
     298:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     29a:	0e 94 cd 08 	call	0x119a	; 0x119a <KBD_scan>
    break;
     29e:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     2a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DS18x20_scan>
     2a4:	08 95       	ret

000002a6 <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
     2a6:	85 36       	cpi	r24, 0x65	; 101
     2a8:	09 f4       	brne	.+2      	; 0x2ac <run_start+0x6>
     2aa:	b9 c0       	rjmp	.+370    	; 0x41e <run_start+0x178>
     2ac:	87 36       	cpi	r24, 0x67	; 103
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <run_start+0xc>
     2b0:	8f c0       	rjmp	.+286    	; 0x3d0 <run_start+0x12a>
     2b2:	84 36       	cpi	r24, 0x64	; 100
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <run_start+0x12>
     2b6:	ee c0       	rjmp	.+476    	; 0x494 <run_start+0x1ee>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	71 e0       	ldi	r23, 0x01	; 1
     2be:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	6d e2       	ldi	r22, 0x2D	; 45
     2c6:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
	  ds_count = 0;
     2ca:	10 92 9e 01 	sts	0x019E, r1
      ds18x20IsOnBus(1);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	0e 94 83 0b 	call	0x1706	; 0x1706 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	0e 94 83 0b 	call	0x1706	; 0x1706 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 83 0b 	call	0x1706	; 0x1706 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     2e0:	84 e0       	ldi	r24, 0x04	; 4
     2e2:	0e 94 83 0b 	call	0x1706	; 0x1706 <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	41 f4       	brne	.+16     	; 0x300 <run_start+0x5a>
     2f0:	80 91 9e 01 	lds	r24, 0x019E
     2f4:	8f 5f       	subi	r24, 0xFF	; 255
     2f6:	80 93 9e 01 	sts	0x019E, r24
     2fa:	85 e0       	ldi	r24, 0x05	; 5
     2fc:	61 e3       	ldi	r22, 0x31	; 49
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <run_start+0x5e>
     300:	85 e0       	ldi	r24, 0x05	; 5
     302:	60 e2       	ldi	r22, 0x20	; 32
     304:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	41 f4       	brne	.+16     	; 0x322 <run_start+0x7c>
     312:	80 91 9e 01 	lds	r24, 0x019E
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 9e 01 	sts	0x019E, r24
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	61 e3       	ldi	r22, 0x31	; 49
     320:	02 c0       	rjmp	.+4      	; 0x326 <run_start+0x80>
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	60 e2       	ldi	r22, 0x20	; 32
     326:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	41 f4       	brne	.+16     	; 0x344 <run_start+0x9e>
     334:	80 91 9e 01 	lds	r24, 0x019E
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	80 93 9e 01 	sts	0x019E, r24
     33e:	87 e0       	ldi	r24, 0x07	; 7
     340:	61 e3       	ldi	r22, 0x31	; 49
     342:	02 c0       	rjmp	.+4      	; 0x348 <run_start+0xa2>
     344:	87 e0       	ldi	r24, 0x07	; 7
     346:	60 e2       	ldi	r22, 0x20	; 32
     348:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	41 f4       	brne	.+16     	; 0x366 <run_start+0xc0>
     356:	80 91 9e 01 	lds	r24, 0x019E
     35a:	8f 5f       	subi	r24, 0xFF	; 255
     35c:	80 93 9e 01 	sts	0x019E, r24
     360:	88 e0       	ldi	r24, 0x08	; 8
     362:	61 e3       	ldi	r22, 0x31	; 49
     364:	02 c0       	rjmp	.+4      	; 0x36a <run_start+0xc4>
     366:	88 e0       	ldi	r24, 0x08	; 8
     368:	60 e2       	ldi	r22, 0x20	; 32
     36a:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
	  if (ds_count == 0) {
     36e:	60 91 9e 01 	lds	r22, 0x019E
     372:	66 23       	and	r22, r22
     374:	21 f4       	brne	.+8      	; 0x37e <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     376:	84 e6       	ldi	r24, 0x64	; 100
     378:	68 eb       	ldi	r22, 0xB8	; 184
     37a:	7b e0       	ldi	r23, 0x0B	; 11
     37c:	4b c0       	rjmp	.+150    	; 0x414 <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	20 e2       	ldi	r18, 0x20	; 32
     386:	0e 94 bd 0a 	call	0x157a	; 0x157a <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	11 f4       	brne	.+4      	; 0x398 <run_start+0xf2>
     394:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	19 f4       	brne	.+6      	; 0x3a8 <run_start+0x102>
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	19 f4       	brne	.+6      	; 0x3b8 <run_start+0x112>
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	19 f4       	brne	.+6      	; 0x3c8 <run_start+0x122>
     3c2:	84 e0       	ldi	r24, 0x04	; 4
     3c4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     3c8:	87 e6       	ldi	r24, 0x67	; 103
     3ca:	68 ee       	ldi	r22, 0xE8	; 232
     3cc:	73 e0       	ldi	r23, 0x03	; 3
     3ce:	22 c0       	rjmp	.+68     	; 0x414 <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	11 f4       	brne	.+4      	; 0x3de <run_start+0x138>
     3da:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	19 f4       	brne	.+6      	; 0x3ee <run_start+0x148>
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	19 f4       	brne	.+6      	; 0x3fe <run_start+0x158>
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	19 f4       	brne	.+6      	; 0x40e <run_start+0x168>
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	0e 94 a7 0c 	call	0x194e	; 0x194e <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     40e:	85 e6       	ldi	r24, 0x65	; 101
     410:	64 e6       	ldi	r22, 0x64	; 100
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
    break;
     41c:	08 95       	ret
    case EVENT_RUN_MAIN:
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
     424:	20 91 a1 01 	lds	r18, 0x01A1
     428:	30 91 a2 01 	lds	r19, 0x01A2
     42c:	82 17       	cp	r24, r18
     42e:	93 07       	cpc	r25, r19
     430:	24 f4       	brge	.+8      	; 0x43a <run_start+0x194>
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	80 93 32 01 	sts	0x0132, r24
     438:	02 c0       	rjmp	.+4      	; 0x43e <run_start+0x198>
     43a:	10 92 32 01 	sts	0x0132, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
     444:	20 91 a5 01 	lds	r18, 0x01A5
     448:	30 91 a6 01 	lds	r19, 0x01A6
     44c:	82 17       	cp	r24, r18
     44e:	93 07       	cpc	r25, r19
     450:	24 f4       	brge	.+8      	; 0x45a <run_start+0x1b4>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 33 01 	sts	0x0133, r24
     458:	02 c0       	rjmp	.+4      	; 0x45e <run_start+0x1b8>
     45a:	10 92 33 01 	sts	0x0133, r1
      check_temp(chanel);
     45e:	80 91 34 01 	lds	r24, 0x0134
     462:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
      MAX7219_clearDisplay();
     466:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     46a:	8c ec       	ldi	r24, 0xCC	; 204
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	44 e6       	ldi	r20, 0x64	; 100
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     478:	88 e6       	ldi	r24, 0x68	; 104
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
      SET_STATE(run_main);
     486:	8d e5       	ldi	r24, 0x5D	; 93
     488:	94 e0       	ldi	r25, 0x04	; 4
     48a:	90 93 36 01 	sts	0x0136, r25
     48e:	80 93 35 01 	sts	0x0135, r24
    break;
     492:	08 95       	ret
	default:
	  events_default(event);
     494:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     498:	08 95       	ret

0000049a <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     49a:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     49c:	80 e1       	ldi	r24, 0x10	; 16
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__eewr_word_m328p>
}
     4a4:	08 95       	ret

000004a6 <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     4a6:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     4a8:	80 e2       	ldi	r24, 0x20	; 32
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__eewr_word_m328p>
}
     4b0:	08 95       	ret

000004b2 <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     4b2:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     4b4:	82 e1       	ldi	r24, 0x12	; 18
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__eewr_word_m328p>
}
     4bc:	08 95       	ret

000004be <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     4be:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     4c0:	82 e2       	ldi	r24, 0x22	; 34
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__eewr_word_m328p>
}
     4c8:	08 95       	ret

000004ca <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     4ca:	80 e1       	ldi	r24, 0x10	; 16
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     4d2:	80 93 a1 01 	sts	0x01A1, r24
     4d6:	90 93 a2 01 	sts	0x01A2, r25
  return (int16_t)tu;
}
     4da:	08 95       	ret

000004dc <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     4dc:	82 e1       	ldi	r24, 0x12	; 18
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     4e4:	80 93 a3 01 	sts	0x01A3, r24
     4e8:	90 93 a4 01 	sts	0x01A4, r25
  return (int16_t)tu;
}
     4ec:	08 95       	ret

000004ee <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     4ee:	80 e2       	ldi	r24, 0x20	; 32
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     4f6:	80 93 a5 01 	sts	0x01A5, r24
     4fa:	90 93 a6 01 	sts	0x01A6, r25
  return (int16_t)tu;
}
     4fe:	08 95       	ret

00000500 <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     500:	82 e2       	ldi	r24, 0x22	; 34
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     508:	80 93 a7 01 	sts	0x01A7, r24
     50c:	90 93 a8 01 	sts	0x01A8, r25
  return (int16_t)tu;
}
     510:	08 95       	ret

00000512 <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     512:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     514:	80 e3       	ldi	r24, 0x30	; 48
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__eewr_byte_m328p>
}
     51c:	08 95       	ret

0000051e <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     51e:	80 e3       	ldi	r24, 0x30	; 48
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__eerd_byte_m328p>
     526:	80 93 2f 01 	sts	0x012F, r24
  if (brightnes > 15) brightnes = 2;
     52a:	80 31       	cpi	r24, 0x10	; 16
     52c:	18 f0       	brcs	.+6      	; 0x534 <load_brightnes+0x16>
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 2f 01 	sts	0x012F, r24
  return brightnes;
}
     534:	80 91 2f 01 	lds	r24, 0x012F
     538:	08 95       	ret

0000053a <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     53a:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     53c:	84 e1       	ldi	r24, 0x14	; 20
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__eewr_byte_m328p>
}
     544:	08 95       	ret

00000546 <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     546:	84 e1       	ldi	r24, 0x14	; 20
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__eerd_byte_m328p>
     54e:	81 11       	cpse	r24, r1
     550:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     552:	80 93 30 01 	sts	0x0130, r24
  return t;
}
     556:	08 95       	ret

00000558 <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     558:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     55a:	84 e2       	ldi	r24, 0x24	; 36
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__eewr_byte_m328p>
}
     562:	08 95       	ret

00000564 <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     564:	84 e2       	ldi	r24, 0x24	; 36
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__eerd_byte_m328p>
     56c:	81 11       	cpse	r24, r1
     56e:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     570:	80 93 31 01 	sts	0x0131, r24
  return t;
}
     574:	08 95       	ret

00000576 <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     576:	e0 91 a9 01 	lds	r30, 0x01A9
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	eb 5d       	subi	r30, 0xDB	; 219
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	60 81       	ld	r22, Z
     586:	71 81       	ldd	r23, Z+1	; 0x01
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
}
     58e:	08 95       	ret

00000590 <run_error>:
  }    
}
//=============================================================================
void run_error(unsigned char event)
{
  switch(event) {
     590:	8e 31       	cpi	r24, 0x1E	; 30
     592:	09 f4       	brne	.+2      	; 0x596 <run_error+0x6>
     594:	3e c0       	rjmp	.+124    	; 0x612 <run_error+0x82>
     596:	8f 31       	cpi	r24, 0x1F	; 31
     598:	30 f4       	brcc	.+12     	; 0x5a6 <run_error+0x16>
     59a:	8a 30       	cpi	r24, 0x0A	; 10
     59c:	d1 f1       	breq	.+116    	; 0x612 <run_error+0x82>
     59e:	84 31       	cpi	r24, 0x14	; 20
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <run_error+0x14>
     5a2:	4c c0       	rjmp	.+152    	; 0x63c <run_error+0xac>
     5a4:	36 c0       	rjmp	.+108    	; 0x612 <run_error+0x82>
     5a6:	89 3c       	cpi	r24, 0xC9	; 201
     5a8:	21 f0       	breq	.+8      	; 0x5b2 <run_error+0x22>
     5aa:	8a 3c       	cpi	r24, 0xCA	; 202
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <run_error+0x20>
     5ae:	46 c0       	rjmp	.+140    	; 0x63c <run_error+0xac>
     5b0:	1d c0       	rjmp	.+58     	; 0x5ec <run_error+0x5c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 91 2b 01 	lds	r25, 0x012B
     5b8:	91 11       	cpse	r25, r1
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	80 93 2b 01 	sts	0x012B, r24
	  if (error_cnt > 0) error_cnt--; else {
     5c0:	80 91 2e 01 	lds	r24, 0x012E
     5c4:	88 23       	and	r24, r24
     5c6:	21 f0       	breq	.+8      	; 0x5d0 <run_error+0x40>
     5c8:	81 50       	subi	r24, 0x01	; 1
     5ca:	80 93 2e 01 	sts	0x012E, r24
     5ce:	08 95       	ret
        wait_menu = WAIT_MENU_TIME;
     5d0:	84 e1       	ldi	r24, 0x14	; 20
     5d2:	80 93 2d 01 	sts	0x012D, r24
        SET_STATE(run_menu);
     5d6:	84 ea       	ldi	r24, 0xA4	; 164
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	90 93 36 01 	sts	0x0136, r25
     5de:	80 93 35 01 	sts	0x0135, r24
        MAX7219_clearDisplay();
     5e2:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        show_menu();
     5e6:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     5ea:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 91 2c 01 	lds	r25, 0x012C
     5f2:	91 11       	cpse	r25, r1
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	80 93 2c 01 	sts	0x012C, r24
	  if (blink05) {
     5fa:	88 23       	and	r24, r24
     5fc:	21 f0       	breq	.+8      	; 0x606 <run_error+0x76>
        MAX7219_printStr(5, "Err ");
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	63 e0       	ldi	r22, 0x03	; 3
     602:	71 e0       	ldi	r23, 0x01	; 1
     604:	03 c0       	rjmp	.+6      	; 0x60c <run_error+0x7c>
	  } else {
        MAX7219_printStr(5, "    ");
     606:	85 e0       	ldi	r24, 0x05	; 5
     608:	68 e0       	ldi	r22, 0x08	; 8
     60a:	71 e0       	ldi	r23, 0x01	; 1
     60c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
     610:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
	  BEEPER_TICK();
     612:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     614:	8f e3       	ldi	r24, 0x3F	; 63
     616:	9c e9       	ldi	r25, 0x9C	; 156
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <run_error+0x88>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <run_error+0x8e>
     61e:	00 00       	nop
     620:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     622:	84 e1       	ldi	r24, 0x14	; 20
     624:	80 93 2d 01 	sts	0x012D, r24
      SET_STATE(run_menu);
     628:	84 ea       	ldi	r24, 0xA4	; 164
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	90 93 36 01 	sts	0x0136, r25
     630:	80 93 35 01 	sts	0x0135, r24
      MAX7219_clearDisplay();
     634:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
      show_menu();
     638:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     63c:	08 95       	ret

0000063e <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     63e:	86 31       	cpi	r24, 0x16	; 22
     640:	38 f4       	brcc	.+14     	; 0x650 <run_set_brightnes+0x12>
     642:	84 31       	cpi	r24, 0x14	; 20
     644:	08 f0       	brcs	.+2      	; 0x648 <run_set_brightnes+0xa>
     646:	4d c0       	rjmp	.+154    	; 0x6e2 <run_set_brightnes+0xa4>
     648:	8a 30       	cpi	r24, 0x0A	; 10
     64a:	09 f0       	breq	.+2      	; 0x64e <run_set_brightnes+0x10>
     64c:	7a c0       	rjmp	.+244    	; 0x742 <run_set_brightnes+0x104>
     64e:	38 c0       	rjmp	.+112    	; 0x6c0 <run_set_brightnes+0x82>
     650:	89 3c       	cpi	r24, 0xC9	; 201
     652:	31 f0       	breq	.+12     	; 0x660 <run_set_brightnes+0x22>
     654:	8a 3c       	cpi	r24, 0xCA	; 202
     656:	e1 f0       	breq	.+56     	; 0x690 <run_set_brightnes+0x52>
     658:	8e 31       	cpi	r24, 0x1E	; 30
     65a:	09 f0       	breq	.+2      	; 0x65e <run_set_brightnes+0x20>
     65c:	72 c0       	rjmp	.+228    	; 0x742 <run_set_brightnes+0x104>
     65e:	5b c0       	rjmp	.+182    	; 0x716 <run_set_brightnes+0xd8>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 91 2b 01 	lds	r25, 0x012B
     666:	91 11       	cpse	r25, r1
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     66e:	80 91 2d 01 	lds	r24, 0x012D
     672:	88 23       	and	r24, r24
     674:	21 f0       	breq	.+8      	; 0x67e <run_set_brightnes+0x40>
     676:	81 50       	subi	r24, 0x01	; 1
     678:	80 93 2d 01 	sts	0x012D, r24
     67c:	08 95       	ret
        MAX7219_clearDisplay();
     67e:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     682:	84 ea       	ldi	r24, 0xA4	; 164
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	90 93 36 01 	sts	0x0136, r25
     68a:	80 93 35 01 	sts	0x0135, r24
     68e:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 91 2c 01 	lds	r25, 0x012C
     696:	91 11       	cpse	r25, r1
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	80 93 2c 01 	sts	0x012C, r24
	  if (blink05) {
     69e:	88 23       	and	r24, r24
     6a0:	49 f0       	breq	.+18     	; 0x6b4 <run_set_brightnes+0x76>
        MAX7219_printNum(4, brightnes, 2, ' ');
     6a2:	60 91 2f 01 	lds	r22, 0x012F
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	42 e0       	ldi	r20, 0x02	; 2
     6ac:	20 e2       	ldi	r18, 0x20	; 32
     6ae:	0e 94 bd 0a 	call	0x157a	; 0x157a <MAX7219_printNum>
     6b2:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     6b4:	84 e0       	ldi	r24, 0x04	; 4
     6b6:	6d e0       	ldi	r22, 0x0D	; 13
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
     6be:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     6c0:	84 e1       	ldi	r24, 0x14	; 20
     6c2:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     6c6:	40 9a       	sbi	0x08, 0	; 8
     6c8:	8f e3       	ldi	r24, 0x3F	; 63
     6ca:	9c e9       	ldi	r25, 0x9C	; 156
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <run_set_brightnes+0x8e>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <run_set_brightnes+0x94>
     6d2:	00 00       	nop
     6d4:	40 98       	cbi	0x08, 0	; 8
	  if (brightnes > 0) {
     6d6:	60 91 2f 01 	lds	r22, 0x012F
     6da:	66 23       	and	r22, r22
     6dc:	a1 f1       	breq	.+104    	; 0x746 <run_set_brightnes+0x108>
	    brightnes--;
     6de:	61 50       	subi	r22, 0x01	; 1
     6e0:	2a c0       	rjmp	.+84     	; 0x736 <run_set_brightnes+0xf8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_SET_LONG:
      wait_menu = WAIT_MENU_TIME;
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     6e8:	40 9a       	sbi	0x08, 0	; 8
     6ea:	8f e3       	ldi	r24, 0x3F	; 63
     6ec:	9c e9       	ldi	r25, 0x9C	; 156
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <run_set_brightnes+0xb0>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <run_set_brightnes+0xb6>
     6f4:	00 00       	nop
     6f6:	40 98       	cbi	0x08, 0	; 8
	  save_brightnes(brightnes);
     6f8:	80 91 2f 01 	lds	r24, 0x012F
     6fc:	0e 94 89 02 	call	0x512	; 0x512 <save_brightnes>
      MAX7219_clearDisplay();
     700:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     704:	84 ea       	ldi	r24, 0xA4	; 164
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	90 93 36 01 	sts	0x0136, r25
     70c:	80 93 35 01 	sts	0x0135, r24
      show_menu();
     710:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
    break;
     714:	08 95       	ret
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     716:	84 e1       	ldi	r24, 0x14	; 20
     718:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     71c:	40 9a       	sbi	0x08, 0	; 8
     71e:	8f e3       	ldi	r24, 0x3F	; 63
     720:	9c e9       	ldi	r25, 0x9C	; 156
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <run_set_brightnes+0xe4>
     726:	00 c0       	rjmp	.+0      	; 0x728 <run_set_brightnes+0xea>
     728:	00 00       	nop
     72a:	40 98       	cbi	0x08, 0	; 8
	  if (brightnes < 15) {
     72c:	60 91 2f 01 	lds	r22, 0x012F
     730:	6f 30       	cpi	r22, 0x0F	; 15
     732:	48 f4       	brcc	.+18     	; 0x746 <run_set_brightnes+0x108>
	    brightnes++;
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	60 93 2f 01 	sts	0x012F, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     73a:	8a e0       	ldi	r24, 0x0A	; 10
     73c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
     740:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     742:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     746:	08 95       	ret

00000748 <run_menu>:
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
  switch(event) {
     748:	85 31       	cpi	r24, 0x15	; 21
     74a:	09 f4       	brne	.+2      	; 0x74e <run_menu+0x6>
     74c:	7b c0       	rjmp	.+246    	; 0x844 <run_menu+0xfc>
     74e:	86 31       	cpi	r24, 0x16	; 22
     750:	30 f4       	brcc	.+12     	; 0x75e <run_menu+0x16>
     752:	8a 30       	cpi	r24, 0x0A	; 10
     754:	49 f1       	breq	.+82     	; 0x7a8 <run_menu+0x60>
     756:	84 31       	cpi	r24, 0x14	; 20
     758:	09 f0       	breq	.+2      	; 0x75c <run_menu+0x14>
     75a:	ac c0       	rjmp	.+344    	; 0x8b4 <run_menu+0x16c>
     75c:	41 c0       	rjmp	.+130    	; 0x7e0 <run_menu+0x98>
     75e:	8e 31       	cpi	r24, 0x1E	; 30
     760:	09 f4       	brne	.+2      	; 0x764 <run_menu+0x1c>
     762:	8b c0       	rjmp	.+278    	; 0x87a <run_menu+0x132>
     764:	89 3c       	cpi	r24, 0xC9	; 201
     766:	09 f0       	breq	.+2      	; 0x76a <run_menu+0x22>
     768:	a5 c0       	rjmp	.+330    	; 0x8b4 <run_menu+0x16c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 91 2b 01 	lds	r25, 0x012B
     770:	91 11       	cpse	r25, r1
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     778:	80 91 2d 01 	lds	r24, 0x012D
     77c:	88 23       	and	r24, r24
     77e:	21 f0       	breq	.+8      	; 0x788 <run_menu+0x40>
     780:	81 50       	subi	r24, 0x01	; 1
     782:	80 93 2d 01 	sts	0x012D, r24
     786:	07 c0       	rjmp	.+14     	; 0x796 <run_menu+0x4e>
        RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); 
     788:	85 e1       	ldi	r24, 0x15	; 21
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     796:	80 91 a9 01 	lds	r24, 0x01A9
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	09 f4       	brne	.+2      	; 0x7a0 <run_menu+0x58>
     79e:	49 c0       	rjmp	.+146    	; 0x832 <run_menu+0xea>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	6d e0       	ldi	r22, 0x0D	; 13
     7a4:	71 e0       	ldi	r23, 0x01	; 1
     7a6:	19 c0       	rjmp	.+50     	; 0x7da <run_menu+0x92>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     7a8:	84 e1       	ldi	r24, 0x14	; 20
     7aa:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     7ae:	40 9a       	sbi	0x08, 0	; 8
     7b0:	8f e3       	ldi	r24, 0x3F	; 63
     7b2:	9c e9       	ldi	r25, 0x9C	; 156
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <run_menu+0x6c>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <run_menu+0x72>
     7ba:	00 00       	nop
     7bc:	40 98       	cbi	0x08, 0	; 8
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     7be:	80 91 a9 01 	lds	r24, 0x01A9
     7c2:	88 23       	and	r24, r24
     7c4:	11 f0       	breq	.+4      	; 0x7ca <run_menu+0x82>
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <run_menu+0x84>
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	80 93 a9 01 	sts	0x01A9, r24
	  show_menu();
     7d0:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
      MAX7219_printStr(5, "    ");
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	68 e0       	ldi	r22, 0x08	; 8
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
    break;
     7de:	08 95       	ret
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     7e0:	80 93 2d 01 	sts	0x012D, r24
	  n_edit = 0;
     7e4:	10 92 aa 01 	sts	0x01AA, r1
	  BEEPER_TICK();
     7e8:	40 9a       	sbi	0x08, 0	; 8
     7ea:	8f e3       	ldi	r24, 0x3F	; 63
     7ec:	9c e9       	ldi	r25, 0x9C	; 156
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <run_menu+0xa6>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <run_menu+0xac>
     7f4:	00 00       	nop
     7f6:	40 98       	cbi	0x08, 0	; 8
	  if (m_menu == MM_D1) {
     7f8:	80 91 a9 01 	lds	r24, 0x01A9
     7fc:	88 23       	and	r24, r24
     7fe:	29 f4       	brne	.+10     	; 0x80a <run_menu+0xc2>
        MAX7219_clearDisplay();
     800:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_set_1);
     804:	81 ed       	ldi	r24, 0xD1	; 209
     806:	96 e0       	ldi	r25, 0x06	; 6
     808:	06 c0       	rjmp	.+12     	; 0x816 <run_menu+0xce>
	  } else if (m_menu == MM_D2) {
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	49 f4       	brne	.+18     	; 0x820 <run_menu+0xd8>
        MAX7219_clearDisplay();
     80e:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_set_2);
     812:	85 e8       	ldi	r24, 0x85	; 133
     814:	95 e0       	ldi	r25, 0x05	; 5
     816:	90 93 36 01 	sts	0x0136, r25
     81a:	80 93 35 01 	sts	0x0135, r24
     81e:	08 95       	ret
	  } else if (m_menu == MM_BRIGHTNES) {
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	09 f0       	breq	.+2      	; 0x826 <run_menu+0xde>
     824:	49 c0       	rjmp	.+146    	; 0x8b8 <run_menu+0x170>
        SET_STATE(run_set_brightnes);
     826:	8f e1       	ldi	r24, 0x1F	; 31
     828:	93 e0       	ldi	r25, 0x03	; 3
     82a:	90 93 36 01 	sts	0x0136, r25
     82e:	80 93 35 01 	sts	0x0135, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     832:	60 91 2f 01 	lds	r22, 0x012F
     836:	84 e0       	ldi	r24, 0x04	; 4
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	42 e0       	ldi	r20, 0x02	; 2
     83c:	20 e2       	ldi	r18, 0x20	; 32
     83e:	0e 94 bd 0a 	call	0x157a	; 0x157a <MAX7219_printNum>
     842:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     844:	40 9a       	sbi	0x08, 0	; 8
     846:	8f e3       	ldi	r24, 0x3F	; 63
     848:	9c e9       	ldi	r25, 0x9C	; 156
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <run_menu+0x102>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <run_menu+0x108>
     850:	00 00       	nop
     852:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     854:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
	  chanel = 1;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 34 01 	sts	0x0134, r24
      SET_STATE(run_main);
     85e:	8d e5       	ldi	r24, 0x5D	; 93
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	90 93 36 01 	sts	0x0136, r25
     866:	80 93 35 01 	sts	0x0135, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     86a:	88 e6       	ldi	r24, 0x68	; 104
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	40 ed       	ldi	r20, 0xD0	; 208
     872:	57 e0       	ldi	r21, 0x07	; 7
     874:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
    break;
     878:	08 95       	ret
    case EVENT_KEY_MINUS:
	  BEEPER_TICK();
     87a:	40 9a       	sbi	0x08, 0	; 8
     87c:	8f e3       	ldi	r24, 0x3F	; 63
     87e:	9c e9       	ldi	r25, 0x9C	; 156
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <run_menu+0x138>
     884:	00 c0       	rjmp	.+0      	; 0x886 <run_menu+0x13e>
     886:	00 00       	nop
     888:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     88a:	84 e1       	ldi	r24, 0x14	; 20
     88c:	80 93 2d 01 	sts	0x012D, r24
      MAX7219_printStr(5, "    ");
     890:	85 e0       	ldi	r24, 0x05	; 5
     892:	68 e0       	ldi	r22, 0x08	; 8
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     89a:	80 91 a9 01 	lds	r24, 0x01A9
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	20 f4       	brcc	.+8      	; 0x8aa <run_menu+0x162>
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
     8a4:	80 93 a9 01 	sts	0x01A9, r24
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <run_menu+0x166>
     8aa:	10 92 a9 01 	sts	0x01A9, r1
	  show_menu();
     8ae:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
    break;
     8b2:	08 95       	ret
	default:
	  events_default(event);
     8b4:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     8b8:	08 95       	ret

000008ba <run_main>:
 }
}
//=============================================================================
void run_main(unsigned char event)
{
  switch(event) {
     8ba:	85 31       	cpi	r24, 0x15	; 21
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <run_main+0x6>
     8be:	92 c0       	rjmp	.+292    	; 0x9e4 <__stack+0xe5>
     8c0:	86 31       	cpi	r24, 0x16	; 22
     8c2:	38 f4       	brcc	.+14     	; 0x8d2 <run_main+0x18>
     8c4:	8a 30       	cpi	r24, 0x0A	; 10
     8c6:	09 f4       	brne	.+2      	; 0x8ca <run_main+0x10>
     8c8:	9d c0       	rjmp	.+314    	; 0xa04 <__stack+0x105>
     8ca:	84 31       	cpi	r24, 0x14	; 20
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <run_main+0x16>
     8ce:	98 c0       	rjmp	.+304    	; 0xa00 <__stack+0x101>
     8d0:	64 c0       	rjmp	.+200    	; 0x99a <__stack+0x9b>
     8d2:	8e 31       	cpi	r24, 0x1E	; 30
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <run_main+0x1e>
     8d6:	96 c0       	rjmp	.+300    	; 0xa04 <__stack+0x105>
     8d8:	88 36       	cpi	r24, 0x68	; 104
     8da:	09 f0       	breq	.+2      	; 0x8de <run_main+0x24>
     8dc:	91 c0       	rjmp	.+290    	; 0xa00 <__stack+0x101>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     8de:	80 91 34 01 	lds	r24, 0x0134
     8e2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	d1 f5       	brne	.+116    	; 0x95e <__stack+0x5f>
	    MAX7219_printChar(3, 'd');
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	64 e6       	ldi	r22, 0x64	; 100
     8ee:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     8f2:	60 91 34 01 	lds	r22, 0x0134
     8f6:	60 5d       	subi	r22, 0xD0	; 208
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     8fe:	80 91 34 01 	lds	r24, 0x0134
     902:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ds18x20GetTemp>
     906:	bc 01       	movw	r22, r24
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     90e:	e0 91 34 01 	lds	r30, 0x0134
     912:	e3 30       	cpi	r30, 0x03	; 3
     914:	90 f4       	brcc	.+36     	; 0x93a <__stack+0x3b>
		  if (types[chanel - 1]) {
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	e1 5d       	subi	r30, 0xD1	; 209
     91a:	fe 4f       	sbci	r31, 0xFE	; 254
     91c:	80 81       	ld	r24, Z
     91e:	88 23       	and	r24, r24
     920:	19 f0       	breq	.+6      	; 0x928 <__stack+0x29>
	        MAX7219_printChar(1, '^');
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	6e e5       	ldi	r22, 0x5E	; 94
     926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
		  } else {
	        MAX7219_printChar(1, '_');
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	6f e5       	ldi	r22, 0x5F	; 95
     92c:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
		  }
          check_temp(chanel);
     930:	80 91 34 01 	lds	r24, 0x0134
     934:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
     938:	08 c0       	rjmp	.+16     	; 0x94a <__stack+0x4b>
		} else {
	      MAX7219_printChar(1, ' ');
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	60 e2       	ldi	r22, 0x20	; 32
     93e:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     94a:	87 e0       	ldi	r24, 0x07	; 7
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	60 91 9f 01 	lds	r22, 0x019F
     958:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
     95c:	07 c0       	rjmp	.+14     	; 0x96c <__stack+0x6d>
	  } else {
		if (chanel == 1) { OUT_1_0(); }
     95e:	80 91 34 01 	lds	r24, 0x0134
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	11 f0       	breq	.+4      	; 0x96a <__stack+0x6b>
		if (chanel == 2) { OUT_2_0(); }
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	09 f4       	brne	.+2      	; 0x96c <__stack+0x6d>
     96a:	5b 98       	cbi	0x0b, 3	; 11
	  }
      if (!one_sensor_flag) {
     96c:	80 91 9f 01 	lds	r24, 0x019F
     970:	88 23       	and	r24, r24
     972:	49 f4       	brne	.+18     	; 0x986 <__stack+0x87>
        if (chanel < 4) {
     974:	80 91 34 01 	lds	r24, 0x0134
     978:	84 30       	cpi	r24, 0x04	; 4
     97a:	10 f4       	brcc	.+4      	; 0x980 <__stack+0x81>
          chanel++; 
     97c:	8f 5f       	subi	r24, 0xFF	; 255
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__stack+0x83>
	    } else { 
	      chanel = 1;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 34 01 	sts	0x0134, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     986:	80 91 34 01 	lds	r24, 0x0134
     98a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ds18x20GetDevCount>
     98e:	88 23       	and	r24, r24
     990:	09 f1       	breq	.+66     	; 0x9d4 <__stack+0xd5>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     992:	88 e6       	ldi	r24, 0x68	; 104
     994:	60 ed       	ldi	r22, 0xD0	; 208
     996:	77 e0       	ldi	r23, 0x07	; 7
     998:	20 c0       	rjmp	.+64     	; 0x9da <__stack+0xdb>
	  }
    break;
    case EVENT_KEY_PLUS:
    break;
    case EVENT_KEY_SET:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     99a:	88 e6       	ldi	r24, 0x68	; 104
     99c:	0e 94 a3 09 	call	0x1346	; 0x1346 <RTOS_deleteTask>
	  BEEPER_TICK();
     9a0:	40 9a       	sbi	0x08, 0	; 8
     9a2:	8f e3       	ldi	r24, 0x3F	; 63
     9a4:	9c e9       	ldi	r25, 0x9C	; 156
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <__stack+0xa7>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <__stack+0xad>
     9ac:	00 00       	nop
     9ae:	40 98       	cbi	0x08, 0	; 8
      one_sensor_flag = !one_sensor_flag;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 91 9f 01 	lds	r25, 0x019F
     9b6:	91 11       	cpse	r25, r1
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	80 93 9f 01 	sts	0x019F, r24
	  if (one_sensor_flag) {
     9be:	88 23       	and	r24, r24
     9c0:	49 f0       	breq	.+18     	; 0x9d4 <__stack+0xd5>
	    if (chanel > 1) chanel--; else chanel = 4;
     9c2:	80 91 34 01 	lds	r24, 0x0134
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	10 f0       	brcs	.+4      	; 0x9ce <__stack+0xcf>
     9ca:	81 50       	subi	r24, 0x01	; 1
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__stack+0xd1>
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	80 93 34 01 	sts	0x0134, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     9d4:	88 e6       	ldi	r24, 0x68	; 104
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
    break;
     9e2:	08 95       	ret
    case EVENT_KEY_SET_LONG:
      MAX7219_clearDisplay();
     9e4:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     9e8:	84 ea       	ldi	r24, 0xA4	; 164
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	90 93 36 01 	sts	0x0136, r25
     9f0:	80 93 35 01 	sts	0x0135, r24
      wait_menu = WAIT_MENU_TIME;
     9f4:	84 e1       	ldi	r24, 0x14	; 20
     9f6:	80 93 2d 01 	sts	0x012D, r24
	  show_menu();
     9fa:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
    break;
     9fe:	08 95       	ret
    case EVENT_KEY_MINUS:
    break;
	default:
	  events_default(event);
     a00:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     a04:	08 95       	ret

00000a06 <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     a06:	1f 93       	push	r17
     a08:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     a0a:	80 91 aa 01 	lds	r24, 0x01AA
     a0e:	88 23       	and	r24, r24
     a10:	61 f5       	brne	.+88     	; 0xa6a <show_set_temp+0x64>
    if (blink05) {
     a12:	80 91 2c 01 	lds	r24, 0x012C
     a16:	88 23       	and	r24, r24
     a18:	91 f0       	breq	.+36     	; 0xa3e <show_set_temp+0x38>
      print_temperature(1, temps[temp][0]);
     a1a:	e1 2f       	mov	r30, r17
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ef 55       	subi	r30, 0x5F	; 95
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	60 81       	ld	r22, Z
     a2c:	71 81       	ldd	r23, Z+1	; 0x01
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
     a3c:	05 c0       	rjmp	.+10     	; 0xa48 <show_set_temp+0x42>
    } else {
      MAX7219_printStr(1, "    ");
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	68 e0       	ldi	r22, 0x08	; 8
     a42:	71 e0       	ldi	r23, 0x01	; 1
     a44:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     a48:	e1 2f       	mov	r30, r17
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ef 55       	subi	r30, 0x5F	; 95
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	62 81       	ldd	r22, Z+2	; 0x02
     a5a:	73 81       	ldd	r23, Z+3	; 0x03
     a5c:	85 e0       	ldi	r24, 0x05	; 5
     a5e:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     a62:	87 e0       	ldi	r24, 0x07	; 7
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     a6a:	80 91 aa 01 	lds	r24, 0x01AA
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	61 f5       	brne	.+88     	; 0xaca <show_set_temp+0xc4>
    if (blink05) {
     a72:	80 91 2c 01 	lds	r24, 0x012C
     a76:	88 23       	and	r24, r24
     a78:	91 f0       	breq	.+36     	; 0xa9e <show_set_temp+0x98>
      print_temperature(5, temps[temp][1]);
     a7a:	e1 2f       	mov	r30, r17
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ef 55       	subi	r30, 0x5F	; 95
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	62 81       	ldd	r22, Z+2	; 0x02
     a8c:	73 81       	ldd	r23, Z+3	; 0x03
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <show_set_temp+0xa2>
    } else {
      MAX7219_printStr(5, "    ");
     a9e:	85 e0       	ldi	r24, 0x05	; 5
     aa0:	68 e0       	ldi	r22, 0x08	; 8
     aa2:	71 e0       	ldi	r23, 0x01	; 1
     aa4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     aa8:	e1 2f       	mov	r30, r17
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	ef 55       	subi	r30, 0x5F	; 95
     ab6:	fe 4f       	sbci	r31, 0xFE	; 254
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     aca:	80 91 aa 01 	lds	r24, 0x01AA
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	d1 f4       	brne	.+52     	; 0xb06 <show_set_temp+0x100>
    MAX7219_printStr(1, "out-");
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	61 e1       	ldi	r22, 0x11	; 17
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <MAX7219_printStr>
    if (blink05) {
     adc:	80 91 2c 01 	lds	r24, 0x012C
     ae0:	88 23       	and	r24, r24
     ae2:	69 f0       	breq	.+26     	; 0xafe <show_set_temp+0xf8>
	  if (types[temp]) MAX7219_printChar(5, 'H'); else MAX7219_printChar(5, 'F');
     ae4:	e1 2f       	mov	r30, r17
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	e0 5d       	subi	r30, 0xD0	; 208
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	80 81       	ld	r24, Z
     aee:	88 23       	and	r24, r24
     af0:	19 f0       	breq	.+6      	; 0xaf8 <show_set_temp+0xf2>
     af2:	85 e0       	ldi	r24, 0x05	; 5
     af4:	68 e4       	ldi	r22, 0x48	; 72
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <show_set_temp+0xfc>
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	66 e4       	ldi	r22, 0x46	; 70
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <show_set_temp+0xfc>
    } else {
	  MAX7219_printChar(5, ' ');
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	60 e2       	ldi	r22, 0x20	; 32
     b02:	0e 94 41 0b 	call	0x1682	; 0x1682 <MAX7219_printChar>
	}
  }
}
     b06:	1f 91       	pop	r17
     b08:	08 95       	ret

00000b0a <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     b0a:	85 31       	cpi	r24, 0x15	; 21
     b0c:	09 f4       	brne	.+2      	; 0xb10 <run_set_2+0x6>
     b0e:	a2 c0       	rjmp	.+324    	; 0xc54 <run_set_2+0x14a>
     b10:	86 31       	cpi	r24, 0x16	; 22
     b12:	50 f4       	brcc	.+20     	; 0xb28 <run_set_2+0x1e>
     b14:	8c 30       	cpi	r24, 0x0C	; 12
     b16:	09 f4       	brne	.+2      	; 0xb1a <run_set_2+0x10>
     b18:	5e c0       	rjmp	.+188    	; 0xbd6 <run_set_2+0xcc>
     b1a:	84 31       	cpi	r24, 0x14	; 20
     b1c:	09 f4       	brne	.+2      	; 0xb20 <run_set_2+0x16>
     b1e:	83 c0       	rjmp	.+262    	; 0xc26 <run_set_2+0x11c>
     b20:	8a 30       	cpi	r24, 0x0A	; 10
     b22:	09 f0       	breq	.+2      	; 0xb26 <run_set_2+0x1c>
     b24:	3b c1       	rjmp	.+630    	; 0xd9c <run_set_2+0x292>
     b26:	2f c0       	rjmp	.+94     	; 0xb86 <run_set_2+0x7c>
     b28:	80 32       	cpi	r24, 0x20	; 32
     b2a:	09 f4       	brne	.+2      	; 0xb2e <run_set_2+0x24>
     b2c:	07 c1       	rjmp	.+526    	; 0xd3c <run_set_2+0x232>
     b2e:	81 32       	cpi	r24, 0x21	; 33
     b30:	20 f4       	brcc	.+8      	; 0xb3a <run_set_2+0x30>
     b32:	8e 31       	cpi	r24, 0x1E	; 30
     b34:	09 f0       	breq	.+2      	; 0xb38 <run_set_2+0x2e>
     b36:	32 c1       	rjmp	.+612    	; 0xd9c <run_set_2+0x292>
     b38:	d1 c0       	rjmp	.+418    	; 0xcdc <run_set_2+0x1d2>
     b3a:	89 3c       	cpi	r24, 0xC9	; 201
     b3c:	21 f0       	breq	.+8      	; 0xb46 <run_set_2+0x3c>
     b3e:	8a 3c       	cpi	r24, 0xCA	; 202
     b40:	09 f0       	breq	.+2      	; 0xb44 <run_set_2+0x3a>
     b42:	2c c1       	rjmp	.+600    	; 0xd9c <run_set_2+0x292>
     b44:	18 c0       	rjmp	.+48     	; 0xb76 <run_set_2+0x6c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 91 2b 01 	lds	r25, 0x012B
     b4c:	91 11       	cpse	r25, r1
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     b54:	80 91 2d 01 	lds	r24, 0x012D
     b58:	88 23       	and	r24, r24
     b5a:	21 f0       	breq	.+8      	; 0xb64 <run_set_2+0x5a>
     b5c:	81 50       	subi	r24, 0x01	; 1
     b5e:	80 93 2d 01 	sts	0x012D, r24
     b62:	08 95       	ret
        MAX7219_clearDisplay();
     b64:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     b68:	84 ea       	ldi	r24, 0xA4	; 164
     b6a:	93 e0       	ldi	r25, 0x03	; 3
     b6c:	90 93 36 01 	sts	0x0136, r25
     b70:	80 93 35 01 	sts	0x0135, r24
     b74:	9d c0       	rjmp	.+314    	; 0xcb0 <run_set_2+0x1a6>
	    show_menu();
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 91 2c 01 	lds	r25, 0x012C
     b7c:	91 11       	cpse	r25, r1
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	80 93 2c 01 	sts	0x012C, r24
     b84:	07 c1       	rjmp	.+526    	; 0xd94 <run_set_2+0x28a>
	  show_set_temp(1);
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     b86:	84 e1       	ldi	r24, 0x14	; 20
     b88:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     b8c:	40 9a       	sbi	0x08, 0	; 8
     b8e:	8f e3       	ldi	r24, 0x3F	; 63
     b90:	9c e9       	ldi	r25, 0x9C	; 156
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <run_set_2+0x88>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <run_set_2+0x8e>
     b98:	00 00       	nop
     b9a:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     b9c:	80 91 aa 01 	lds	r24, 0x01AA
     ba0:	88 23       	and	r24, r24
     ba2:	59 f4       	brne	.+22     	; 0xbba <run_set_2+0xb0>
        if (temps[1][0] > -550) {
     ba4:	80 91 a5 01 	lds	r24, 0x01A5
     ba8:	90 91 a6 01 	lds	r25, 0x01A6
     bac:	2d ef       	ldi	r18, 0xFD	; 253
     bae:	8b 3d       	cpi	r24, 0xDB	; 219
     bb0:	92 07       	cpc	r25, r18
     bb2:	0c f4       	brge	.+2      	; 0xbb6 <run_set_2+0xac>
     bb4:	ef c0       	rjmp	.+478    	; 0xd94 <run_set_2+0x28a>
		  temps[1][0]--;
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	d9 c0       	rjmp	.+434    	; 0xd6c <run_set_2+0x262>
		}
	  }
	  if (n_edit == 1) {
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <run_set_2+0xb6>
     bbe:	b4 c0       	rjmp	.+360    	; 0xd28 <run_set_2+0x21e>
        if (temps[1][1] > -550) {
     bc0:	80 91 a7 01 	lds	r24, 0x01A7
     bc4:	90 91 a8 01 	lds	r25, 0x01A8
     bc8:	2d ef       	ldi	r18, 0xFD	; 253
     bca:	8b 3d       	cpi	r24, 0xDB	; 219
     bcc:	92 07       	cpc	r25, r18
     bce:	0c f4       	brge	.+2      	; 0xbd2 <run_set_2+0xc8>
     bd0:	e1 c0       	rjmp	.+450    	; 0xd94 <run_set_2+0x28a>
		  temps[1][1]--;
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	db c0       	rjmp	.+438    	; 0xd8c <run_set_2+0x282>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_PLUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     bd6:	84 e1       	ldi	r24, 0x14	; 20
     bd8:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     bdc:	40 9a       	sbi	0x08, 0	; 8
     bde:	8f e3       	ldi	r24, 0x3F	; 63
     be0:	9c e9       	ldi	r25, 0x9C	; 156
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <run_set_2+0xd8>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <run_set_2+0xde>
     be8:	00 00       	nop
     bea:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     bec:	80 91 aa 01 	lds	r24, 0x01AA
     bf0:	88 23       	and	r24, r24
     bf2:	59 f4       	brne	.+22     	; 0xc0a <run_set_2+0x100>
        if (temps[1][0] > -550) {
     bf4:	80 91 a5 01 	lds	r24, 0x01A5
     bf8:	90 91 a6 01 	lds	r25, 0x01A6
     bfc:	2d ef       	ldi	r18, 0xFD	; 253
     bfe:	8b 3d       	cpi	r24, 0xDB	; 219
     c00:	92 07       	cpc	r25, r18
     c02:	0c f4       	brge	.+2      	; 0xc06 <run_set_2+0xfc>
     c04:	c7 c0       	rjmp	.+398    	; 0xd94 <run_set_2+0x28a>
		  temps[1][0] -= 10;
     c06:	0a 97       	sbiw	r24, 0x0a	; 10
     c08:	b1 c0       	rjmp	.+354    	; 0xd6c <run_set_2+0x262>
		}
	  }
	  if (n_edit == 1) {
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	09 f0       	breq	.+2      	; 0xc10 <run_set_2+0x106>
     c0e:	c2 c0       	rjmp	.+388    	; 0xd94 <run_set_2+0x28a>
        if (temps[1][1] > -550) {
     c10:	80 91 a7 01 	lds	r24, 0x01A7
     c14:	90 91 a8 01 	lds	r25, 0x01A8
     c18:	2d ef       	ldi	r18, 0xFD	; 253
     c1a:	8b 3d       	cpi	r24, 0xDB	; 219
     c1c:	92 07       	cpc	r25, r18
     c1e:	0c f4       	brge	.+2      	; 0xc22 <run_set_2+0x118>
     c20:	b9 c0       	rjmp	.+370    	; 0xd94 <run_set_2+0x28a>
		  temps[1][1] -= 10;
     c22:	0a 97       	sbiw	r24, 0x0a	; 10
     c24:	b3 c0       	rjmp	.+358    	; 0xd8c <run_set_2+0x282>
		}
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     c26:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     c2a:	40 9a       	sbi	0x08, 0	; 8
     c2c:	8f e3       	ldi	r24, 0x3F	; 63
     c2e:	9c e9       	ldi	r25, 0x9C	; 156
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <run_set_2+0x126>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <run_set_2+0x12c>
     c36:	00 00       	nop
     c38:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     c3a:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else n_edit = 0;
     c3e:	80 91 aa 01 	lds	r24, 0x01AA
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	20 f4       	brcc	.+8      	; 0xc4e <run_set_2+0x144>
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 aa 01 	sts	0x01AA, r24
     c4c:	a3 c0       	rjmp	.+326    	; 0xd94 <run_set_2+0x28a>
     c4e:	10 92 aa 01 	sts	0x01AA, r1
     c52:	a0 c0       	rjmp	.+320    	; 0xd94 <run_set_2+0x28a>
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     c54:	40 9a       	sbi	0x08, 0	; 8
     c56:	8f e3       	ldi	r24, 0x3F	; 63
     c58:	9c e9       	ldi	r25, 0x9C	; 156
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <run_set_2+0x150>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <run_set_2+0x156>
     c60:	00 00       	nop
     c62:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     c64:	84 e1       	ldi	r24, 0x14	; 20
     c66:	80 93 2d 01 	sts	0x012D, r24
	  if (temps[1][0] > temps[1][1]) {
     c6a:	20 91 a5 01 	lds	r18, 0x01A5
     c6e:	30 91 a6 01 	lds	r19, 0x01A6
     c72:	80 91 a7 01 	lds	r24, 0x01A7
     c76:	90 91 a8 01 	lds	r25, 0x01A8
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	dc f4       	brge	.+54     	; 0xcb6 <run_set_2+0x1ac>
        MAX7219_clearDisplay();
     c80:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     c84:	84 ea       	ldi	r24, 0xA4	; 164
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	90 93 36 01 	sts	0x0136, r25
     c8c:	80 93 35 01 	sts	0x0135, r24
        save_max_temp_2(temps[1][0]);
     c90:	80 91 a5 01 	lds	r24, 0x01A5
     c94:	90 91 a6 01 	lds	r25, 0x01A6
     c98:	0e 94 53 02 	call	0x4a6	; 0x4a6 <save_max_temp_2>
        save_min_temp_2(temps[1][1]);
     c9c:	80 91 a7 01 	lds	r24, 0x01A7
     ca0:	90 91 a8 01 	lds	r25, 0x01A8
     ca4:	0e 94 5f 02 	call	0x4be	; 0x4be <save_min_temp_2>
	    save_type_2(types[1]);
     ca8:	80 91 31 01 	lds	r24, 0x0131
     cac:	0e 94 ac 02 	call	0x558	; 0x558 <save_type_2>
        show_menu();
     cb0:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     cb4:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     cb6:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_error);
     cba:	88 ec       	ldi	r24, 0xC8	; 200
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	90 93 36 01 	sts	0x0136, r25
     cc2:	80 93 35 01 	sts	0x0135, r24
        error_cnt = ERROR_TIME;
     cc6:	85 e0       	ldi	r24, 0x05	; 5
     cc8:	80 93 2e 01 	sts	0x012E, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     ccc:	8a ec       	ldi	r24, 0xCA	; 202
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	44 ef       	ldi	r20, 0xF4	; 244
     cd4:	51 e0       	ldi	r21, 0x01	; 1
     cd6:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
     cda:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     cdc:	84 e1       	ldi	r24, 0x14	; 20
     cde:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     ce2:	40 9a       	sbi	0x08, 0	; 8
     ce4:	8f e3       	ldi	r24, 0x3F	; 63
     ce6:	9c e9       	ldi	r25, 0x9C	; 156
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <run_set_2+0x1de>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <run_set_2+0x1e4>
     cee:	00 00       	nop
     cf0:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     cf2:	80 91 aa 01 	lds	r24, 0x01AA
     cf6:	88 23       	and	r24, r24
     cf8:	59 f4       	brne	.+22     	; 0xd10 <run_set_2+0x206>
        if (temps[1][0] < 790) {
     cfa:	80 91 a5 01 	lds	r24, 0x01A5
     cfe:	90 91 a6 01 	lds	r25, 0x01A6
     d02:	23 e0       	ldi	r18, 0x03	; 3
     d04:	86 31       	cpi	r24, 0x16	; 22
     d06:	92 07       	cpc	r25, r18
     d08:	0c f0       	brlt	.+2      	; 0xd0c <run_set_2+0x202>
     d0a:	44 c0       	rjmp	.+136    	; 0xd94 <run_set_2+0x28a>
		  temps[1][0]++;
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	2e c0       	rjmp	.+92     	; 0xd6c <run_set_2+0x262>
		}
	  }
	  if (n_edit == 1) {
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	51 f4       	brne	.+20     	; 0xd28 <run_set_2+0x21e>
        if (temps[1][1] < 790) {
     d14:	80 91 a7 01 	lds	r24, 0x01A7
     d18:	90 91 a8 01 	lds	r25, 0x01A8
     d1c:	23 e0       	ldi	r18, 0x03	; 3
     d1e:	86 31       	cpi	r24, 0x16	; 22
     d20:	92 07       	cpc	r25, r18
     d22:	c4 f5       	brge	.+112    	; 0xd94 <run_set_2+0x28a>
		  temps[1][1]++;
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	32 c0       	rjmp	.+100    	; 0xd8c <run_set_2+0x282>
		}
	  }
	  if (n_edit == 2) {
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	a1 f5       	brne	.+104    	; 0xd94 <run_set_2+0x28a>
        types[1] = !types[1];
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 91 31 01 	lds	r25, 0x0131
     d32:	91 11       	cpse	r25, r1
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	80 93 31 01 	sts	0x0131, r24
     d3a:	2c c0       	rjmp	.+88     	; 0xd94 <run_set_2+0x28a>
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_MINUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     d3c:	84 e1       	ldi	r24, 0x14	; 20
     d3e:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     d42:	40 9a       	sbi	0x08, 0	; 8
     d44:	8f e3       	ldi	r24, 0x3F	; 63
     d46:	9c e9       	ldi	r25, 0x9C	; 156
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <run_set_2+0x23e>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <run_set_2+0x244>
     d4e:	00 00       	nop
     d50:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     d52:	80 91 aa 01 	lds	r24, 0x01AA
     d56:	88 23       	and	r24, r24
     d58:	71 f4       	brne	.+28     	; 0xd76 <run_set_2+0x26c>
        if (temps[1][0] < 790) {
     d5a:	80 91 a5 01 	lds	r24, 0x01A5
     d5e:	90 91 a6 01 	lds	r25, 0x01A6
     d62:	23 e0       	ldi	r18, 0x03	; 3
     d64:	86 31       	cpi	r24, 0x16	; 22
     d66:	92 07       	cpc	r25, r18
     d68:	ac f4       	brge	.+42     	; 0xd94 <run_set_2+0x28a>
		  temps[1][0] += 10;
     d6a:	0a 96       	adiw	r24, 0x0a	; 10
     d6c:	90 93 a6 01 	sts	0x01A6, r25
     d70:	80 93 a5 01 	sts	0x01A5, r24
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <run_set_2+0x28a>
		}
	  }
	  if (n_edit == 1) {
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	69 f4       	brne	.+26     	; 0xd94 <run_set_2+0x28a>
        if (temps[1][1] < 790) {
     d7a:	80 91 a7 01 	lds	r24, 0x01A7
     d7e:	90 91 a8 01 	lds	r25, 0x01A8
     d82:	23 e0       	ldi	r18, 0x03	; 3
     d84:	86 31       	cpi	r24, 0x16	; 22
     d86:	92 07       	cpc	r25, r18
     d88:	2c f4       	brge	.+10     	; 0xd94 <run_set_2+0x28a>
		  temps[1][1] += 10;
     d8a:	0a 96       	adiw	r24, 0x0a	; 10
     d8c:	90 93 a8 01 	sts	0x01A8, r25
     d90:	80 93 a7 01 	sts	0x01A7, r24
		}
	  }
	  show_set_temp(1);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	0e 94 03 05 	call	0xa06	; 0xa06 <show_set_temp>
    break;
     d9a:	08 95       	ret
	default:
	  events_default(event);
     d9c:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
     da0:	08 95       	ret

00000da2 <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     da2:	85 31       	cpi	r24, 0x15	; 21
     da4:	09 f4       	brne	.+2      	; 0xda8 <run_set_1+0x6>
     da6:	a2 c0       	rjmp	.+324    	; 0xeec <run_set_1+0x14a>
     da8:	86 31       	cpi	r24, 0x16	; 22
     daa:	50 f4       	brcc	.+20     	; 0xdc0 <run_set_1+0x1e>
     dac:	8c 30       	cpi	r24, 0x0C	; 12
     dae:	09 f4       	brne	.+2      	; 0xdb2 <run_set_1+0x10>
     db0:	5e c0       	rjmp	.+188    	; 0xe6e <run_set_1+0xcc>
     db2:	84 31       	cpi	r24, 0x14	; 20
     db4:	09 f4       	brne	.+2      	; 0xdb8 <run_set_1+0x16>
     db6:	83 c0       	rjmp	.+262    	; 0xebe <run_set_1+0x11c>
     db8:	8a 30       	cpi	r24, 0x0A	; 10
     dba:	09 f0       	breq	.+2      	; 0xdbe <run_set_1+0x1c>
     dbc:	3b c1       	rjmp	.+630    	; 0x1034 <run_set_1+0x292>
     dbe:	2f c0       	rjmp	.+94     	; 0xe1e <run_set_1+0x7c>
     dc0:	80 32       	cpi	r24, 0x20	; 32
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <run_set_1+0x24>
     dc4:	07 c1       	rjmp	.+526    	; 0xfd4 <run_set_1+0x232>
     dc6:	81 32       	cpi	r24, 0x21	; 33
     dc8:	20 f4       	brcc	.+8      	; 0xdd2 <run_set_1+0x30>
     dca:	8e 31       	cpi	r24, 0x1E	; 30
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <run_set_1+0x2e>
     dce:	32 c1       	rjmp	.+612    	; 0x1034 <run_set_1+0x292>
     dd0:	d1 c0       	rjmp	.+418    	; 0xf74 <run_set_1+0x1d2>
     dd2:	89 3c       	cpi	r24, 0xC9	; 201
     dd4:	21 f0       	breq	.+8      	; 0xdde <run_set_1+0x3c>
     dd6:	8a 3c       	cpi	r24, 0xCA	; 202
     dd8:	09 f0       	breq	.+2      	; 0xddc <run_set_1+0x3a>
     dda:	2c c1       	rjmp	.+600    	; 0x1034 <run_set_1+0x292>
     ddc:	18 c0       	rjmp	.+48     	; 0xe0e <run_set_1+0x6c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 91 2b 01 	lds	r25, 0x012B
     de4:	91 11       	cpse	r25, r1
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	80 93 2b 01 	sts	0x012B, r24
	  if (wait_menu > 0) wait_menu--; else {
     dec:	80 91 2d 01 	lds	r24, 0x012D
     df0:	88 23       	and	r24, r24
     df2:	21 f0       	breq	.+8      	; 0xdfc <run_set_1+0x5a>
     df4:	81 50       	subi	r24, 0x01	; 1
     df6:	80 93 2d 01 	sts	0x012D, r24
     dfa:	08 95       	ret
        MAX7219_clearDisplay();
     dfc:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     e00:	84 ea       	ldi	r24, 0xA4	; 164
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	90 93 36 01 	sts	0x0136, r25
     e08:	80 93 35 01 	sts	0x0135, r24
     e0c:	9d c0       	rjmp	.+314    	; 0xf48 <run_set_1+0x1a6>
	    show_menu();
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 91 2c 01 	lds	r25, 0x012C
     e14:	91 11       	cpse	r25, r1
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	80 93 2c 01 	sts	0x012C, r24
     e1c:	07 c1       	rjmp	.+526    	; 0x102c <run_set_1+0x28a>
	  show_set_temp(0);
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     e1e:	84 e1       	ldi	r24, 0x14	; 20
     e20:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     e24:	40 9a       	sbi	0x08, 0	; 8
     e26:	8f e3       	ldi	r24, 0x3F	; 63
     e28:	9c e9       	ldi	r25, 0x9C	; 156
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <run_set_1+0x88>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <run_set_1+0x8e>
     e30:	00 00       	nop
     e32:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     e34:	80 91 aa 01 	lds	r24, 0x01AA
     e38:	88 23       	and	r24, r24
     e3a:	59 f4       	brne	.+22     	; 0xe52 <run_set_1+0xb0>
        if (temps[0][0] > -550) {
     e3c:	80 91 a1 01 	lds	r24, 0x01A1
     e40:	90 91 a2 01 	lds	r25, 0x01A2
     e44:	2d ef       	ldi	r18, 0xFD	; 253
     e46:	8b 3d       	cpi	r24, 0xDB	; 219
     e48:	92 07       	cpc	r25, r18
     e4a:	0c f4       	brge	.+2      	; 0xe4e <run_set_1+0xac>
     e4c:	ef c0       	rjmp	.+478    	; 0x102c <run_set_1+0x28a>
		  temps[0][0]--;
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	d9 c0       	rjmp	.+434    	; 0x1004 <run_set_1+0x262>
		}
	  }
	  if (n_edit == 1) {
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	09 f0       	breq	.+2      	; 0xe58 <run_set_1+0xb6>
     e56:	b4 c0       	rjmp	.+360    	; 0xfc0 <run_set_1+0x21e>
        if (temps[0][1] > -550) {
     e58:	80 91 a3 01 	lds	r24, 0x01A3
     e5c:	90 91 a4 01 	lds	r25, 0x01A4
     e60:	2d ef       	ldi	r18, 0xFD	; 253
     e62:	8b 3d       	cpi	r24, 0xDB	; 219
     e64:	92 07       	cpc	r25, r18
     e66:	0c f4       	brge	.+2      	; 0xe6a <run_set_1+0xc8>
     e68:	e1 c0       	rjmp	.+450    	; 0x102c <run_set_1+0x28a>
		  temps[0][1]--;
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	db c0       	rjmp	.+438    	; 0x1024 <run_set_1+0x282>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_PLUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     e6e:	84 e1       	ldi	r24, 0x14	; 20
     e70:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     e74:	40 9a       	sbi	0x08, 0	; 8
     e76:	8f e3       	ldi	r24, 0x3F	; 63
     e78:	9c e9       	ldi	r25, 0x9C	; 156
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <run_set_1+0xd8>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <run_set_1+0xde>
     e80:	00 00       	nop
     e82:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     e84:	80 91 aa 01 	lds	r24, 0x01AA
     e88:	88 23       	and	r24, r24
     e8a:	59 f4       	brne	.+22     	; 0xea2 <run_set_1+0x100>
        if (temps[0][0] > -550) {
     e8c:	80 91 a1 01 	lds	r24, 0x01A1
     e90:	90 91 a2 01 	lds	r25, 0x01A2
     e94:	2d ef       	ldi	r18, 0xFD	; 253
     e96:	8b 3d       	cpi	r24, 0xDB	; 219
     e98:	92 07       	cpc	r25, r18
     e9a:	0c f4       	brge	.+2      	; 0xe9e <run_set_1+0xfc>
     e9c:	c7 c0       	rjmp	.+398    	; 0x102c <run_set_1+0x28a>
		  temps[0][0] -= 10;
     e9e:	0a 97       	sbiw	r24, 0x0a	; 10
     ea0:	b1 c0       	rjmp	.+354    	; 0x1004 <run_set_1+0x262>
		}
	  }
	  if (n_edit == 1) {
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <run_set_1+0x106>
     ea6:	c2 c0       	rjmp	.+388    	; 0x102c <run_set_1+0x28a>
        if (temps[0][1] > -550) {
     ea8:	80 91 a3 01 	lds	r24, 0x01A3
     eac:	90 91 a4 01 	lds	r25, 0x01A4
     eb0:	2d ef       	ldi	r18, 0xFD	; 253
     eb2:	8b 3d       	cpi	r24, 0xDB	; 219
     eb4:	92 07       	cpc	r25, r18
     eb6:	0c f4       	brge	.+2      	; 0xeba <run_set_1+0x118>
     eb8:	b9 c0       	rjmp	.+370    	; 0x102c <run_set_1+0x28a>
		  temps[0][1] -= 10;
     eba:	0a 97       	sbiw	r24, 0x0a	; 10
     ebc:	b3 c0       	rjmp	.+358    	; 0x1024 <run_set_1+0x282>
		}
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     ebe:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     ec2:	40 9a       	sbi	0x08, 0	; 8
     ec4:	8f e3       	ldi	r24, 0x3F	; 63
     ec6:	9c e9       	ldi	r25, 0x9C	; 156
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <run_set_1+0x126>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <run_set_1+0x12c>
     ece:	00 00       	nop
     ed0:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     ed2:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else n_edit = 0;
     ed6:	80 91 aa 01 	lds	r24, 0x01AA
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	20 f4       	brcc	.+8      	; 0xee6 <run_set_1+0x144>
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	80 93 aa 01 	sts	0x01AA, r24
     ee4:	a3 c0       	rjmp	.+326    	; 0x102c <run_set_1+0x28a>
     ee6:	10 92 aa 01 	sts	0x01AA, r1
     eea:	a0 c0       	rjmp	.+320    	; 0x102c <run_set_1+0x28a>
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     eec:	40 9a       	sbi	0x08, 0	; 8
     eee:	8f e3       	ldi	r24, 0x3F	; 63
     ef0:	9c e9       	ldi	r25, 0x9C	; 156
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <run_set_1+0x150>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <run_set_1+0x156>
     ef8:	00 00       	nop
     efa:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     efc:	84 e1       	ldi	r24, 0x14	; 20
     efe:	80 93 2d 01 	sts	0x012D, r24
	  if (temps[0][0] > temps[0][1]) {
     f02:	20 91 a1 01 	lds	r18, 0x01A1
     f06:	30 91 a2 01 	lds	r19, 0x01A2
     f0a:	80 91 a3 01 	lds	r24, 0x01A3
     f0e:	90 91 a4 01 	lds	r25, 0x01A4
     f12:	82 17       	cp	r24, r18
     f14:	93 07       	cpc	r25, r19
     f16:	dc f4       	brge	.+54     	; 0xf4e <run_set_1+0x1ac>
        MAX7219_clearDisplay();
     f18:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     f1c:	84 ea       	ldi	r24, 0xA4	; 164
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	90 93 36 01 	sts	0x0136, r25
     f24:	80 93 35 01 	sts	0x0135, r24
        save_max_temp_1(temps[0][0]);
     f28:	80 91 a1 01 	lds	r24, 0x01A1
     f2c:	90 91 a2 01 	lds	r25, 0x01A2
     f30:	0e 94 4d 02 	call	0x49a	; 0x49a <save_max_temp_1>
        save_min_temp_1(temps[0][1]);
     f34:	80 91 a3 01 	lds	r24, 0x01A3
     f38:	90 91 a4 01 	lds	r25, 0x01A4
     f3c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <save_min_temp_1>
	    save_type_1(types[0]);
     f40:	80 91 30 01 	lds	r24, 0x0130
     f44:	0e 94 9d 02 	call	0x53a	; 0x53a <save_type_1>
        show_menu();
     f48:	0e 94 bb 02 	call	0x576	; 0x576 <show_menu>
     f4c:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     f4e:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
        SET_STATE(run_error);
     f52:	88 ec       	ldi	r24, 0xC8	; 200
     f54:	92 e0       	ldi	r25, 0x02	; 2
     f56:	90 93 36 01 	sts	0x0136, r25
     f5a:	80 93 35 01 	sts	0x0135, r24
        error_cnt = ERROR_TIME;
     f5e:	85 e0       	ldi	r24, 0x05	; 5
     f60:	80 93 2e 01 	sts	0x012E, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     f64:	8a ec       	ldi	r24, 0xCA	; 202
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	44 ef       	ldi	r20, 0xF4	; 244
     f6c:	51 e0       	ldi	r21, 0x01	; 1
     f6e:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
     f72:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     f74:	84 e1       	ldi	r24, 0x14	; 20
     f76:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     f7a:	40 9a       	sbi	0x08, 0	; 8
     f7c:	8f e3       	ldi	r24, 0x3F	; 63
     f7e:	9c e9       	ldi	r25, 0x9C	; 156
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <run_set_1+0x1de>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <run_set_1+0x1e4>
     f86:	00 00       	nop
     f88:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     f8a:	80 91 aa 01 	lds	r24, 0x01AA
     f8e:	88 23       	and	r24, r24
     f90:	59 f4       	brne	.+22     	; 0xfa8 <run_set_1+0x206>
        if (temps[0][0] < 790) {
     f92:	80 91 a1 01 	lds	r24, 0x01A1
     f96:	90 91 a2 01 	lds	r25, 0x01A2
     f9a:	23 e0       	ldi	r18, 0x03	; 3
     f9c:	86 31       	cpi	r24, 0x16	; 22
     f9e:	92 07       	cpc	r25, r18
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <run_set_1+0x202>
     fa2:	44 c0       	rjmp	.+136    	; 0x102c <run_set_1+0x28a>
		  temps[0][0]++;
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	2e c0       	rjmp	.+92     	; 0x1004 <run_set_1+0x262>
		}
	  }
	  if (n_edit == 1) {
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	51 f4       	brne	.+20     	; 0xfc0 <run_set_1+0x21e>
        if (temps[0][1] < 790) {
     fac:	80 91 a3 01 	lds	r24, 0x01A3
     fb0:	90 91 a4 01 	lds	r25, 0x01A4
     fb4:	23 e0       	ldi	r18, 0x03	; 3
     fb6:	86 31       	cpi	r24, 0x16	; 22
     fb8:	92 07       	cpc	r25, r18
     fba:	c4 f5       	brge	.+112    	; 0x102c <run_set_1+0x28a>
		  temps[0][1]++;
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	32 c0       	rjmp	.+100    	; 0x1024 <run_set_1+0x282>
		}
	  }
	  if (n_edit == 2) {
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	a1 f5       	brne	.+104    	; 0x102c <run_set_1+0x28a>
        types[0] = !types[0];
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 91 30 01 	lds	r25, 0x0130
     fca:	91 11       	cpse	r25, r1
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	80 93 30 01 	sts	0x0130, r24
     fd2:	2c c0       	rjmp	.+88     	; 0x102c <run_set_1+0x28a>
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_MINUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     fd4:	84 e1       	ldi	r24, 0x14	; 20
     fd6:	80 93 2d 01 	sts	0x012D, r24
	  BEEPER_TICK();
     fda:	40 9a       	sbi	0x08, 0	; 8
     fdc:	8f e3       	ldi	r24, 0x3F	; 63
     fde:	9c e9       	ldi	r25, 0x9C	; 156
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <run_set_1+0x23e>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <run_set_1+0x244>
     fe6:	00 00       	nop
     fe8:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     fea:	80 91 aa 01 	lds	r24, 0x01AA
     fee:	88 23       	and	r24, r24
     ff0:	71 f4       	brne	.+28     	; 0x100e <run_set_1+0x26c>
        if (temps[0][0] < 790) {
     ff2:	80 91 a1 01 	lds	r24, 0x01A1
     ff6:	90 91 a2 01 	lds	r25, 0x01A2
     ffa:	23 e0       	ldi	r18, 0x03	; 3
     ffc:	86 31       	cpi	r24, 0x16	; 22
     ffe:	92 07       	cpc	r25, r18
    1000:	ac f4       	brge	.+42     	; 0x102c <run_set_1+0x28a>
		  temps[0][0] += 10;
    1002:	0a 96       	adiw	r24, 0x0a	; 10
    1004:	90 93 a2 01 	sts	0x01A2, r25
    1008:	80 93 a1 01 	sts	0x01A1, r24
    100c:	0f c0       	rjmp	.+30     	; 0x102c <run_set_1+0x28a>
		}
	  }
	  if (n_edit == 1) {
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	69 f4       	brne	.+26     	; 0x102c <run_set_1+0x28a>
        if (temps[0][1] < 790) {
    1012:	80 91 a3 01 	lds	r24, 0x01A3
    1016:	90 91 a4 01 	lds	r25, 0x01A4
    101a:	23 e0       	ldi	r18, 0x03	; 3
    101c:	86 31       	cpi	r24, 0x16	; 22
    101e:	92 07       	cpc	r25, r18
    1020:	2c f4       	brge	.+10     	; 0x102c <run_set_1+0x28a>
		  temps[0][1] += 10;
    1022:	0a 96       	adiw	r24, 0x0a	; 10
    1024:	90 93 a4 01 	sts	0x01A4, r25
    1028:	80 93 a3 01 	sts	0x01A3, r24
		}
	  }
	  show_set_temp(0);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	0e 94 03 05 	call	0xa06	; 0xa06 <show_set_temp>
    break;
    1032:	08 95       	ret
	default:
	  events_default(event);
    1034:	0e 94 3e 01 	call	0x27c	; 0x27c <events_default>
    1038:	08 95       	ret

0000103a <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
    103a:	20 91 b3 01 	lds	r18, 0x01B3
    103e:	28 30       	cpi	r18, 0x08	; 8
    1040:	78 f4       	brcc	.+30     	; 0x1060 <PutBut+0x26>
     buf[head] = but;
    1042:	90 91 b4 01 	lds	r25, 0x01B4
    1046:	e9 2f       	mov	r30, r25
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	eb 54       	subi	r30, 0x4B	; 75
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	80 83       	st	Z, r24
     count++;
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	20 93 b3 01 	sts	0x01B3, r18
     head++;
    1056:	89 2f       	mov	r24, r25
    1058:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
    105a:	87 70       	andi	r24, 0x07	; 7
    105c:	80 93 b4 01 	sts	0x01B4, r24
    1060:	08 95       	ret

00001062 <BUT_Check.clone.0>:
  }
  
  return but;
}
//=============================================================================
static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
    106a:	96 2f       	mov	r25, r22
    106c:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
    106e:	c9 2f       	mov	r28, r25
    1070:	d0 e0       	ldi	r29, 0x00	; 0
    1072:	fe 01       	movw	r30, r28
    1074:	e4 55       	subi	r30, 0x54	; 84
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	10 81       	ld	r17, Z

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
#endif

 countDebTmp = countDeb[i];
    107a:	fe 01       	movw	r30, r28
    107c:	e1 55       	subi	r30, 0x51	; 81
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	90 81       	ld	r25, Z
    1082:	90 93 b2 01 	sts	0x01B2, r25
  
 if (state){
    1086:	88 23       	and	r24, r24
    1088:	a9 f0       	breq	.+42     	; 0x10b4 <BUT_Check.clone.0+0x52>
    if (countDebTmp < BUT_COUNT_MAX){
    108a:	97 39       	cpi	r25, 0x97	; 151
    108c:	28 f5       	brcc	.+74     	; 0x10d8 <BUT_Check.clone.0+0x76>
       countDebTmp++;
    108e:	9f 5f       	subi	r25, 0xFF	; 255
    1090:	90 93 b2 01 	sts	0x01B2, r25

       if (countDebTmp > BUT_COUNT_THR){
    1094:	95 31       	cpi	r25, 0x15	; 21
    1096:	00 f1       	brcs	.+64     	; 0x10d8 <BUT_Check.clone.0+0x76>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
    1098:	10 fd       	sbrc	r17, 0
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <BUT_Check.clone.0+0x40>
             stateTmp |= FLAG_BUT_PRESSED;
    109c:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
    109e:	01 e0       	ldi	r16, 0x01	; 1
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <BUT_Check.clone.0+0x42>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
    10a2:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
    10a4:	97 39       	cpi	r25, 0x97	; 151
    10a6:	81 f4       	brne	.+32     	; 0x10c8 <BUT_Check.clone.0+0x66>
         if (!(stateTmp & FLAG_BUT_HOLD)){
    10a8:	11 fd       	sbrc	r17, 1
    10aa:	0e c0       	rjmp	.+28     	; 0x10c8 <BUT_Check.clone.0+0x66>
            stateTmp &= ~(FLAG_BUT_RELEASED);
    10ac:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
    10ae:	12 60       	ori	r17, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
    10b0:	02 e0       	ldi	r16, 0x02	; 2
    10b2:	0c c0       	rjmp	.+24     	; 0x10cc <BUT_Check.clone.0+0x6a>
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
  #endif           
        }
     }
#else
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
    10b4:	10 ff       	sbrs	r17, 0
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <BUT_Check.clone.0+0x5e>
    10b8:	11 fd       	sbrc	r17, 1
    10ba:	1c c0       	rjmp	.+56     	; 0x10f4 <BUT_Check.clone.0+0x92>
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
    10bc:	03 e0       	ldi	r16, 0x03	; 3
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <BUT_Check.clone.0+0x60>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
    10c0:	00 e0       	ldi	r16, 0x00	; 0
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
    10c2:	10 92 b2 01 	sts	0x01B2, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
    10c6:	1c 7f       	andi	r17, 0xFC	; 252
  }
 
  countHold[i] = countHoldTmp;
#endif       
  
  if (event){
    10c8:	00 23       	and	r16, r16
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <BUT_Check.clone.0+0x76>
     PutBut(i+1);
    10cc:	86 2f       	mov	r24, r22
    10ce:	0e 94 1d 08 	call	0x103a	; 0x103a <PutBut>
     PutBut(event);
    10d2:	80 2f       	mov	r24, r16
    10d4:	0e 94 1d 08 	call	0x103a	; 0x103a <PutBut>
  }
  
  countDeb[i] = countDebTmp;
    10d8:	fe 01       	movw	r30, r28
    10da:	e1 55       	subi	r30, 0x51	; 81
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	80 91 b2 01 	lds	r24, 0x01B2
    10e2:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
    10e4:	c4 55       	subi	r28, 0x54	; 84
    10e6:	de 4f       	sbci	r29, 0xFE	; 254
    10e8:	18 83       	st	Y, r17
}
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
    10f4:	04 e0       	ldi	r16, 0x04	; 4
    10f6:	e5 cf       	rjmp	.-54     	; 0x10c2 <BUT_Check.clone.0+0x60>

000010f8 <KBD_getBut>:

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    
  if (count){
    10f8:	20 91 b3 01 	lds	r18, 0x01B3
    10fc:	22 23       	and	r18, r18
    10fe:	79 f0       	breq	.+30     	; 0x111e <KBD_getBut+0x26>
     but = buf[tail];
    1100:	90 91 bd 01 	lds	r25, 0x01BD
    1104:	e9 2f       	mov	r30, r25
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	eb 54       	subi	r30, 0x4B	; 75
    110a:	fe 4f       	sbci	r31, 0xFE	; 254
    110c:	80 81       	ld	r24, Z
     count--;
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	20 93 b3 01 	sts	0x01B3, r18
     tail++;
    1114:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
    1116:	97 70       	andi	r25, 0x07	; 7
    1118:	90 93 bd 01 	sts	0x01BD, r25
    111c:	08 95       	ret
  }
}

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    111e:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
    1120:	08 95       	ret

00001122 <KBD_init>:
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
    1122:	10 92 af 01 	sts	0x01AF, r1
     stateBut[i] = 0;
    1126:	10 92 ac 01 	sts	0x01AC, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
    112a:	10 92 b0 01 	sts	0x01B0, r1
     stateBut[i] = 0;
    112e:	10 92 ad 01 	sts	0x01AD, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
    1132:	10 92 b1 01 	sts	0x01B1, r1
     stateBut[i] = 0;
    1136:	10 92 ae 01 	sts	0x01AE, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
    113a:	10 92 b5 01 	sts	0x01B5, r1
    113e:	10 92 b6 01 	sts	0x01B6, r1
    1142:	10 92 b7 01 	sts	0x01B7, r1
    1146:	10 92 b8 01 	sts	0x01B8, r1
    114a:	10 92 b9 01 	sts	0x01B9, r1
    114e:	10 92 ba 01 	sts	0x01BA, r1
    1152:	10 92 bb 01 	sts	0x01BB, r1
    1156:	10 92 bc 01 	sts	0x01BC, r1
  }
  
  head = 0;
    115a:	10 92 b4 01 	sts	0x01B4, r1
  tail = 0;  
    115e:	10 92 bd 01 	sts	0x01BD, r1
  count = 0;
    1162:	10 92 b3 01 	sts	0x01B3, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
    1166:	54 98       	cbi	0x0a, 4	; 10
    1168:	5c 9a       	sbi	0x0b, 4	; 11
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
    116a:	55 98       	cbi	0x0a, 5	; 10
    116c:	5d 9a       	sbi	0x0b, 5	; 11
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
    116e:	56 98       	cbi	0x0a, 6	; 10
    1170:	5e 9a       	sbi	0x0b, 6	; 11
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
    1172:	08 95       	ret

00001174 <KBD_poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	4c 99       	sbic	0x09, 4	; 9
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	0e 94 31 08 	call	0x1062	; 0x1062 <BUT_Check.clone.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	4d 99       	sbic	0x09, 5	; 9
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	62 e0       	ldi	r22, 0x02	; 2
    1188:	0e 94 31 08 	call	0x1062	; 0x1062 <BUT_Check.clone.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	4e 99       	sbic	0x09, 6	; 9
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	63 e0       	ldi	r22, 0x03	; 3
    1194:	0e 94 31 08 	call	0x1062	; 0x1062 <BUT_Check.clone.0>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
    1198:	08 95       	ret

0000119a <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
    119a:	1f 93       	push	r17
  uint8_t but = 0;
  uint8_t code = 0;
  KBD_poll();
    119c:	0e 94 ba 08 	call	0x1174	; 0x1174 <KBD_poll>
  but = KBD_getBut();
    11a0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <KBD_getBut>
    11a4:	18 2f       	mov	r17, r24
  if (but) {
    11a6:	88 23       	and	r24, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <KBD_scan+0x12>
    11aa:	46 c0       	rjmp	.+140    	; 0x1238 <KBD_scan+0x9e>
    code = KBD_getBut(); 
    11ac:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <KBD_getBut>
    if (but == 1) {
    11b0:	11 30       	cpi	r17, 0x01	; 1
    11b2:	99 f4       	brne	.+38     	; 0x11da <KBD_scan+0x40>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	11 f4       	brne	.+4      	; 0x11bc <KBD_scan+0x22>
    11b8:	8a e0       	ldi	r24, 0x0A	; 10
    11ba:	38 c0       	rjmp	.+112    	; 0x122c <KBD_scan+0x92>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_PLUS_HOLD, 0, 0); }
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	e1 f5       	brne	.+120    	; 0x1238 <KBD_scan+0x9e>
    11c0:	40 9a       	sbi	0x08, 0	; 8
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	97 ee       	ldi	r25, 0xE7	; 231
    11c6:	a3 e0       	ldi	r26, 0x03	; 3
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	a0 40       	sbci	r26, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <KBD_scan+0x2e>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <KBD_scan+0x38>
    11d2:	00 00       	nop
    11d4:	40 98       	cbi	0x08, 0	; 8
    11d6:	8c e0       	ldi	r24, 0x0C	; 12
    11d8:	29 c0       	rjmp	.+82     	; 0x122c <KBD_scan+0x92>
    } 
	if (but == 2) {
    11da:	12 30       	cpi	r17, 0x02	; 2
    11dc:	99 f4       	brne	.+38     	; 0x1204 <KBD_scan+0x6a>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_SET, 0, 0); }
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <KBD_scan+0x4c>
    11e2:	84 e1       	ldi	r24, 0x14	; 20
    11e4:	23 c0       	rjmp	.+70     	; 0x122c <KBD_scan+0x92>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	39 f5       	brne	.+78     	; 0x1238 <KBD_scan+0x9e>
    11ea:	40 9a       	sbi	0x08, 0	; 8
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	97 ee       	ldi	r25, 0xE7	; 231
    11f0:	a3 e0       	ldi	r26, 0x03	; 3
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	90 40       	sbci	r25, 0x00	; 0
    11f6:	a0 40       	sbci	r26, 0x00	; 0
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <KBD_scan+0x58>
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <KBD_scan+0x62>
    11fc:	00 00       	nop
    11fe:	40 98       	cbi	0x08, 0	; 8
    1200:	85 e1       	ldi	r24, 0x15	; 21
    1202:	14 c0       	rjmp	.+40     	; 0x122c <KBD_scan+0x92>
    }
	if (but == 3) {
    1204:	13 30       	cpi	r17, 0x03	; 3
    1206:	c1 f4       	brne	.+48     	; 0x1238 <KBD_scan+0x9e>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	11 f4       	brne	.+4      	; 0x1210 <KBD_scan+0x76>
    120c:	8e e1       	ldi	r24, 0x1E	; 30
    120e:	0e c0       	rjmp	.+28     	; 0x122c <KBD_scan+0x92>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_MINUS_HOLD, 0, 0); }
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	91 f4       	brne	.+36     	; 0x1238 <KBD_scan+0x9e>
    1214:	40 9a       	sbi	0x08, 0	; 8
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	97 ee       	ldi	r25, 0xE7	; 231
    121a:	a3 e0       	ldi	r26, 0x03	; 3
    121c:	81 50       	subi	r24, 0x01	; 1
    121e:	90 40       	sbci	r25, 0x00	; 0
    1220:	a0 40       	sbci	r26, 0x00	; 0
    1222:	e1 f7       	brne	.-8      	; 0x121c <KBD_scan+0x82>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <KBD_scan+0x8c>
    1226:	00 00       	nop
    1228:	40 98       	cbi	0x08, 0	; 8
    122a:	80 e2       	ldi	r24, 0x20	; 32
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	0e 94 30 09 	call	0x1260	; 0x1260 <RTOS_setTask>
    }
  }
}
    1238:	1f 91       	pop	r17
    123a:	08 95       	ret

0000123c <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    123c:	e1 eb       	ldi	r30, 0xB1	; 177
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	84 60       	ori	r24, 0x04	; 4
    1244:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    124a:	e0 e7       	ldi	r30, 0x70	; 112
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	81 60       	ori	r24, 0x01	; 1
    1252:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    1254:	86 e0       	ldi	r24, 0x06	; 6
    1256:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    125a:	10 92 1f 02 	sts	0x021F, r1
}
    125e:	08 95       	ret

00001260 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    1260:	88 23       	and	r24, r24
    1262:	09 f4       	brne	.+2      	; 0x1266 <RTOS_setTask+0x6>
    1264:	6f c0       	rjmp	.+222    	; 0x1344 <RTOS_setTask+0xe4>
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	1b c0       	rjmp	.+54     	; 0x12a0 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    126a:	29 2f       	mov	r18, r25
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	f9 01       	movw	r30, r18
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	e2 0f       	add	r30, r18
    1276:	f3 1f       	adc	r31, r19
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	e1 54       	subi	r30, 0x41	; 65
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	20 81       	ld	r18, Z
    1282:	28 17       	cp	r18, r24
    1284:	61 f4       	brne	.+24     	; 0x129e <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    1286:	72 83       	std	Z+2, r23	; 0x02
    1288:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    128a:	54 83       	std	Z+4, r21	; 0x04
    128c:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    128e:	61 15       	cp	r22, r1
    1290:	71 05       	cpc	r23, r1
    1292:	19 f4       	brne	.+6      	; 0x129a <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	85 83       	std	Z+5, r24	; 0x05
    1298:	08 95       	ret
      } else TaskArray[i].run = 0;   
    129a:	15 82       	std	Z+5, r1	; 0x05
    129c:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    129e:	9f 5f       	subi	r25, 0xFF	; 255
    12a0:	20 91 1f 02 	lds	r18, 0x021F
    12a4:	92 17       	cp	r25, r18
    12a6:	08 f3       	brcs	.-62     	; 0x126a <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    12a8:	20 91 1f 02 	lds	r18, 0x021F
    12ac:	20 31       	cpi	r18, 0x10	; 16
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <RTOS_setTask+0x52>
    12b0:	49 c0       	rjmp	.+146    	; 0x1344 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    12b2:	20 91 1f 02 	lds	r18, 0x021F
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	f9 01       	movw	r30, r18
    12ba:	ee 0f       	add	r30, r30
    12bc:	ff 1f       	adc	r31, r31
    12be:	e2 0f       	add	r30, r18
    12c0:	f3 1f       	adc	r31, r19
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	e1 54       	subi	r30, 0x41	; 65
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    12cc:	20 91 1f 02 	lds	r18, 0x021F
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	e2 0f       	add	r30, r18
    12da:	f3 1f       	adc	r31, r19
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e1 54       	subi	r30, 0x41	; 65
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	72 83       	std	Z+2, r23	; 0x02
    12e6:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    12e8:	20 91 1f 02 	lds	r18, 0x021F
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	f9 01       	movw	r30, r18
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	e2 0f       	add	r30, r18
    12f6:	f3 1f       	adc	r31, r19
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	e1 54       	subi	r30, 0x41	; 65
    12fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1300:	54 83       	std	Z+4, r21	; 0x04
    1302:	43 83       	std	Z+3, r20	; 0x03
    1304:	89 2f       	mov	r24, r25
    1306:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    1308:	61 15       	cp	r22, r1
    130a:	71 05       	cpc	r23, r1
    130c:	61 f4       	brne	.+24     	; 0x1326 <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    130e:	fc 01       	movw	r30, r24
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	e8 0f       	add	r30, r24
    1316:	f9 1f       	adc	r31, r25
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	e1 54       	subi	r30, 0x41	; 65
    131e:	fe 4f       	sbci	r31, 0xFE	; 254
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	85 83       	std	Z+5, r24	; 0x05
    1324:	0a c0       	rjmp	.+20     	; 0x133a <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    1326:	fc 01       	movw	r30, r24
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	e8 0f       	add	r30, r24
    132e:	f9 1f       	adc	r31, r25
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	e1 54       	subi	r30, 0x41	; 65
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    133a:	80 91 1f 02 	lds	r24, 0x021F
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	80 93 1f 02 	sts	0x021F, r24
    1344:	08 95       	ret

00001346 <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	2e c0       	rjmp	.+92     	; 0x13a6 <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    134a:	29 2f       	mov	r18, r25
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	d9 01       	movw	r26, r18
    1350:	aa 0f       	add	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	a2 0f       	add	r26, r18
    1356:	b3 1f       	adc	r27, r19
    1358:	aa 0f       	add	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	a1 54       	subi	r26, 0x41	; 65
    135e:	be 4f       	sbci	r27, 0xFE	; 254
    1360:	4c 91       	ld	r20, X
    1362:	48 17       	cp	r20, r24
    1364:	f9 f4       	brne	.+62     	; 0x13a4 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    1366:	80 91 1f 02 	lds	r24, 0x021F
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	28 17       	cp	r18, r24
    1370:	39 07       	cpc	r19, r25
    1372:	91 f0       	breq	.+36     	; 0x1398 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1374:	80 91 1f 02 	lds	r24, 0x021F
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	fc 01       	movw	r30, r24
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	e8 0f       	add	r30, r24
    1384:	f9 1f       	adc	r31, r25
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	e1 54       	subi	r30, 0x41	; 65
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	86 e0       	ldi	r24, 0x06	; 6
    1390:	01 90       	ld	r0, Z+
    1392:	0d 92       	st	X+, r0
    1394:	81 50       	subi	r24, 0x01	; 1
    1396:	e1 f7       	brne	.-8      	; 0x1390 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    1398:	80 91 1f 02 	lds	r24, 0x021F
    139c:	81 50       	subi	r24, 0x01	; 1
    139e:	80 93 1f 02 	sts	0x021F, r24
      return;
    13a2:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    13a4:	9f 5f       	subi	r25, 0xFF	; 255
    13a6:	20 91 1f 02 	lds	r18, 0x021F
    13aa:	92 17       	cp	r25, r18
    13ac:	70 f2       	brcs	.-100    	; 0x134a <RTOS_deleteTask+0x4>
    13ae:	08 95       	ret

000013b0 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    13b4:	80 91 be 01 	lds	r24, 0x01BE
    13b8:	88 23       	and	r24, r24
    13ba:	11 f4       	brne	.+4      	; 0x13c0 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    13bc:	10 e0       	ldi	r17, 0x00	; 0
    13be:	4e c0       	rjmp	.+156    	; 0x145c <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    13c0:	10 92 be 01 	sts	0x01BE, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    13c6:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    13c8:	17 c0       	rjmp	.+46     	; 0x13f8 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    13ca:	82 2f       	mov	r24, r18
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	fc 01       	movw	r30, r24
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	e8 0f       	add	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	e1 54       	subi	r30, 0x41	; 65
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	92 81       	ldd	r25, Z+2	; 0x02
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	11 f4       	brne	.+4      	; 0x13ec <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    13e8:	35 83       	std	Z+5, r19	; 0x05
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    13ec:	81 81       	ldd	r24, Z+1	; 0x01
    13ee:	92 81       	ldd	r25, Z+2	; 0x02
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	92 83       	std	Z+2, r25	; 0x02
    13f4:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	80 91 1f 02 	lds	r24, 0x021F
    13fc:	28 17       	cp	r18, r24
    13fe:	28 f3       	brcs	.-54     	; 0x13ca <RTOS_dispatchTask+0x1a>
    1400:	dd cf       	rjmp	.-70     	; 0x13bc <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1402:	81 2f       	mov	r24, r17
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	fc 01       	movw	r30, r24
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	e8 0f       	add	r30, r24
    140e:	f9 1f       	adc	r31, r25
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	e1 54       	subi	r30, 0x41	; 65
    1416:	fe 4f       	sbci	r31, 0xFE	; 254
    1418:	85 81       	ldd	r24, Z+5	; 0x05
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	f1 f4       	brne	.+60     	; 0x145a <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    141e:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    1420:	23 81       	ldd	r18, Z+3	; 0x03
    1422:	34 81       	ldd	r19, Z+4	; 0x04
    1424:	21 15       	cp	r18, r1
    1426:	31 05       	cpc	r19, r1
    1428:	31 f4       	brne	.+12     	; 0x1436 <RTOS_dispatchTask+0x86>
      {  
        cli();
    142a:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    142c:	80 81       	ld	r24, Z
    142e:	0e 94 a3 09 	call	0x1346	; 0x1346 <RTOS_deleteTask>
        sei();
    1432:	78 94       	sei
    1434:	0c c0       	rjmp	.+24     	; 0x144e <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    1436:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    1438:	21 81       	ldd	r18, Z+1	; 0x01
    143a:	32 81       	ldd	r19, Z+2	; 0x02
    143c:	21 15       	cp	r18, r1
    143e:	31 05       	cpc	r19, r1
    1440:	31 f4       	brne	.+12     	; 0x144e <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1442:	23 81       	ldd	r18, Z+3	; 0x03
    1444:	34 81       	ldd	r19, Z+4	; 0x04
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	30 40       	sbci	r19, 0x00	; 0
    144a:	32 83       	std	Z+2, r19	; 0x02
    144c:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    144e:	e0 91 35 01 	lds	r30, 0x0135
    1452:	f0 91 36 01 	lds	r31, 0x0136
    1456:	80 2f       	mov	r24, r16
    1458:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    145a:	1f 5f       	subi	r17, 0xFF	; 255
    145c:	80 91 1f 02 	lds	r24, 0x021F
    1460:	18 17       	cp	r17, r24
    1462:	78 f2       	brcs	.-98     	; 0x1402 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    1476:	86 e0       	ldi	r24, 0x06	; 6
    1478:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 be 01 	sts	0x01BE, r24
}
    1482:	8f 91       	pop	r24
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	0f 90       	pop	r0
    148a:	1f 90       	pop	r1
    148c:	18 95       	reti

0000148e <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    148e:	80 52       	subi	r24, 0x20	; 32
    1490:	86 35       	cpi	r24, 0x56	; 86
    1492:	30 f4       	brcc	.+12     	; 0x14a0 <MAX7219_lookupCode+0x12>
    1494:	e8 2f       	mov	r30, r24
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	e9 5b       	subi	r30, 0xB9	; 185
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	80 81       	ld	r24, Z
    149e:	08 95       	ret
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    14a2:	08 95       	ret

000014a4 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    14a4:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    14a6:	87 ff       	sbrs	r24, 7
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    14aa:	43 9a       	sbi	0x08, 3	; 8
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    14ae:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    14b0:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    14b2:	00 00       	nop
	asm("nop");
    14b4:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    14b6:	42 9a       	sbi	0x08, 2	; 8
    14b8:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    14bc:	88 0f       	add	r24, r24
    14be:	f3 cf       	rjmp	.-26     	; 0x14a6 <MAX7219_SendByte+0x2>
    14c0:	08 95       	ret

000014c2 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	18 2f       	mov	r17, r24
    14ca:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    14cc:	41 98       	cbi	0x08, 1	; 8
    14ce:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    14d0:	81 2f       	mov	r24, r17
    14d2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <MAX7219_SendByte>
	MAX7219_SendByte(data);
    14d6:	8f 2d       	mov	r24, r15
    14d8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <MAX7219_SendByte>
    14dc:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    14de:	c1 f7       	brne	.-16     	; 0x14d0 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    14e0:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	08 95       	ret

000014ea <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	c7 e3       	ldi	r28, 0x37	; 55
    14f4:	d1 e0       	ldi	r29, 0x01	; 1
    14f6:	0f e3       	ldi	r16, 0x3F	; 63
    14f8:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    14fa:	89 91       	ld	r24, Y+
    14fc:	f8 01       	movw	r30, r16
    14fe:	61 91       	ld	r22, Z+
    1500:	8f 01       	movw	r16, r30
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    1508:	f1 e0       	ldi	r31, 0x01	; 1
    150a:	cf 33       	cpi	r28, 0x3F	; 63
    150c:	df 07       	cpc	r29, r31
    150e:	a9 f7       	brne	.-22     	; 0x14fa <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    151a:	10 92 3f 01 	sts	0x013F, r1
    151e:	10 92 40 01 	sts	0x0140, r1
    1522:	10 92 41 01 	sts	0x0141, r1
    1526:	10 92 42 01 	sts	0x0142, r1
    152a:	10 92 43 01 	sts	0x0143, r1
    152e:	10 92 44 01 	sts	0x0144, r1
    1532:	10 92 45 01 	sts	0x0145, r1
    1536:	10 92 46 01 	sts	0x0146, r1
  }
  MAX7219_updateDisplay();
    153a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MAX7219_updateDisplay>
}
    153e:	08 95       	ret

00001540 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1540:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1542:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    1544:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1546:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    1548:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    154a:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    154c:	8c e0       	ldi	r24, 0x0C	; 12
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    1554:	8f e0       	ldi	r24, 0x0F	; 15
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    155c:	89 e0       	ldi	r24, 0x09	; 9
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    1564:	8a e0       	ldi	r24, 0x0A	; 10
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    156c:	8b e0       	ldi	r24, 0x0B	; 11
    156e:	67 e0       	ldi	r22, 0x07	; 7
    1570:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    1574:	0e 94 8d 0a 	call	0x151a	; 0x151a <MAX7219_clearDisplay>
  return;
}
    1578:	08 95       	ret

0000157a <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	27 97       	sbiw	r28, 0x07	; 7
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	b8 2e       	mov	r11, r24
    159e:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    15a0:	77 ff       	sbrs	r23, 7
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    15a4:	90 95       	com	r25
    15a6:	81 95       	neg	r24
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    15aa:	31 e0       	ldi	r19, 0x01	; 1
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    15b0:	e4 2f       	mov	r30, r20
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8e 01       	movw	r16, r28
    15b6:	0f 5f       	subi	r16, 0xFF	; 255
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	e0 0f       	add	r30, r16
    15bc:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    15be:	5a e0       	ldi	r21, 0x0A	; 10
    15c0:	e5 2e       	mov	r14, r21
    15c2:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <MAX7219_printNum+0x5a>
    15c6:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    15c8:	b7 01       	movw	r22, r14
    15ca:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
    15ce:	80 5d       	subi	r24, 0xD0	; 208
    15d0:	80 83       	st	Z, r24
    x /= 10;
    15d2:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    15d4:	e0 17       	cp	r30, r16
    15d6:	f1 07       	cpc	r31, r17
    15d8:	b1 f7       	brne	.-20     	; 0x15c6 <MAX7219_printNum+0x4c>
    15da:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    15dc:	84 2f       	mov	r24, r20
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    15e2:	de 01       	movw	r26, r28
    15e4:	11 96       	adiw	r26, 0x01	; 1
    15e6:	08 c0       	rjmp	.+16     	; 0x15f8 <MAX7219_printNum+0x7e>
    15e8:	fd 01       	movw	r30, r26
    15ea:	e6 0f       	add	r30, r22
    15ec:	f7 1f       	adc	r31, r23
    15ee:	60 81       	ld	r22, Z
    15f0:	60 33       	cpi	r22, 0x30	; 48
    15f2:	11 f5       	brne	.+68     	; 0x1638 <MAX7219_printNum+0xbe>
    15f4:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    15f6:	5f 5f       	subi	r21, 0xFF	; 255
    15f8:	65 2f       	mov	r22, r21
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	68 17       	cp	r22, r24
    15fe:	79 07       	cpc	r23, r25
    1600:	9c f3       	brlt	.-26     	; 0x15e8 <MAX7219_printNum+0x6e>
    1602:	1a c0       	rjmp	.+52     	; 0x1638 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1604:	82 2f       	mov	r24, r18
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	8c 01       	movw	r16, r24
    160a:	0c 0d       	add	r16, r12
    160c:	1d 1d       	adc	r17, r13
    160e:	08 30       	cpi	r16, 0x08	; 8
    1610:	11 05       	cpc	r17, r1
    1612:	84 f4       	brge	.+32     	; 0x1634 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    1614:	8e 0d       	add	r24, r14
    1616:	9f 1d       	adc	r25, r15
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	2d 83       	std	Y+5, r18	; 0x05
    161e:	3e 83       	std	Y+6, r19	; 0x06
    1620:	4f 83       	std	Y+7, r20	; 0x07
    1622:	0e 94 47 0a 	call	0x148e	; 0x148e <MAX7219_lookupCode>
    1626:	f8 01       	movw	r30, r16
    1628:	e1 5c       	subi	r30, 0xC1	; 193
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	80 83       	st	Z, r24
    162e:	4f 81       	ldd	r20, Y+7	; 0x07
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1634:	2f 5f       	subi	r18, 0xFF	; 255
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    1638:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    163a:	cb 2c       	mov	r12, r11
    163c:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    163e:	7e 01       	movw	r14, r28
    1640:	08 94       	sec
    1642:	e1 1c       	adc	r14, r1
    1644:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1646:	24 17       	cp	r18, r20
    1648:	e8 f2       	brcs	.-70     	; 0x1604 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    164a:	33 23       	and	r19, r19
    164c:	41 f0       	breq	.+16     	; 0x165e <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    164e:	8d e2       	ldi	r24, 0x2D	; 45
    1650:	0e 94 47 0a 	call	0x148e	; 0x148e <MAX7219_lookupCode>
    1654:	eb 2d       	mov	r30, r11
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	e2 5c       	subi	r30, 0xC2	; 194
    165a:	fe 4f       	sbci	r31, 0xFE	; 254
    165c:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    165e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MAX7219_updateDisplay>
}
    1662:	27 96       	adiw	r28, 0x07	; 7
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	bf 90       	pop	r11
    1680:	08 95       	ret

00001682 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    1682:	1f 93       	push	r17
    1684:	18 2f       	mov	r17, r24
    1686:	86 2f       	mov	r24, r22
  if (pos < 9) {
    1688:	19 30       	cpi	r17, 0x09	; 9
    168a:	48 f4       	brcc	.+18     	; 0x169e <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    168c:	0e 94 47 0a 	call	0x148e	; 0x148e <MAX7219_lookupCode>
    1690:	e1 2f       	mov	r30, r17
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	e2 5c       	subi	r30, 0xC2	; 194
    1696:	fe 4f       	sbci	r31, 0xFE	; 254
    1698:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    169a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MAX7219_updateDisplay>
  }
}
    169e:	1f 91       	pop	r17
    16a0:	08 95       	ret

000016a2 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
  unsigned char i = pos;
    16ac:	e6 2e       	mov	r14, r22
    16ae:	e7 01       	movw	r28, r14
    16b0:	7e 01       	movw	r14, r28
    16b2:	f7 2e       	mov	r15, r23
    16b4:	e7 01       	movw	r28, r14
    16b6:	18 2f       	mov	r17, r24
  while(*data) {
    16b8:	0a c0       	rjmp	.+20     	; 0x16ce <MAX7219_printStr+0x2c>
    if (i < 9) {
    16ba:	19 30       	cpi	r17, 0x09	; 9
    16bc:	58 f4       	brcc	.+22     	; 0x16d4 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    16be:	0e 94 47 0a 	call	0x148e	; 0x148e <MAX7219_lookupCode>
    16c2:	e1 2f       	mov	r30, r17
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	e2 5c       	subi	r30, 0xC2	; 194
    16c8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ca:	80 83       	st	Z, r24
      i++;
    16cc:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    16ce:	89 91       	ld	r24, Y+
    16d0:	88 23       	and	r24, r24
    16d2:	99 f7       	brne	.-26     	; 0x16ba <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    16d4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MAX7219_updateDisplay>
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	08 95       	ret

000016e4 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    16e4:	e8 2f       	mov	r30, r24
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    16e8:	61 30       	cpi	r22, 0x01	; 1
    16ea:	29 f4       	brne	.+10     	; 0x16f6 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    16ec:	e2 5c       	subi	r30, 0xC2	; 194
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	80 81       	ld	r24, Z
    16f2:	80 68       	ori	r24, 0x80	; 128
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    16f6:	e2 5c       	subi	r30, 0xC2	; 194
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 77       	andi	r24, 0x7F	; 127
    16fe:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    1700:	0e 94 75 0a 	call	0x14ea	; 0x14ea <MAX7219_updateDisplay>
}
    1704:	08 95       	ret

00001706 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    1706:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    1708:	f8 94       	cli
  switch(chanel) {
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	01 f1       	breq	.+64     	; 0x174e <ds18x20IsOnBus+0x48>
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	20 f4       	brcc	.+8      	; 0x171a <ds18x20IsOnBus+0x14>
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	09 f0       	breq	.+2      	; 0x1718 <ds18x20IsOnBus+0x12>
    1716:	57 c0       	rjmp	.+174    	; 0x17c6 <ds18x20IsOnBus+0xc0>
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <ds18x20IsOnBus+0x20>
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	61 f1       	breq	.+88     	; 0x1776 <ds18x20IsOnBus+0x70>
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	09 f0       	breq	.+2      	; 0x1724 <ds18x20IsOnBus+0x1e>
    1722:	51 c0       	rjmp	.+162    	; 0x17c6 <ds18x20IsOnBus+0xc0>
    1724:	3e c0       	rjmp	.+124    	; 0x17a2 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1726:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1728:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    172a:	8f e7       	ldi	r24, 0x7F	; 127
    172c:	97 e0       	ldi	r25, 0x07	; 7
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <ds18x20IsOnBus+0x28>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <ds18x20IsOnBus+0x2e>
    1734:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    1736:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1738:	29 9a       	sbi	0x05, 1	; 5
    173a:	a7 e1       	ldi	r26, 0x17	; 23
    173c:	b1 e0       	ldi	r27, 0x01	; 1
    173e:	11 97       	sbiw	r26, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <ds18x20IsOnBus+0x38>
    1742:	00 c0       	rjmp	.+0      	; 0x1744 <ds18x20IsOnBus+0x3e>
    1744:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	19 9b       	sbis	0x03, 1	; 3
    174a:	3e c0       	rjmp	.+124    	; 0x17c8 <ds18x20IsOnBus+0xc2>
    174c:	3c c0       	rjmp	.+120    	; 0x17c6 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    174e:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    1750:	28 98       	cbi	0x05, 0	; 5
    1752:	8f e7       	ldi	r24, 0x7F	; 127
    1754:	97 e0       	ldi	r25, 0x07	; 7
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <ds18x20IsOnBus+0x50>
    175a:	00 c0       	rjmp	.+0      	; 0x175c <ds18x20IsOnBus+0x56>
    175c:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    175e:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    1760:	28 9a       	sbi	0x05, 0	; 5
    1762:	a7 e1       	ldi	r26, 0x17	; 23
    1764:	b1 e0       	ldi	r27, 0x01	; 1
    1766:	11 97       	sbiw	r26, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <ds18x20IsOnBus+0x60>
    176a:	00 c0       	rjmp	.+0      	; 0x176c <ds18x20IsOnBus+0x66>
    176c:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	18 9b       	sbis	0x03, 0	; 3
    1772:	2a c0       	rjmp	.+84     	; 0x17c8 <ds18x20IsOnBus+0xc2>
    1774:	28 c0       	rjmp	.+80     	; 0x17c6 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1776:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1778:	5f 98       	cbi	0x0b, 7	; 11
    177a:	8f e7       	ldi	r24, 0x7F	; 127
    177c:	97 e0       	ldi	r25, 0x07	; 7
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <ds18x20IsOnBus+0x78>
    1782:	00 c0       	rjmp	.+0      	; 0x1784 <ds18x20IsOnBus+0x7e>
    1784:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    1786:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    1788:	5f 9a       	sbi	0x0b, 7	; 11
    178a:	a7 e1       	ldi	r26, 0x17	; 23
    178c:	b1 e0       	ldi	r27, 0x01	; 1
    178e:	11 97       	sbiw	r26, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <ds18x20IsOnBus+0x88>
    1792:	00 c0       	rjmp	.+0      	; 0x1794 <ds18x20IsOnBus+0x8e>
    1794:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    1796:	89 b1       	in	r24, 0x09	; 9
    1798:	80 95       	com	r24
    179a:	88 1f       	adc	r24, r24
    179c:	88 27       	eor	r24, r24
    179e:	88 1f       	adc	r24, r24
    break;
    17a0:	13 c0       	rjmp	.+38     	; 0x17c8 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    17a2:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    17a4:	2a 98       	cbi	0x05, 2	; 5
    17a6:	8f e7       	ldi	r24, 0x7F	; 127
    17a8:	97 e0       	ldi	r25, 0x07	; 7
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <ds18x20IsOnBus+0xa4>
    17ae:	00 c0       	rjmp	.+0      	; 0x17b0 <ds18x20IsOnBus+0xaa>
    17b0:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    17b2:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    17b4:	2a 9a       	sbi	0x05, 2	; 5
    17b6:	a7 e1       	ldi	r26, 0x17	; 23
    17b8:	b1 e0       	ldi	r27, 0x01	; 1
    17ba:	11 97       	sbiw	r26, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <ds18x20IsOnBus+0xb4>
    17be:	00 c0       	rjmp	.+0      	; 0x17c0 <ds18x20IsOnBus+0xba>
    17c0:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	a7 e6       	ldi	r26, 0x67	; 103
    17ca:	b6 e0       	ldi	r27, 0x06	; 6
    17cc:	11 97       	sbiw	r26, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <ds18x20IsOnBus+0xc6>
    17d0:	00 c0       	rjmp	.+0      	; 0x17d2 <ds18x20IsOnBus+0xcc>
    17d2:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	e1 5e       	subi	r30, 0xE1	; 225
    17d8:	fd 4f       	sbci	r31, 0xFD	; 253
    17da:	80 83       	st	Z, r24
  sei();
    17dc:	78 94       	sei
  return ret;
}
    17de:	08 95       	ret

000017e0 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    17e0:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    17e2:	98 2f       	mov	r25, r24
    17e4:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    17e6:	f8 94       	cli
  switch(chanel) {
    17e8:	62 30       	cpi	r22, 0x02	; 2
    17ea:	e1 f0       	breq	.+56     	; 0x1824 <ds18x20SendByte+0x44>
    17ec:	63 30       	cpi	r22, 0x03	; 3
    17ee:	20 f4       	brcc	.+8      	; 0x17f8 <ds18x20SendByte+0x18>
    17f0:	61 30       	cpi	r22, 0x01	; 1
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <ds18x20SendByte+0x16>
    17f4:	52 c0       	rjmp	.+164    	; 0x189a <ds18x20SendByte+0xba>
    17f6:	06 c0       	rjmp	.+12     	; 0x1804 <ds18x20SendByte+0x24>
    17f8:	63 30       	cpi	r22, 0x03	; 3
    17fa:	21 f1       	breq	.+72     	; 0x1844 <ds18x20SendByte+0x64>
    17fc:	64 30       	cpi	r22, 0x04	; 4
    17fe:	09 f0       	breq	.+2      	; 0x1802 <ds18x20SendByte+0x22>
    1800:	4c c0       	rjmp	.+152    	; 0x189a <ds18x20SendByte+0xba>
    1802:	30 c0       	rjmp	.+96     	; 0x1864 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1804:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1806:	29 98       	cbi	0x05, 1	; 5
    1808:	30 e2       	ldi	r19, 0x20	; 32
    180a:	3a 95       	dec	r19
    180c:	f1 f7       	brne	.-4      	; 0x180a <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    180e:	99 23       	and	r25, r25
    1810:	31 f4       	brne	.+12     	; 0x181e <ds18x20SendByte+0x3e>
    1812:	e7 ed       	ldi	r30, 0xD7	; 215
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	31 97       	sbiw	r30, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <ds18x20SendByte+0x36>
    181a:	00 c0       	rjmp	.+0      	; 0x181c <ds18x20SendByte+0x3c>
    181c:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    181e:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1820:	29 9a       	sbi	0x05, 1	; 5
    1822:	2f c0       	rjmp	.+94     	; 0x1882 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    1824:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    1826:	28 98       	cbi	0x05, 0	; 5
    1828:	f0 e2       	ldi	r31, 0x20	; 32
    182a:	fa 95       	dec	r31
    182c:	f1 f7       	brne	.-4      	; 0x182a <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    182e:	99 23       	and	r25, r25
    1830:	31 f4       	brne	.+12     	; 0x183e <ds18x20SendByte+0x5e>
    1832:	e7 ed       	ldi	r30, 0xD7	; 215
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	31 97       	sbiw	r30, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <ds18x20SendByte+0x56>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <ds18x20SendByte+0x5c>
    183c:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    183e:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    1840:	28 9a       	sbi	0x05, 0	; 5
    1842:	1f c0       	rjmp	.+62     	; 0x1882 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1844:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1846:	5f 98       	cbi	0x0b, 7	; 11
    1848:	f0 e2       	ldi	r31, 0x20	; 32
    184a:	fa 95       	dec	r31
    184c:	f1 f7       	brne	.-4      	; 0x184a <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    184e:	99 23       	and	r25, r25
    1850:	31 f4       	brne	.+12     	; 0x185e <ds18x20SendByte+0x7e>
    1852:	e7 ed       	ldi	r30, 0xD7	; 215
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	31 97       	sbiw	r30, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <ds18x20SendByte+0x76>
    185a:	00 c0       	rjmp	.+0      	; 0x185c <ds18x20SendByte+0x7c>
    185c:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    185e:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    1860:	5f 9a       	sbi	0x0b, 7	; 11
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    1864:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    1866:	2a 98       	cbi	0x05, 2	; 5
    1868:	f0 e2       	ldi	r31, 0x20	; 32
    186a:	fa 95       	dec	r31
    186c:	f1 f7       	brne	.-4      	; 0x186a <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    186e:	99 23       	and	r25, r25
    1870:	31 f4       	brne	.+12     	; 0x187e <ds18x20SendByte+0x9e>
    1872:	e7 ed       	ldi	r30, 0xD7	; 215
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	31 97       	sbiw	r30, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <ds18x20SendByte+0x96>
    187a:	00 c0       	rjmp	.+0      	; 0x187c <ds18x20SendByte+0x9c>
    187c:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    187e:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    1880:	2a 9a       	sbi	0x05, 2	; 5
    1882:	f5 e3       	ldi	r31, 0x35	; 53
    1884:	fa 95       	dec	r31
    1886:	f1 f7       	brne	.-4      	; 0x1884 <ds18x20SendByte+0xa4>
    1888:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    188a:	99 23       	and	r25, r25
    188c:	31 f0       	breq	.+12     	; 0x189a <ds18x20SendByte+0xba>
    188e:	e7 ed       	ldi	r30, 0xD7	; 215
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	31 97       	sbiw	r30, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <ds18x20SendByte+0xb2>
    1896:	00 c0       	rjmp	.+0      	; 0x1898 <ds18x20SendByte+0xb8>
    1898:	00 00       	nop
    break;
  }
  sei();
    189a:	78 94       	sei
    189c:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    189e:	11 f0       	breq	.+4      	; 0x18a4 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    18a0:	86 95       	lsr	r24
    18a2:	9f cf       	rjmp	.-194    	; 0x17e2 <ds18x20SendByte+0x2>
    18a4:	08 95       	ret

000018a6 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    18a6:	28 2f       	mov	r18, r24
    18a8:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    18aa:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    18ac:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    18ae:	f8 94       	cli
  switch(chanel) {
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	c1 f0       	breq	.+48     	; 0x18e4 <ds18x20GetByte+0x3e>
    18b4:	23 30       	cpi	r18, 0x03	; 3
    18b6:	20 f4       	brcc	.+8      	; 0x18c0 <ds18x20GetByte+0x1a>
    18b8:	21 30       	cpi	r18, 0x01	; 1
    18ba:	09 f0       	breq	.+2      	; 0x18be <ds18x20GetByte+0x18>
    18bc:	40 c0       	rjmp	.+128    	; 0x193e <ds18x20GetByte+0x98>
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <ds18x20GetByte+0x24>
    18c0:	23 30       	cpi	r18, 0x03	; 3
    18c2:	e9 f0       	breq	.+58     	; 0x18fe <ds18x20GetByte+0x58>
    18c4:	24 30       	cpi	r18, 0x04	; 4
    18c6:	d9 f5       	brne	.+118    	; 0x193e <ds18x20GetByte+0x98>
    18c8:	27 c0       	rjmp	.+78     	; 0x1918 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    18ca:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    18cc:	29 98       	cbi	0x05, 1	; 5
    18ce:	90 e2       	ldi	r25, 0x20	; 32
    18d0:	9a 95       	dec	r25
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    18d4:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    18d6:	29 9a       	sbi	0x05, 1	; 5
    18d8:	e0 e3       	ldi	r30, 0x30	; 48
    18da:	ea 95       	dec	r30
    18dc:	f1 f7       	brne	.-4      	; 0x18da <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    18de:	93 b1       	in	r25, 0x03	; 3
    18e0:	92 70       	andi	r25, 0x02	; 2
    18e2:	26 c0       	rjmp	.+76     	; 0x1930 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    18e4:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    18e6:	28 98       	cbi	0x05, 0	; 5
    18e8:	f0 e2       	ldi	r31, 0x20	; 32
    18ea:	fa 95       	dec	r31
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    18ee:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    18f0:	28 9a       	sbi	0x05, 0	; 5
    18f2:	90 e3       	ldi	r25, 0x30	; 48
    18f4:	9a 95       	dec	r25
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    18f8:	93 b1       	in	r25, 0x03	; 3
    18fa:	91 70       	andi	r25, 0x01	; 1
    18fc:	19 c0       	rjmp	.+50     	; 0x1930 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    18fe:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    1900:	5f 98       	cbi	0x0b, 7	; 11
    1902:	f0 e2       	ldi	r31, 0x20	; 32
    1904:	fa 95       	dec	r31
    1906:	f1 f7       	brne	.-4      	; 0x1904 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    1908:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    190a:	5f 9a       	sbi	0x0b, 7	; 11
    190c:	90 e3       	ldi	r25, 0x30	; 48
    190e:	9a 95       	dec	r25
    1910:	f1 f7       	brne	.-4      	; 0x190e <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    1912:	99 b1       	in	r25, 0x09	; 9
    1914:	90 78       	andi	r25, 0x80	; 128
    1916:	0c c0       	rjmp	.+24     	; 0x1930 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    1918:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    191a:	2a 98       	cbi	0x05, 2	; 5
    191c:	f0 e2       	ldi	r31, 0x20	; 32
    191e:	fa 95       	dec	r31
    1920:	f1 f7       	brne	.-4      	; 0x191e <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    1922:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    1924:	2a 9a       	sbi	0x05, 2	; 5
    1926:	90 e3       	ldi	r25, 0x30	; 48
    1928:	9a 95       	dec	r25
    192a:	f1 f7       	brne	.-4      	; 0x1928 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    192c:	93 b1       	in	r25, 0x03	; 3
    192e:	94 70       	andi	r25, 0x04	; 4
    1930:	eb ed       	ldi	r30, 0xDB	; 219
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	31 97       	sbiw	r30, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <ds18x20GetByte+0x8e>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <ds18x20GetByte+0x94>
    193a:	00 00       	nop
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    193e:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    1940:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    1942:	91 11       	cpse	r25, r1
    1944:	80 68       	ori	r24, 0x80	; 128
    1946:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    1948:	09 f0       	breq	.+2      	; 0x194c <ds18x20GetByte+0xa6>
    194a:	b0 cf       	rjmp	.-160    	; 0x18ac <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    194c:	08 95       	ret

0000194e <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    1958:	0e 94 83 0b 	call	0x1706	; 0x1706 <ds18x20IsOnBus>
    195c:	88 23       	and	r24, r24
    195e:	91 f1       	breq	.+100    	; 0x19c4 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    1960:	8c ec       	ldi	r24, 0xCC	; 204
    1962:	61 2f       	mov	r22, r17
    1964:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    1968:	8e eb       	ldi	r24, 0xBE	; 190
    196a:	61 2f       	mov	r22, r17
    196c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ds18x20SendByte>
    1970:	cc e4       	ldi	r28, 0x4C	; 76
    1972:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    1974:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    1976:	81 2f       	mov	r24, r17
    1978:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <ds18x20GetByte>
    197c:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    197e:	08 27       	eor	r16, r24
    1980:	88 e0       	ldi	r24, 0x08	; 8
    1982:	9c e8       	ldi	r25, 0x8C	; 140
    1984:	06 95       	lsr	r16
    1986:	08 f4       	brcc	.+2      	; 0x198a <ds18x20ReadStratchPad+0x3c>
    1988:	09 27       	eor	r16, r25
    198a:	8a 95       	dec	r24
    198c:	d9 f7       	brne	.-10     	; 0x1984 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	c5 35       	cpi	r28, 0x55	; 85
    1992:	d8 07       	cpc	r29, r24
    1994:	81 f7       	brne	.-32     	; 0x1976 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    1996:	00 23       	and	r16, r16
    1998:	a9 f4       	brne	.+42     	; 0x19c4 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    199a:	81 2f       	mov	r24, r17
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	fc 01       	movw	r30, r24
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	23 e0       	ldi	r18, 0x03	; 3
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	2a 95       	dec	r18
    19ae:	e1 f7       	brne	.-8      	; 0x19a8 <ds18x20ReadStratchPad+0x5a>
    19b0:	e8 0f       	add	r30, r24
    19b2:	f9 1f       	adc	r31, r25
    19b4:	ec 5d       	subi	r30, 0xDC	; 220
    19b6:	fd 4f       	sbci	r31, 0xFD	; 253
    19b8:	80 91 4c 02 	lds	r24, 0x024C
    19bc:	80 83       	st	Z, r24
    19be:	80 91 4d 02 	lds	r24, 0x024D
    19c2:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    19ce:	1f 93       	push	r17
    19d0:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    19d2:	0e 94 83 0b 	call	0x1706	; 0x1706 <ds18x20IsOnBus>
    19d6:	88 23       	and	r24, r24
    19d8:	41 f0       	breq	.+16     	; 0x19ea <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    19da:	8c ec       	ldi	r24, 0xCC	; 204
    19dc:	61 2f       	mov	r22, r17
    19de:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    19e2:	84 e4       	ldi	r24, 0x44	; 68
    19e4:	61 2f       	mov	r22, r17
    19e6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    19ea:	12 30       	cpi	r17, 0x02	; 2
    19ec:	69 f0       	breq	.+26     	; 0x1a08 <ds18x20ConvertTemp+0x3a>
    19ee:	13 30       	cpi	r17, 0x03	; 3
    19f0:	18 f4       	brcc	.+6      	; 0x19f8 <ds18x20ConvertTemp+0x2a>
    19f2:	11 30       	cpi	r17, 0x01	; 1
    19f4:	89 f4       	brne	.+34     	; 0x1a18 <ds18x20ConvertTemp+0x4a>
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <ds18x20ConvertTemp+0x34>
    19f8:	13 30       	cpi	r17, 0x03	; 3
    19fa:	49 f0       	breq	.+18     	; 0x1a0e <ds18x20ConvertTemp+0x40>
    19fc:	14 30       	cpi	r17, 0x04	; 4
    19fe:	61 f4       	brne	.+24     	; 0x1a18 <ds18x20ConvertTemp+0x4a>
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1a02:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1a04:	21 9a       	sbi	0x04, 1	; 4
    break;
    1a06:	08 c0       	rjmp	.+16     	; 0x1a18 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1a08:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1a0a:	20 9a       	sbi	0x04, 0	; 4
    break;
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1a0e:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1a10:	57 9a       	sbi	0x0a, 7	; 10
    break;
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1a14:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1a16:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    1a18:	1f 91       	pop	r17
    1a1a:	08 95       	ret

00001a1c <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	fc 01       	movw	r30, r24
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	23 e0       	ldi	r18, 0x03	; 3
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	2a 95       	dec	r18
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <ds18x20GetTemp+0xc>
    1a30:	e8 0f       	add	r30, r24
    1a32:	f9 1f       	adc	r31, r25
    1a34:	ec 5d       	subi	r30, 0xDC	; 220
    1a36:	fd 4f       	sbci	r31, 0xFD	; 253
    1a38:	40 81       	ld	r20, Z
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    1a3c:	9a 01       	movw	r18, r20
    1a3e:	2f 70       	andi	r18, 0x0F	; 15
    1a40:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    1a42:	c9 01       	movw	r24, r18
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	a3 e0       	ldi	r26, 0x03	; 3
    1a4a:	22 0f       	add	r18, r18
    1a4c:	33 1f       	adc	r19, r19
    1a4e:	aa 95       	dec	r26
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <ds18x20GetTemp+0x2e>
    1a52:	28 0f       	add	r18, r24
    1a54:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	84 2b       	or	r24, r20
    1a5c:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    1a5e:	60 e1       	ldi	r22, 0x10	; 16
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
    1a66:	ab 01       	movw	r20, r22
    1a68:	44 0f       	add	r20, r20
    1a6a:	55 1f       	adc	r21, r21
    1a6c:	e3 e0       	ldi	r30, 0x03	; 3
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	ea 95       	dec	r30
    1a74:	e1 f7       	brne	.-8      	; 0x1a6e <ds18x20GetTemp+0x52>
    1a76:	46 0f       	add	r20, r22
    1a78:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	35 95       	asr	r19
    1a7e:	27 95       	ror	r18
    1a80:	6a 95       	dec	r22
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    1a84:	42 0f       	add	r20, r18
    1a86:	53 1f       	adc	r21, r19
  return ret;
}
    1a88:	ca 01       	movw	r24, r20
    1a8a:	08 95       	ret

00001a8c <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    1a8c:	e8 2f       	mov	r30, r24
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	e1 5e       	subi	r30, 0xE1	; 225
    1a92:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1a94:	80 81       	ld	r24, Z
    1a96:	08 95       	ret

00001a98 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    1a98:	e8 2f       	mov	r30, r24
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	e1 5e       	subi	r30, 0xE1	; 225
    1a9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa0:	60 83       	st	Z, r22
}
    1aa2:	08 95       	ret

00001aa4 <__divmodhi4>:
    1aa4:	97 fb       	bst	r25, 7
    1aa6:	09 2e       	mov	r0, r25
    1aa8:	07 26       	eor	r0, r23
    1aaa:	0a d0       	rcall	.+20     	; 0x1ac0 <__divmodhi4_neg1>
    1aac:	77 fd       	sbrc	r23, 7
    1aae:	04 d0       	rcall	.+8      	; 0x1ab8 <__divmodhi4_neg2>
    1ab0:	0c d0       	rcall	.+24     	; 0x1aca <__udivmodhi4>
    1ab2:	06 d0       	rcall	.+12     	; 0x1ac0 <__divmodhi4_neg1>
    1ab4:	00 20       	and	r0, r0
    1ab6:	1a f4       	brpl	.+6      	; 0x1abe <__divmodhi4_exit>

00001ab8 <__divmodhi4_neg2>:
    1ab8:	70 95       	com	r23
    1aba:	61 95       	neg	r22
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255

00001abe <__divmodhi4_exit>:
    1abe:	08 95       	ret

00001ac0 <__divmodhi4_neg1>:
    1ac0:	f6 f7       	brtc	.-4      	; 0x1abe <__divmodhi4_exit>
    1ac2:	90 95       	com	r25
    1ac4:	81 95       	neg	r24
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__udivmodhi4>:
    1aca:	aa 1b       	sub	r26, r26
    1acc:	bb 1b       	sub	r27, r27
    1ace:	51 e1       	ldi	r21, 0x11	; 17
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <__udivmodhi4_ep>

00001ad2 <__udivmodhi4_loop>:
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	a6 17       	cp	r26, r22
    1ad8:	b7 07       	cpc	r27, r23
    1ada:	10 f0       	brcs	.+4      	; 0x1ae0 <__udivmodhi4_ep>
    1adc:	a6 1b       	sub	r26, r22
    1ade:	b7 0b       	sbc	r27, r23

00001ae0 <__udivmodhi4_ep>:
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	5a 95       	dec	r21
    1ae6:	a9 f7       	brne	.-22     	; 0x1ad2 <__udivmodhi4_loop>
    1ae8:	80 95       	com	r24
    1aea:	90 95       	com	r25
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	08 95       	ret

00001af2 <__eerd_byte_m328p>:
    1af2:	f9 99       	sbic	0x1f, 1	; 31
    1af4:	fe cf       	rjmp	.-4      	; 0x1af2 <__eerd_byte_m328p>
    1af6:	92 bd       	out	0x22, r25	; 34
    1af8:	81 bd       	out	0x21, r24	; 33
    1afa:	f8 9a       	sbi	0x1f, 0	; 31
    1afc:	99 27       	eor	r25, r25
    1afe:	80 b5       	in	r24, 0x20	; 32
    1b00:	08 95       	ret

00001b02 <__eerd_word_m328p>:
    1b02:	a8 e1       	ldi	r26, 0x18	; 24
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	42 e0       	ldi	r20, 0x02	; 2
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__eerd_blraw_m328p>

00001b0e <__eewr_byte_m328p>:
    1b0e:	26 2f       	mov	r18, r22

00001b10 <__eewr_r18_m328p>:
    1b10:	f9 99       	sbic	0x1f, 1	; 31
    1b12:	fe cf       	rjmp	.-4      	; 0x1b10 <__eewr_r18_m328p>
    1b14:	1f ba       	out	0x1f, r1	; 31
    1b16:	92 bd       	out	0x22, r25	; 34
    1b18:	81 bd       	out	0x21, r24	; 33
    1b1a:	20 bd       	out	0x20, r18	; 32
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	fa 9a       	sbi	0x1f, 2	; 31
    1b22:	f9 9a       	sbi	0x1f, 1	; 31
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	08 95       	ret

00001b2a <__eewr_word_m328p>:
    1b2a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__eewr_byte_m328p>
    1b2e:	27 2f       	mov	r18, r23
    1b30:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__eewr_r18_m328p>

00001b34 <__eerd_block_m328p>:
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22

00001b38 <__eerd_blraw_m328p>:
    1b38:	fc 01       	movw	r30, r24
    1b3a:	f9 99       	sbic	0x1f, 1	; 31
    1b3c:	fe cf       	rjmp	.-4      	; 0x1b3a <__eerd_blraw_m328p+0x2>
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <__eerd_blraw_m328p+0x14>
    1b40:	f2 bd       	out	0x22, r31	; 34
    1b42:	e1 bd       	out	0x21, r30	; 33
    1b44:	f8 9a       	sbi	0x1f, 0	; 31
    1b46:	31 96       	adiw	r30, 0x01	; 1
    1b48:	00 b4       	in	r0, 0x20	; 32
    1b4a:	0d 92       	st	X+, r0
    1b4c:	41 50       	subi	r20, 0x01	; 1
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	b8 f7       	brcc	.-18     	; 0x1b40 <__eerd_blraw_m328p+0x8>
    1b52:	08 95       	ret

00001b54 <_exit>:
    1b54:	f8 94       	cli

00001b56 <__stop_program>:
    1b56:	ff cf       	rjmp	.-2      	; 0x1b56 <__stop_program>
