
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  000019ae  00001a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  008001a6  008001a6  00001ae8  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002765  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005a7  00000000  00000000  00002825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c54  00000000  00000000  00002dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007d4  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020d2  00000000  00000000  000051f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  000072c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000610  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001385  00000000  00000000  00007cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000013a  00000000  00000000  0000905d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ea       	ldi	r30, 0xAE	; 174
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 35       	cpi	r26, 0x53	; 83
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 cb 09 	call	0x1396	; 0x1396 <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 bb 02 	call	0x576	; 0x576 <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 83 07 	call	0xf06	; 0xf06 <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
      be:	52 9a       	sbi	0x0a, 2	; 10
      c0:	5a 98       	cbi	0x0b, 2	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 49 08 	call	0x1092	; 0x1092 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000);  // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	44 ef       	ldi	r20, 0xF4	; 244
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 10);        // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	4a e0       	ldi	r20, 0x0A	; 10
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);    // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 91 02 	call	0x522	; 0x522 <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 a3 02 	call	0x546	; 0x546 <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 9a 02 	call	0x534	; 0x534 <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 ac 02 	call	0x558	; 0x558 <load_min_temp_2>
  load_type1();
     112:	0e 94 cf 02 	call	0x59e	; 0x59e <load_type1>
  load_type2();
     116:	0e 94 de 02 	call	0x5bc	; 0x5bc <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 03 09 	call	0x1206	; 0x1206 <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <set_outport>:
  }    
}
//=============================================================================
void set_outport(uint8_t chanel, uint8_t val)
{
  if (chanel == 1) {
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	51 f4       	brne	.+20     	; 0x176 <set_outport+0x18>
    if (val == 1) {
     162:	61 30       	cpi	r22, 0x01	; 1
     164:	21 f4       	brne	.+8      	; 0x16e <set_outport+0x10>
	  OUT_1_1();
     166:	5b 9a       	sbi	0x0b, 3	; 11
	  outs[0] = 1;
     168:	60 93 b1 01 	sts	0x01B1, r22
     16c:	08 95       	ret
	} else {
	  OUT_1_0();
     16e:	5b 98       	cbi	0x0b, 3	; 11
	  outs[0] = 0;
     170:	10 92 b1 01 	sts	0x01B1, r1
     174:	08 95       	ret
	}
  }
  if (chanel == 2) {
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	49 f4       	brne	.+18     	; 0x18c <set_outport+0x2e>
    if (val == 1) {
     17a:	61 30       	cpi	r22, 0x01	; 1
     17c:	21 f4       	brne	.+8      	; 0x186 <set_outport+0x28>
	  OUT_2_1();
     17e:	5a 9a       	sbi	0x0b, 2	; 11
	  outs[1] = 1;
     180:	60 93 b2 01 	sts	0x01B2, r22
     184:	08 95       	ret
	} else {
	  OUT_2_0();
     186:	5a 98       	cbi	0x0b, 2	; 11
	  outs[1] = 0;
     188:	10 92 b2 01 	sts	0x01B2, r1
     18c:	08 95       	ret

0000018e <check_temp>:
	}
  }
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     18e:	1f 93       	push	r17
     190:	18 2f       	mov	r17, r24
  int16_t t = ds18x20GetTemp(chanel);
     192:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
     196:	ac 01       	movw	r20, r24
  if (status[chanel - 1] == T_OTSLED_MAX) {
     198:	21 2f       	mov	r18, r17
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	30 40       	sbci	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	e7 5c       	subi	r30, 0xC7	; 199
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 81       	ld	r24, Z
     1a8:	b9 01       	movw	r22, r18
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	66 0f       	add	r22, r22
     1b0:	77 1f       	adc	r23, r23
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	89 f4       	brne	.+34     	; 0x1d8 <check_temp+0x4a>
 // отслеживаем превышение максимума
    if (t > temps[chanel - 1][T_MAX]) {
     1b6:	67 55       	subi	r22, 0x57	; 87
     1b8:	7e 4f       	sbci	r23, 0xFE	; 254
     1ba:	db 01       	movw	r26, r22
     1bc:	8d 91       	ld	r24, X+
     1be:	9c 91       	ld	r25, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	84 17       	cp	r24, r20
     1c4:	95 07       	cpc	r25, r21
     1c6:	0c f5       	brge	.+66     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MIN;
     1c8:	10 82       	st	Z, r1
      if (types[chanel - 1] == T_HEATER) {
     1ca:	29 5c       	subi	r18, 0xC9	; 201
     1cc:	3e 4f       	sbci	r19, 0xFE	; 254
     1ce:	f9 01       	movw	r30, r18
     1d0:	80 81       	ld	r24, Z
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	99 f4       	brne	.+38     	; 0x1fc <check_temp+0x6e>
     1d6:	15 c0       	rjmp	.+42     	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
	  }
    }
  } else {
   // отслеживаем превышение минимума
    if (t < temps[chanel - 1][T_MIN]) {
     1d8:	67 55       	subi	r22, 0x57	; 87
     1da:	7e 4f       	sbci	r23, 0xFE	; 254
     1dc:	db 01       	movw	r26, r22
     1de:	12 96       	adiw	r26, 0x02	; 2
     1e0:	6d 91       	ld	r22, X+
     1e2:	7c 91       	ld	r23, X
     1e4:	13 97       	sbiw	r26, 0x03	; 3
     1e6:	46 17       	cp	r20, r22
     1e8:	57 07       	cpc	r21, r23
     1ea:	7c f4       	brge	.+30     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MAX;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 83       	st	Z, r24
      if (types[chanel - 1] == T_HEATER) {
     1f0:	29 5c       	subi	r18, 0xC9	; 201
     1f2:	3e 4f       	sbci	r19, 0xFE	; 254
     1f4:	f9 01       	movw	r30, r18
     1f6:	80 81       	ld	r24, Z
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	19 f4       	brne	.+6      	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
     1fc:	81 2f       	mov	r24, r17
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	02 c0       	rjmp	.+4      	; 0x206 <check_temp+0x78>
	  } else {
        set_outport(chanel, 0);
     202:	81 2f       	mov	r24, r17
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
    }
  }
}
     20a:	1f 91       	pop	r17
     20c:	08 95       	ret

0000020e <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     20e:	80 91 a8 01 	lds	r24, 0x01A8
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <DS18x20_scan+0x10>
    dscount--;
     216:	81 50       	subi	r24, 0x01	; 1
     218:	80 93 a8 01 	sts	0x01A8, r24
	return;
     21c:	08 95       	ret
  }
  switch(ds_state) {
     21e:	80 91 b5 01 	lds	r24, 0x01B5
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	b1 f0       	breq	.+44     	; 0x252 <DS18x20_scan+0x44>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	18 f0       	brcs	.+6      	; 0x230 <DS18x20_scan+0x22>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	e1 f5       	brne	.+120    	; 0x2a6 <DS18x20_scan+0x98>
     22e:	24 c0       	rjmp	.+72     	; 0x278 <DS18x20_scan+0x6a>
    case 0:
      ds18x20ConvertTemp(1);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
	  dscount = 10;
     248:	8a e0       	ldi	r24, 0x0A	; 10
     24a:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 1;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	10 c0       	rjmp	.+32     	; 0x272 <DS18x20_scan+0x64>
    break;
    case 1:
      ds18x20ReadStratchPad(1);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
	  dscount = 10;
     26a:	8a e0       	ldi	r24, 0x0A	; 10
     26c:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 2;
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	80 93 b5 01 	sts	0x01B5, r24
    break;
     276:	08 95       	ret
    case 2:
      ds18x20GetTemp(1);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
      check_temp(1);
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      ds18x20GetTemp(2);
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
      check_temp(2);
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      ds18x20GetTemp(3);
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
      ds18x20GetTemp(4);
     296:	84 e0       	ldi	r24, 0x04	; 4
     298:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
	  dscount = SCAN_TIME / 100;
     29c:	84 e1       	ldi	r24, 0x14	; 20
     29e:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 0;
     2a2:	10 92 b5 01 	sts	0x01B5, r1
     2a6:	08 95       	ret

000002a8 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     2a8:	89 3c       	cpi	r24, 0xC9	; 201
     2aa:	29 f0       	breq	.+10     	; 0x2b6 <events_default+0xe>
     2ac:	8c 3c       	cpi	r24, 0xCC	; 204
     2ae:	71 f0       	breq	.+28     	; 0x2cc <events_default+0x24>
     2b0:	88 3c       	cpi	r24, 0xC8	; 200
     2b2:	71 f4       	brne	.+28     	; 0x2d0 <events_default+0x28>
     2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 91 32 01 	lds	r25, 0x0132
     2bc:	91 11       	cpse	r25, r1
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	80 93 32 01 	sts	0x0132, r24
    break;
     2c4:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     2c6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <KBD_scan>
    break;
     2ca:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     2cc:	0e 94 07 01 	call	0x20e	; 0x20e <DS18x20_scan>
     2d0:	08 95       	ret

000002d2 <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
     2d2:	85 36       	cpi	r24, 0x65	; 101
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <run_start+0x6>
     2d6:	b9 c0       	rjmp	.+370    	; 0x44a <run_start+0x178>
     2d8:	87 36       	cpi	r24, 0x67	; 103
     2da:	09 f4       	brne	.+2      	; 0x2de <run_start+0xc>
     2dc:	8f c0       	rjmp	.+286    	; 0x3fc <run_start+0x12a>
     2de:	84 36       	cpi	r24, 0x64	; 100
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <run_start+0x12>
     2e2:	04 c1       	rjmp	.+520    	; 0x4ec <run_start+0x21a>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	71 e0       	ldi	r23, 0x01	; 1
     2ea:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     2ee:	83 e0       	ldi	r24, 0x03	; 3
     2f0:	6d e2       	ldi	r22, 0x2D	; 45
     2f2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
	  ds_count = 0;
     2f6:	10 92 a6 01 	sts	0x01A6, r1
      ds18x20IsOnBus(1);
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	0e 94 ae 0a 	call	0x155c	; 0x155c <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	0e 94 ae 0a 	call	0x155c	; 0x155c <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	0e 94 ae 0a 	call	0x155c	; 0x155c <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	0e 94 ae 0a 	call	0x155c	; 0x155c <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	41 f4       	brne	.+16     	; 0x32c <run_start+0x5a>
     31c:	80 91 a6 01 	lds	r24, 0x01A6
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	80 93 a6 01 	sts	0x01A6, r24
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	61 e3       	ldi	r22, 0x31	; 49
     32a:	02 c0       	rjmp	.+4      	; 0x330 <run_start+0x5e>
     32c:	85 e0       	ldi	r24, 0x05	; 5
     32e:	60 e2       	ldi	r22, 0x20	; 32
     330:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	41 f4       	brne	.+16     	; 0x34e <run_start+0x7c>
     33e:	80 91 a6 01 	lds	r24, 0x01A6
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 a6 01 	sts	0x01A6, r24
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	61 e3       	ldi	r22, 0x31	; 49
     34c:	02 c0       	rjmp	.+4      	; 0x352 <run_start+0x80>
     34e:	86 e0       	ldi	r24, 0x06	; 6
     350:	60 e2       	ldi	r22, 0x20	; 32
     352:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	41 f4       	brne	.+16     	; 0x370 <run_start+0x9e>
     360:	80 91 a6 01 	lds	r24, 0x01A6
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 a6 01 	sts	0x01A6, r24
     36a:	87 e0       	ldi	r24, 0x07	; 7
     36c:	61 e3       	ldi	r22, 0x31	; 49
     36e:	02 c0       	rjmp	.+4      	; 0x374 <run_start+0xa2>
     370:	87 e0       	ldi	r24, 0x07	; 7
     372:	60 e2       	ldi	r22, 0x20	; 32
     374:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	41 f4       	brne	.+16     	; 0x392 <run_start+0xc0>
     382:	80 91 a6 01 	lds	r24, 0x01A6
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	80 93 a6 01 	sts	0x01A6, r24
     38c:	88 e0       	ldi	r24, 0x08	; 8
     38e:	61 e3       	ldi	r22, 0x31	; 49
     390:	02 c0       	rjmp	.+4      	; 0x396 <run_start+0xc4>
     392:	88 e0       	ldi	r24, 0x08	; 8
     394:	60 e2       	ldi	r22, 0x20	; 32
     396:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
	  if (ds_count == 0) {
     39a:	60 91 a6 01 	lds	r22, 0x01A6
     39e:	66 23       	and	r22, r22
     3a0:	21 f4       	brne	.+8      	; 0x3aa <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     3a2:	84 e6       	ldi	r24, 0x64	; 100
     3a4:	68 eb       	ldi	r22, 0xB8	; 184
     3a6:	7b e0       	ldi	r23, 0x0B	; 11
     3a8:	4b c0       	rjmp	.+150    	; 0x440 <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	20 e2       	ldi	r18, 0x20	; 32
     3b2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	11 f4       	brne	.+4      	; 0x3c4 <run_start+0xf2>
     3c0:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	19 f4       	brne	.+6      	; 0x3d4 <run_start+0x102>
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <run_start+0x112>
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <run_start+0x122>
     3ee:	84 e0       	ldi	r24, 0x04	; 4
     3f0:	0e 94 12 0c 	call	0x1824	; 0x1824 <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     3f4:	87 e6       	ldi	r24, 0x67	; 103
     3f6:	68 ee       	ldi	r22, 0xE8	; 232
     3f8:	73 e0       	ldi	r23, 0x03	; 3
     3fa:	22 c0       	rjmp	.+68     	; 0x440 <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	11 f4       	brne	.+4      	; 0x40a <run_start+0x138>
     406:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	19 f4       	brne	.+6      	; 0x41a <run_start+0x148>
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	19 f4       	brne	.+6      	; 0x42a <run_start+0x158>
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     430:	81 30       	cpi	r24, 0x01	; 1
     432:	19 f4       	brne	.+6      	; 0x43a <run_start+0x168>
     434:	84 e0       	ldi	r24, 0x04	; 4
     436:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     43a:	85 e6       	ldi	r24, 0x65	; 101
     43c:	64 e6       	ldi	r22, 0x64	; 100
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
    break;
     448:	08 95       	ret
    case EVENT_RUN_MAIN:
	  if (ds18x20GetTemp(1) < temps[0][0]) {
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
     450:	20 91 a9 01 	lds	r18, 0x01A9
     454:	30 91 aa 01 	lds	r19, 0x01AA
     458:	40 91 37 01 	lds	r20, 0x0137
     45c:	82 17       	cp	r24, r18
     45e:	93 07       	cpc	r25, r19
     460:	34 f4       	brge	.+12     	; 0x46e <run_start+0x19c>
	    status[0] = T_OTSLED_MAX;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 39 01 	sts	0x0139, r24
		if (types[0] == T_HEATER) set_outport(1, 1); else set_outport(1, 0);
     468:	41 30       	cpi	r20, 0x01	; 1
     46a:	29 f4       	brne	.+10     	; 0x476 <run_start+0x1a4>
     46c:	08 c0       	rjmp	.+16     	; 0x47e <run_start+0x1ac>
	  } else {
	    status[0] = T_OTSLED_MIN;
     46e:	10 92 39 01 	sts	0x0139, r1
		if (types[0] == T_HEATER) set_outport(1, 0); else set_outport(1, 1);
     472:	41 30       	cpi	r20, 0x01	; 1
     474:	19 f4       	brne	.+6      	; 0x47c <run_start+0x1aa>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <run_start+0x1ae>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
	  if (ds18x20GetTemp(2) < temps[1][0]) {
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
     48a:	20 91 ad 01 	lds	r18, 0x01AD
     48e:	30 91 ae 01 	lds	r19, 0x01AE
     492:	40 91 38 01 	lds	r20, 0x0138
     496:	82 17       	cp	r24, r18
     498:	93 07       	cpc	r25, r19
     49a:	34 f4       	brge	.+12     	; 0x4a8 <run_start+0x1d6>
	    status[1] = T_OTSLED_MAX;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 3a 01 	sts	0x013A, r24
		if (types[1] == T_HEATER) set_outport(2, 1); else set_outport(2, 0);
     4a2:	41 30       	cpi	r20, 0x01	; 1
     4a4:	29 f4       	brne	.+10     	; 0x4b0 <run_start+0x1de>
     4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <run_start+0x1e4>
	  } else {
	    status[1] = T_OTSLED_MIN;
     4a8:	10 92 3a 01 	sts	0x013A, r1
		if (types[1] == T_HEATER) set_outport(2, 0); else set_outport(2, 1);
     4ac:	41 30       	cpi	r20, 0x01	; 1
     4ae:	19 f4       	brne	.+6      	; 0x4b6 <run_start+0x1e4>
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <run_start+0x1e8>
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
      MAX7219_clearDisplay();
     4be:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     4c2:	8c ec       	ldi	r24, 0xCC	; 204
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	44 e6       	ldi	r20, 0x64	; 100
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     4d0:	88 e6       	ldi	r24, 0x68	; 104
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
      SET_STATE(run_main);
     4de:	80 e8       	ldi	r24, 0x80	; 128
     4e0:	94 e0       	ldi	r25, 0x04	; 4
     4e2:	90 93 3e 01 	sts	0x013E, r25
     4e6:	80 93 3d 01 	sts	0x013D, r24
    break;
     4ea:	08 95       	ret
	default:
	  events_default(event);
     4ec:	0e 94 54 01 	call	0x2a8	; 0x2a8 <events_default>
     4f0:	08 95       	ret

000004f2 <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     4f2:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     4f4:	80 e1       	ldi	r24, 0x10	; 16
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__eewr_word_m328p>
}
     4fc:	08 95       	ret

000004fe <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     4fe:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     500:	80 e2       	ldi	r24, 0x20	; 32
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__eewr_word_m328p>
}
     508:	08 95       	ret

0000050a <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     50a:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     50c:	82 e1       	ldi	r24, 0x12	; 18
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__eewr_word_m328p>
}
     514:	08 95       	ret

00000516 <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     516:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     518:	82 e2       	ldi	r24, 0x22	; 34
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__eewr_word_m328p>
}
     520:	08 95       	ret

00000522 <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     522:	80 e1       	ldi	r24, 0x10	; 16
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     52a:	80 93 a9 01 	sts	0x01A9, r24
     52e:	90 93 aa 01 	sts	0x01AA, r25
  return (int16_t)tu;
}
     532:	08 95       	ret

00000534 <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     534:	82 e1       	ldi	r24, 0x12	; 18
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     53c:	80 93 ab 01 	sts	0x01AB, r24
     540:	90 93 ac 01 	sts	0x01AC, r25
  return (int16_t)tu;
}
     544:	08 95       	ret

00000546 <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     54e:	80 93 ad 01 	sts	0x01AD, r24
     552:	90 93 ae 01 	sts	0x01AE, r25
  return (int16_t)tu;
}
     556:	08 95       	ret

00000558 <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     558:	82 e2       	ldi	r24, 0x22	; 34
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     560:	80 93 af 01 	sts	0x01AF, r24
     564:	90 93 b0 01 	sts	0x01B0, r25
  return (int16_t)tu;
}
     568:	08 95       	ret

0000056a <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     56a:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     56c:	80 e3       	ldi	r24, 0x30	; 48
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__eewr_byte_m328p>
}
     574:	08 95       	ret

00000576 <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     576:	80 e3       	ldi	r24, 0x30	; 48
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__eerd_byte_m328p>
     57e:	80 93 36 01 	sts	0x0136, r24
  if (brightnes > 15) brightnes = 2;
     582:	80 31       	cpi	r24, 0x10	; 16
     584:	18 f0       	brcs	.+6      	; 0x58c <load_brightnes+0x16>
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	80 93 36 01 	sts	0x0136, r24
  return brightnes;
}
     58c:	80 91 36 01 	lds	r24, 0x0136
     590:	08 95       	ret

00000592 <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     592:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     594:	84 e1       	ldi	r24, 0x14	; 20
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__eewr_byte_m328p>
}
     59c:	08 95       	ret

0000059e <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     59e:	84 e1       	ldi	r24, 0x14	; 20
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__eerd_byte_m328p>
     5a6:	81 11       	cpse	r24, r1
     5a8:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     5aa:	80 93 37 01 	sts	0x0137, r24
  return t;
}
     5ae:	08 95       	ret

000005b0 <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     5b0:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     5b2:	84 e2       	ldi	r24, 0x24	; 36
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__eewr_byte_m328p>
}
     5ba:	08 95       	ret

000005bc <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     5bc:	84 e2       	ldi	r24, 0x24	; 36
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__eerd_byte_m328p>
     5c4:	81 11       	cpse	r24, r1
     5c6:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     5c8:	80 93 38 01 	sts	0x0138, r24
  return t;
}
     5cc:	08 95       	ret

000005ce <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     5ce:	e0 91 b3 01 	lds	r30, 0x01B3
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e6 5d       	subi	r30, 0xD6	; 214
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	60 81       	ld	r22, Z
     5de:	71 81       	ldd	r23, Z+1	; 0x01
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
}
     5e6:	08 95       	ret

000005e8 <run_error>:
  }    
}
//=============================================================================
void run_error(unsigned char event)
{
  switch(event) {
     5e8:	8e 31       	cpi	r24, 0x1E	; 30
     5ea:	09 f4       	brne	.+2      	; 0x5ee <run_error+0x6>
     5ec:	3e c0       	rjmp	.+124    	; 0x66a <run_error+0x82>
     5ee:	8f 31       	cpi	r24, 0x1F	; 31
     5f0:	30 f4       	brcc	.+12     	; 0x5fe <run_error+0x16>
     5f2:	8a 30       	cpi	r24, 0x0A	; 10
     5f4:	d1 f1       	breq	.+116    	; 0x66a <run_error+0x82>
     5f6:	84 31       	cpi	r24, 0x14	; 20
     5f8:	09 f0       	breq	.+2      	; 0x5fc <run_error+0x14>
     5fa:	44 c0       	rjmp	.+136    	; 0x684 <run_error+0x9c>
     5fc:	36 c0       	rjmp	.+108    	; 0x66a <run_error+0x82>
     5fe:	89 3c       	cpi	r24, 0xC9	; 201
     600:	21 f0       	breq	.+8      	; 0x60a <run_error+0x22>
     602:	8a 3c       	cpi	r24, 0xCA	; 202
     604:	09 f0       	breq	.+2      	; 0x608 <run_error+0x20>
     606:	3e c0       	rjmp	.+124    	; 0x684 <run_error+0x9c>
     608:	1d c0       	rjmp	.+58     	; 0x644 <run_error+0x5c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 91 32 01 	lds	r25, 0x0132
     610:	91 11       	cpse	r25, r1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	80 93 32 01 	sts	0x0132, r24
	  if (error_cnt > 0) error_cnt--; else {
     618:	80 91 35 01 	lds	r24, 0x0135
     61c:	88 23       	and	r24, r24
     61e:	21 f0       	breq	.+8      	; 0x628 <run_error+0x40>
     620:	81 50       	subi	r24, 0x01	; 1
     622:	80 93 35 01 	sts	0x0135, r24
     626:	08 95       	ret
        wait_menu = WAIT_MENU_TIME;
     628:	84 e1       	ldi	r24, 0x14	; 20
     62a:	80 93 34 01 	sts	0x0134, r24
        SET_STATE(run_menu);
     62e:	80 eb       	ldi	r24, 0xB0	; 176
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	90 93 3e 01 	sts	0x013E, r25
     636:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_clearDisplay();
     63a:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        show_menu();
     63e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
     642:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 91 33 01 	lds	r25, 0x0133
     64a:	91 11       	cpse	r25, r1
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     652:	88 23       	and	r24, r24
     654:	21 f0       	breq	.+8      	; 0x65e <run_error+0x76>
        MAX7219_printStr(1, "Err ");
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	71 e0       	ldi	r23, 0x01	; 1
     65c:	03 c0       	rjmp	.+6      	; 0x664 <run_error+0x7c>
	  } else {
        MAX7219_printStr(1, "    ");
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	68 e0       	ldi	r22, 0x08	; 8
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
     668:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     66a:	84 e1       	ldi	r24, 0x14	; 20
     66c:	80 93 34 01 	sts	0x0134, r24
      SET_STATE(run_menu);
     670:	80 eb       	ldi	r24, 0xB0	; 176
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	90 93 3e 01 	sts	0x013E, r25
     678:	80 93 3d 01 	sts	0x013D, r24
      MAX7219_clearDisplay();
     67c:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
      show_menu();
     680:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
     684:	08 95       	ret

00000686 <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     686:	8e 31       	cpi	r24, 0x1E	; 30
     688:	09 f4       	brne	.+2      	; 0x68c <run_set_brightnes+0x6>
     68a:	3f c0       	rjmp	.+126    	; 0x70a <run_set_brightnes+0x84>
     68c:	8f 31       	cpi	r24, 0x1F	; 31
     68e:	38 f4       	brcc	.+14     	; 0x69e <run_set_brightnes+0x18>
     690:	8a 30       	cpi	r24, 0x0A	; 10
     692:	09 f4       	brne	.+2      	; 0x696 <run_set_brightnes+0x10>
     694:	54 c0       	rjmp	.+168    	; 0x73e <run_set_brightnes+0xb8>
     696:	84 31       	cpi	r24, 0x14	; 20
     698:	09 f0       	breq	.+2      	; 0x69c <run_set_brightnes+0x16>
     69a:	5f c0       	rjmp	.+190    	; 0x75a <run_set_brightnes+0xd4>
     69c:	3f c0       	rjmp	.+126    	; 0x71c <run_set_brightnes+0x96>
     69e:	89 3c       	cpi	r24, 0xC9	; 201
     6a0:	21 f0       	breq	.+8      	; 0x6aa <run_set_brightnes+0x24>
     6a2:	8a 3c       	cpi	r24, 0xCA	; 202
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <run_set_brightnes+0x22>
     6a6:	59 c0       	rjmp	.+178    	; 0x75a <run_set_brightnes+0xd4>
     6a8:	18 c0       	rjmp	.+48     	; 0x6da <run_set_brightnes+0x54>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 91 32 01 	lds	r25, 0x0132
     6b0:	91 11       	cpse	r25, r1
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     6b8:	80 91 34 01 	lds	r24, 0x0134
     6bc:	88 23       	and	r24, r24
     6be:	21 f0       	breq	.+8      	; 0x6c8 <run_set_brightnes+0x42>
     6c0:	81 50       	subi	r24, 0x01	; 1
     6c2:	80 93 34 01 	sts	0x0134, r24
     6c6:	08 95       	ret
        MAX7219_clearDisplay();
     6c8:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     6cc:	80 eb       	ldi	r24, 0xB0	; 176
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	90 93 3e 01 	sts	0x013E, r25
     6d4:	80 93 3d 01 	sts	0x013D, r24
     6d8:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 91 33 01 	lds	r25, 0x0133
     6e0:	91 11       	cpse	r25, r1
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     6e8:	88 23       	and	r24, r24
     6ea:	49 f0       	breq	.+18     	; 0x6fe <run_set_brightnes+0x78>
        MAX7219_printNum(4, brightnes, 2, ' ');
     6ec:	60 91 36 01 	lds	r22, 0x0136
     6f0:	84 e0       	ldi	r24, 0x04	; 4
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	42 e0       	ldi	r20, 0x02	; 2
     6f6:	20 e2       	ldi	r18, 0x20	; 32
     6f8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <MAX7219_printNum>
     6fc:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	6d e0       	ldi	r22, 0x0D	; 13
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
     708:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     70a:	84 e1       	ldi	r24, 0x14	; 20
     70c:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes > 0) {
     710:	60 91 36 01 	lds	r22, 0x0136
     714:	66 23       	and	r22, r22
     716:	19 f1       	breq	.+70     	; 0x75e <run_set_brightnes+0xd8>
	    brightnes--;
     718:	61 50       	subi	r22, 0x01	; 1
     71a:	19 c0       	rjmp	.+50     	; 0x74e <run_set_brightnes+0xc8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     71c:	80 93 34 01 	sts	0x0134, r24
	  save_brightnes(brightnes);
     720:	80 91 36 01 	lds	r24, 0x0136
     724:	0e 94 b5 02 	call	0x56a	; 0x56a <save_brightnes>
      MAX7219_clearDisplay();
     728:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     72c:	80 eb       	ldi	r24, 0xB0	; 176
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	90 93 3e 01 	sts	0x013E, r25
     734:	80 93 3d 01 	sts	0x013D, r24
      show_menu();
     738:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
    break;
     73c:	08 95       	ret
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     73e:	84 e1       	ldi	r24, 0x14	; 20
     740:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes < 15) {
     744:	60 91 36 01 	lds	r22, 0x0136
     748:	6f 30       	cpi	r22, 0x0F	; 15
     74a:	48 f4       	brcc	.+18     	; 0x75e <run_set_brightnes+0xd8>
	    brightnes++;
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	60 93 36 01 	sts	0x0136, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     752:	8a e0       	ldi	r24, 0x0A	; 10
     754:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
     758:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     75a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <events_default>
     75e:	08 95       	ret

00000760 <run_menu>:
    break;
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
     760:	1f 93       	push	r17
  switch(event) {
     762:	8e 31       	cpi	r24, 0x1E	; 30
     764:	09 f4       	brne	.+2      	; 0x768 <run_menu+0x8>
     766:	b3 c0       	rjmp	.+358    	; 0x8ce <run_menu+0x16e>
     768:	8f 31       	cpi	r24, 0x1F	; 31
     76a:	30 f4       	brcc	.+12     	; 0x778 <run_menu+0x18>
     76c:	8a 30       	cpi	r24, 0x0A	; 10
     76e:	41 f1       	breq	.+80     	; 0x7c0 <run_menu+0x60>
     770:	84 31       	cpi	r24, 0x14	; 20
     772:	09 f0       	breq	.+2      	; 0x776 <run_menu+0x16>
     774:	c1 c0       	rjmp	.+386    	; 0x8f8 <run_menu+0x198>
     776:	38 c0       	rjmp	.+112    	; 0x7e8 <run_menu+0x88>
     778:	89 36       	cpi	r24, 0x69	; 105
     77a:	09 f4       	brne	.+2      	; 0x77e <run_menu+0x1e>
     77c:	70 c0       	rjmp	.+224    	; 0x85e <run_menu+0xfe>
     77e:	89 3c       	cpi	r24, 0xC9	; 201
     780:	09 f0       	breq	.+2      	; 0x784 <run_menu+0x24>
     782:	ba c0       	rjmp	.+372    	; 0x8f8 <run_menu+0x198>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 91 32 01 	lds	r25, 0x0132
     78a:	91 11       	cpse	r25, r1
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     792:	80 91 34 01 	lds	r24, 0x0134
     796:	88 23       	and	r24, r24
     798:	21 f0       	breq	.+8      	; 0x7a2 <run_menu+0x42>
     79a:	81 50       	subi	r24, 0x01	; 1
     79c:	80 93 34 01 	sts	0x0134, r24
     7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <run_menu+0x50>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     7a2:	89 e6       	ldi	r24, 0x69	; 105
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     7b0:	80 91 b3 01 	lds	r24, 0x01B3
     7b4:	82 30       	cpi	r24, 0x02	; 2
     7b6:	f1 f1       	breq	.+124    	; 0x834 <run_menu+0xd4>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	6d e0       	ldi	r22, 0x0D	; 13
     7bc:	71 e0       	ldi	r23, 0x01	; 1
     7be:	11 c0       	rjmp	.+34     	; 0x7e2 <run_menu+0x82>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     7c0:	84 e1       	ldi	r24, 0x14	; 20
     7c2:	80 93 34 01 	sts	0x0134, r24
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     7c6:	80 91 b3 01 	lds	r24, 0x01B3
     7ca:	88 23       	and	r24, r24
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <run_menu+0x72>
     7ce:	81 50       	subi	r24, 0x01	; 1
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <run_menu+0x74>
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	80 93 b3 01 	sts	0x01B3, r24
	  show_menu();
     7d8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
      MAX7219_printStr(5, "    ");
     7dc:	85 e0       	ldi	r24, 0x05	; 5
     7de:	68 e0       	ldi	r22, 0x08	; 8
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
    break;
     7e6:	8a c0       	rjmp	.+276    	; 0x8fc <run_menu+0x19c>
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     7e8:	80 93 34 01 	sts	0x0134, r24
	  n_edit = 0;
     7ec:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     7f0:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
	  if (m_menu == MM_D1) {
     7f4:	80 91 b3 01 	lds	r24, 0x01B3
     7f8:	88 23       	and	r24, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <run_menu+0xa6>
		KBD_set_type(0);
     7fc:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
        SET_STATE(run_set_1);
     800:	84 e9       	ldi	r24, 0x94	; 148
     802:	96 e0       	ldi	r25, 0x06	; 6
     804:	07 c0       	rjmp	.+14     	; 0x814 <run_menu+0xb4>
	  } else if (m_menu == MM_D2) {
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	51 f4       	brne	.+20     	; 0x81e <run_menu+0xbe>
		KBD_set_type(0);
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
        SET_STATE(run_set_2);
     810:	85 ea       	ldi	r24, 0xA5	; 165
     812:	95 e0       	ldi	r25, 0x05	; 5
     814:	90 93 3e 01 	sts	0x013E, r25
     818:	80 93 3d 01 	sts	0x013D, r24
     81c:	6f c0       	rjmp	.+222    	; 0x8fc <run_menu+0x19c>
	  } else if (m_menu == MM_BRIGHTNES) {
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	91 f4       	brne	.+36     	; 0x846 <run_menu+0xe6>
		KBD_set_type(1);
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
        SET_STATE(run_set_brightnes);
     828:	83 e4       	ldi	r24, 0x43	; 67
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	90 93 3e 01 	sts	0x013E, r25
     830:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     834:	60 91 36 01 	lds	r22, 0x0136
     838:	84 e0       	ldi	r24, 0x04	; 4
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	42 e0       	ldi	r20, 0x02	; 2
     83e:	20 e2       	ldi	r18, 0x20	; 32
     840:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <MAX7219_printNum>
     844:	5b c0       	rjmp	.+182    	; 0x8fc <run_menu+0x19c>
	  } else if (m_menu == MM_END) {
     846:	83 30       	cpi	r24, 0x03	; 3
     848:	09 f0       	breq	.+2      	; 0x84c <run_menu+0xec>
     84a:	58 c0       	rjmp	.+176    	; 0x8fc <run_menu+0x19c>
		KBD_set_type(1);
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     852:	89 e6       	ldi	r24, 0x69	; 105
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	35 c0       	rjmp	.+106    	; 0x8c8 <run_menu+0x168>
	  }
    break;
    case EVENT_EXIT_MENU:
      MAX7219_clearDisplay();
     85e:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
	  chanel = 1;
     862:	11 e0       	ldi	r17, 0x01	; 1
     864:	10 93 3b 01 	sts	0x013B, r17
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
     86e:	20 91 a9 01 	lds	r18, 0x01A9
     872:	30 91 aa 01 	lds	r19, 0x01AA
     876:	82 17       	cp	r24, r18
     878:	93 07       	cpc	r25, r19
     87a:	1c f4       	brge	.+6      	; 0x882 <run_menu+0x122>
     87c:	10 93 39 01 	sts	0x0139, r17
     880:	02 c0       	rjmp	.+4      	; 0x886 <run_menu+0x126>
     882:	10 92 39 01 	sts	0x0139, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
     88c:	20 91 ad 01 	lds	r18, 0x01AD
     890:	30 91 ae 01 	lds	r19, 0x01AE
     894:	82 17       	cp	r24, r18
     896:	93 07       	cpc	r25, r19
     898:	24 f4       	brge	.+8      	; 0x8a2 <run_menu+0x142>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 3a 01 	sts	0x013A, r24
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <run_menu+0x146>
     8a2:	10 92 3a 01 	sts	0x013A, r1
      check_temp(1);
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      check_temp(2);
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      SET_STATE(run_main);
     8b2:	80 e8       	ldi	r24, 0x80	; 128
     8b4:	94 e0       	ldi	r25, 0x04	; 4
     8b6:	90 93 3e 01 	sts	0x013E, r25
     8ba:	80 93 3d 01 	sts	0x013D, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     8be:	88 e6       	ldi	r24, 0x68	; 104
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	40 ed       	ldi	r20, 0xD0	; 208
     8c6:	57 e0       	ldi	r21, 0x07	; 7
     8c8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
    break;
     8cc:	17 c0       	rjmp	.+46     	; 0x8fc <run_menu+0x19c>
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     8ce:	84 e1       	ldi	r24, 0x14	; 20
     8d0:	80 93 34 01 	sts	0x0134, r24
      MAX7219_printStr(5, "    ");
     8d4:	85 e0       	ldi	r24, 0x05	; 5
     8d6:	68 e0       	ldi	r22, 0x08	; 8
     8d8:	71 e0       	ldi	r23, 0x01	; 1
     8da:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     8de:	80 91 b3 01 	lds	r24, 0x01B3
     8e2:	83 30       	cpi	r24, 0x03	; 3
     8e4:	20 f4       	brcc	.+8      	; 0x8ee <run_menu+0x18e>
     8e6:	8f 5f       	subi	r24, 0xFF	; 255
     8e8:	80 93 b3 01 	sts	0x01B3, r24
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <run_menu+0x192>
     8ee:	10 92 b3 01 	sts	0x01B3, r1
	  show_menu();
     8f2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
    break;
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <run_menu+0x19c>
	default:
	  events_default(event);
     8f8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <events_default>
    break;
  }    
}
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <run_main>:
    }
  }
}
//=============================================================================
void run_main(unsigned char event)
{
     900:	df 93       	push	r29
     902:	cf 93       	push	r28
     904:	0f 92       	push	r0
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
  switch(event) {
     90a:	84 31       	cpi	r24, 0x14	; 20
     90c:	09 f4       	brne	.+2      	; 0x910 <run_main+0x10>
     90e:	82 c0       	rjmp	.+260    	; 0xa14 <run_main+0x114>
     910:	85 31       	cpi	r24, 0x15	; 21
     912:	20 f4       	brcc	.+8      	; 0x91c <run_main+0x1c>
     914:	8a 30       	cpi	r24, 0x0A	; 10
     916:	09 f0       	breq	.+2      	; 0x91a <run_main+0x1a>
     918:	90 c0       	rjmp	.+288    	; 0xa3a <run_main+0x13a>
     91a:	5f c0       	rjmp	.+190    	; 0x9da <run_main+0xda>
     91c:	8e 31       	cpi	r24, 0x1E	; 30
     91e:	09 f4       	brne	.+2      	; 0x922 <run_main+0x22>
     920:	5c c0       	rjmp	.+184    	; 0x9da <run_main+0xda>
     922:	88 36       	cpi	r24, 0x68	; 104
     924:	09 f0       	breq	.+2      	; 0x928 <run_main+0x28>
     926:	89 c0       	rjmp	.+274    	; 0xa3a <run_main+0x13a>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     928:	80 91 3b 01 	lds	r24, 0x013B
     92c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	e1 f5       	brne	.+120    	; 0x9ac <run_main+0xac>
	    MAX7219_printChar(3, 'd');
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	64 e6       	ldi	r22, 0x64	; 100
     938:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     93c:	60 91 3b 01 	lds	r22, 0x013B
     940:	60 5d       	subi	r22, 0xD0	; 208
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     948:	80 91 3b 01 	lds	r24, 0x013B
     94c:	0e 94 39 0c 	call	0x1872	; 0x1872 <ds18x20GetTemp>
     950:	bc 01       	movw	r22, r24
     952:	85 e0       	ldi	r24, 0x05	; 5
     954:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     958:	e0 91 3b 01 	lds	r30, 0x013B
     95c:	e3 30       	cpi	r30, 0x03	; 3
     95e:	a8 f4       	brcc	.+42     	; 0x98a <run_main+0x8a>
		  if (types[chanel - 1]) {
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	ea 5c       	subi	r30, 0xCA	; 202
     964:	fe 4f       	sbci	r31, 0xFE	; 254
     966:	80 81       	ld	r24, Z
     968:	88 23       	and	r24, r24
     96a:	19 f0       	breq	.+6      	; 0x972 <run_main+0x72>
	        MAX7219_printChar(1, 'H');
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	68 e4       	ldi	r22, 0x48	; 72
     970:	02 c0       	rjmp	.+4      	; 0x976 <run_main+0x76>
		  } else {
	        MAX7219_printChar(1, 'F');
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	66 e4       	ldi	r22, 0x46	; 70
     976:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
		  }
          MAX7219_setCommaPos(1, outs[chanel - 1]);
     97a:	e0 91 3b 01 	lds	r30, 0x013B
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	e0 55       	subi	r30, 0x50	; 80
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	60 81       	ld	r22, Z
     988:	06 c0       	rjmp	.+12     	; 0x996 <run_main+0x96>
		} else {
	      MAX7219_printChar(1, ' ');
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	60 e2       	ldi	r22, 0x20	; 32
     98e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     99a:	87 e0       	ldi	r24, 0x07	; 7
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     9a2:	84 e0       	ldi	r24, 0x04	; 4
     9a4:	60 91 a7 01 	lds	r22, 0x01A7
     9a8:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
	  }
      if (!one_sensor_flag) {
     9ac:	80 91 a7 01 	lds	r24, 0x01A7
     9b0:	88 23       	and	r24, r24
     9b2:	49 f4       	brne	.+18     	; 0x9c6 <run_main+0xc6>
        if (chanel < 4) {
     9b4:	80 91 3b 01 	lds	r24, 0x013B
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	10 f4       	brcc	.+4      	; 0x9c0 <run_main+0xc0>
          chanel++; 
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <run_main+0xc2>
	    } else { 
	      chanel = 1;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 3b 01 	sts	0x013B, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     9c6:	80 91 3b 01 	lds	r24, 0x013B
     9ca:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <ds18x20GetDevCount>
     9ce:	88 23       	and	r24, r24
     9d0:	c9 f0       	breq	.+50     	; 0xa04 <run_main+0x104>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     9d2:	88 e6       	ldi	r24, 0x68	; 104
     9d4:	60 ed       	ldi	r22, 0xD0	; 208
     9d6:	77 e0       	ldi	r23, 0x07	; 7
     9d8:	18 c0       	rjmp	.+48     	; 0xa0a <run_main+0x10a>
	  }
    break;
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     9da:	88 e6       	ldi	r24, 0x68	; 104
     9dc:	0e 94 ce 08 	call	0x119c	; 0x119c <RTOS_deleteTask>
      one_sensor_flag = !one_sensor_flag;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 91 a7 01 	lds	r25, 0x01A7
     9e6:	91 11       	cpse	r25, r1
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	80 93 a7 01 	sts	0x01A7, r24
	  if (one_sensor_flag) {
     9ee:	88 23       	and	r24, r24
     9f0:	49 f0       	breq	.+18     	; 0xa04 <run_main+0x104>
	    if (chanel > 1) chanel--; else chanel = 4;
     9f2:	80 91 3b 01 	lds	r24, 0x013B
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	10 f0       	brcs	.+4      	; 0x9fe <run_main+0xfe>
     9fa:	81 50       	subi	r24, 0x01	; 1
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <run_main+0x100>
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	80 93 3b 01 	sts	0x013B, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     a04:	88 e6       	ldi	r24, 0x68	; 104
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
    break;
     a12:	15 c0       	rjmp	.+42     	; 0xa3e <run_main+0x13e>
    case EVENT_KEY_SET:
	  m_menu = MM_D1;
     a14:	10 92 b3 01 	sts	0x01B3, r1
	  n_edit = 0;
     a18:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     a22:	20 eb       	ldi	r18, 0xB0	; 176
     a24:	33 e0       	ldi	r19, 0x03	; 3
     a26:	30 93 3e 01 	sts	0x013E, r19
     a2a:	20 93 3d 01 	sts	0x013D, r18
      wait_menu = WAIT_MENU_TIME;
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	80 93 34 01 	sts	0x0134, r24
	  show_menu();
     a34:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
    break;
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <run_main+0x13e>
	default:
	  events_default(event);
     a3a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <events_default>
    break;
  }    
}
     a3e:	0f 90       	pop	r0
     a40:	cf 91       	pop	r28
     a42:	df 91       	pop	r29
     a44:	08 95       	ret

00000a46 <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     a46:	1f 93       	push	r17
     a48:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     a4a:	80 91 b4 01 	lds	r24, 0x01B4
     a4e:	88 23       	and	r24, r24
     a50:	61 f5       	brne	.+88     	; 0xaaa <show_set_temp+0x64>
    if (blink05) {
     a52:	80 91 33 01 	lds	r24, 0x0133
     a56:	88 23       	and	r24, r24
     a58:	91 f0       	breq	.+36     	; 0xa7e <show_set_temp+0x38>
      print_temperature(1, temps[temp][0]);
     a5a:	e1 2f       	mov	r30, r17
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	e7 55       	subi	r30, 0x57	; 87
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
     a6a:	60 81       	ld	r22, Z
     a6c:	71 81       	ldd	r23, Z+1	; 0x01
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <show_set_temp+0x42>
    } else {
      MAX7219_printStr(1, "    ");
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	68 e0       	ldi	r22, 0x08	; 8
     a82:	71 e0       	ldi	r23, 0x01	; 1
     a84:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     a88:	e1 2f       	mov	r30, r17
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	e7 55       	subi	r30, 0x57	; 87
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	62 81       	ldd	r22, Z+2	; 0x02
     a9a:	73 81       	ldd	r23, Z+3	; 0x03
     a9c:	85 e0       	ldi	r24, 0x05	; 5
     a9e:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     aa2:	87 e0       	ldi	r24, 0x07	; 7
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     aaa:	80 91 b4 01 	lds	r24, 0x01B4
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	61 f5       	brne	.+88     	; 0xb0a <show_set_temp+0xc4>
    if (blink05) {
     ab2:	80 91 33 01 	lds	r24, 0x0133
     ab6:	88 23       	and	r24, r24
     ab8:	91 f0       	breq	.+36     	; 0xade <show_set_temp+0x98>
      print_temperature(5, temps[temp][1]);
     aba:	e1 2f       	mov	r30, r17
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	ee 0f       	add	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	e7 55       	subi	r30, 0x57	; 87
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	62 81       	ldd	r22, Z+2	; 0x02
     acc:	73 81       	ldd	r23, Z+3	; 0x03
     ace:	85 e0       	ldi	r24, 0x05	; 5
     ad0:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     ad4:	87 e0       	ldi	r24, 0x07	; 7
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <show_set_temp+0xa2>
    } else {
      MAX7219_printStr(5, "    ");
     ade:	85 e0       	ldi	r24, 0x05	; 5
     ae0:	68 e0       	ldi	r22, 0x08	; 8
     ae2:	71 e0       	ldi	r23, 0x01	; 1
     ae4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     ae8:	e1 2f       	mov	r30, r17
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	e7 55       	subi	r30, 0x57	; 87
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	60 81       	ld	r22, Z
     afa:	71 81       	ldd	r23, Z+1	; 0x01
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	0e 94 9d 0a 	call	0x153a	; 0x153a <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     b0a:	80 91 b4 01 	lds	r24, 0x01B4
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	d1 f4       	brne	.+52     	; 0xb46 <show_set_temp+0x100>
    MAX7219_printStr(1, "out-");
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	61 e1       	ldi	r22, 0x11	; 17
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <MAX7219_printStr>
    if (blink05) {
     b1c:	80 91 33 01 	lds	r24, 0x0133
     b20:	88 23       	and	r24, r24
     b22:	69 f0       	breq	.+26     	; 0xb3e <show_set_temp+0xf8>
	  if (types[temp]) MAX7219_printChar(5, 'H'); else MAX7219_printChar(5, 'F');
     b24:	e1 2f       	mov	r30, r17
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	e9 5c       	subi	r30, 0xC9	; 201
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	88 23       	and	r24, r24
     b30:	19 f0       	breq	.+6      	; 0xb38 <show_set_temp+0xf2>
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	68 e4       	ldi	r22, 0x48	; 72
     b36:	05 c0       	rjmp	.+10     	; 0xb42 <show_set_temp+0xfc>
     b38:	85 e0       	ldi	r24, 0x05	; 5
     b3a:	66 e4       	ldi	r22, 0x46	; 70
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <show_set_temp+0xfc>
    } else {
	  MAX7219_printChar(5, ' ');
     b3e:	85 e0       	ldi	r24, 0x05	; 5
     b40:	60 e2       	ldi	r22, 0x20	; 32
     b42:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <MAX7219_printChar>
	}
  }
}
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     b4a:	8e 31       	cpi	r24, 0x1E	; 30
     b4c:	b1 f1       	breq	.+108    	; 0xbba <run_set_2+0x70>
     b4e:	8f 31       	cpi	r24, 0x1F	; 31
     b50:	38 f4       	brcc	.+14     	; 0xb60 <run_set_2+0x16>
     b52:	8a 30       	cpi	r24, 0x0A	; 10
     b54:	09 f4       	brne	.+2      	; 0xb58 <run_set_2+0xe>
     b56:	b0 c0       	rjmp	.+352    	; 0xcb8 <run_set_2+0x16e>
     b58:	84 31       	cpi	r24, 0x14	; 20
     b5a:	09 f0       	breq	.+2      	; 0xb5e <run_set_2+0x14>
     b5c:	e2 c0       	rjmp	.+452    	; 0xd22 <run_set_2+0x1d8>
     b5e:	50 c0       	rjmp	.+160    	; 0xc00 <run_set_2+0xb6>
     b60:	89 3c       	cpi	r24, 0xC9	; 201
     b62:	31 f0       	breq	.+12     	; 0xb70 <run_set_2+0x26>
     b64:	8a 3c       	cpi	r24, 0xCA	; 202
     b66:	09 f1       	breq	.+66     	; 0xbaa <run_set_2+0x60>
     b68:	89 36       	cpi	r24, 0x69	; 105
     b6a:	09 f0       	breq	.+2      	; 0xb6e <run_set_2+0x24>
     b6c:	da c0       	rjmp	.+436    	; 0xd22 <run_set_2+0x1d8>
     b6e:	65 c0       	rjmp	.+202    	; 0xc3a <run_set_2+0xf0>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 91 32 01 	lds	r25, 0x0132
     b76:	91 11       	cpse	r25, r1
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     b7e:	80 91 34 01 	lds	r24, 0x0134
     b82:	88 23       	and	r24, r24
     b84:	21 f0       	breq	.+8      	; 0xb8e <run_set_2+0x44>
     b86:	81 50       	subi	r24, 0x01	; 1
     b88:	80 93 34 01 	sts	0x0134, r24
     b8c:	08 95       	ret
	    KBD_set_type(1);
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
        MAX7219_clearDisplay();
     b94:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     b98:	80 eb       	ldi	r24, 0xB0	; 176
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	90 93 3e 01 	sts	0x013E, r25
     ba0:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     ba4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
     ba8:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 91 33 01 	lds	r25, 0x0133
     bb0:	91 11       	cpse	r25, r1
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	80 93 33 01 	sts	0x0133, r24
     bb8:	b0 c0       	rjmp	.+352    	; 0xd1a <run_set_2+0x1d0>
	  show_set_temp(1);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     bba:	84 e1       	ldi	r24, 0x14	; 20
     bbc:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     bc6:	80 91 b4 01 	lds	r24, 0x01B4
     bca:	88 23       	and	r24, r24
     bcc:	59 f4       	brne	.+22     	; 0xbe4 <run_set_2+0x9a>
        if (temps[1][0] > -550) {
     bce:	80 91 ad 01 	lds	r24, 0x01AD
     bd2:	90 91 ae 01 	lds	r25, 0x01AE
     bd6:	2d ef       	ldi	r18, 0xFD	; 253
     bd8:	8b 3d       	cpi	r24, 0xDB	; 219
     bda:	92 07       	cpc	r25, r18
     bdc:	0c f4       	brge	.+2      	; 0xbe0 <run_set_2+0x96>
     bde:	9d c0       	rjmp	.+314    	; 0xd1a <run_set_2+0x1d0>
		  temps[1][0]--;
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	7d c0       	rjmp	.+250    	; 0xcde <run_set_2+0x194>
		}
	  }
	  if (n_edit == 1) {
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	09 f0       	breq	.+2      	; 0xbea <run_set_2+0xa0>
     be8:	8f c0       	rjmp	.+286    	; 0xd08 <run_set_2+0x1be>
        if (temps[1][1] > -550) {
     bea:	80 91 af 01 	lds	r24, 0x01AF
     bee:	90 91 b0 01 	lds	r25, 0x01B0
     bf2:	2d ef       	ldi	r18, 0xFD	; 253
     bf4:	8b 3d       	cpi	r24, 0xDB	; 219
     bf6:	92 07       	cpc	r25, r18
     bf8:	0c f4       	brge	.+2      	; 0xbfc <run_set_2+0xb2>
     bfa:	8f c0       	rjmp	.+286    	; 0xd1a <run_set_2+0x1d0>
		  temps[1][1]--;
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	7f c0       	rjmp	.+254    	; 0xcfe <run_set_2+0x1b4>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     c00:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     c04:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     c08:	80 91 b4 01 	lds	r24, 0x01B4
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	20 f4       	brcc	.+8      	; 0xc18 <run_set_2+0xce>
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 93 b4 01 	sts	0x01B4, r24
     c16:	07 c0       	rjmp	.+14     	; 0xc26 <run_set_2+0xdc>
     c18:	89 e6       	ldi	r24, 0x69	; 105
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     c26:	80 91 b4 01 	lds	r24, 0x01B4
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	11 f4       	brne	.+4      	; 0xc32 <run_set_2+0xe8>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <run_set_2+0xea>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
     c38:	70 c0       	rjmp	.+224    	; 0xd1a <run_set_2+0x1d0>
	  show_set_temp(1);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     c3a:	84 e1       	ldi	r24, 0x14	; 20
     c3c:	80 93 34 01 	sts	0x0134, r24
	  if (temps[1][0] > temps[1][1]) {
     c40:	20 91 ad 01 	lds	r18, 0x01AD
     c44:	30 91 ae 01 	lds	r19, 0x01AE
     c48:	80 91 af 01 	lds	r24, 0x01AF
     c4c:	90 91 b0 01 	lds	r25, 0x01B0
     c50:	82 17       	cp	r24, r18
     c52:	93 07       	cpc	r25, r19
     c54:	f4 f4       	brge	.+60     	; 0xc92 <run_set_2+0x148>
        MAX7219_clearDisplay();
     c56:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     c5a:	80 eb       	ldi	r24, 0xB0	; 176
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	90 93 3e 01 	sts	0x013E, r25
     c62:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_2(temps[1][0]);
     c66:	80 91 ad 01 	lds	r24, 0x01AD
     c6a:	90 91 ae 01 	lds	r25, 0x01AE
     c6e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <save_max_temp_2>
        save_min_temp_2(temps[1][1]);
     c72:	80 91 af 01 	lds	r24, 0x01AF
     c76:	90 91 b0 01 	lds	r25, 0x01B0
     c7a:	0e 94 8b 02 	call	0x516	; 0x516 <save_min_temp_2>
	    save_type_2(types[1]);
     c7e:	80 91 38 01 	lds	r24, 0x0138
     c82:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <save_type_2>
        show_menu();
     c86:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
	    KBD_set_type(1);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
     c90:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     c92:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     c96:	84 ef       	ldi	r24, 0xF4	; 244
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	90 93 3e 01 	sts	0x013E, r25
     c9e:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     ca8:	8a ec       	ldi	r24, 0xCA	; 202
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	44 ef       	ldi	r20, 0xF4	; 244
     cb0:	51 e0       	ldi	r21, 0x01	; 1
     cb2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
     cb6:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     cb8:	84 e1       	ldi	r24, 0x14	; 20
     cba:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     cc4:	80 91 b4 01 	lds	r24, 0x01B4
     cc8:	88 23       	and	r24, r24
     cca:	71 f4       	brne	.+28     	; 0xce8 <run_set_2+0x19e>
        if (temps[1][0] < 790) {
     ccc:	80 91 ad 01 	lds	r24, 0x01AD
     cd0:	90 91 ae 01 	lds	r25, 0x01AE
     cd4:	23 e0       	ldi	r18, 0x03	; 3
     cd6:	86 31       	cpi	r24, 0x16	; 22
     cd8:	92 07       	cpc	r25, r18
     cda:	fc f4       	brge	.+62     	; 0xd1a <run_set_2+0x1d0>
		  temps[1][0]++;
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	90 93 ae 01 	sts	0x01AE, r25
     ce2:	80 93 ad 01 	sts	0x01AD, r24
     ce6:	19 c0       	rjmp	.+50     	; 0xd1a <run_set_2+0x1d0>
		}
	  }
	  if (n_edit == 1) {
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	71 f4       	brne	.+28     	; 0xd08 <run_set_2+0x1be>
        if (temps[1][1] < 790) {
     cec:	80 91 af 01 	lds	r24, 0x01AF
     cf0:	90 91 b0 01 	lds	r25, 0x01B0
     cf4:	23 e0       	ldi	r18, 0x03	; 3
     cf6:	86 31       	cpi	r24, 0x16	; 22
     cf8:	92 07       	cpc	r25, r18
     cfa:	7c f4       	brge	.+30     	; 0xd1a <run_set_2+0x1d0>
		  temps[1][1]++;
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 b0 01 	sts	0x01B0, r25
     d02:	80 93 af 01 	sts	0x01AF, r24
     d06:	09 c0       	rjmp	.+18     	; 0xd1a <run_set_2+0x1d0>
		}
	  }
	  if (n_edit == 2) {
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	39 f4       	brne	.+14     	; 0xd1a <run_set_2+0x1d0>
        types[1] = !types[1];
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 91 38 01 	lds	r25, 0x0138
     d12:	91 11       	cpse	r25, r1
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	80 93 38 01 	sts	0x0138, r24
	  }
	  show_set_temp(1);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 23 05 	call	0xa46	; 0xa46 <show_set_temp>
    break;
     d20:	08 95       	ret
	default:
	  events_default(event);
     d22:	0e 94 54 01 	call	0x2a8	; 0x2a8 <events_default>
     d26:	08 95       	ret

00000d28 <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     d28:	8e 31       	cpi	r24, 0x1E	; 30
     d2a:	b1 f1       	breq	.+108    	; 0xd98 <run_set_1+0x70>
     d2c:	8f 31       	cpi	r24, 0x1F	; 31
     d2e:	38 f4       	brcc	.+14     	; 0xd3e <run_set_1+0x16>
     d30:	8a 30       	cpi	r24, 0x0A	; 10
     d32:	09 f4       	brne	.+2      	; 0xd36 <run_set_1+0xe>
     d34:	b0 c0       	rjmp	.+352    	; 0xe96 <run_set_1+0x16e>
     d36:	84 31       	cpi	r24, 0x14	; 20
     d38:	09 f0       	breq	.+2      	; 0xd3c <run_set_1+0x14>
     d3a:	e2 c0       	rjmp	.+452    	; 0xf00 <run_set_1+0x1d8>
     d3c:	50 c0       	rjmp	.+160    	; 0xdde <run_set_1+0xb6>
     d3e:	89 3c       	cpi	r24, 0xC9	; 201
     d40:	31 f0       	breq	.+12     	; 0xd4e <run_set_1+0x26>
     d42:	8a 3c       	cpi	r24, 0xCA	; 202
     d44:	09 f1       	breq	.+66     	; 0xd88 <run_set_1+0x60>
     d46:	89 36       	cpi	r24, 0x69	; 105
     d48:	09 f0       	breq	.+2      	; 0xd4c <run_set_1+0x24>
     d4a:	da c0       	rjmp	.+436    	; 0xf00 <run_set_1+0x1d8>
     d4c:	65 c0       	rjmp	.+202    	; 0xe18 <run_set_1+0xf0>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 91 32 01 	lds	r25, 0x0132
     d54:	91 11       	cpse	r25, r1
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     d5c:	80 91 34 01 	lds	r24, 0x0134
     d60:	88 23       	and	r24, r24
     d62:	21 f0       	breq	.+8      	; 0xd6c <run_set_1+0x44>
     d64:	81 50       	subi	r24, 0x01	; 1
     d66:	80 93 34 01 	sts	0x0134, r24
     d6a:	08 95       	ret
	    KBD_set_type(1);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
        MAX7219_clearDisplay();
     d72:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     d76:	80 eb       	ldi	r24, 0xB0	; 176
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	90 93 3e 01 	sts	0x013E, r25
     d7e:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     d82:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
     d86:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 91 33 01 	lds	r25, 0x0133
     d8e:	91 11       	cpse	r25, r1
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	80 93 33 01 	sts	0x0133, r24
     d96:	b0 c0       	rjmp	.+352    	; 0xef8 <run_set_1+0x1d0>
	  show_set_temp(0);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     d98:	84 e1       	ldi	r24, 0x14	; 20
     d9a:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     da4:	80 91 b4 01 	lds	r24, 0x01B4
     da8:	88 23       	and	r24, r24
     daa:	59 f4       	brne	.+22     	; 0xdc2 <run_set_1+0x9a>
        if (temps[0][0] > -550) {
     dac:	80 91 a9 01 	lds	r24, 0x01A9
     db0:	90 91 aa 01 	lds	r25, 0x01AA
     db4:	2d ef       	ldi	r18, 0xFD	; 253
     db6:	8b 3d       	cpi	r24, 0xDB	; 219
     db8:	92 07       	cpc	r25, r18
     dba:	0c f4       	brge	.+2      	; 0xdbe <run_set_1+0x96>
     dbc:	9d c0       	rjmp	.+314    	; 0xef8 <run_set_1+0x1d0>
		  temps[0][0]--;
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	7d c0       	rjmp	.+250    	; 0xebc <run_set_1+0x194>
		}
	  }
	  if (n_edit == 1) {
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <run_set_1+0xa0>
     dc6:	8f c0       	rjmp	.+286    	; 0xee6 <run_set_1+0x1be>
        if (temps[0][1] > -550) {
     dc8:	80 91 ab 01 	lds	r24, 0x01AB
     dcc:	90 91 ac 01 	lds	r25, 0x01AC
     dd0:	2d ef       	ldi	r18, 0xFD	; 253
     dd2:	8b 3d       	cpi	r24, 0xDB	; 219
     dd4:	92 07       	cpc	r25, r18
     dd6:	0c f4       	brge	.+2      	; 0xdda <run_set_1+0xb2>
     dd8:	8f c0       	rjmp	.+286    	; 0xef8 <run_set_1+0x1d0>
		  temps[0][1]--;
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	7f c0       	rjmp	.+254    	; 0xedc <run_set_1+0x1b4>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     dde:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     de2:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     de6:	80 91 b4 01 	lds	r24, 0x01B4
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	20 f4       	brcc	.+8      	; 0xdf6 <run_set_1+0xce>
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 b4 01 	sts	0x01B4, r24
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <run_set_1+0xdc>
     df6:	89 e6       	ldi	r24, 0x69	; 105
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     e04:	80 91 b4 01 	lds	r24, 0x01B4
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	11 f4       	brne	.+4      	; 0xe10 <run_set_1+0xe8>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <run_set_1+0xea>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
     e16:	70 c0       	rjmp	.+224    	; 0xef8 <run_set_1+0x1d0>
	  show_set_temp(0);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     e18:	84 e1       	ldi	r24, 0x14	; 20
     e1a:	80 93 34 01 	sts	0x0134, r24
	  if (temps[0][0] > temps[0][1]) {
     e1e:	20 91 a9 01 	lds	r18, 0x01A9
     e22:	30 91 aa 01 	lds	r19, 0x01AA
     e26:	80 91 ab 01 	lds	r24, 0x01AB
     e2a:	90 91 ac 01 	lds	r25, 0x01AC
     e2e:	82 17       	cp	r24, r18
     e30:	93 07       	cpc	r25, r19
     e32:	f4 f4       	brge	.+60     	; 0xe70 <run_set_1+0x148>
        MAX7219_clearDisplay();
     e34:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     e38:	80 eb       	ldi	r24, 0xB0	; 176
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	90 93 3e 01 	sts	0x013E, r25
     e40:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_1(temps[0][0]);
     e44:	80 91 a9 01 	lds	r24, 0x01A9
     e48:	90 91 aa 01 	lds	r25, 0x01AA
     e4c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <save_max_temp_1>
        save_min_temp_1(temps[0][1]);
     e50:	80 91 ab 01 	lds	r24, 0x01AB
     e54:	90 91 ac 01 	lds	r25, 0x01AC
     e58:	0e 94 85 02 	call	0x50a	; 0x50a <save_min_temp_1>
	    save_type_1(types[0]);
     e5c:	80 91 37 01 	lds	r24, 0x0137
     e60:	0e 94 c9 02 	call	0x592	; 0x592 <save_type_1>
        show_menu();
     e64:	0e 94 e7 02 	call	0x5ce	; 0x5ce <show_menu>
	    KBD_set_type(1);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <KBD_set_type>
     e6e:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     e70:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     e74:	84 ef       	ldi	r24, 0xF4	; 244
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	90 93 3e 01 	sts	0x013E, r25
     e7c:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     e80:	85 e0       	ldi	r24, 0x05	; 5
     e82:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     e86:	8a ec       	ldi	r24, 0xCA	; 202
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	44 ef       	ldi	r20, 0xF4	; 244
     e8e:	51 e0       	ldi	r21, 0x01	; 1
     e90:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
     e94:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     e96:	84 e1       	ldi	r24, 0x14	; 20
     e98:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     ea2:	80 91 b4 01 	lds	r24, 0x01B4
     ea6:	88 23       	and	r24, r24
     ea8:	71 f4       	brne	.+28     	; 0xec6 <run_set_1+0x19e>
        if (temps[0][0] < 790) {
     eaa:	80 91 a9 01 	lds	r24, 0x01A9
     eae:	90 91 aa 01 	lds	r25, 0x01AA
     eb2:	23 e0       	ldi	r18, 0x03	; 3
     eb4:	86 31       	cpi	r24, 0x16	; 22
     eb6:	92 07       	cpc	r25, r18
     eb8:	fc f4       	brge	.+62     	; 0xef8 <run_set_1+0x1d0>
		  temps[0][0]++;
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	90 93 aa 01 	sts	0x01AA, r25
     ec0:	80 93 a9 01 	sts	0x01A9, r24
     ec4:	19 c0       	rjmp	.+50     	; 0xef8 <run_set_1+0x1d0>
		}
	  }
	  if (n_edit == 1) {
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	71 f4       	brne	.+28     	; 0xee6 <run_set_1+0x1be>
        if (temps[0][1] < 790) {
     eca:	80 91 ab 01 	lds	r24, 0x01AB
     ece:	90 91 ac 01 	lds	r25, 0x01AC
     ed2:	23 e0       	ldi	r18, 0x03	; 3
     ed4:	86 31       	cpi	r24, 0x16	; 22
     ed6:	92 07       	cpc	r25, r18
     ed8:	7c f4       	brge	.+30     	; 0xef8 <run_set_1+0x1d0>
		  temps[0][1]++;
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	90 93 ac 01 	sts	0x01AC, r25
     ee0:	80 93 ab 01 	sts	0x01AB, r24
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <run_set_1+0x1d0>
		}
	  }
	  if (n_edit == 2) {
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	39 f4       	brne	.+14     	; 0xef8 <run_set_1+0x1d0>
        types[0] = !types[0];
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 91 37 01 	lds	r25, 0x0137
     ef0:	91 11       	cpse	r25, r1
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	80 93 37 01 	sts	0x0137, r24
	  }
	  show_set_temp(0);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 23 05 	call	0xa46	; 0xa46 <show_set_temp>
    break;
     efe:	08 95       	ret
	default:
	  events_default(event);
     f00:	0e 94 54 01 	call	0x2a8	; 0x2a8 <events_default>
     f04:	08 95       	ret

00000f06 <KBD_init>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_PLUS) &= ~BUT_PLUS_LINE;
     f06:	54 98       	cbi	0x0a, 4	; 10
  PORT(BUT_PLUS) |= BUT_PLUS_LINE;
     f08:	5c 9a       	sbi	0x0b, 4	; 11
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     f0a:	55 98       	cbi	0x0a, 5	; 10
  PORT(BUT_SET) |= BUT_SET_LINE;
     f0c:	5d 9a       	sbi	0x0b, 5	; 11
  DDR(BUT_MINUS) &= ~BUT_MINUS_LINE;
     f0e:	56 98       	cbi	0x0a, 6	; 10
  PORT(BUT_MINUS) |= BUT_MINUS_LINE;
     f10:	5e 9a       	sbi	0x0b, 6	; 11
  kbd_type = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 3c 01 	sts	0x013C, r24
}
     f18:	08 95       	ret

00000f1a <KBD_set_type>:
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     f1a:	80 93 3c 01 	sts	0x013C, r24
}
     f1e:	08 95       	ret

00000f20 <debounce_sw_plus>:
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
     f20:	80 91 ba 01 	lds	r24, 0x01BA
     f24:	90 91 bb 01 	lds	r25, 0x01BB
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	90 6e       	ori	r25, 0xE0	; 224
     f2e:	21 e0       	ldi	r18, 0x01	; 1
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4c 99       	sbic	0x09, 4	; 9
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <debounce_sw_plus+0x1a>
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	82 2b       	or	r24, r18
     f3c:	93 2b       	or	r25, r19
     f3e:	90 93 bb 01 	sts	0x01BB, r25
     f42:	80 93 ba 01 	sts	0x01BA, r24
  if (state1 == 0xF000) return 1;
     f46:	20 ef       	ldi	r18, 0xF0	; 240
     f48:	80 30       	cpi	r24, 0x00	; 0
     f4a:	92 07       	cpc	r25, r18
     f4c:	31 f0       	breq	.+12     	; 0xf5a <debounce_sw_plus+0x3a>
  if (state1 == 0xE000) return 2;
     f4e:	20 ee       	ldi	r18, 0xE0	; 224
     f50:	80 30       	cpi	r24, 0x00	; 0
     f52:	92 07       	cpc	r25, r18
     f54:	21 f4       	brne	.+8      	; 0xf5e <debounce_sw_plus+0x3e>
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
  if (state1 == 0xF000) return 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	08 95       	ret
  if (state1 == 0xE000) return 2;
  return 0;
     f5e:	80 e0       	ldi	r24, 0x00	; 0
}
     f60:	08 95       	ret

00000f62 <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     f62:	80 91 b8 01 	lds	r24, 0x01B8
     f66:	90 91 b9 01 	lds	r25, 0x01B9
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	90 6e       	ori	r25, 0xE0	; 224
     f70:	21 e0       	ldi	r18, 0x01	; 1
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4d 99       	sbic	0x09, 5	; 9
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <debounce_sw_set+0x1a>
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	82 2b       	or	r24, r18
     f7e:	93 2b       	or	r25, r19
     f80:	90 93 b9 01 	sts	0x01B9, r25
     f84:	80 93 b8 01 	sts	0x01B8, r24
  if (state2 == 0xF000) return 1;
     f88:	20 ef       	ldi	r18, 0xF0	; 240
     f8a:	80 30       	cpi	r24, 0x00	; 0
     f8c:	92 07       	cpc	r25, r18
     f8e:	31 f0       	breq	.+12     	; 0xf9c <debounce_sw_set+0x3a>
  if (state2 == 0xE000) return 2;
     f90:	20 ee       	ldi	r18, 0xE0	; 224
     f92:	80 30       	cpi	r24, 0x00	; 0
     f94:	92 07       	cpc	r25, r18
     f96:	21 f4       	brne	.+8      	; 0xfa0 <debounce_sw_set+0x3e>
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
  if (state2 == 0xF000) return 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	08 95       	ret
  if (state2 == 0xE000) return 2;
  return 0;
     fa0:	80 e0       	ldi	r24, 0x00	; 0
}
     fa2:	08 95       	ret

00000fa4 <debounce_sw_minus>:
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
     fa4:	80 91 b6 01 	lds	r24, 0x01B6
     fa8:	90 91 b7 01 	lds	r25, 0x01B7
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	90 6e       	ori	r25, 0xE0	; 224
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	4e 99       	sbic	0x09, 6	; 9
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <debounce_sw_minus+0x1a>
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	82 2b       	or	r24, r18
     fc0:	93 2b       	or	r25, r19
     fc2:	90 93 b7 01 	sts	0x01B7, r25
     fc6:	80 93 b6 01 	sts	0x01B6, r24
  if (state3 == 0xF000) return 1;
     fca:	20 ef       	ldi	r18, 0xF0	; 240
     fcc:	80 30       	cpi	r24, 0x00	; 0
     fce:	92 07       	cpc	r25, r18
     fd0:	31 f0       	breq	.+12     	; 0xfde <debounce_sw_minus+0x3a>
  if (state3 == 0xE000) return 2;
     fd2:	20 ee       	ldi	r18, 0xE0	; 224
     fd4:	80 30       	cpi	r24, 0x00	; 0
     fd6:	92 07       	cpc	r25, r18
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <debounce_sw_minus+0x3e>
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
  if (state3 == 0xF000) return 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	08 95       	ret
  if (state3 == 0xE000) return 2;
  return 0;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
}
     fe4:	08 95       	ret

00000fe6 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
  if (kbd_type == 1) {
     fe6:	80 91 3c 01 	lds	r24, 0x013C
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	c1 f4       	brne	.+48     	; 0x101e <KBD_scan+0x38>
    if (debounce_sw_plus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
     fee:	0e 94 90 07 	call	0xf20	; 0xf20 <debounce_sw_plus>
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	79 f4       	brne	.+30     	; 0x1014 <KBD_scan+0x2e>
     ff6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff8:	8f e3       	ldi	r24, 0x3F	; 63
     ffa:	9c e9       	ldi	r25, 0x9C	; 156
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <KBD_scan+0x16>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <KBD_scan+0x1c>
    1002:	00 00       	nop
    1004:	40 98       	cbi	0x08, 0	; 8
    1006:	8a e0       	ldi	r24, 0x0A	; 10
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
    if (debounce_sw_minus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    1014:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <debounce_sw_minus>
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	39 f5       	brne	.+78     	; 0x106a <KBD_scan+0x84>
    101c:	17 c0       	rjmp	.+46     	; 0x104c <KBD_scan+0x66>
  } else {
    if (debounce_sw_plus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    101e:	0e 94 90 07 	call	0xf20	; 0xf20 <debounce_sw_plus>
    1022:	88 23       	and	r24, r24
    1024:	79 f0       	breq	.+30     	; 0x1044 <KBD_scan+0x5e>
    1026:	40 9a       	sbi	0x08, 0	; 8
    1028:	8f e3       	ldi	r24, 0x3F	; 63
    102a:	9c e9       	ldi	r25, 0x9C	; 156
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <KBD_scan+0x46>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <KBD_scan+0x4c>
    1032:	00 00       	nop
    1034:	40 98       	cbi	0x08, 0	; 8
    1036:	8a e0       	ldi	r24, 0x0A	; 10
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
    if (debounce_sw_minus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    1044:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <debounce_sw_minus>
    1048:	88 23       	and	r24, r24
    104a:	79 f0       	breq	.+30     	; 0x106a <KBD_scan+0x84>
    104c:	40 9a       	sbi	0x08, 0	; 8
    104e:	8f e3       	ldi	r24, 0x3F	; 63
    1050:	9c e9       	ldi	r25, 0x9C	; 156
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <KBD_scan+0x6c>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <KBD_scan+0x72>
    1058:	00 00       	nop
    105a:	40 98       	cbi	0x08, 0	; 8
    105c:	8e e1       	ldi	r24, 0x1E	; 30
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
  }
  if (debounce_sw_set() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET, 0, 0); }
    106a:	0e 94 b1 07 	call	0xf62	; 0xf62 <debounce_sw_set>
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	79 f4       	brne	.+30     	; 0x1090 <KBD_scan+0xaa>
    1072:	40 9a       	sbi	0x08, 0	; 8
    1074:	8f e3       	ldi	r24, 0x3F	; 63
    1076:	9c e9       	ldi	r25, 0x9C	; 156
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <KBD_scan+0x92>
    107c:	00 c0       	rjmp	.+0      	; 0x107e <KBD_scan+0x98>
    107e:	00 00       	nop
    1080:	40 98       	cbi	0x08, 0	; 8
    1082:	84 e1       	ldi	r24, 0x14	; 20
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RTOS_setTask>
    1090:	08 95       	ret

00001092 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    1092:	e1 eb       	ldi	r30, 0xB1	; 177
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	84 60       	ori	r24, 0x04	; 4
    109a:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    10a0:	e0 e7       	ldi	r30, 0x70	; 112
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	81 60       	ori	r24, 0x01	; 1
    10a8:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    10aa:	86 e0       	ldi	r24, 0x06	; 6
    10ac:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    10b0:	10 92 1d 02 	sts	0x021D, r1
}
    10b4:	08 95       	ret

000010b6 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    10b6:	88 23       	and	r24, r24
    10b8:	09 f4       	brne	.+2      	; 0x10bc <RTOS_setTask+0x6>
    10ba:	6f c0       	rjmp	.+222    	; 0x119a <RTOS_setTask+0xe4>
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	1b c0       	rjmp	.+54     	; 0x10f6 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    10c0:	29 2f       	mov	r18, r25
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	f9 01       	movw	r30, r18
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	e3 54       	subi	r30, 0x43	; 67
    10d4:	fe 4f       	sbci	r31, 0xFE	; 254
    10d6:	20 81       	ld	r18, Z
    10d8:	28 17       	cp	r18, r24
    10da:	61 f4       	brne	.+24     	; 0x10f4 <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    10dc:	72 83       	std	Z+2, r23	; 0x02
    10de:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    10e0:	54 83       	std	Z+4, r21	; 0x04
    10e2:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    10e4:	61 15       	cp	r22, r1
    10e6:	71 05       	cpc	r23, r1
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	85 83       	std	Z+5, r24	; 0x05
    10ee:	08 95       	ret
      } else TaskArray[i].run = 0;   
    10f0:	15 82       	std	Z+5, r1	; 0x05
    10f2:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    10f4:	9f 5f       	subi	r25, 0xFF	; 255
    10f6:	20 91 1d 02 	lds	r18, 0x021D
    10fa:	92 17       	cp	r25, r18
    10fc:	08 f3       	brcs	.-62     	; 0x10c0 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    10fe:	20 91 1d 02 	lds	r18, 0x021D
    1102:	20 31       	cpi	r18, 0x10	; 16
    1104:	08 f0       	brcs	.+2      	; 0x1108 <RTOS_setTask+0x52>
    1106:	49 c0       	rjmp	.+146    	; 0x119a <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    1108:	20 91 1d 02 	lds	r18, 0x021D
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	f9 01       	movw	r30, r18
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	e2 0f       	add	r30, r18
    1116:	f3 1f       	adc	r31, r19
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	e3 54       	subi	r30, 0x43	; 67
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    1122:	20 91 1d 02 	lds	r18, 0x021D
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	f9 01       	movw	r30, r18
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	e2 0f       	add	r30, r18
    1130:	f3 1f       	adc	r31, r19
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	e3 54       	subi	r30, 0x43	; 67
    1138:	fe 4f       	sbci	r31, 0xFE	; 254
    113a:	72 83       	std	Z+2, r23	; 0x02
    113c:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    113e:	20 91 1d 02 	lds	r18, 0x021D
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	f9 01       	movw	r30, r18
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	e2 0f       	add	r30, r18
    114c:	f3 1f       	adc	r31, r19
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	e3 54       	subi	r30, 0x43	; 67
    1154:	fe 4f       	sbci	r31, 0xFE	; 254
    1156:	54 83       	std	Z+4, r21	; 0x04
    1158:	43 83       	std	Z+3, r20	; 0x03
    115a:	89 2f       	mov	r24, r25
    115c:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    115e:	61 15       	cp	r22, r1
    1160:	71 05       	cpc	r23, r1
    1162:	61 f4       	brne	.+24     	; 0x117c <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    1164:	fc 01       	movw	r30, r24
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	e8 0f       	add	r30, r24
    116c:	f9 1f       	adc	r31, r25
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	e3 54       	subi	r30, 0x43	; 67
    1174:	fe 4f       	sbci	r31, 0xFE	; 254
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	85 83       	std	Z+5, r24	; 0x05
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    117c:	fc 01       	movw	r30, r24
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e8 0f       	add	r30, r24
    1184:	f9 1f       	adc	r31, r25
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	e3 54       	subi	r30, 0x43	; 67
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    1190:	80 91 1d 02 	lds	r24, 0x021D
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	80 93 1d 02 	sts	0x021D, r24
    119a:	08 95       	ret

0000119c <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2e c0       	rjmp	.+92     	; 0x11fc <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    11a0:	29 2f       	mov	r18, r25
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	d9 01       	movw	r26, r18
    11a6:	aa 0f       	add	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	a2 0f       	add	r26, r18
    11ac:	b3 1f       	adc	r27, r19
    11ae:	aa 0f       	add	r26, r26
    11b0:	bb 1f       	adc	r27, r27
    11b2:	a3 54       	subi	r26, 0x43	; 67
    11b4:	be 4f       	sbci	r27, 0xFE	; 254
    11b6:	4c 91       	ld	r20, X
    11b8:	48 17       	cp	r20, r24
    11ba:	f9 f4       	brne	.+62     	; 0x11fa <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    11bc:	80 91 1d 02 	lds	r24, 0x021D
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	28 17       	cp	r18, r24
    11c6:	39 07       	cpc	r19, r25
    11c8:	91 f0       	breq	.+36     	; 0x11ee <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    11ca:	80 91 1d 02 	lds	r24, 0x021D
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	fc 01       	movw	r30, r24
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	e8 0f       	add	r30, r24
    11da:	f9 1f       	adc	r31, r25
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	e3 54       	subi	r30, 0x43	; 67
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	86 e0       	ldi	r24, 0x06	; 6
    11e6:	01 90       	ld	r0, Z+
    11e8:	0d 92       	st	X+, r0
    11ea:	81 50       	subi	r24, 0x01	; 1
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    11ee:	80 91 1d 02 	lds	r24, 0x021D
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	80 93 1d 02 	sts	0x021D, r24
      return;
    11f8:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    11fa:	9f 5f       	subi	r25, 0xFF	; 255
    11fc:	20 91 1d 02 	lds	r18, 0x021D
    1200:	92 17       	cp	r25, r18
    1202:	70 f2       	brcs	.-100    	; 0x11a0 <RTOS_deleteTask+0x4>
    1204:	08 95       	ret

00001206 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    120a:	80 91 bc 01 	lds	r24, 0x01BC
    120e:	88 23       	and	r24, r24
    1210:	11 f4       	brne	.+4      	; 0x1216 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	4e c0       	rjmp	.+156    	; 0x12b2 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    1216:	10 92 bc 01 	sts	0x01BC, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    121a:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    121c:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    121e:	17 c0       	rjmp	.+46     	; 0x124e <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    1220:	82 2f       	mov	r24, r18
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	e8 0f       	add	r30, r24
    122c:	f9 1f       	adc	r31, r25
    122e:	ee 0f       	add	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	e3 54       	subi	r30, 0x43	; 67
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	81 81       	ldd	r24, Z+1	; 0x01
    1238:	92 81       	ldd	r25, Z+2	; 0x02
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	11 f4       	brne	.+4      	; 0x1242 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    123e:	35 83       	std	Z+5, r19	; 0x05
    1240:	05 c0       	rjmp	.+10     	; 0x124c <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    1242:	81 81       	ldd	r24, Z+1	; 0x01
    1244:	92 81       	ldd	r25, Z+2	; 0x02
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	92 83       	std	Z+2, r25	; 0x02
    124a:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	80 91 1d 02 	lds	r24, 0x021D
    1252:	28 17       	cp	r18, r24
    1254:	28 f3       	brcs	.-54     	; 0x1220 <RTOS_dispatchTask+0x1a>
    1256:	dd cf       	rjmp	.-70     	; 0x1212 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1258:	81 2f       	mov	r24, r17
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	e3 54       	subi	r30, 0x43	; 67
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	85 81       	ldd	r24, Z+5	; 0x05
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	f1 f4       	brne	.+60     	; 0x12b0 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    1274:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    1276:	23 81       	ldd	r18, Z+3	; 0x03
    1278:	34 81       	ldd	r19, Z+4	; 0x04
    127a:	21 15       	cp	r18, r1
    127c:	31 05       	cpc	r19, r1
    127e:	31 f4       	brne	.+12     	; 0x128c <RTOS_dispatchTask+0x86>
      {  
        cli();
    1280:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    1282:	80 81       	ld	r24, Z
    1284:	0e 94 ce 08 	call	0x119c	; 0x119c <RTOS_deleteTask>
        sei();
    1288:	78 94       	sei
    128a:	0c c0       	rjmp	.+24     	; 0x12a4 <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    128c:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    128e:	21 81       	ldd	r18, Z+1	; 0x01
    1290:	32 81       	ldd	r19, Z+2	; 0x02
    1292:	21 15       	cp	r18, r1
    1294:	31 05       	cpc	r19, r1
    1296:	31 f4       	brne	.+12     	; 0x12a4 <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1298:	23 81       	ldd	r18, Z+3	; 0x03
    129a:	34 81       	ldd	r19, Z+4	; 0x04
    129c:	21 50       	subi	r18, 0x01	; 1
    129e:	30 40       	sbci	r19, 0x00	; 0
    12a0:	32 83       	std	Z+2, r19	; 0x02
    12a2:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    12a4:	e0 91 3d 01 	lds	r30, 0x013D
    12a8:	f0 91 3e 01 	lds	r31, 0x013E
    12ac:	80 2f       	mov	r24, r16
    12ae:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    12b0:	1f 5f       	subi	r17, 0xFF	; 255
    12b2:	80 91 1d 02 	lds	r24, 0x021D
    12b6:	18 17       	cp	r17, r24
    12b8:	78 f2       	brcs	.-98     	; 0x1258 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    12c0:	1f 92       	push	r1
    12c2:	0f 92       	push	r0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	0f 92       	push	r0
    12c8:	11 24       	eor	r1, r1
    12ca:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    12cc:	86 e0       	ldi	r24, 0x06	; 6
    12ce:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 bc 01 	sts	0x01BC, r24
}
    12d8:	8f 91       	pop	r24
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    12e4:	80 52       	subi	r24, 0x20	; 32
    12e6:	86 35       	cpi	r24, 0x56	; 86
    12e8:	30 f4       	brcc	.+12     	; 0x12f6 <MAX7219_lookupCode+0x12>
    12ea:	e8 2f       	mov	r30, r24
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	e1 5b       	subi	r30, 0xB1	; 177
    12f0:	fe 4f       	sbci	r31, 0xFE	; 254
    12f2:	80 81       	ld	r24, Z
    12f4:	08 95       	ret
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    12f8:	08 95       	ret

000012fa <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    12fa:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    12fc:	87 ff       	sbrs	r24, 7
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1300:	43 9a       	sbi	0x08, 3	; 8
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    1304:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    1306:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    1308:	00 00       	nop
	asm("nop");
    130a:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    130c:	42 9a       	sbi	0x08, 2	; 8
    130e:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    1310:	11 f0       	breq	.+4      	; 0x1316 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    1312:	88 0f       	add	r24, r24
    1314:	f3 cf       	rjmp	.-26     	; 0x12fc <MAX7219_SendByte+0x2>
    1316:	08 95       	ret

00001318 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	18 2f       	mov	r17, r24
    1320:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    1322:	41 98       	cbi	0x08, 1	; 8
    1324:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    1326:	81 2f       	mov	r24, r17
    1328:	0e 94 7d 09 	call	0x12fa	; 0x12fa <MAX7219_SendByte>
	MAX7219_SendByte(data);
    132c:	8f 2d       	mov	r24, r15
    132e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <MAX7219_SendByte>
    1332:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    1334:	c1 f7       	brne	.-16     	; 0x1326 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1336:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	08 95       	ret

00001340 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cf e3       	ldi	r28, 0x3F	; 63
    134a:	d1 e0       	ldi	r29, 0x01	; 1
    134c:	07 e4       	ldi	r16, 0x47	; 71
    134e:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    1350:	89 91       	ld	r24, Y+
    1352:	f8 01       	movw	r30, r16
    1354:	61 91       	ld	r22, Z+
    1356:	8f 01       	movw	r16, r30
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    135e:	f1 e0       	ldi	r31, 0x01	; 1
    1360:	c7 34       	cpi	r28, 0x47	; 71
    1362:	df 07       	cpc	r29, r31
    1364:	a9 f7       	brne	.-22     	; 0x1350 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    1370:	10 92 47 01 	sts	0x0147, r1
    1374:	10 92 48 01 	sts	0x0148, r1
    1378:	10 92 49 01 	sts	0x0149, r1
    137c:	10 92 4a 01 	sts	0x014A, r1
    1380:	10 92 4b 01 	sts	0x014B, r1
    1384:	10 92 4c 01 	sts	0x014C, r1
    1388:	10 92 4d 01 	sts	0x014D, r1
    138c:	10 92 4e 01 	sts	0x014E, r1
  }
  MAX7219_updateDisplay();
    1390:	0e 94 a0 09 	call	0x1340	; 0x1340 <MAX7219_updateDisplay>
}
    1394:	08 95       	ret

00001396 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1396:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1398:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    139a:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    139c:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    139e:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    13a0:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    13a2:	8c e0       	ldi	r24, 0x0C	; 12
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    13aa:	8f e0       	ldi	r24, 0x0F	; 15
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    13b2:	89 e0       	ldi	r24, 0x09	; 9
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    13ba:	8a e0       	ldi	r24, 0x0A	; 10
    13bc:	62 e0       	ldi	r22, 0x02	; 2
    13be:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    13c2:	8b e0       	ldi	r24, 0x0B	; 11
    13c4:	67 e0       	ldi	r22, 0x07	; 7
    13c6:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    13ca:	0e 94 b8 09 	call	0x1370	; 0x1370 <MAX7219_clearDisplay>
  return;
}
    13ce:	08 95       	ret

000013d0 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    13d0:	bf 92       	push	r11
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	27 97       	sbiw	r28, 0x07	; 7
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	b8 2e       	mov	r11, r24
    13f4:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    13f6:	77 ff       	sbrs	r23, 7
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    13fa:	90 95       	com	r25
    13fc:	81 95       	neg	r24
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    1400:	31 e0       	ldi	r19, 0x01	; 1
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    1404:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    1406:	e4 2f       	mov	r30, r20
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8e 01       	movw	r16, r28
    140c:	0f 5f       	subi	r16, 0xFF	; 255
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	e0 0f       	add	r30, r16
    1412:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    1414:	5a e0       	ldi	r21, 0x0A	; 10
    1416:	e5 2e       	mov	r14, r21
    1418:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    141a:	07 c0       	rjmp	.+14     	; 0x142a <MAX7219_printNum+0x5a>
    141c:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    141e:	b7 01       	movw	r22, r14
    1420:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__divmodhi4>
    1424:	80 5d       	subi	r24, 0xD0	; 208
    1426:	80 83       	st	Z, r24
    x /= 10;
    1428:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    142a:	e0 17       	cp	r30, r16
    142c:	f1 07       	cpc	r31, r17
    142e:	b1 f7       	brne	.-20     	; 0x141c <MAX7219_printNum+0x4c>
    1430:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    1432:	84 2f       	mov	r24, r20
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    1438:	de 01       	movw	r26, r28
    143a:	11 96       	adiw	r26, 0x01	; 1
    143c:	08 c0       	rjmp	.+16     	; 0x144e <MAX7219_printNum+0x7e>
    143e:	fd 01       	movw	r30, r26
    1440:	e6 0f       	add	r30, r22
    1442:	f7 1f       	adc	r31, r23
    1444:	60 81       	ld	r22, Z
    1446:	60 33       	cpi	r22, 0x30	; 48
    1448:	11 f5       	brne	.+68     	; 0x148e <MAX7219_printNum+0xbe>
    144a:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    144c:	5f 5f       	subi	r21, 0xFF	; 255
    144e:	65 2f       	mov	r22, r21
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	68 17       	cp	r22, r24
    1454:	79 07       	cpc	r23, r25
    1456:	9c f3       	brlt	.-26     	; 0x143e <MAX7219_printNum+0x6e>
    1458:	1a c0       	rjmp	.+52     	; 0x148e <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    145a:	82 2f       	mov	r24, r18
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	8c 01       	movw	r16, r24
    1460:	0c 0d       	add	r16, r12
    1462:	1d 1d       	adc	r17, r13
    1464:	08 30       	cpi	r16, 0x08	; 8
    1466:	11 05       	cpc	r17, r1
    1468:	84 f4       	brge	.+32     	; 0x148a <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    146a:	8e 0d       	add	r24, r14
    146c:	9f 1d       	adc	r25, r15
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	2d 83       	std	Y+5, r18	; 0x05
    1474:	3e 83       	std	Y+6, r19	; 0x06
    1476:	4f 83       	std	Y+7, r20	; 0x07
    1478:	0e 94 72 09 	call	0x12e4	; 0x12e4 <MAX7219_lookupCode>
    147c:	f8 01       	movw	r30, r16
    147e:	e9 5b       	subi	r30, 0xB9	; 185
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	80 83       	st	Z, r24
    1484:	4f 81       	ldd	r20, Y+7	; 0x07
    1486:	3e 81       	ldd	r19, Y+6	; 0x06
    1488:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    148a:	2f 5f       	subi	r18, 0xFF	; 255
    148c:	07 c0       	rjmp	.+14     	; 0x149c <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    148e:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1490:	cb 2c       	mov	r12, r11
    1492:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    1494:	7e 01       	movw	r14, r28
    1496:	08 94       	sec
    1498:	e1 1c       	adc	r14, r1
    149a:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    149c:	24 17       	cp	r18, r20
    149e:	e8 f2       	brcs	.-70     	; 0x145a <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    14a0:	33 23       	and	r19, r19
    14a2:	41 f0       	breq	.+16     	; 0x14b4 <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    14a4:	8d e2       	ldi	r24, 0x2D	; 45
    14a6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <MAX7219_lookupCode>
    14aa:	eb 2d       	mov	r30, r11
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	ea 5b       	subi	r30, 0xBA	; 186
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    14b4:	0e 94 a0 09 	call	0x1340	; 0x1340 <MAX7219_updateDisplay>
}
    14b8:	27 96       	adiw	r28, 0x07	; 7
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	08 95       	ret

000014d8 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    14d8:	1f 93       	push	r17
    14da:	18 2f       	mov	r17, r24
    14dc:	86 2f       	mov	r24, r22
  if (pos < 9) {
    14de:	19 30       	cpi	r17, 0x09	; 9
    14e0:	48 f4       	brcc	.+18     	; 0x14f4 <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    14e2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <MAX7219_lookupCode>
    14e6:	e1 2f       	mov	r30, r17
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	ea 5b       	subi	r30, 0xBA	; 186
    14ec:	fe 4f       	sbci	r31, 0xFE	; 254
    14ee:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    14f0:	0e 94 a0 09 	call	0x1340	; 0x1340 <MAX7219_updateDisplay>
  }
}
    14f4:	1f 91       	pop	r17
    14f6:	08 95       	ret

000014f8 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
  unsigned char i = pos;
    1502:	e6 2e       	mov	r14, r22
    1504:	e7 01       	movw	r28, r14
    1506:	7e 01       	movw	r14, r28
    1508:	f7 2e       	mov	r15, r23
    150a:	e7 01       	movw	r28, r14
    150c:	18 2f       	mov	r17, r24
  while(*data) {
    150e:	0a c0       	rjmp	.+20     	; 0x1524 <MAX7219_printStr+0x2c>
    if (i < 9) {
    1510:	19 30       	cpi	r17, 0x09	; 9
    1512:	58 f4       	brcc	.+22     	; 0x152a <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    1514:	0e 94 72 09 	call	0x12e4	; 0x12e4 <MAX7219_lookupCode>
    1518:	e1 2f       	mov	r30, r17
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	ea 5b       	subi	r30, 0xBA	; 186
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	80 83       	st	Z, r24
      i++;
    1522:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    1524:	89 91       	ld	r24, Y+
    1526:	88 23       	and	r24, r24
    1528:	99 f7       	brne	.-26     	; 0x1510 <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    152a:	0e 94 a0 09 	call	0x1340	; 0x1340 <MAX7219_updateDisplay>
}
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	08 95       	ret

0000153a <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    153a:	e8 2f       	mov	r30, r24
    153c:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    153e:	61 30       	cpi	r22, 0x01	; 1
    1540:	29 f4       	brne	.+10     	; 0x154c <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    1542:	ea 5b       	subi	r30, 0xBA	; 186
    1544:	fe 4f       	sbci	r31, 0xFE	; 254
    1546:	80 81       	ld	r24, Z
    1548:	80 68       	ori	r24, 0x80	; 128
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    154c:	ea 5b       	subi	r30, 0xBA	; 186
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	80 81       	ld	r24, Z
    1552:	8f 77       	andi	r24, 0x7F	; 127
    1554:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    1556:	0e 94 a0 09 	call	0x1340	; 0x1340 <MAX7219_updateDisplay>
}
    155a:	08 95       	ret

0000155c <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    155c:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    155e:	f8 94       	cli
  switch(chanel) {
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	01 f1       	breq	.+64     	; 0x15a4 <ds18x20IsOnBus+0x48>
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	20 f4       	brcc	.+8      	; 0x1570 <ds18x20IsOnBus+0x14>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	09 f0       	breq	.+2      	; 0x156e <ds18x20IsOnBus+0x12>
    156c:	57 c0       	rjmp	.+174    	; 0x161c <ds18x20IsOnBus+0xc0>
    156e:	06 c0       	rjmp	.+12     	; 0x157c <ds18x20IsOnBus+0x20>
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	61 f1       	breq	.+88     	; 0x15cc <ds18x20IsOnBus+0x70>
    1574:	84 30       	cpi	r24, 0x04	; 4
    1576:	09 f0       	breq	.+2      	; 0x157a <ds18x20IsOnBus+0x1e>
    1578:	51 c0       	rjmp	.+162    	; 0x161c <ds18x20IsOnBus+0xc0>
    157a:	3e c0       	rjmp	.+124    	; 0x15f8 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    157c:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    157e:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1580:	8f e7       	ldi	r24, 0x7F	; 127
    1582:	97 e0       	ldi	r25, 0x07	; 7
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <ds18x20IsOnBus+0x28>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <ds18x20IsOnBus+0x2e>
    158a:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    158c:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    158e:	29 9a       	sbi	0x05, 1	; 5
    1590:	a7 e1       	ldi	r26, 0x17	; 23
    1592:	b1 e0       	ldi	r27, 0x01	; 1
    1594:	11 97       	sbiw	r26, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <ds18x20IsOnBus+0x38>
    1598:	00 c0       	rjmp	.+0      	; 0x159a <ds18x20IsOnBus+0x3e>
    159a:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	19 9b       	sbis	0x03, 1	; 3
    15a0:	3e c0       	rjmp	.+124    	; 0x161e <ds18x20IsOnBus+0xc2>
    15a2:	3c c0       	rjmp	.+120    	; 0x161c <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    15a4:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    15a6:	28 98       	cbi	0x05, 0	; 5
    15a8:	8f e7       	ldi	r24, 0x7F	; 127
    15aa:	97 e0       	ldi	r25, 0x07	; 7
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <ds18x20IsOnBus+0x50>
    15b0:	00 c0       	rjmp	.+0      	; 0x15b2 <ds18x20IsOnBus+0x56>
    15b2:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    15b4:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    15b6:	28 9a       	sbi	0x05, 0	; 5
    15b8:	a7 e1       	ldi	r26, 0x17	; 23
    15ba:	b1 e0       	ldi	r27, 0x01	; 1
    15bc:	11 97       	sbiw	r26, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <ds18x20IsOnBus+0x60>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <ds18x20IsOnBus+0x66>
    15c2:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	18 9b       	sbis	0x03, 0	; 3
    15c8:	2a c0       	rjmp	.+84     	; 0x161e <ds18x20IsOnBus+0xc2>
    15ca:	28 c0       	rjmp	.+80     	; 0x161c <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    15cc:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    15ce:	5f 98       	cbi	0x0b, 7	; 11
    15d0:	8f e7       	ldi	r24, 0x7F	; 127
    15d2:	97 e0       	ldi	r25, 0x07	; 7
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <ds18x20IsOnBus+0x78>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <ds18x20IsOnBus+0x7e>
    15da:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    15dc:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    15de:	5f 9a       	sbi	0x0b, 7	; 11
    15e0:	a7 e1       	ldi	r26, 0x17	; 23
    15e2:	b1 e0       	ldi	r27, 0x01	; 1
    15e4:	11 97       	sbiw	r26, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <ds18x20IsOnBus+0x88>
    15e8:	00 c0       	rjmp	.+0      	; 0x15ea <ds18x20IsOnBus+0x8e>
    15ea:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    15ec:	89 b1       	in	r24, 0x09	; 9
    15ee:	80 95       	com	r24
    15f0:	88 1f       	adc	r24, r24
    15f2:	88 27       	eor	r24, r24
    15f4:	88 1f       	adc	r24, r24
    break;
    15f6:	13 c0       	rjmp	.+38     	; 0x161e <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    15f8:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    15fa:	2a 98       	cbi	0x05, 2	; 5
    15fc:	8f e7       	ldi	r24, 0x7F	; 127
    15fe:	97 e0       	ldi	r25, 0x07	; 7
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <ds18x20IsOnBus+0xa4>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <ds18x20IsOnBus+0xaa>
    1606:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    1608:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    160a:	2a 9a       	sbi	0x05, 2	; 5
    160c:	a7 e1       	ldi	r26, 0x17	; 23
    160e:	b1 e0       	ldi	r27, 0x01	; 1
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <ds18x20IsOnBus+0xb4>
    1614:	00 c0       	rjmp	.+0      	; 0x1616 <ds18x20IsOnBus+0xba>
    1616:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	a7 e6       	ldi	r26, 0x67	; 103
    1620:	b6 e0       	ldi	r27, 0x06	; 6
    1622:	11 97       	sbiw	r26, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <ds18x20IsOnBus+0xc6>
    1626:	00 c0       	rjmp	.+0      	; 0x1628 <ds18x20IsOnBus+0xcc>
    1628:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	e3 5e       	subi	r30, 0xE3	; 227
    162e:	fd 4f       	sbci	r31, 0xFD	; 253
    1630:	80 83       	st	Z, r24
  sei();
    1632:	78 94       	sei
  return ret;
}
    1634:	08 95       	ret

00001636 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    1636:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    1638:	98 2f       	mov	r25, r24
    163a:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    163c:	f8 94       	cli
  switch(chanel) {
    163e:	62 30       	cpi	r22, 0x02	; 2
    1640:	e1 f0       	breq	.+56     	; 0x167a <ds18x20SendByte+0x44>
    1642:	63 30       	cpi	r22, 0x03	; 3
    1644:	20 f4       	brcc	.+8      	; 0x164e <ds18x20SendByte+0x18>
    1646:	61 30       	cpi	r22, 0x01	; 1
    1648:	09 f0       	breq	.+2      	; 0x164c <ds18x20SendByte+0x16>
    164a:	52 c0       	rjmp	.+164    	; 0x16f0 <ds18x20SendByte+0xba>
    164c:	06 c0       	rjmp	.+12     	; 0x165a <ds18x20SendByte+0x24>
    164e:	63 30       	cpi	r22, 0x03	; 3
    1650:	21 f1       	breq	.+72     	; 0x169a <ds18x20SendByte+0x64>
    1652:	64 30       	cpi	r22, 0x04	; 4
    1654:	09 f0       	breq	.+2      	; 0x1658 <ds18x20SendByte+0x22>
    1656:	4c c0       	rjmp	.+152    	; 0x16f0 <ds18x20SendByte+0xba>
    1658:	30 c0       	rjmp	.+96     	; 0x16ba <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    165a:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    165c:	29 98       	cbi	0x05, 1	; 5
    165e:	30 e2       	ldi	r19, 0x20	; 32
    1660:	3a 95       	dec	r19
    1662:	f1 f7       	brne	.-4      	; 0x1660 <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    1664:	99 23       	and	r25, r25
    1666:	31 f4       	brne	.+12     	; 0x1674 <ds18x20SendByte+0x3e>
    1668:	e7 ed       	ldi	r30, 0xD7	; 215
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <ds18x20SendByte+0x36>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <ds18x20SendByte+0x3c>
    1672:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    1674:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1676:	29 9a       	sbi	0x05, 1	; 5
    1678:	2f c0       	rjmp	.+94     	; 0x16d8 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    167a:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    167c:	28 98       	cbi	0x05, 0	; 5
    167e:	f0 e2       	ldi	r31, 0x20	; 32
    1680:	fa 95       	dec	r31
    1682:	f1 f7       	brne	.-4      	; 0x1680 <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    1684:	99 23       	and	r25, r25
    1686:	31 f4       	brne	.+12     	; 0x1694 <ds18x20SendByte+0x5e>
    1688:	e7 ed       	ldi	r30, 0xD7	; 215
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	31 97       	sbiw	r30, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <ds18x20SendByte+0x56>
    1690:	00 c0       	rjmp	.+0      	; 0x1692 <ds18x20SendByte+0x5c>
    1692:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    1694:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    1696:	28 9a       	sbi	0x05, 0	; 5
    1698:	1f c0       	rjmp	.+62     	; 0x16d8 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    169a:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    169c:	5f 98       	cbi	0x0b, 7	; 11
    169e:	f0 e2       	ldi	r31, 0x20	; 32
    16a0:	fa 95       	dec	r31
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16a4:	99 23       	and	r25, r25
    16a6:	31 f4       	brne	.+12     	; 0x16b4 <ds18x20SendByte+0x7e>
    16a8:	e7 ed       	ldi	r30, 0xD7	; 215
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	31 97       	sbiw	r30, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <ds18x20SendByte+0x76>
    16b0:	00 c0       	rjmp	.+0      	; 0x16b2 <ds18x20SendByte+0x7c>
    16b2:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    16b4:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    16b6:	5f 9a       	sbi	0x0b, 7	; 11
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    16ba:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    16bc:	2a 98       	cbi	0x05, 2	; 5
    16be:	f0 e2       	ldi	r31, 0x20	; 32
    16c0:	fa 95       	dec	r31
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16c4:	99 23       	and	r25, r25
    16c6:	31 f4       	brne	.+12     	; 0x16d4 <ds18x20SendByte+0x9e>
    16c8:	e7 ed       	ldi	r30, 0xD7	; 215
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	31 97       	sbiw	r30, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <ds18x20SendByte+0x96>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <ds18x20SendByte+0x9c>
    16d2:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    16d4:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    16d6:	2a 9a       	sbi	0x05, 2	; 5
    16d8:	f5 e3       	ldi	r31, 0x35	; 53
    16da:	fa 95       	dec	r31
    16dc:	f1 f7       	brne	.-4      	; 0x16da <ds18x20SendByte+0xa4>
    16de:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    16e0:	99 23       	and	r25, r25
    16e2:	31 f0       	breq	.+12     	; 0x16f0 <ds18x20SendByte+0xba>
    16e4:	e7 ed       	ldi	r30, 0xD7	; 215
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	31 97       	sbiw	r30, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <ds18x20SendByte+0xb2>
    16ec:	00 c0       	rjmp	.+0      	; 0x16ee <ds18x20SendByte+0xb8>
    16ee:	00 00       	nop
    break;
  }
  sei();
    16f0:	78 94       	sei
    16f2:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    16f4:	11 f0       	breq	.+4      	; 0x16fa <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    16f6:	86 95       	lsr	r24
    16f8:	9f cf       	rjmp	.-194    	; 0x1638 <ds18x20SendByte+0x2>
    16fa:	08 95       	ret

000016fc <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    16fc:	28 2f       	mov	r18, r24
    16fe:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    1700:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    1702:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    1704:	f8 94       	cli
  switch(chanel) {
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	c1 f0       	breq	.+48     	; 0x173a <ds18x20GetByte+0x3e>
    170a:	23 30       	cpi	r18, 0x03	; 3
    170c:	20 f4       	brcc	.+8      	; 0x1716 <ds18x20GetByte+0x1a>
    170e:	21 30       	cpi	r18, 0x01	; 1
    1710:	09 f0       	breq	.+2      	; 0x1714 <ds18x20GetByte+0x18>
    1712:	40 c0       	rjmp	.+128    	; 0x1794 <ds18x20GetByte+0x98>
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <ds18x20GetByte+0x24>
    1716:	23 30       	cpi	r18, 0x03	; 3
    1718:	e9 f0       	breq	.+58     	; 0x1754 <ds18x20GetByte+0x58>
    171a:	24 30       	cpi	r18, 0x04	; 4
    171c:	d9 f5       	brne	.+118    	; 0x1794 <ds18x20GetByte+0x98>
    171e:	27 c0       	rjmp	.+78     	; 0x176e <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    1720:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    1722:	29 98       	cbi	0x05, 1	; 5
    1724:	90 e2       	ldi	r25, 0x20	; 32
    1726:	9a 95       	dec	r25
    1728:	f1 f7       	brne	.-4      	; 0x1726 <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    172a:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    172c:	29 9a       	sbi	0x05, 1	; 5
    172e:	e0 e3       	ldi	r30, 0x30	; 48
    1730:	ea 95       	dec	r30
    1732:	f1 f7       	brne	.-4      	; 0x1730 <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    1734:	93 b1       	in	r25, 0x03	; 3
    1736:	92 70       	andi	r25, 0x02	; 2
    1738:	26 c0       	rjmp	.+76     	; 0x1786 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    173a:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    173c:	28 98       	cbi	0x05, 0	; 5
    173e:	f0 e2       	ldi	r31, 0x20	; 32
    1740:	fa 95       	dec	r31
    1742:	f1 f7       	brne	.-4      	; 0x1740 <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    1744:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    1746:	28 9a       	sbi	0x05, 0	; 5
    1748:	90 e3       	ldi	r25, 0x30	; 48
    174a:	9a 95       	dec	r25
    174c:	f1 f7       	brne	.-4      	; 0x174a <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    174e:	93 b1       	in	r25, 0x03	; 3
    1750:	91 70       	andi	r25, 0x01	; 1
    1752:	19 c0       	rjmp	.+50     	; 0x1786 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    1754:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    1756:	5f 98       	cbi	0x0b, 7	; 11
    1758:	f0 e2       	ldi	r31, 0x20	; 32
    175a:	fa 95       	dec	r31
    175c:	f1 f7       	brne	.-4      	; 0x175a <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    175e:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    1760:	5f 9a       	sbi	0x0b, 7	; 11
    1762:	90 e3       	ldi	r25, 0x30	; 48
    1764:	9a 95       	dec	r25
    1766:	f1 f7       	brne	.-4      	; 0x1764 <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    1768:	99 b1       	in	r25, 0x09	; 9
    176a:	90 78       	andi	r25, 0x80	; 128
    176c:	0c c0       	rjmp	.+24     	; 0x1786 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    176e:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    1770:	2a 98       	cbi	0x05, 2	; 5
    1772:	f0 e2       	ldi	r31, 0x20	; 32
    1774:	fa 95       	dec	r31
    1776:	f1 f7       	brne	.-4      	; 0x1774 <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    1778:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    177a:	2a 9a       	sbi	0x05, 2	; 5
    177c:	90 e3       	ldi	r25, 0x30	; 48
    177e:	9a 95       	dec	r25
    1780:	f1 f7       	brne	.-4      	; 0x177e <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    1782:	93 b1       	in	r25, 0x03	; 3
    1784:	94 70       	andi	r25, 0x04	; 4
    1786:	eb ed       	ldi	r30, 0xDB	; 219
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	31 97       	sbiw	r30, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <ds18x20GetByte+0x8e>
    178e:	00 c0       	rjmp	.+0      	; 0x1790 <ds18x20GetByte+0x94>
    1790:	00 00       	nop
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    1794:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    1796:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    1798:	91 11       	cpse	r25, r1
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    179e:	09 f0       	breq	.+2      	; 0x17a2 <ds18x20GetByte+0xa6>
    17a0:	b0 cf       	rjmp	.-160    	; 0x1702 <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    17a2:	08 95       	ret

000017a4 <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    17ae:	0e 94 ae 0a 	call	0x155c	; 0x155c <ds18x20IsOnBus>
    17b2:	88 23       	and	r24, r24
    17b4:	91 f1       	breq	.+100    	; 0x181a <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    17b6:	8c ec       	ldi	r24, 0xCC	; 204
    17b8:	61 2f       	mov	r22, r17
    17ba:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    17be:	8e eb       	ldi	r24, 0xBE	; 190
    17c0:	61 2f       	mov	r22, r17
    17c2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ds18x20SendByte>
    17c6:	ca e4       	ldi	r28, 0x4A	; 74
    17c8:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    17ca:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    17cc:	81 2f       	mov	r24, r17
    17ce:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <ds18x20GetByte>
    17d2:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    17d4:	08 27       	eor	r16, r24
    17d6:	88 e0       	ldi	r24, 0x08	; 8
    17d8:	9c e8       	ldi	r25, 0x8C	; 140
    17da:	06 95       	lsr	r16
    17dc:	08 f4       	brcc	.+2      	; 0x17e0 <ds18x20ReadStratchPad+0x3c>
    17de:	09 27       	eor	r16, r25
    17e0:	8a 95       	dec	r24
    17e2:	d9 f7       	brne	.-10     	; 0x17da <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	c3 35       	cpi	r28, 0x53	; 83
    17e8:	d8 07       	cpc	r29, r24
    17ea:	81 f7       	brne	.-32     	; 0x17cc <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    17ec:	00 23       	and	r16, r16
    17ee:	a9 f4       	brne	.+42     	; 0x181a <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    17f0:	81 2f       	mov	r24, r17
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	fc 01       	movw	r30, r24
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	23 e0       	ldi	r18, 0x03	; 3
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	2a 95       	dec	r18
    1804:	e1 f7       	brne	.-8      	; 0x17fe <ds18x20ReadStratchPad+0x5a>
    1806:	e8 0f       	add	r30, r24
    1808:	f9 1f       	adc	r31, r25
    180a:	ee 5d       	subi	r30, 0xDE	; 222
    180c:	fd 4f       	sbci	r31, 0xFD	; 253
    180e:	80 91 4a 02 	lds	r24, 0x024A
    1812:	80 83       	st	Z, r24
    1814:	80 91 4b 02 	lds	r24, 0x024B
    1818:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	08 95       	ret

00001824 <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    1824:	1f 93       	push	r17
    1826:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    1828:	0e 94 ae 0a 	call	0x155c	; 0x155c <ds18x20IsOnBus>
    182c:	88 23       	and	r24, r24
    182e:	41 f0       	breq	.+16     	; 0x1840 <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    1830:	8c ec       	ldi	r24, 0xCC	; 204
    1832:	61 2f       	mov	r22, r17
    1834:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    1838:	84 e4       	ldi	r24, 0x44	; 68
    183a:	61 2f       	mov	r22, r17
    183c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    1840:	12 30       	cpi	r17, 0x02	; 2
    1842:	69 f0       	breq	.+26     	; 0x185e <ds18x20ConvertTemp+0x3a>
    1844:	13 30       	cpi	r17, 0x03	; 3
    1846:	18 f4       	brcc	.+6      	; 0x184e <ds18x20ConvertTemp+0x2a>
    1848:	11 30       	cpi	r17, 0x01	; 1
    184a:	89 f4       	brne	.+34     	; 0x186e <ds18x20ConvertTemp+0x4a>
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <ds18x20ConvertTemp+0x34>
    184e:	13 30       	cpi	r17, 0x03	; 3
    1850:	49 f0       	breq	.+18     	; 0x1864 <ds18x20ConvertTemp+0x40>
    1852:	14 30       	cpi	r17, 0x04	; 4
    1854:	61 f4       	brne	.+24     	; 0x186e <ds18x20ConvertTemp+0x4a>
    1856:	09 c0       	rjmp	.+18     	; 0x186a <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1858:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    185a:	21 9a       	sbi	0x04, 1	; 4
    break;
    185c:	08 c0       	rjmp	.+16     	; 0x186e <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    185e:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1860:	20 9a       	sbi	0x04, 0	; 4
    break;
    1862:	05 c0       	rjmp	.+10     	; 0x186e <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1864:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1866:	57 9a       	sbi	0x0a, 7	; 10
    break;
    1868:	02 c0       	rjmp	.+4      	; 0x186e <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    186a:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    186c:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    186e:	1f 91       	pop	r17
    1870:	08 95       	ret

00001872 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	fc 01       	movw	r30, r24
    1878:	ee 0f       	add	r30, r30
    187a:	ff 1f       	adc	r31, r31
    187c:	23 e0       	ldi	r18, 0x03	; 3
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	2a 95       	dec	r18
    1884:	e1 f7       	brne	.-8      	; 0x187e <ds18x20GetTemp+0xc>
    1886:	e8 0f       	add	r30, r24
    1888:	f9 1f       	adc	r31, r25
    188a:	ee 5d       	subi	r30, 0xDE	; 222
    188c:	fd 4f       	sbci	r31, 0xFD	; 253
    188e:	40 81       	ld	r20, Z
    1890:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    1892:	9a 01       	movw	r18, r20
    1894:	2f 70       	andi	r18, 0x0F	; 15
    1896:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    1898:	c9 01       	movw	r24, r18
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	a3 e0       	ldi	r26, 0x03	; 3
    18a0:	22 0f       	add	r18, r18
    18a2:	33 1f       	adc	r19, r19
    18a4:	aa 95       	dec	r26
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <ds18x20GetTemp+0x2e>
    18a8:	28 0f       	add	r18, r24
    18aa:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	84 2b       	or	r24, r20
    18b2:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    18b4:	60 e1       	ldi	r22, 0x10	; 16
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__divmodhi4>
    18bc:	ab 01       	movw	r20, r22
    18be:	44 0f       	add	r20, r20
    18c0:	55 1f       	adc	r21, r21
    18c2:	e3 e0       	ldi	r30, 0x03	; 3
    18c4:	66 0f       	add	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	ea 95       	dec	r30
    18ca:	e1 f7       	brne	.-8      	; 0x18c4 <ds18x20GetTemp+0x52>
    18cc:	46 0f       	add	r20, r22
    18ce:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    18d0:	64 e0       	ldi	r22, 0x04	; 4
    18d2:	35 95       	asr	r19
    18d4:	27 95       	ror	r18
    18d6:	6a 95       	dec	r22
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    18da:	42 0f       	add	r20, r18
    18dc:	53 1f       	adc	r21, r19
  return ret;
}
    18de:	ca 01       	movw	r24, r20
    18e0:	08 95       	ret

000018e2 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    18e2:	e8 2f       	mov	r30, r24
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	e3 5e       	subi	r30, 0xE3	; 227
    18e8:	fd 4f       	sbci	r31, 0xFD	; 253
}
    18ea:	80 81       	ld	r24, Z
    18ec:	08 95       	ret

000018ee <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    18ee:	e8 2f       	mov	r30, r24
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	e3 5e       	subi	r30, 0xE3	; 227
    18f4:	fd 4f       	sbci	r31, 0xFD	; 253
    18f6:	60 83       	st	Z, r22
}
    18f8:	08 95       	ret

000018fa <__divmodhi4>:
    18fa:	97 fb       	bst	r25, 7
    18fc:	09 2e       	mov	r0, r25
    18fe:	07 26       	eor	r0, r23
    1900:	0a d0       	rcall	.+20     	; 0x1916 <__divmodhi4_neg1>
    1902:	77 fd       	sbrc	r23, 7
    1904:	04 d0       	rcall	.+8      	; 0x190e <__divmodhi4_neg2>
    1906:	0c d0       	rcall	.+24     	; 0x1920 <__udivmodhi4>
    1908:	06 d0       	rcall	.+12     	; 0x1916 <__divmodhi4_neg1>
    190a:	00 20       	and	r0, r0
    190c:	1a f4       	brpl	.+6      	; 0x1914 <__divmodhi4_exit>

0000190e <__divmodhi4_neg2>:
    190e:	70 95       	com	r23
    1910:	61 95       	neg	r22
    1912:	7f 4f       	sbci	r23, 0xFF	; 255

00001914 <__divmodhi4_exit>:
    1914:	08 95       	ret

00001916 <__divmodhi4_neg1>:
    1916:	f6 f7       	brtc	.-4      	; 0x1914 <__divmodhi4_exit>
    1918:	90 95       	com	r25
    191a:	81 95       	neg	r24
    191c:	9f 4f       	sbci	r25, 0xFF	; 255
    191e:	08 95       	ret

00001920 <__udivmodhi4>:
    1920:	aa 1b       	sub	r26, r26
    1922:	bb 1b       	sub	r27, r27
    1924:	51 e1       	ldi	r21, 0x11	; 17
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <__udivmodhi4_ep>

00001928 <__udivmodhi4_loop>:
    1928:	aa 1f       	adc	r26, r26
    192a:	bb 1f       	adc	r27, r27
    192c:	a6 17       	cp	r26, r22
    192e:	b7 07       	cpc	r27, r23
    1930:	10 f0       	brcs	.+4      	; 0x1936 <__udivmodhi4_ep>
    1932:	a6 1b       	sub	r26, r22
    1934:	b7 0b       	sbc	r27, r23

00001936 <__udivmodhi4_ep>:
    1936:	88 1f       	adc	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	5a 95       	dec	r21
    193c:	a9 f7       	brne	.-22     	; 0x1928 <__udivmodhi4_loop>
    193e:	80 95       	com	r24
    1940:	90 95       	com	r25
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	08 95       	ret

00001948 <__eerd_byte_m328p>:
    1948:	f9 99       	sbic	0x1f, 1	; 31
    194a:	fe cf       	rjmp	.-4      	; 0x1948 <__eerd_byte_m328p>
    194c:	92 bd       	out	0x22, r25	; 34
    194e:	81 bd       	out	0x21, r24	; 33
    1950:	f8 9a       	sbi	0x1f, 0	; 31
    1952:	99 27       	eor	r25, r25
    1954:	80 b5       	in	r24, 0x20	; 32
    1956:	08 95       	ret

00001958 <__eerd_word_m328p>:
    1958:	a8 e1       	ldi	r26, 0x18	; 24
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	42 e0       	ldi	r20, 0x02	; 2
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__eerd_blraw_m328p>

00001964 <__eewr_byte_m328p>:
    1964:	26 2f       	mov	r18, r22

00001966 <__eewr_r18_m328p>:
    1966:	f9 99       	sbic	0x1f, 1	; 31
    1968:	fe cf       	rjmp	.-4      	; 0x1966 <__eewr_r18_m328p>
    196a:	1f ba       	out	0x1f, r1	; 31
    196c:	92 bd       	out	0x22, r25	; 34
    196e:	81 bd       	out	0x21, r24	; 33
    1970:	20 bd       	out	0x20, r18	; 32
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	fa 9a       	sbi	0x1f, 2	; 31
    1978:	f9 9a       	sbi	0x1f, 1	; 31
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	08 95       	ret

00001980 <__eewr_word_m328p>:
    1980:	0e 94 b2 0c 	call	0x1964	; 0x1964 <__eewr_byte_m328p>
    1984:	27 2f       	mov	r18, r23
    1986:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__eewr_r18_m328p>

0000198a <__eerd_block_m328p>:
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22

0000198e <__eerd_blraw_m328p>:
    198e:	fc 01       	movw	r30, r24
    1990:	f9 99       	sbic	0x1f, 1	; 31
    1992:	fe cf       	rjmp	.-4      	; 0x1990 <__eerd_blraw_m328p+0x2>
    1994:	06 c0       	rjmp	.+12     	; 0x19a2 <__eerd_blraw_m328p+0x14>
    1996:	f2 bd       	out	0x22, r31	; 34
    1998:	e1 bd       	out	0x21, r30	; 33
    199a:	f8 9a       	sbi	0x1f, 0	; 31
    199c:	31 96       	adiw	r30, 0x01	; 1
    199e:	00 b4       	in	r0, 0x20	; 32
    19a0:	0d 92       	st	X+, r0
    19a2:	41 50       	subi	r20, 0x01	; 1
    19a4:	50 40       	sbci	r21, 0x00	; 0
    19a6:	b8 f7       	brcc	.-18     	; 0x1996 <__eerd_blraw_m328p+0x8>
    19a8:	08 95       	ret

000019aa <_exit>:
    19aa:	f8 94       	cli

000019ac <__stop_program>:
    19ac:	ff cf       	rjmp	.-2      	; 0x19ac <__stop_program>
