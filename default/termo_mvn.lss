
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000f12  00000fa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  0080016c  0080016c  00001012  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000363  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017df  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000772  00000000  00000000  00003367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001758  00000000  00000000  00003ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  00005234  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004a6  00000000  00000000  000054d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001374  00000000  00000000  0000597a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000121  00000000  00000000  00006cee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
  a6:	0e 94 ae 04 	call	0x95c	; 0x95c <MAX7219_Init>
  KBD_init();
  aa:	0e 94 98 02 	call	0x530	; 0x530 <KBD_init>
  OUT_1_init();
  ae:	53 9a       	sbi	0x0a, 3	; 10
  b0:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
  b2:	53 9a       	sbi	0x0a, 3	; 10
  b4:	5b 98       	cbi	0x0b, 3	; 11
  BEEPER_init();
  b6:	38 9a       	sbi	0x07, 0	; 7
  b8:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
  ba:	0e 94 2c 03 	call	0x658	; 0x658 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000); // запускаем секундный таймер,
  be:	89 ec       	ldi	r24, 0xC9	; 201
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	48 ee       	ldi	r20, 0xE8	; 232
  c6:	53 e0       	ldi	r21, 0x03	; 3
  c8:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 5);        // запускаем сканирование клавиатуры
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	45 e0       	ldi	r20, 0x05	; 5
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);   // запускаем сканирование сенсоров
  da:	84 e6       	ldi	r24, 0x64	; 100
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
  e8:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
  ea:	0e 94 e6 03 	call	0x7cc	; 0x7cc <RTOS_dispatchTask>
  ee:	fd cf       	rjmp	.-6      	; 0xea <main+0x44>

000000f0 <print_temperature>:
unsigned char dscount = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
  f6:	77 ff       	sbrs	r23, 7
  f8:	05 c0       	rjmp	.+10     	; 0x104 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
  fa:	70 95       	com	r23
  fc:	61 95       	neg	r22
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
 100:	01 e0       	ldi	r16, 0x01	; 1
 102:	01 c0       	rjmp	.+2      	; 0x106 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
 104:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
 106:	81 2f       	mov	r24, r17
 108:	43 e0       	ldi	r20, 0x03	; 3
 10a:	20 e2       	ldi	r18, 0x20	; 32
 10c:	0e 94 cb 04 	call	0x996	; 0x996 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
 110:	81 2f       	mov	r24, r17
 112:	8e 5f       	subi	r24, 0xFE	; 254
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
 11a:	01 30       	cpi	r16, 0x01	; 1
 11c:	21 f4       	brne	.+8      	; 0x126 <print_temperature+0x36>
 11e:	81 2f       	mov	r24, r17
 120:	6d e2       	ldi	r22, 0x2D	; 45
 122:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
 12c:	80 91 6f 01 	lds	r24, 0x016F
 130:	88 23       	and	r24, r24
 132:	21 f0       	breq	.+8      	; 0x13c <DS18x20_scan+0x10>
    dscount--;
 134:	81 50       	subi	r24, 0x01	; 1
 136:	80 93 6f 01 	sts	0x016F, r24
	return;
 13a:	08 95       	ret
  }
  switch(ds_state) {
 13c:	80 91 70 01 	lds	r24, 0x0170
 140:	88 23       	and	r24, r24
 142:	19 f0       	breq	.+6      	; 0x14a <DS18x20_scan+0x1e>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	29 f5       	brne	.+74     	; 0x192 <DS18x20_scan+0x66>
 148:	13 c0       	rjmp	.+38     	; 0x170 <DS18x20_scan+0x44>
    case 0:
      ds18x20ConvertTemp(1);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
 15c:	84 e0       	ldi	r24, 0x04	; 4
 15e:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
	  dscount = 100;
 162:	84 e6       	ldi	r24, 0x64	; 100
 164:	80 93 6f 01 	sts	0x016F, r24
	  ds_state = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 70 01 	sts	0x0170, r24
    break;
 16e:	08 95       	ret
    case 1:
      ds18x20ReadStratchPad(1);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
	  dscount = SCAN_TIME / 10;
 188:	88 ec       	ldi	r24, 0xC8	; 200
 18a:	80 93 6f 01 	sts	0x016F, r24
	  ds_state = 0;
 18e:	10 92 70 01 	sts	0x0170, r1
 192:	08 95       	ret

00000194 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
 194:	89 3c       	cpi	r24, 0xC9	; 201
 196:	29 f0       	breq	.+10     	; 0x1a2 <events_default+0xe>
 198:	8b 3c       	cpi	r24, 0xCB	; 203
 19a:	71 f0       	breq	.+28     	; 0x1b8 <events_default+0x24>
 19c:	88 3c       	cpi	r24, 0xC8	; 200
 19e:	71 f4       	brne	.+28     	; 0x1bc <events_default+0x28>
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 91 6c 01 	lds	r25, 0x016C
 1a8:	91 11       	cpse	r25, r1
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	80 93 6c 01 	sts	0x016C, r24
    break;
 1b0:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
 1b2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <KBD_scan>
    break;
 1b6:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
 1b8:	0e 94 96 00 	call	0x12c	; 0x12c <DS18x20_scan>
 1bc:	08 95       	ret

000001be <run_menu>:
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
  switch(event) {
 1be:	87 31       	cpi	r24, 0x17	; 23
 1c0:	38 f4       	brcc	.+14     	; 0x1d0 <run_menu+0x12>
 1c2:	84 31       	cpi	r24, 0x14	; 20
 1c4:	58 f4       	brcc	.+22     	; 0x1dc <run_menu+0x1e>
 1c6:	98 2f       	mov	r25, r24
 1c8:	9a 50       	subi	r25, 0x0A	; 10
 1ca:	93 30       	cpi	r25, 0x03	; 3
 1cc:	28 f4       	brcc	.+10     	; 0x1d8 <run_menu+0x1a>
 1ce:	08 95       	ret
 1d0:	98 2f       	mov	r25, r24
 1d2:	9e 51       	subi	r25, 0x1E	; 30
 1d4:	93 30       	cpi	r25, 0x03	; 3
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <run_menu+0x1e>
    case EVENT_KEY_MINUS:
    case EVENT_KEY_MINUS_LONG:
    case EVENT_KEY_MINUS_HOLD:
    break;
	default:
	  events_default(event);
 1d8:	0e 94 ca 00 	call	0x194	; 0x194 <events_default>
 1dc:	08 95       	ret

000001de <run_main>:
}
//=============================================================================
void run_main(unsigned char event)
{
  static uint8_t chanel = 1;
  switch(event) {
 1de:	86 31       	cpi	r24, 0x16	; 22
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <run_main+0x6>
 1e2:	5b c0       	rjmp	.+182    	; 0x29a <run_main+0xbc>
 1e4:	87 31       	cpi	r24, 0x17	; 23
 1e6:	38 f4       	brcc	.+14     	; 0x1f6 <run_main+0x18>
 1e8:	8a 30       	cpi	r24, 0x0A	; 10
 1ea:	09 f4       	brne	.+2      	; 0x1ee <run_main+0x10>
 1ec:	56 c0       	rjmp	.+172    	; 0x29a <run_main+0xbc>
 1ee:	84 31       	cpi	r24, 0x14	; 20
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <run_main+0x16>
 1f2:	51 c0       	rjmp	.+162    	; 0x296 <run_main+0xb8>
 1f4:	33 c0       	rjmp	.+102    	; 0x25c <run_main+0x7e>
 1f6:	8e 31       	cpi	r24, 0x1E	; 30
 1f8:	09 f4       	brne	.+2      	; 0x1fc <run_main+0x1e>
 1fa:	4f c0       	rjmp	.+158    	; 0x29a <run_main+0xbc>
 1fc:	89 36       	cpi	r24, 0x69	; 105
 1fe:	09 f0       	breq	.+2      	; 0x202 <run_main+0x24>
 200:	4a c0       	rjmp	.+148    	; 0x296 <run_main+0xb8>
    case EVENT_SHOW_SENSOR:
	  MAX7219_printChar(2, 'd');
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	64 e6       	ldi	r22, 0x64	; 100
 206:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
	  MAX7219_printChar(3, '-');
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	6d e2       	ldi	r22, 0x2D	; 45
 20e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
	  MAX7219_printChar(4, 0x30 + chanel);
 212:	60 91 03 01 	lds	r22, 0x0103
 216:	60 5d       	subi	r22, 0xD0	; 208
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
      print_temperature(5, ds18x20GetTemp(chanel));
 21e:	80 91 03 01 	lds	r24, 0x0103
 222:	0e 94 1c 07 	call	0xe38	; 0xe38 <ds18x20GetTemp>
 226:	bc 01       	movw	r22, r24
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	0e 94 78 00 	call	0xf0	; 0xf0 <print_temperature>
      MAX7219_setCommaPos(7, 1);
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_setCommaPos>
      MAX7219_setCommaPos(4, one_sensor_flag);
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	60 91 6e 01 	lds	r22, 0x016E
 23c:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_setCommaPos>
      if (!one_sensor_flag) {
 240:	80 91 6e 01 	lds	r24, 0x016E
 244:	88 23       	and	r24, r24
 246:	49 f5       	brne	.+82     	; 0x29a <run_main+0xbc>
        if (chanel < 4) {
 248:	80 91 03 01 	lds	r24, 0x0103
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	10 f4       	brcc	.+4      	; 0x254 <run_main+0x76>
	      chanel++; 
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	01 c0       	rjmp	.+2      	; 0x256 <run_main+0x78>
	    } else { 
	      chanel = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 03 01 	sts	0x0103, r24
 25a:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
    break;
    case EVENT_KEY_SET:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
 25c:	89 e6       	ldi	r24, 0x69	; 105
 25e:	0e 94 b1 03 	call	0x762	; 0x762 <RTOS_deleteTask>
      one_sensor_flag = !one_sensor_flag;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 91 6e 01 	lds	r25, 0x016E
 268:	91 11       	cpse	r25, r1
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	80 93 6e 01 	sts	0x016E, r24
	  if (one_sensor_flag) {
 270:	88 23       	and	r24, r24
 272:	49 f0       	breq	.+18     	; 0x286 <run_main+0xa8>
	    if (chanel > 1) chanel--; else chanel = 4;
 274:	80 91 03 01 	lds	r24, 0x0103
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	10 f0       	brcs	.+4      	; 0x280 <run_main+0xa2>
 27c:	81 50       	subi	r24, 0x01	; 1
 27e:	01 c0       	rjmp	.+2      	; 0x282 <run_main+0xa4>
 280:	84 e0       	ldi	r24, 0x04	; 4
 282:	80 93 03 01 	sts	0x0103, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
 286:	89 e6       	ldi	r24, 0x69	; 105
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	40 ed       	ldi	r20, 0xD0	; 208
 28e:	57 e0       	ldi	r21, 0x07	; 7
 290:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
    break;
 294:	08 95       	ret
    case EVENT_KEY_SET_HOLD:
    break;
    case EVENT_KEY_MINUS:
    break;
	default:
	  events_default(event);
 296:	0e 94 ca 00 	call	0x194	; 0x194 <events_default>
 29a:	08 95       	ret

0000029c <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
 29c:	86 36       	cpi	r24, 0x66	; 102
 29e:	09 f4       	brne	.+2      	; 0x2a2 <run_start+0x6>
 2a0:	b9 c0       	rjmp	.+370    	; 0x414 <run_start+0x178>
 2a2:	88 36       	cpi	r24, 0x68	; 104
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <run_start+0xc>
 2a6:	8f c0       	rjmp	.+286    	; 0x3c6 <run_start+0x12a>
 2a8:	84 36       	cpi	r24, 0x64	; 100
 2aa:	09 f0       	breq	.+2      	; 0x2ae <run_start+0x12>
 2ac:	ca c0       	rjmp	.+404    	; 0x442 <run_start+0x1a6>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	0e 94 5f 05 	call	0xabe	; 0xabe <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	6d e2       	ldi	r22, 0x2D	; 45
 2bc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
	  ds_count = 0;
 2c0:	10 92 6d 01 	sts	0x016D, r1
      ds18x20IsOnBus(1);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 91 05 	call	0xb22	; 0xb22 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 91 05 	call	0xb22	; 0xb22 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 91 05 	call	0xb22	; 0xb22 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	0e 94 91 05 	call	0xb22	; 0xb22 <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	41 f4       	brne	.+16     	; 0x2f6 <run_start+0x5a>
 2e6:	80 91 6d 01 	lds	r24, 0x016D
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 6d 01 	sts	0x016D, r24
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	61 e3       	ldi	r22, 0x31	; 49
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <run_start+0x5e>
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	60 e2       	ldi	r22, 0x20	; 32
 2fa:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	41 f4       	brne	.+16     	; 0x318 <run_start+0x7c>
 308:	80 91 6d 01 	lds	r24, 0x016D
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 6d 01 	sts	0x016D, r24
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	61 e3       	ldi	r22, 0x31	; 49
 316:	02 c0       	rjmp	.+4      	; 0x31c <run_start+0x80>
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	60 e2       	ldi	r22, 0x20	; 32
 31c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	41 f4       	brne	.+16     	; 0x33a <run_start+0x9e>
 32a:	80 91 6d 01 	lds	r24, 0x016D
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 6d 01 	sts	0x016D, r24
 334:	87 e0       	ldi	r24, 0x07	; 7
 336:	61 e3       	ldi	r22, 0x31	; 49
 338:	02 c0       	rjmp	.+4      	; 0x33e <run_start+0xa2>
 33a:	87 e0       	ldi	r24, 0x07	; 7
 33c:	60 e2       	ldi	r22, 0x20	; 32
 33e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	41 f4       	brne	.+16     	; 0x35c <run_start+0xc0>
 34c:	80 91 6d 01 	lds	r24, 0x016D
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 6d 01 	sts	0x016D, r24
 356:	88 e0       	ldi	r24, 0x08	; 8
 358:	61 e3       	ldi	r22, 0x31	; 49
 35a:	02 c0       	rjmp	.+4      	; 0x360 <run_start+0xc4>
 35c:	88 e0       	ldi	r24, 0x08	; 8
 35e:	60 e2       	ldi	r22, 0x20	; 32
 360:	0e 94 4f 05 	call	0xa9e	; 0xa9e <MAX7219_printChar>
	  if (ds_count == 0) {
 364:	60 91 6d 01 	lds	r22, 0x016D
 368:	66 23       	and	r22, r22
 36a:	21 f4       	brne	.+8      	; 0x374 <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
 36c:	84 e6       	ldi	r24, 0x64	; 100
 36e:	68 eb       	ldi	r22, 0xB8	; 184
 370:	7b e0       	ldi	r23, 0x0B	; 11
 372:	4b c0       	rjmp	.+150    	; 0x40a <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	20 e2       	ldi	r18, 0x20	; 32
 37c:	0e 94 cb 04 	call	0x996	; 0x996 <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	11 f4       	brne	.+4      	; 0x38e <run_start+0xf2>
 38a:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	19 f4       	brne	.+6      	; 0x39e <run_start+0x102>
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	19 f4       	brne	.+6      	; 0x3ae <run_start+0x112>
 3a8:	83 e0       	ldi	r24, 0x03	; 3
 3aa:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	19 f4       	brne	.+6      	; 0x3be <run_start+0x122>
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	0e 94 f5 06 	call	0xdea	; 0xdea <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
 3be:	88 e6       	ldi	r24, 0x68	; 104
 3c0:	68 ee       	ldi	r22, 0xE8	; 232
 3c2:	73 e0       	ldi	r23, 0x03	; 3
 3c4:	22 c0       	rjmp	.+68     	; 0x40a <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <run_start+0x138>
 3d0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <run_start+0x148>
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	19 f4       	brne	.+6      	; 0x3f4 <run_start+0x158>
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	0e 94 54 07 	call	0xea8	; 0xea8 <ds18x20GetDevCount>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	19 f4       	brne	.+6      	; 0x404 <run_start+0x168>
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
 404:	86 e6       	ldi	r24, 0x66	; 102
 406:	64 e6       	ldi	r22, 0x64	; 100
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
    break;
 412:	08 95       	ret
    case EVENT_RUN_MAIN:
      MAX7219_clearDisplay();
 414:	0e 94 9b 04 	call	0x936	; 0x936 <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 10); 
 418:	8b ec       	ldi	r24, 0xCB	; 203
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	4a e0       	ldi	r20, 0x0A	; 10
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
 426:	89 e6       	ldi	r24, 0x69	; 105
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	40 ed       	ldi	r20, 0xD0	; 208
 42e:	57 e0       	ldi	r21, 0x07	; 7
 430:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
      SET_STATE(run_main);
 434:	8f ee       	ldi	r24, 0xEF	; 239
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 05 01 	sts	0x0105, r25
 43c:	80 93 04 01 	sts	0x0104, r24
    break;
 440:	08 95       	ret
	default:
	  events_default(event);
 442:	0e 94 ca 00 	call	0x194	; 0x194 <events_default>
 446:	08 95       	ret

00000448 <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
 448:	20 91 78 01 	lds	r18, 0x0178
 44c:	28 30       	cpi	r18, 0x08	; 8
 44e:	78 f4       	brcc	.+30     	; 0x46e <PutBut+0x26>
     buf[head] = but;
 450:	90 91 79 01 	lds	r25, 0x0179
 454:	e9 2f       	mov	r30, r25
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	e6 58       	subi	r30, 0x86	; 134
 45a:	fe 4f       	sbci	r31, 0xFE	; 254
 45c:	80 83       	st	Z, r24
     count++;
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	20 93 78 01 	sts	0x0178, r18
     head++;
 464:	89 2f       	mov	r24, r25
 466:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
 468:	87 70       	andi	r24, 0x07	; 7
 46a:	80 93 79 01 	sts	0x0179, r24
 46e:	08 95       	ret

00000470 <BUT_Check.clone.0>:
  }
  
  return but;
}
//=============================================================================
static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
 478:	96 2f       	mov	r25, r22
 47a:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
 47c:	c9 2f       	mov	r28, r25
 47e:	d0 e0       	ldi	r29, 0x00	; 0
 480:	fe 01       	movw	r30, r28
 482:	ef 58       	subi	r30, 0x8F	; 143
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	10 81       	ld	r17, Z

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
#endif

 countDebTmp = countDeb[i];
 488:	fe 01       	movw	r30, r28
 48a:	ec 58       	subi	r30, 0x8C	; 140
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	90 81       	ld	r25, Z
 490:	90 93 77 01 	sts	0x0177, r25
  
 if (state){
 494:	88 23       	and	r24, r24
 496:	a9 f0       	breq	.+42     	; 0x4c2 <BUT_Check.clone.0+0x52>
    if (countDebTmp < BUT_COUNT_MAX){
 498:	97 39       	cpi	r25, 0x97	; 151
 49a:	28 f5       	brcc	.+74     	; 0x4e6 <BUT_Check.clone.0+0x76>
       countDebTmp++;
 49c:	9f 5f       	subi	r25, 0xFF	; 255
 49e:	90 93 77 01 	sts	0x0177, r25

       if (countDebTmp > BUT_COUNT_THR){
 4a2:	95 31       	cpi	r25, 0x15	; 21
 4a4:	00 f1       	brcs	.+64     	; 0x4e6 <BUT_Check.clone.0+0x76>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
 4a6:	10 fd       	sbrc	r17, 0
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <BUT_Check.clone.0+0x40>
             stateTmp |= FLAG_BUT_PRESSED;
 4aa:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
 4ac:	01 e0       	ldi	r16, 0x01	; 1
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <BUT_Check.clone.0+0x42>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 4b0:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
 4b2:	97 39       	cpi	r25, 0x97	; 151
 4b4:	81 f4       	brne	.+32     	; 0x4d6 <BUT_Check.clone.0+0x66>
         if (!(stateTmp & FLAG_BUT_HOLD)){
 4b6:	11 fd       	sbrc	r17, 1
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <BUT_Check.clone.0+0x66>
            stateTmp &= ~(FLAG_BUT_RELEASED);
 4ba:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
 4bc:	12 60       	ori	r17, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
 4be:	02 e0       	ldi	r16, 0x02	; 2
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <BUT_Check.clone.0+0x6a>
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
  #endif           
        }
     }
#else
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
 4c2:	10 ff       	sbrs	r17, 0
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <BUT_Check.clone.0+0x5e>
 4c6:	11 fd       	sbrc	r17, 1
 4c8:	1c c0       	rjmp	.+56     	; 0x502 <BUT_Check.clone.0+0x92>
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
 4ca:	03 e0       	ldi	r16, 0x03	; 3
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <BUT_Check.clone.0+0x60>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 4ce:	00 e0       	ldi	r16, 0x00	; 0
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
 4d0:	10 92 77 01 	sts	0x0177, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
 4d4:	1c 7f       	andi	r17, 0xFC	; 252
  }
 
  countHold[i] = countHoldTmp;
#endif       
  
  if (event){
 4d6:	00 23       	and	r16, r16
 4d8:	31 f0       	breq	.+12     	; 0x4e6 <BUT_Check.clone.0+0x76>
     PutBut(i+1);
 4da:	86 2f       	mov	r24, r22
 4dc:	0e 94 24 02 	call	0x448	; 0x448 <PutBut>
     PutBut(event);
 4e0:	80 2f       	mov	r24, r16
 4e2:	0e 94 24 02 	call	0x448	; 0x448 <PutBut>
  }
  
  countDeb[i] = countDebTmp;
 4e6:	fe 01       	movw	r30, r28
 4e8:	ec 58       	subi	r30, 0x8C	; 140
 4ea:	fe 4f       	sbci	r31, 0xFE	; 254
 4ec:	80 91 77 01 	lds	r24, 0x0177
 4f0:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
 4f2:	cf 58       	subi	r28, 0x8F	; 143
 4f4:	de 4f       	sbci	r29, 0xFE	; 254
 4f6:	18 83       	st	Y, r17
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	08 95       	ret
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
 502:	04 e0       	ldi	r16, 0x04	; 4
 504:	e5 cf       	rjmp	.-54     	; 0x4d0 <BUT_Check.clone.0+0x60>

00000506 <KBD_getBut>:

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    
  if (count){
 506:	20 91 78 01 	lds	r18, 0x0178
 50a:	22 23       	and	r18, r18
 50c:	79 f0       	breq	.+30     	; 0x52c <KBD_getBut+0x26>
     but = buf[tail];
 50e:	90 91 82 01 	lds	r25, 0x0182
 512:	e9 2f       	mov	r30, r25
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	e6 58       	subi	r30, 0x86	; 134
 518:	fe 4f       	sbci	r31, 0xFE	; 254
 51a:	80 81       	ld	r24, Z
     count--;
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	20 93 78 01 	sts	0x0178, r18
     tail++;
 522:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
 524:	97 70       	andi	r25, 0x07	; 7
 526:	90 93 82 01 	sts	0x0182, r25
 52a:	08 95       	ret
  }
}

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
 52c:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
 52e:	08 95       	ret

00000530 <KBD_init>:
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 530:	10 92 74 01 	sts	0x0174, r1
     stateBut[i] = 0;
 534:	10 92 71 01 	sts	0x0171, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 538:	10 92 75 01 	sts	0x0175, r1
     stateBut[i] = 0;
 53c:	10 92 72 01 	sts	0x0172, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 540:	10 92 76 01 	sts	0x0176, r1
     stateBut[i] = 0;
 544:	10 92 73 01 	sts	0x0173, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
 548:	10 92 7a 01 	sts	0x017A, r1
 54c:	10 92 7b 01 	sts	0x017B, r1
 550:	10 92 7c 01 	sts	0x017C, r1
 554:	10 92 7d 01 	sts	0x017D, r1
 558:	10 92 7e 01 	sts	0x017E, r1
 55c:	10 92 7f 01 	sts	0x017F, r1
 560:	10 92 80 01 	sts	0x0180, r1
 564:	10 92 81 01 	sts	0x0181, r1
  }
  
  head = 0;
 568:	10 92 79 01 	sts	0x0179, r1
  tail = 0;  
 56c:	10 92 82 01 	sts	0x0182, r1
  count = 0;
 570:	10 92 78 01 	sts	0x0178, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
 574:	54 98       	cbi	0x0a, 4	; 10
 576:	5c 9a       	sbi	0x0b, 4	; 11
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
 578:	55 98       	cbi	0x0a, 5	; 10
 57a:	5d 9a       	sbi	0x0b, 5	; 11
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
 57c:	56 98       	cbi	0x0a, 6	; 10
 57e:	5e 9a       	sbi	0x0b, 6	; 11
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
 580:	08 95       	ret

00000582 <KBD_poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	4c 99       	sbic	0x09, 4	; 9
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	0e 94 38 02 	call	0x470	; 0x470 <BUT_Check.clone.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	4d 99       	sbic	0x09, 5	; 9
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	0e 94 38 02 	call	0x470	; 0x470 <BUT_Check.clone.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	4e 99       	sbic	0x09, 6	; 9
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	63 e0       	ldi	r22, 0x03	; 3
 5a2:	0e 94 38 02 	call	0x470	; 0x470 <BUT_Check.clone.0>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
 5a6:	08 95       	ret

000005a8 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
 5a8:	1f 93       	push	r17
  uint8_t but = 0;
  uint8_t code = 0;
  KBD_poll();
 5aa:	0e 94 c1 02 	call	0x582	; 0x582 <KBD_poll>
  but = KBD_getBut();
 5ae:	0e 94 83 02 	call	0x506	; 0x506 <KBD_getBut>
 5b2:	18 2f       	mov	r17, r24
  if (but) {
 5b4:	88 23       	and	r24, r24
 5b6:	09 f4       	brne	.+2      	; 0x5ba <KBD_scan+0x12>
 5b8:	4d c0       	rjmp	.+154    	; 0x654 <KBD_scan+0xac>
    code = KBD_getBut(); 
 5ba:	0e 94 83 02 	call	0x506	; 0x506 <KBD_getBut>
    if (but == 1) {
 5be:	11 30       	cpi	r17, 0x01	; 1
 5c0:	69 f4       	brne	.+26     	; 0x5dc <KBD_scan+0x34>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <KBD_scan+0x20>
 5c6:	46 c0       	rjmp	.+140    	; 0x654 <KBD_scan+0xac>
 5c8:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ca:	8f e3       	ldi	r24, 0x3F	; 63
 5cc:	9c e9       	ldi	r25, 0x9C	; 156
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <KBD_scan+0x26>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <KBD_scan+0x2c>
 5d4:	00 00       	nop
 5d6:	40 98       	cbi	0x08, 0	; 8
 5d8:	8a e0       	ldi	r24, 0x0A	; 10
 5da:	36 c0       	rjmp	.+108    	; 0x648 <KBD_scan+0xa0>
    } 
	if (but == 2) {
 5dc:	12 30       	cpi	r17, 0x02	; 2
 5de:	39 f5       	brne	.+78     	; 0x62e <KBD_scan+0x86>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET, 0, 0); }
 5e0:	83 30       	cpi	r24, 0x03	; 3
 5e2:	51 f4       	brne	.+20     	; 0x5f8 <KBD_scan+0x50>
 5e4:	40 9a       	sbi	0x08, 0	; 8
 5e6:	af e3       	ldi	r26, 0x3F	; 63
 5e8:	bc e9       	ldi	r27, 0x9C	; 156
 5ea:	11 97       	sbiw	r26, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <KBD_scan+0x42>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <KBD_scan+0x48>
 5f0:	00 00       	nop
 5f2:	40 98       	cbi	0x08, 0	; 8
 5f4:	84 e1       	ldi	r24, 0x14	; 20
 5f6:	28 c0       	rjmp	.+80     	; 0x648 <KBD_scan+0xa0>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_HOLD, 0, 0); }
 5f8:	82 30       	cpi	r24, 0x02	; 2
 5fa:	69 f4       	brne	.+26     	; 0x616 <KBD_scan+0x6e>
 5fc:	40 9a       	sbi	0x08, 0	; 8
 5fe:	8f ef       	ldi	r24, 0xFF	; 255
 600:	97 ee       	ldi	r25, 0xE7	; 231
 602:	a3 e0       	ldi	r26, 0x03	; 3
 604:	81 50       	subi	r24, 0x01	; 1
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	a0 40       	sbci	r26, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <KBD_scan+0x5c>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <KBD_scan+0x66>
 60e:	00 00       	nop
 610:	40 98       	cbi	0x08, 0	; 8
 612:	86 e1       	ldi	r24, 0x16	; 22
 614:	19 c0       	rjmp	.+50     	; 0x648 <KBD_scan+0xa0>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
 616:	84 30       	cpi	r24, 0x04	; 4
 618:	e9 f4       	brne	.+58     	; 0x654 <KBD_scan+0xac>
 61a:	40 9a       	sbi	0x08, 0	; 8
 61c:	af e3       	ldi	r26, 0x3F	; 63
 61e:	bc e9       	ldi	r27, 0x9C	; 156
 620:	11 97       	sbiw	r26, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <KBD_scan+0x78>
 624:	00 c0       	rjmp	.+0      	; 0x626 <KBD_scan+0x7e>
 626:	00 00       	nop
 628:	40 98       	cbi	0x08, 0	; 8
 62a:	85 e1       	ldi	r24, 0x15	; 21
 62c:	0d c0       	rjmp	.+26     	; 0x648 <KBD_scan+0xa0>
    }
	if (but == 3) {
 62e:	13 30       	cpi	r17, 0x03	; 3
 630:	89 f4       	brne	.+34     	; 0x654 <KBD_scan+0xac>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	79 f4       	brne	.+30     	; 0x654 <KBD_scan+0xac>
 636:	40 9a       	sbi	0x08, 0	; 8
 638:	8f e3       	ldi	r24, 0x3F	; 63
 63a:	9c e9       	ldi	r25, 0x9C	; 156
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <KBD_scan+0x94>
 640:	00 c0       	rjmp	.+0      	; 0x642 <KBD_scan+0x9a>
 642:	00 00       	nop
 644:	40 98       	cbi	0x08, 0	; 8
 646:	8e e1       	ldi	r24, 0x1E	; 30
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	0e 94 3e 03 	call	0x67c	; 0x67c <RTOS_setTask>
    }
  }
}
 654:	1f 91       	pop	r17
 656:	08 95       	ret

00000658 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
 658:	e1 eb       	ldi	r30, 0xB1	; 177
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	84 60       	ori	r24, 0x04	; 4
 660:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
 666:	e0 e7       	ldi	r30, 0x70	; 112
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	81 60       	ori	r24, 0x01	; 1
 66e:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
 670:	86 e0       	ldi	r24, 0x06	; 6
 672:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
 676:	10 92 e4 01 	sts	0x01E4, r1
}
 67a:	08 95       	ret

0000067c <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <RTOS_setTask+0x6>
 680:	6f c0       	rjmp	.+222    	; 0x760 <RTOS_setTask+0xe4>
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	1b c0       	rjmp	.+54     	; 0x6bc <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
 686:	29 2f       	mov	r18, r25
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	f9 01       	movw	r30, r18
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	e2 0f       	add	r30, r18
 692:	f3 1f       	adc	r31, r19
 694:	ee 0f       	add	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	ec 57       	subi	r30, 0x7C	; 124
 69a:	fe 4f       	sbci	r31, 0xFE	; 254
 69c:	20 81       	ld	r18, Z
 69e:	28 17       	cp	r18, r24
 6a0:	61 f4       	brne	.+24     	; 0x6ba <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
 6a2:	72 83       	std	Z+2, r23	; 0x02
 6a4:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
 6a6:	54 83       	std	Z+4, r21	; 0x04
 6a8:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
 6aa:	61 15       	cp	r22, r1
 6ac:	71 05       	cpc	r23, r1
 6ae:	19 f4       	brne	.+6      	; 0x6b6 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	85 83       	std	Z+5, r24	; 0x05
 6b4:	08 95       	ret
      } else TaskArray[i].run = 0;   
 6b6:	15 82       	std	Z+5, r1	; 0x05
 6b8:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
 6ba:	9f 5f       	subi	r25, 0xFF	; 255
 6bc:	20 91 e4 01 	lds	r18, 0x01E4
 6c0:	92 17       	cp	r25, r18
 6c2:	08 f3       	brcs	.-62     	; 0x686 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
 6c4:	20 91 e4 01 	lds	r18, 0x01E4
 6c8:	20 31       	cpi	r18, 0x10	; 16
 6ca:	08 f0       	brcs	.+2      	; 0x6ce <RTOS_setTask+0x52>
 6cc:	49 c0       	rjmp	.+146    	; 0x760 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
 6ce:	20 91 e4 01 	lds	r18, 0x01E4
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	f9 01       	movw	r30, r18
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	e2 0f       	add	r30, r18
 6dc:	f3 1f       	adc	r31, r19
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	ec 57       	subi	r30, 0x7C	; 124
 6e4:	fe 4f       	sbci	r31, 0xFE	; 254
 6e6:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
 6e8:	20 91 e4 01 	lds	r18, 0x01E4
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	f9 01       	movw	r30, r18
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	e2 0f       	add	r30, r18
 6f6:	f3 1f       	adc	r31, r19
 6f8:	ee 0f       	add	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	ec 57       	subi	r30, 0x7C	; 124
 6fe:	fe 4f       	sbci	r31, 0xFE	; 254
 700:	72 83       	std	Z+2, r23	; 0x02
 702:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
 704:	20 91 e4 01 	lds	r18, 0x01E4
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	f9 01       	movw	r30, r18
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	e2 0f       	add	r30, r18
 712:	f3 1f       	adc	r31, r19
 714:	ee 0f       	add	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	ec 57       	subi	r30, 0x7C	; 124
 71a:	fe 4f       	sbci	r31, 0xFE	; 254
 71c:	54 83       	std	Z+4, r21	; 0x04
 71e:	43 83       	std	Z+3, r20	; 0x03
 720:	89 2f       	mov	r24, r25
 722:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
 724:	61 15       	cp	r22, r1
 726:	71 05       	cpc	r23, r1
 728:	61 f4       	brne	.+24     	; 0x742 <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
 72a:	fc 01       	movw	r30, r24
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	e8 0f       	add	r30, r24
 732:	f9 1f       	adc	r31, r25
 734:	ee 0f       	add	r30, r30
 736:	ff 1f       	adc	r31, r31
 738:	ec 57       	subi	r30, 0x7C	; 124
 73a:	fe 4f       	sbci	r31, 0xFE	; 254
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	85 83       	std	Z+5, r24	; 0x05
 740:	0a c0       	rjmp	.+20     	; 0x756 <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
 742:	fc 01       	movw	r30, r24
 744:	ee 0f       	add	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	e8 0f       	add	r30, r24
 74a:	f9 1f       	adc	r31, r25
 74c:	ee 0f       	add	r30, r30
 74e:	ff 1f       	adc	r31, r31
 750:	ec 57       	subi	r30, 0x7C	; 124
 752:	fe 4f       	sbci	r31, 0xFE	; 254
 754:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
 756:	80 91 e4 01 	lds	r24, 0x01E4
 75a:	8f 5f       	subi	r24, 0xFF	; 255
 75c:	80 93 e4 01 	sts	0x01E4, r24
 760:	08 95       	ret

00000762 <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	2e c0       	rjmp	.+92     	; 0x7c2 <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
 766:	29 2f       	mov	r18, r25
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	d9 01       	movw	r26, r18
 76c:	aa 0f       	add	r26, r26
 76e:	bb 1f       	adc	r27, r27
 770:	a2 0f       	add	r26, r18
 772:	b3 1f       	adc	r27, r19
 774:	aa 0f       	add	r26, r26
 776:	bb 1f       	adc	r27, r27
 778:	ac 57       	subi	r26, 0x7C	; 124
 77a:	be 4f       	sbci	r27, 0xFE	; 254
 77c:	4c 91       	ld	r20, X
 77e:	48 17       	cp	r20, r24
 780:	f9 f4       	brne	.+62     	; 0x7c0 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
 782:	80 91 e4 01 	lds	r24, 0x01E4
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	28 17       	cp	r18, r24
 78c:	39 07       	cpc	r19, r25
 78e:	91 f0       	breq	.+36     	; 0x7b4 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
 790:	80 91 e4 01 	lds	r24, 0x01E4
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	fc 01       	movw	r30, r24
 79a:	ee 0f       	add	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	e8 0f       	add	r30, r24
 7a0:	f9 1f       	adc	r31, r25
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	ec 57       	subi	r30, 0x7C	; 124
 7a8:	fe 4f       	sbci	r31, 0xFE	; 254
 7aa:	86 e0       	ldi	r24, 0x06	; 6
 7ac:	01 90       	ld	r0, Z+
 7ae:	0d 92       	st	X+, r0
 7b0:	81 50       	subi	r24, 0x01	; 1
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
 7b4:	80 91 e4 01 	lds	r24, 0x01E4
 7b8:	81 50       	subi	r24, 0x01	; 1
 7ba:	80 93 e4 01 	sts	0x01E4, r24
      return;
 7be:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 7c0:	9f 5f       	subi	r25, 0xFF	; 255
 7c2:	20 91 e4 01 	lds	r18, 0x01E4
 7c6:	92 17       	cp	r25, r18
 7c8:	70 f2       	brcs	.-100    	; 0x766 <RTOS_deleteTask+0x4>
 7ca:	08 95       	ret

000007cc <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
 7cc:	0f 93       	push	r16
 7ce:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
 7d0:	80 91 83 01 	lds	r24, 0x0183
 7d4:	88 23       	and	r24, r24
 7d6:	11 f4       	brne	.+4      	; 0x7dc <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 7d8:	10 e0       	ldi	r17, 0x00	; 0
 7da:	4e c0       	rjmp	.+156    	; 0x878 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
 7dc:	10 92 83 01 	sts	0x0183, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 7e0:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
 7e2:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 7e4:	17 c0       	rjmp	.+46     	; 0x814 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
 7e6:	82 2f       	mov	r24, r18
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	fc 01       	movw	r30, r24
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	e8 0f       	add	r30, r24
 7f2:	f9 1f       	adc	r31, r25
 7f4:	ee 0f       	add	r30, r30
 7f6:	ff 1f       	adc	r31, r31
 7f8:	ec 57       	subi	r30, 0x7C	; 124
 7fa:	fe 4f       	sbci	r31, 0xFE	; 254
 7fc:	81 81       	ldd	r24, Z+1	; 0x01
 7fe:	92 81       	ldd	r25, Z+2	; 0x02
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	11 f4       	brne	.+4      	; 0x808 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
 804:	35 83       	std	Z+5, r19	; 0x05
 806:	05 c0       	rjmp	.+10     	; 0x812 <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
 808:	81 81       	ldd	r24, Z+1	; 0x01
 80a:	92 81       	ldd	r25, Z+2	; 0x02
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	92 83       	std	Z+2, r25	; 0x02
 810:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 812:	2f 5f       	subi	r18, 0xFF	; 255
 814:	80 91 e4 01 	lds	r24, 0x01E4
 818:	28 17       	cp	r18, r24
 81a:	28 f3       	brcs	.-54     	; 0x7e6 <RTOS_dispatchTask+0x1a>
 81c:	dd cf       	rjmp	.-70     	; 0x7d8 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
 81e:	81 2f       	mov	r24, r17
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	fc 01       	movw	r30, r24
 824:	ee 0f       	add	r30, r30
 826:	ff 1f       	adc	r31, r31
 828:	e8 0f       	add	r30, r24
 82a:	f9 1f       	adc	r31, r25
 82c:	ee 0f       	add	r30, r30
 82e:	ff 1f       	adc	r31, r31
 830:	ec 57       	subi	r30, 0x7C	; 124
 832:	fe 4f       	sbci	r31, 0xFE	; 254
 834:	85 81       	ldd	r24, Z+5	; 0x05
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	f1 f4       	brne	.+60     	; 0x876 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
 83a:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
 83c:	23 81       	ldd	r18, Z+3	; 0x03
 83e:	34 81       	ldd	r19, Z+4	; 0x04
 840:	21 15       	cp	r18, r1
 842:	31 05       	cpc	r19, r1
 844:	31 f4       	brne	.+12     	; 0x852 <RTOS_dispatchTask+0x86>
      {  
        cli();
 846:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
 848:	80 81       	ld	r24, Z
 84a:	0e 94 b1 03 	call	0x762	; 0x762 <RTOS_deleteTask>
        sei();
 84e:	78 94       	sei
 850:	0c c0       	rjmp	.+24     	; 0x86a <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
 852:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
 854:	21 81       	ldd	r18, Z+1	; 0x01
 856:	32 81       	ldd	r19, Z+2	; 0x02
 858:	21 15       	cp	r18, r1
 85a:	31 05       	cpc	r19, r1
 85c:	31 f4       	brne	.+12     	; 0x86a <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
 85e:	23 81       	ldd	r18, Z+3	; 0x03
 860:	34 81       	ldd	r19, Z+4	; 0x04
 862:	21 50       	subi	r18, 0x01	; 1
 864:	30 40       	sbci	r19, 0x00	; 0
 866:	32 83       	std	Z+2, r19	; 0x02
 868:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
 86a:	e0 91 04 01 	lds	r30, 0x0104
 86e:	f0 91 05 01 	lds	r31, 0x0105
 872:	80 2f       	mov	r24, r16
 874:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
 876:	1f 5f       	subi	r17, 0xFF	; 255
 878:	80 91 e4 01 	lds	r24, 0x01E4
 87c:	18 17       	cp	r17, r24
 87e:	78 f2       	brcs	.-98     	; 0x81e <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	08 95       	ret

00000886 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
 892:	86 e0       	ldi	r24, 0x06	; 6
 894:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	80 93 83 01 	sts	0x0183, r24
}
 89e:	8f 91       	pop	r24
 8a0:	0f 90       	pop	r0
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	0f 90       	pop	r0
 8a6:	1f 90       	pop	r1
 8a8:	18 95       	reti

000008aa <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
 8aa:	80 52       	subi	r24, 0x20	; 32
 8ac:	86 35       	cpi	r24, 0x56	; 86
 8ae:	30 f4       	brcc	.+12     	; 0x8bc <MAX7219_lookupCode+0x12>
 8b0:	e8 2f       	mov	r30, r24
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	ea 5e       	subi	r30, 0xEA	; 234
 8b6:	fe 4f       	sbci	r31, 0xFE	; 254
 8b8:	80 81       	ld	r24, Z
 8ba:	08 95       	ret
 8bc:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
 8be:	08 95       	ret

000008c0 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
 8c0:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
 8c2:	87 ff       	sbrs	r24, 7
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
 8c6:	43 9a       	sbi	0x08, 3	; 8
 8c8:	01 c0       	rjmp	.+2      	; 0x8cc <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 8ca:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 8cc:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
 8ce:	00 00       	nop
	asm("nop");
 8d0:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
 8d2:	42 9a       	sbi	0x08, 2	; 8
 8d4:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
 8d6:	11 f0       	breq	.+4      	; 0x8dc <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
 8d8:	88 0f       	add	r24, r24
 8da:	f3 cf       	rjmp	.-26     	; 0x8c2 <MAX7219_SendByte+0x2>
 8dc:	08 95       	ret

000008de <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
 8de:	ff 92       	push	r15
 8e0:	0f 93       	push	r16
 8e2:	1f 93       	push	r17
 8e4:	18 2f       	mov	r17, r24
 8e6:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
 8e8:	41 98       	cbi	0x08, 1	; 8
 8ea:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
 8ec:	81 2f       	mov	r24, r17
 8ee:	0e 94 60 04 	call	0x8c0	; 0x8c0 <MAX7219_SendByte>
	MAX7219_SendByte(data);
 8f2:	8f 2d       	mov	r24, r15
 8f4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <MAX7219_SendByte>
 8f8:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
 8fa:	c1 f7       	brne	.-16     	; 0x8ec <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 8fc:	41 9a       	sbi	0x08, 1	; 8
  return;
}
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	ff 90       	pop	r15
 904:	08 95       	ret

00000906 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	c6 e0       	ldi	r28, 0x06	; 6
 910:	d1 e0       	ldi	r29, 0x01	; 1
 912:	0e e0       	ldi	r16, 0x0E	; 14
 914:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
 916:	89 91       	ld	r24, Y+
 918:	f8 01       	movw	r30, r16
 91a:	61 91       	ld	r22, Z+
 91c:	8f 01       	movw	r16, r30
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	0e 94 6f 04 	call	0x8de	; 0x8de <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
 924:	f1 e0       	ldi	r31, 0x01	; 1
 926:	ce 30       	cpi	r28, 0x0E	; 14
 928:	df 07       	cpc	r29, r31
 92a:	a9 f7       	brne	.-22     	; 0x916 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	1f 91       	pop	r17
 932:	0f 91       	pop	r16
 934:	08 95       	ret

00000936 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
 936:	10 92 0e 01 	sts	0x010E, r1
 93a:	10 92 0f 01 	sts	0x010F, r1
 93e:	10 92 10 01 	sts	0x0110, r1
 942:	10 92 11 01 	sts	0x0111, r1
 946:	10 92 12 01 	sts	0x0112, r1
 94a:	10 92 13 01 	sts	0x0113, r1
 94e:	10 92 14 01 	sts	0x0114, r1
 952:	10 92 15 01 	sts	0x0115, r1
  }
  MAX7219_updateDisplay();
 956:	0e 94 83 04 	call	0x906	; 0x906 <MAX7219_updateDisplay>
}
 95a:	08 95       	ret

0000095c <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 95c:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
 95e:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
 960:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 962:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 964:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 966:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
 968:	8c e0       	ldi	r24, 0x0C	; 12
 96a:	61 e0       	ldi	r22, 0x01	; 1
 96c:	0e 94 6f 04 	call	0x8de	; 0x8de <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
 970:	8f e0       	ldi	r24, 0x0F	; 15
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	0e 94 6f 04 	call	0x8de	; 0x8de <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
 978:	89 e0       	ldi	r24, 0x09	; 9
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	0e 94 6f 04 	call	0x8de	; 0x8de <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
 980:	8a e0       	ldi	r24, 0x0A	; 10
 982:	62 e0       	ldi	r22, 0x02	; 2
 984:	0e 94 6f 04 	call	0x8de	; 0x8de <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
 988:	8b e0       	ldi	r24, 0x0B	; 11
 98a:	67 e0       	ldi	r22, 0x07	; 7
 98c:	0e 94 6f 04 	call	0x8de	; 0x8de <MAX7219_SendCmd>
  MAX7219_clearDisplay();
 990:	0e 94 9b 04 	call	0x936	; 0x936 <MAX7219_clearDisplay>
  return;
}
 994:	08 95       	ret

00000996 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
 996:	bf 92       	push	r11
 998:	cf 92       	push	r12
 99a:	df 92       	push	r13
 99c:	ef 92       	push	r14
 99e:	ff 92       	push	r15
 9a0:	0f 93       	push	r16
 9a2:	1f 93       	push	r17
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
 9ac:	27 97       	sbiw	r28, 0x07	; 7
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	b8 2e       	mov	r11, r24
 9ba:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
 9bc:	77 ff       	sbrs	r23, 7
 9be:	05 c0       	rjmp	.+10     	; 0x9ca <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
 9c0:	90 95       	com	r25
 9c2:	81 95       	neg	r24
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
 9c6:	31 e0       	ldi	r19, 0x01	; 1
 9c8:	01 c0       	rjmp	.+2      	; 0x9cc <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
 9ca:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
 9cc:	e4 2f       	mov	r30, r20
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	8e 01       	movw	r16, r28
 9d2:	0f 5f       	subi	r16, 0xFF	; 255
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	e0 0f       	add	r30, r16
 9d8:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
 9da:	5a e0       	ldi	r21, 0x0A	; 10
 9dc:	e5 2e       	mov	r14, r21
 9de:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
 9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <MAX7219_printNum+0x5a>
 9e2:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
 9e4:	b7 01       	movw	r22, r14
 9e6:	0e 94 60 07 	call	0xec0	; 0xec0 <__divmodhi4>
 9ea:	80 5d       	subi	r24, 0xD0	; 208
 9ec:	80 83       	st	Z, r24
    x /= 10;
 9ee:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
 9f0:	e0 17       	cp	r30, r16
 9f2:	f1 07       	cpc	r31, r17
 9f4:	b1 f7       	brne	.-20     	; 0x9e2 <MAX7219_printNum+0x4c>
 9f6:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 9f8:	84 2f       	mov	r24, r20
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
 9fe:	de 01       	movw	r26, r28
 a00:	11 96       	adiw	r26, 0x01	; 1
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <MAX7219_printNum+0x7e>
 a04:	fd 01       	movw	r30, r26
 a06:	e6 0f       	add	r30, r22
 a08:	f7 1f       	adc	r31, r23
 a0a:	60 81       	ld	r22, Z
 a0c:	60 33       	cpi	r22, 0x30	; 48
 a0e:	11 f5       	brne	.+68     	; 0xa54 <MAX7219_printNum+0xbe>
 a10:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 a12:	5f 5f       	subi	r21, 0xFF	; 255
 a14:	65 2f       	mov	r22, r21
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	68 17       	cp	r22, r24
 a1a:	79 07       	cpc	r23, r25
 a1c:	9c f3       	brlt	.-26     	; 0xa04 <MAX7219_printNum+0x6e>
 a1e:	1a c0       	rjmp	.+52     	; 0xa54 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 a20:	82 2f       	mov	r24, r18
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	8c 01       	movw	r16, r24
 a26:	0c 0d       	add	r16, r12
 a28:	1d 1d       	adc	r17, r13
 a2a:	08 30       	cpi	r16, 0x08	; 8
 a2c:	11 05       	cpc	r17, r1
 a2e:	84 f4       	brge	.+32     	; 0xa50 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 a30:	8e 0d       	add	r24, r14
 a32:	9f 1d       	adc	r25, r15
 a34:	fc 01       	movw	r30, r24
 a36:	80 81       	ld	r24, Z
 a38:	2d 83       	std	Y+5, r18	; 0x05
 a3a:	3e 83       	std	Y+6, r19	; 0x06
 a3c:	4f 83       	std	Y+7, r20	; 0x07
 a3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <MAX7219_lookupCode>
 a42:	f8 01       	movw	r30, r16
 a44:	e2 5f       	subi	r30, 0xF2	; 242
 a46:	fe 4f       	sbci	r31, 0xFE	; 254
 a48:	80 83       	st	Z, r24
 a4a:	4f 81       	ldd	r20, Y+7	; 0x07
 a4c:	3e 81       	ldd	r19, Y+6	; 0x06
 a4e:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 a50:	2f 5f       	subi	r18, 0xFF	; 255
 a52:	07 c0       	rjmp	.+14     	; 0xa62 <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
 a54:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 a56:	cb 2c       	mov	r12, r11
 a58:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 a5a:	7e 01       	movw	r14, r28
 a5c:	08 94       	sec
 a5e:	e1 1c       	adc	r14, r1
 a60:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 a62:	24 17       	cp	r18, r20
 a64:	e8 f2       	brcs	.-70     	; 0xa20 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
 a66:	33 23       	and	r19, r19
 a68:	41 f0       	breq	.+16     	; 0xa7a <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
 a6a:	8d e2       	ldi	r24, 0x2D	; 45
 a6c:	0e 94 55 04 	call	0x8aa	; 0x8aa <MAX7219_lookupCode>
 a70:	eb 2d       	mov	r30, r11
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	e3 5f       	subi	r30, 0xF3	; 243
 a76:	fe 4f       	sbci	r31, 0xFE	; 254
 a78:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
 a7a:	0e 94 83 04 	call	0x906	; 0x906 <MAX7219_updateDisplay>
}
 a7e:	27 96       	adiw	r28, 0x07	; 7
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	de bf       	out	0x3e, r29	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	cd bf       	out	0x3d, r28	; 61
 a8a:	cf 91       	pop	r28
 a8c:	df 91       	pop	r29
 a8e:	1f 91       	pop	r17
 a90:	0f 91       	pop	r16
 a92:	ff 90       	pop	r15
 a94:	ef 90       	pop	r14
 a96:	df 90       	pop	r13
 a98:	cf 90       	pop	r12
 a9a:	bf 90       	pop	r11
 a9c:	08 95       	ret

00000a9e <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
 a9e:	1f 93       	push	r17
 aa0:	18 2f       	mov	r17, r24
 aa2:	86 2f       	mov	r24, r22
  if (pos < 9) {
 aa4:	19 30       	cpi	r17, 0x09	; 9
 aa6:	48 f4       	brcc	.+18     	; 0xaba <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
 aa8:	0e 94 55 04 	call	0x8aa	; 0x8aa <MAX7219_lookupCode>
 aac:	e1 2f       	mov	r30, r17
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	e3 5f       	subi	r30, 0xF3	; 243
 ab2:	fe 4f       	sbci	r31, 0xFE	; 254
 ab4:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
 ab6:	0e 94 83 04 	call	0x906	; 0x906 <MAX7219_updateDisplay>
  }
}
 aba:	1f 91       	pop	r17
 abc:	08 95       	ret

00000abe <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
 abe:	ef 92       	push	r14
 ac0:	ff 92       	push	r15
 ac2:	1f 93       	push	r17
 ac4:	cf 93       	push	r28
 ac6:	df 93       	push	r29
  unsigned char i = pos;
 ac8:	e6 2e       	mov	r14, r22
 aca:	e7 01       	movw	r28, r14
 acc:	7e 01       	movw	r14, r28
 ace:	f7 2e       	mov	r15, r23
 ad0:	e7 01       	movw	r28, r14
 ad2:	18 2f       	mov	r17, r24
  while(*data) {
 ad4:	0a c0       	rjmp	.+20     	; 0xaea <MAX7219_printStr+0x2c>
    if (i < 9) {
 ad6:	19 30       	cpi	r17, 0x09	; 9
 ad8:	58 f4       	brcc	.+22     	; 0xaf0 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
 ada:	0e 94 55 04 	call	0x8aa	; 0x8aa <MAX7219_lookupCode>
 ade:	e1 2f       	mov	r30, r17
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	e3 5f       	subi	r30, 0xF3	; 243
 ae4:	fe 4f       	sbci	r31, 0xFE	; 254
 ae6:	80 83       	st	Z, r24
      i++;
 ae8:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
 aea:	89 91       	ld	r24, Y+
 aec:	88 23       	and	r24, r24
 aee:	99 f7       	brne	.-26     	; 0xad6 <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
 af0:	0e 94 83 04 	call	0x906	; 0x906 <MAX7219_updateDisplay>
}
 af4:	df 91       	pop	r29
 af6:	cf 91       	pop	r28
 af8:	1f 91       	pop	r17
 afa:	ff 90       	pop	r15
 afc:	ef 90       	pop	r14
 afe:	08 95       	ret

00000b00 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
 b00:	e8 2f       	mov	r30, r24
 b02:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
 b04:	61 30       	cpi	r22, 0x01	; 1
 b06:	29 f4       	brne	.+10     	; 0xb12 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
 b08:	e3 5f       	subi	r30, 0xF3	; 243
 b0a:	fe 4f       	sbci	r31, 0xFE	; 254
 b0c:	80 81       	ld	r24, Z
 b0e:	80 68       	ori	r24, 0x80	; 128
 b10:	04 c0       	rjmp	.+8      	; 0xb1a <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
 b12:	e3 5f       	subi	r30, 0xF3	; 243
 b14:	fe 4f       	sbci	r31, 0xFE	; 254
 b16:	80 81       	ld	r24, Z
 b18:	8f 77       	andi	r24, 0x7F	; 127
 b1a:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
 b1c:	0e 94 83 04 	call	0x906	; 0x906 <MAX7219_updateDisplay>
}
 b20:	08 95       	ret

00000b22 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
 b22:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
 b24:	f8 94       	cli
  switch(chanel) {
 b26:	82 30       	cpi	r24, 0x02	; 2
 b28:	01 f1       	breq	.+64     	; 0xb6a <ds18x20IsOnBus+0x48>
 b2a:	83 30       	cpi	r24, 0x03	; 3
 b2c:	20 f4       	brcc	.+8      	; 0xb36 <ds18x20IsOnBus+0x14>
 b2e:	81 30       	cpi	r24, 0x01	; 1
 b30:	09 f0       	breq	.+2      	; 0xb34 <ds18x20IsOnBus+0x12>
 b32:	57 c0       	rjmp	.+174    	; 0xbe2 <ds18x20IsOnBus+0xc0>
 b34:	06 c0       	rjmp	.+12     	; 0xb42 <ds18x20IsOnBus+0x20>
 b36:	83 30       	cpi	r24, 0x03	; 3
 b38:	61 f1       	breq	.+88     	; 0xb92 <ds18x20IsOnBus+0x70>
 b3a:	84 30       	cpi	r24, 0x04	; 4
 b3c:	09 f0       	breq	.+2      	; 0xb40 <ds18x20IsOnBus+0x1e>
 b3e:	51 c0       	rjmp	.+162    	; 0xbe2 <ds18x20IsOnBus+0xc0>
 b40:	3e c0       	rjmp	.+124    	; 0xbbe <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
 b42:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 b44:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b46:	8f e7       	ldi	r24, 0x7F	; 127
 b48:	97 e0       	ldi	r25, 0x07	; 7
 b4a:	01 97       	sbiw	r24, 0x01	; 1
 b4c:	f1 f7       	brne	.-4      	; 0xb4a <ds18x20IsOnBus+0x28>
 b4e:	00 c0       	rjmp	.+0      	; 0xb50 <ds18x20IsOnBus+0x2e>
 b50:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 b52:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 b54:	29 9a       	sbi	0x05, 1	; 5
 b56:	a7 e1       	ldi	r26, 0x17	; 23
 b58:	b1 e0       	ldi	r27, 0x01	; 1
 b5a:	11 97       	sbiw	r26, 0x01	; 1
 b5c:	f1 f7       	brne	.-4      	; 0xb5a <ds18x20IsOnBus+0x38>
 b5e:	00 c0       	rjmp	.+0      	; 0xb60 <ds18x20IsOnBus+0x3e>
 b60:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	19 9b       	sbis	0x03, 1	; 3
 b66:	3e c0       	rjmp	.+124    	; 0xbe4 <ds18x20IsOnBus+0xc2>
 b68:	3c c0       	rjmp	.+120    	; 0xbe2 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
 b6a:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
 b6c:	28 98       	cbi	0x05, 0	; 5
 b6e:	8f e7       	ldi	r24, 0x7F	; 127
 b70:	97 e0       	ldi	r25, 0x07	; 7
 b72:	01 97       	sbiw	r24, 0x01	; 1
 b74:	f1 f7       	brne	.-4      	; 0xb72 <ds18x20IsOnBus+0x50>
 b76:	00 c0       	rjmp	.+0      	; 0xb78 <ds18x20IsOnBus+0x56>
 b78:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
 b7a:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
 b7c:	28 9a       	sbi	0x05, 0	; 5
 b7e:	a7 e1       	ldi	r26, 0x17	; 23
 b80:	b1 e0       	ldi	r27, 0x01	; 1
 b82:	11 97       	sbiw	r26, 0x01	; 1
 b84:	f1 f7       	brne	.-4      	; 0xb82 <ds18x20IsOnBus+0x60>
 b86:	00 c0       	rjmp	.+0      	; 0xb88 <ds18x20IsOnBus+0x66>
 b88:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
 b8a:	81 e0       	ldi	r24, 0x01	; 1
 b8c:	18 9b       	sbis	0x03, 0	; 3
 b8e:	2a c0       	rjmp	.+84     	; 0xbe4 <ds18x20IsOnBus+0xc2>
 b90:	28 c0       	rjmp	.+80     	; 0xbe2 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
 b92:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
 b94:	5f 98       	cbi	0x0b, 7	; 11
 b96:	8f e7       	ldi	r24, 0x7F	; 127
 b98:	97 e0       	ldi	r25, 0x07	; 7
 b9a:	01 97       	sbiw	r24, 0x01	; 1
 b9c:	f1 f7       	brne	.-4      	; 0xb9a <ds18x20IsOnBus+0x78>
 b9e:	00 c0       	rjmp	.+0      	; 0xba0 <ds18x20IsOnBus+0x7e>
 ba0:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
 ba2:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
 ba4:	5f 9a       	sbi	0x0b, 7	; 11
 ba6:	a7 e1       	ldi	r26, 0x17	; 23
 ba8:	b1 e0       	ldi	r27, 0x01	; 1
 baa:	11 97       	sbiw	r26, 0x01	; 1
 bac:	f1 f7       	brne	.-4      	; 0xbaa <ds18x20IsOnBus+0x88>
 bae:	00 c0       	rjmp	.+0      	; 0xbb0 <ds18x20IsOnBus+0x8e>
 bb0:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
 bb2:	89 b1       	in	r24, 0x09	; 9
 bb4:	80 95       	com	r24
 bb6:	88 1f       	adc	r24, r24
 bb8:	88 27       	eor	r24, r24
 bba:	88 1f       	adc	r24, r24
    break;
 bbc:	13 c0       	rjmp	.+38     	; 0xbe4 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
 bbe:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
 bc0:	2a 98       	cbi	0x05, 2	; 5
 bc2:	8f e7       	ldi	r24, 0x7F	; 127
 bc4:	97 e0       	ldi	r25, 0x07	; 7
 bc6:	01 97       	sbiw	r24, 0x01	; 1
 bc8:	f1 f7       	brne	.-4      	; 0xbc6 <ds18x20IsOnBus+0xa4>
 bca:	00 c0       	rjmp	.+0      	; 0xbcc <ds18x20IsOnBus+0xaa>
 bcc:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
 bce:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
 bd0:	2a 9a       	sbi	0x05, 2	; 5
 bd2:	a7 e1       	ldi	r26, 0x17	; 23
 bd4:	b1 e0       	ldi	r27, 0x01	; 1
 bd6:	11 97       	sbiw	r26, 0x01	; 1
 bd8:	f1 f7       	brne	.-4      	; 0xbd6 <ds18x20IsOnBus+0xb4>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <ds18x20IsOnBus+0xba>
 bdc:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	a7 e6       	ldi	r26, 0x67	; 103
 be6:	b6 e0       	ldi	r27, 0x06	; 6
 be8:	11 97       	sbiw	r26, 0x01	; 1
 bea:	f1 f7       	brne	.-4      	; 0xbe8 <ds18x20IsOnBus+0xc6>
 bec:	00 c0       	rjmp	.+0      	; 0xbee <ds18x20IsOnBus+0xcc>
 bee:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	ec 51       	subi	r30, 0x1C	; 28
 bf4:	fe 4f       	sbci	r31, 0xFE	; 254
 bf6:	80 83       	st	Z, r24
  sei();
 bf8:	78 94       	sei
  return ret;
}
 bfa:	08 95       	ret

00000bfc <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
 bfc:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
 bfe:	98 2f       	mov	r25, r24
 c00:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
 c02:	f8 94       	cli
  switch(chanel) {
 c04:	62 30       	cpi	r22, 0x02	; 2
 c06:	e1 f0       	breq	.+56     	; 0xc40 <ds18x20SendByte+0x44>
 c08:	63 30       	cpi	r22, 0x03	; 3
 c0a:	20 f4       	brcc	.+8      	; 0xc14 <ds18x20SendByte+0x18>
 c0c:	61 30       	cpi	r22, 0x01	; 1
 c0e:	09 f0       	breq	.+2      	; 0xc12 <ds18x20SendByte+0x16>
 c10:	52 c0       	rjmp	.+164    	; 0xcb6 <ds18x20SendByte+0xba>
 c12:	06 c0       	rjmp	.+12     	; 0xc20 <ds18x20SendByte+0x24>
 c14:	63 30       	cpi	r22, 0x03	; 3
 c16:	21 f1       	breq	.+72     	; 0xc60 <ds18x20SendByte+0x64>
 c18:	64 30       	cpi	r22, 0x04	; 4
 c1a:	09 f0       	breq	.+2      	; 0xc1e <ds18x20SendByte+0x22>
 c1c:	4c c0       	rjmp	.+152    	; 0xcb6 <ds18x20SendByte+0xba>
 c1e:	30 c0       	rjmp	.+96     	; 0xc80 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
 c20:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 c22:	29 98       	cbi	0x05, 1	; 5
 c24:	30 e2       	ldi	r19, 0x20	; 32
 c26:	3a 95       	dec	r19
 c28:	f1 f7       	brne	.-4      	; 0xc26 <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c2a:	99 23       	and	r25, r25
 c2c:	31 f4       	brne	.+12     	; 0xc3a <ds18x20SendByte+0x3e>
 c2e:	e7 ed       	ldi	r30, 0xD7	; 215
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	31 97       	sbiw	r30, 0x01	; 1
 c34:	f1 f7       	brne	.-4      	; 0xc32 <ds18x20SendByte+0x36>
 c36:	00 c0       	rjmp	.+0      	; 0xc38 <ds18x20SendByte+0x3c>
 c38:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 c3a:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 c3c:	29 9a       	sbi	0x05, 1	; 5
 c3e:	2f c0       	rjmp	.+94     	; 0xc9e <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
 c40:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
 c42:	28 98       	cbi	0x05, 0	; 5
 c44:	f0 e2       	ldi	r31, 0x20	; 32
 c46:	fa 95       	dec	r31
 c48:	f1 f7       	brne	.-4      	; 0xc46 <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c4a:	99 23       	and	r25, r25
 c4c:	31 f4       	brne	.+12     	; 0xc5a <ds18x20SendByte+0x5e>
 c4e:	e7 ed       	ldi	r30, 0xD7	; 215
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	31 97       	sbiw	r30, 0x01	; 1
 c54:	f1 f7       	brne	.-4      	; 0xc52 <ds18x20SendByte+0x56>
 c56:	00 c0       	rjmp	.+0      	; 0xc58 <ds18x20SendByte+0x5c>
 c58:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
 c5a:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
 c5c:	28 9a       	sbi	0x05, 0	; 5
 c5e:	1f c0       	rjmp	.+62     	; 0xc9e <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
 c60:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
 c62:	5f 98       	cbi	0x0b, 7	; 11
 c64:	f0 e2       	ldi	r31, 0x20	; 32
 c66:	fa 95       	dec	r31
 c68:	f1 f7       	brne	.-4      	; 0xc66 <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c6a:	99 23       	and	r25, r25
 c6c:	31 f4       	brne	.+12     	; 0xc7a <ds18x20SendByte+0x7e>
 c6e:	e7 ed       	ldi	r30, 0xD7	; 215
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	31 97       	sbiw	r30, 0x01	; 1
 c74:	f1 f7       	brne	.-4      	; 0xc72 <ds18x20SendByte+0x76>
 c76:	00 c0       	rjmp	.+0      	; 0xc78 <ds18x20SendByte+0x7c>
 c78:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
 c7a:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
 c7c:	5f 9a       	sbi	0x0b, 7	; 11
 c7e:	0f c0       	rjmp	.+30     	; 0xc9e <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
 c80:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
 c82:	2a 98       	cbi	0x05, 2	; 5
 c84:	f0 e2       	ldi	r31, 0x20	; 32
 c86:	fa 95       	dec	r31
 c88:	f1 f7       	brne	.-4      	; 0xc86 <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c8a:	99 23       	and	r25, r25
 c8c:	31 f4       	brne	.+12     	; 0xc9a <ds18x20SendByte+0x9e>
 c8e:	e7 ed       	ldi	r30, 0xD7	; 215
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	31 97       	sbiw	r30, 0x01	; 1
 c94:	f1 f7       	brne	.-4      	; 0xc92 <ds18x20SendByte+0x96>
 c96:	00 c0       	rjmp	.+0      	; 0xc98 <ds18x20SendByte+0x9c>
 c98:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
 c9a:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
 c9c:	2a 9a       	sbi	0x05, 2	; 5
 c9e:	f5 e3       	ldi	r31, 0x35	; 53
 ca0:	fa 95       	dec	r31
 ca2:	f1 f7       	brne	.-4      	; 0xca0 <ds18x20SendByte+0xa4>
 ca4:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
 ca6:	99 23       	and	r25, r25
 ca8:	31 f0       	breq	.+12     	; 0xcb6 <ds18x20SendByte+0xba>
 caa:	e7 ed       	ldi	r30, 0xD7	; 215
 cac:	f0 e0       	ldi	r31, 0x00	; 0
 cae:	31 97       	sbiw	r30, 0x01	; 1
 cb0:	f1 f7       	brne	.-4      	; 0xcae <ds18x20SendByte+0xb2>
 cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <ds18x20SendByte+0xb8>
 cb4:	00 00       	nop
    break;
  }
  sei();
 cb6:	78 94       	sei
 cb8:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
 cba:	11 f0       	breq	.+4      	; 0xcc0 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
 cbc:	86 95       	lsr	r24
 cbe:	9f cf       	rjmp	.-194    	; 0xbfe <ds18x20SendByte+0x2>
 cc0:	08 95       	ret

00000cc2 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
 cc2:	28 2f       	mov	r18, r24
 cc4:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
 cc6:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
 cc8:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
 cca:	f8 94       	cli
  switch(chanel) {
 ccc:	22 30       	cpi	r18, 0x02	; 2
 cce:	c1 f0       	breq	.+48     	; 0xd00 <ds18x20GetByte+0x3e>
 cd0:	23 30       	cpi	r18, 0x03	; 3
 cd2:	20 f4       	brcc	.+8      	; 0xcdc <ds18x20GetByte+0x1a>
 cd4:	21 30       	cpi	r18, 0x01	; 1
 cd6:	09 f0       	breq	.+2      	; 0xcda <ds18x20GetByte+0x18>
 cd8:	40 c0       	rjmp	.+128    	; 0xd5a <ds18x20GetByte+0x98>
 cda:	05 c0       	rjmp	.+10     	; 0xce6 <ds18x20GetByte+0x24>
 cdc:	23 30       	cpi	r18, 0x03	; 3
 cde:	e9 f0       	breq	.+58     	; 0xd1a <ds18x20GetByte+0x58>
 ce0:	24 30       	cpi	r18, 0x04	; 4
 ce2:	d9 f5       	brne	.+118    	; 0xd5a <ds18x20GetByte+0x98>
 ce4:	27 c0       	rjmp	.+78     	; 0xd34 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
 ce6:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
 ce8:	29 98       	cbi	0x05, 1	; 5
 cea:	90 e2       	ldi	r25, 0x20	; 32
 cec:	9a 95       	dec	r25
 cee:	f1 f7       	brne	.-4      	; 0xcec <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
 cf0:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
 cf2:	29 9a       	sbi	0x05, 1	; 5
 cf4:	e0 e3       	ldi	r30, 0x30	; 48
 cf6:	ea 95       	dec	r30
 cf8:	f1 f7       	brne	.-4      	; 0xcf6 <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
 cfa:	93 b1       	in	r25, 0x03	; 3
 cfc:	92 70       	andi	r25, 0x02	; 2
 cfe:	26 c0       	rjmp	.+76     	; 0xd4c <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
 d00:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
 d02:	28 98       	cbi	0x05, 0	; 5
 d04:	f0 e2       	ldi	r31, 0x20	; 32
 d06:	fa 95       	dec	r31
 d08:	f1 f7       	brne	.-4      	; 0xd06 <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
 d0a:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
 d0c:	28 9a       	sbi	0x05, 0	; 5
 d0e:	90 e3       	ldi	r25, 0x30	; 48
 d10:	9a 95       	dec	r25
 d12:	f1 f7       	brne	.-4      	; 0xd10 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
 d14:	93 b1       	in	r25, 0x03	; 3
 d16:	91 70       	andi	r25, 0x01	; 1
 d18:	19 c0       	rjmp	.+50     	; 0xd4c <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
 d1a:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
 d1c:	5f 98       	cbi	0x0b, 7	; 11
 d1e:	f0 e2       	ldi	r31, 0x20	; 32
 d20:	fa 95       	dec	r31
 d22:	f1 f7       	brne	.-4      	; 0xd20 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
 d24:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
 d26:	5f 9a       	sbi	0x0b, 7	; 11
 d28:	90 e3       	ldi	r25, 0x30	; 48
 d2a:	9a 95       	dec	r25
 d2c:	f1 f7       	brne	.-4      	; 0xd2a <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
 d2e:	99 b1       	in	r25, 0x09	; 9
 d30:	90 78       	andi	r25, 0x80	; 128
 d32:	0c c0       	rjmp	.+24     	; 0xd4c <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
 d34:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
 d36:	2a 98       	cbi	0x05, 2	; 5
 d38:	f0 e2       	ldi	r31, 0x20	; 32
 d3a:	fa 95       	dec	r31
 d3c:	f1 f7       	brne	.-4      	; 0xd3a <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
 d3e:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
 d40:	2a 9a       	sbi	0x05, 2	; 5
 d42:	90 e3       	ldi	r25, 0x30	; 48
 d44:	9a 95       	dec	r25
 d46:	f1 f7       	brne	.-4      	; 0xd44 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
 d48:	93 b1       	in	r25, 0x03	; 3
 d4a:	94 70       	andi	r25, 0x04	; 4
 d4c:	eb ed       	ldi	r30, 0xDB	; 219
 d4e:	f0 e0       	ldi	r31, 0x00	; 0
 d50:	31 97       	sbiw	r30, 0x01	; 1
 d52:	f1 f7       	brne	.-4      	; 0xd50 <ds18x20GetByte+0x8e>
 d54:	00 c0       	rjmp	.+0      	; 0xd56 <ds18x20GetByte+0x94>
 d56:	00 00       	nop
 d58:	01 c0       	rjmp	.+2      	; 0xd5c <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
 d5a:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
 d5c:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
 d5e:	91 11       	cpse	r25, r1
 d60:	80 68       	ori	r24, 0x80	; 128
 d62:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
 d64:	09 f0       	breq	.+2      	; 0xd68 <ds18x20GetByte+0xa6>
 d66:	b0 cf       	rjmp	.-160    	; 0xcc8 <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
 d68:	08 95       	ret

00000d6a <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
 d6a:	0f 93       	push	r16
 d6c:	1f 93       	push	r17
 d6e:	cf 93       	push	r28
 d70:	df 93       	push	r29
 d72:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
 d74:	0e 94 91 05 	call	0xb22	; 0xb22 <ds18x20IsOnBus>
 d78:	88 23       	and	r24, r24
 d7a:	91 f1       	breq	.+100    	; 0xde0 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
 d7c:	8c ec       	ldi	r24, 0xCC	; 204
 d7e:	61 2f       	mov	r22, r17
 d80:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
 d84:	8e eb       	ldi	r24, 0xBE	; 190
 d86:	61 2f       	mov	r22, r17
 d88:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ds18x20SendByte>
 d8c:	c1 e1       	ldi	r28, 0x11	; 17
 d8e:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
 d90:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
 d92:	81 2f       	mov	r24, r17
 d94:	0e 94 61 06 	call	0xcc2	; 0xcc2 <ds18x20GetByte>
 d98:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
 d9a:	08 27       	eor	r16, r24
 d9c:	88 e0       	ldi	r24, 0x08	; 8
 d9e:	9c e8       	ldi	r25, 0x8C	; 140
 da0:	06 95       	lsr	r16
 da2:	08 f4       	brcc	.+2      	; 0xda6 <ds18x20ReadStratchPad+0x3c>
 da4:	09 27       	eor	r16, r25
 da6:	8a 95       	dec	r24
 da8:	d9 f7       	brne	.-10     	; 0xda0 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
 daa:	82 e0       	ldi	r24, 0x02	; 2
 dac:	ca 31       	cpi	r28, 0x1A	; 26
 dae:	d8 07       	cpc	r29, r24
 db0:	81 f7       	brne	.-32     	; 0xd92 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
 db2:	00 23       	and	r16, r16
 db4:	a9 f4       	brne	.+42     	; 0xde0 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
 db6:	81 2f       	mov	r24, r17
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	01 97       	sbiw	r24, 0x01	; 1
 dbc:	fc 01       	movw	r30, r24
 dbe:	ee 0f       	add	r30, r30
 dc0:	ff 1f       	adc	r31, r31
 dc2:	23 e0       	ldi	r18, 0x03	; 3
 dc4:	88 0f       	add	r24, r24
 dc6:	99 1f       	adc	r25, r25
 dc8:	2a 95       	dec	r18
 dca:	e1 f7       	brne	.-8      	; 0xdc4 <ds18x20ReadStratchPad+0x5a>
 dcc:	e8 0f       	add	r30, r24
 dce:	f9 1f       	adc	r31, r25
 dd0:	e7 51       	subi	r30, 0x17	; 23
 dd2:	fe 4f       	sbci	r31, 0xFE	; 254
 dd4:	80 91 11 02 	lds	r24, 0x0211
 dd8:	80 83       	st	Z, r24
 dda:	80 91 12 02 	lds	r24, 0x0212
 dde:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
 de0:	df 91       	pop	r29
 de2:	cf 91       	pop	r28
 de4:	1f 91       	pop	r17
 de6:	0f 91       	pop	r16
 de8:	08 95       	ret

00000dea <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
 dea:	1f 93       	push	r17
 dec:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
 dee:	0e 94 91 05 	call	0xb22	; 0xb22 <ds18x20IsOnBus>
 df2:	88 23       	and	r24, r24
 df4:	41 f0       	breq	.+16     	; 0xe06 <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
 df6:	8c ec       	ldi	r24, 0xCC	; 204
 df8:	61 2f       	mov	r22, r17
 dfa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
 dfe:	84 e4       	ldi	r24, 0x44	; 68
 e00:	61 2f       	mov	r22, r17
 e02:	0e 94 fe 05 	call	0xbfc	; 0xbfc <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
 e06:	12 30       	cpi	r17, 0x02	; 2
 e08:	69 f0       	breq	.+26     	; 0xe24 <ds18x20ConvertTemp+0x3a>
 e0a:	13 30       	cpi	r17, 0x03	; 3
 e0c:	18 f4       	brcc	.+6      	; 0xe14 <ds18x20ConvertTemp+0x2a>
 e0e:	11 30       	cpi	r17, 0x01	; 1
 e10:	89 f4       	brne	.+34     	; 0xe34 <ds18x20ConvertTemp+0x4a>
 e12:	05 c0       	rjmp	.+10     	; 0xe1e <ds18x20ConvertTemp+0x34>
 e14:	13 30       	cpi	r17, 0x03	; 3
 e16:	49 f0       	breq	.+18     	; 0xe2a <ds18x20ConvertTemp+0x40>
 e18:	14 30       	cpi	r17, 0x04	; 4
 e1a:	61 f4       	brne	.+24     	; 0xe34 <ds18x20ConvertTemp+0x4a>
 e1c:	09 c0       	rjmp	.+18     	; 0xe30 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 e1e:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 e20:	21 9a       	sbi	0x04, 1	; 4
    break;
 e22:	08 c0       	rjmp	.+16     	; 0xe34 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
 e24:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
 e26:	20 9a       	sbi	0x04, 0	; 4
    break;
 e28:	05 c0       	rjmp	.+10     	; 0xe34 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
 e2a:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
 e2c:	57 9a       	sbi	0x0a, 7	; 10
    break;
 e2e:	02 c0       	rjmp	.+4      	; 0xe34 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
 e30:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
 e32:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
 e34:	1f 91       	pop	r17
 e36:	08 95       	ret

00000e38 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	01 97       	sbiw	r24, 0x01	; 1
 e3c:	fc 01       	movw	r30, r24
 e3e:	ee 0f       	add	r30, r30
 e40:	ff 1f       	adc	r31, r31
 e42:	23 e0       	ldi	r18, 0x03	; 3
 e44:	88 0f       	add	r24, r24
 e46:	99 1f       	adc	r25, r25
 e48:	2a 95       	dec	r18
 e4a:	e1 f7       	brne	.-8      	; 0xe44 <ds18x20GetTemp+0xc>
 e4c:	e8 0f       	add	r30, r24
 e4e:	f9 1f       	adc	r31, r25
 e50:	e7 51       	subi	r30, 0x17	; 23
 e52:	fe 4f       	sbci	r31, 0xFE	; 254
 e54:	40 81       	ld	r20, Z
 e56:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
 e58:	9a 01       	movw	r18, r20
 e5a:	2f 70       	andi	r18, 0x0F	; 15
 e5c:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
 e5e:	c9 01       	movw	r24, r18
 e60:	88 0f       	add	r24, r24
 e62:	99 1f       	adc	r25, r25
 e64:	a3 e0       	ldi	r26, 0x03	; 3
 e66:	22 0f       	add	r18, r18
 e68:	33 1f       	adc	r19, r19
 e6a:	aa 95       	dec	r26
 e6c:	e1 f7       	brne	.-8      	; 0xe66 <ds18x20GetTemp+0x2e>
 e6e:	28 0f       	add	r18, r24
 e70:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
 e72:	91 81       	ldd	r25, Z+1	; 0x01
 e74:	80 e0       	ldi	r24, 0x00	; 0
 e76:	84 2b       	or	r24, r20
 e78:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
 e7a:	60 e1       	ldi	r22, 0x10	; 16
 e7c:	70 e0       	ldi	r23, 0x00	; 0
 e7e:	0e 94 60 07 	call	0xec0	; 0xec0 <__divmodhi4>
 e82:	ab 01       	movw	r20, r22
 e84:	44 0f       	add	r20, r20
 e86:	55 1f       	adc	r21, r21
 e88:	e3 e0       	ldi	r30, 0x03	; 3
 e8a:	66 0f       	add	r22, r22
 e8c:	77 1f       	adc	r23, r23
 e8e:	ea 95       	dec	r30
 e90:	e1 f7       	brne	.-8      	; 0xe8a <ds18x20GetTemp+0x52>
 e92:	46 0f       	add	r20, r22
 e94:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
 e96:	64 e0       	ldi	r22, 0x04	; 4
 e98:	35 95       	asr	r19
 e9a:	27 95       	ror	r18
 e9c:	6a 95       	dec	r22
 e9e:	e1 f7       	brne	.-8      	; 0xe98 <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
 ea0:	42 0f       	add	r20, r18
 ea2:	53 1f       	adc	r21, r19
  return ret;
}
 ea4:	ca 01       	movw	r24, r20
 ea6:	08 95       	ret

00000ea8 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
 ea8:	e8 2f       	mov	r30, r24
 eaa:	f0 e0       	ldi	r31, 0x00	; 0
 eac:	ec 51       	subi	r30, 0x1C	; 28
 eae:	fe 4f       	sbci	r31, 0xFE	; 254
}
 eb0:	80 81       	ld	r24, Z
 eb2:	08 95       	ret

00000eb4 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
 eb4:	e8 2f       	mov	r30, r24
 eb6:	f0 e0       	ldi	r31, 0x00	; 0
 eb8:	ec 51       	subi	r30, 0x1C	; 28
 eba:	fe 4f       	sbci	r31, 0xFE	; 254
 ebc:	60 83       	st	Z, r22
}
 ebe:	08 95       	ret

00000ec0 <__divmodhi4>:
 ec0:	97 fb       	bst	r25, 7
 ec2:	09 2e       	mov	r0, r25
 ec4:	07 26       	eor	r0, r23
 ec6:	0a d0       	rcall	.+20     	; 0xedc <__divmodhi4_neg1>
 ec8:	77 fd       	sbrc	r23, 7
 eca:	04 d0       	rcall	.+8      	; 0xed4 <__divmodhi4_neg2>
 ecc:	0c d0       	rcall	.+24     	; 0xee6 <__udivmodhi4>
 ece:	06 d0       	rcall	.+12     	; 0xedc <__divmodhi4_neg1>
 ed0:	00 20       	and	r0, r0
 ed2:	1a f4       	brpl	.+6      	; 0xeda <__divmodhi4_exit>

00000ed4 <__divmodhi4_neg2>:
 ed4:	70 95       	com	r23
 ed6:	61 95       	neg	r22
 ed8:	7f 4f       	sbci	r23, 0xFF	; 255

00000eda <__divmodhi4_exit>:
 eda:	08 95       	ret

00000edc <__divmodhi4_neg1>:
 edc:	f6 f7       	brtc	.-4      	; 0xeda <__divmodhi4_exit>
 ede:	90 95       	com	r25
 ee0:	81 95       	neg	r24
 ee2:	9f 4f       	sbci	r25, 0xFF	; 255
 ee4:	08 95       	ret

00000ee6 <__udivmodhi4>:
 ee6:	aa 1b       	sub	r26, r26
 ee8:	bb 1b       	sub	r27, r27
 eea:	51 e1       	ldi	r21, 0x11	; 17
 eec:	07 c0       	rjmp	.+14     	; 0xefc <__udivmodhi4_ep>

00000eee <__udivmodhi4_loop>:
 eee:	aa 1f       	adc	r26, r26
 ef0:	bb 1f       	adc	r27, r27
 ef2:	a6 17       	cp	r26, r22
 ef4:	b7 07       	cpc	r27, r23
 ef6:	10 f0       	brcs	.+4      	; 0xefc <__udivmodhi4_ep>
 ef8:	a6 1b       	sub	r26, r22
 efa:	b7 0b       	sbc	r27, r23

00000efc <__udivmodhi4_ep>:
 efc:	88 1f       	adc	r24, r24
 efe:	99 1f       	adc	r25, r25
 f00:	5a 95       	dec	r21
 f02:	a9 f7       	brne	.-22     	; 0xeee <__udivmodhi4_loop>
 f04:	80 95       	com	r24
 f06:	90 95       	com	r25
 f08:	bc 01       	movw	r22, r24
 f0a:	cd 01       	movw	r24, r26
 f0c:	08 95       	ret

00000f0e <_exit>:
 f0e:	f8 94       	cli

00000f10 <__stop_program>:
 f10:	ff cf       	rjmp	.-2      	; 0xf10 <__stop_program>
