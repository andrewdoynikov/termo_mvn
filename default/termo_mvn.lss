
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00001a76  00001b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ad  008001a6  008001a6  00001bb0  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  0000282d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000005a7  00000000  00000000  000028ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001dce  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000087a  00000000  00000000  00004c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002248  00000000  00000000  000054dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  00007724  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000610  00000000  00000000  00007b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014a5  00000000  00000000  00008134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000147  00000000  00000000  000095d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e7       	ldi	r30, 0x76	; 118
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 35       	cpi	r26, 0x53	; 83
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 2f 0a 	call	0x145e	; 0x145e <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
      be:	52 9a       	sbi	0x0a, 2	; 10
      c0:	5a 98       	cbi	0x0b, 2	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 ad 08 	call	0x115a	; 0x115a <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000);  // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 300); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	4c e2       	ldi	r20, 0x2C	; 44
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 0);         // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);    // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 bb 02 	call	0x576	; 0x576 <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 cd 02 	call	0x59a	; 0x59a <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 c4 02 	call	0x588	; 0x588 <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <load_min_temp_2>
  load_type1();
     112:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <load_type1>
  load_type2();
     116:	0e 94 08 03 	call	0x610	; 0x610 <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 67 09 	call	0x12ce	; 0x12ce <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <set_outport>:
  }    
}
//=============================================================================
void set_outport(uint8_t chanel, uint8_t val)
{
  if (chanel == 1) {
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	51 f4       	brne	.+20     	; 0x176 <set_outport+0x18>
    if (val == 1) {
     162:	61 30       	cpi	r22, 0x01	; 1
     164:	21 f4       	brne	.+8      	; 0x16e <set_outport+0x10>
	  OUT_1_1();
     166:	5b 9a       	sbi	0x0b, 3	; 11
	  outs[0] = 1;
     168:	60 93 b1 01 	sts	0x01B1, r22
     16c:	08 95       	ret
	} else {
	  OUT_1_0();
     16e:	5b 98       	cbi	0x0b, 3	; 11
	  outs[0] = 0;
     170:	10 92 b1 01 	sts	0x01B1, r1
     174:	08 95       	ret
	}
  }
  if (chanel == 2) {
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	49 f4       	brne	.+18     	; 0x18c <set_outport+0x2e>
    if (val == 1) {
     17a:	61 30       	cpi	r22, 0x01	; 1
     17c:	21 f4       	brne	.+8      	; 0x186 <set_outport+0x28>
	  OUT_2_1();
     17e:	5a 9a       	sbi	0x0b, 2	; 11
	  outs[1] = 1;
     180:	60 93 b2 01 	sts	0x01B2, r22
     184:	08 95       	ret
	} else {
	  OUT_2_0();
     186:	5a 98       	cbi	0x0b, 2	; 11
	  outs[1] = 0;
     188:	10 92 b2 01 	sts	0x01B2, r1
     18c:	08 95       	ret

0000018e <check_temp>:
	}
  }
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     18e:	1f 93       	push	r17
     190:	18 2f       	mov	r17, r24
  int16_t t = ds18x20GetTemp(chanel);
     192:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
     196:	ac 01       	movw	r20, r24
  if (status[chanel - 1] == T_OTSLED_MAX) {
     198:	21 2f       	mov	r18, r17
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	30 40       	sbci	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	e7 5c       	subi	r30, 0xC7	; 199
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 81       	ld	r24, Z
     1a8:	b9 01       	movw	r22, r18
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	66 0f       	add	r22, r22
     1b0:	77 1f       	adc	r23, r23
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	89 f4       	brne	.+34     	; 0x1d8 <check_temp+0x4a>
 // отслеживаем превышение максимума
    if (t > temps[chanel - 1][T_MAX]) {
     1b6:	67 55       	subi	r22, 0x57	; 87
     1b8:	7e 4f       	sbci	r23, 0xFE	; 254
     1ba:	db 01       	movw	r26, r22
     1bc:	8d 91       	ld	r24, X+
     1be:	9c 91       	ld	r25, X
     1c0:	11 97       	sbiw	r26, 0x01	; 1
     1c2:	84 17       	cp	r24, r20
     1c4:	95 07       	cpc	r25, r21
     1c6:	0c f5       	brge	.+66     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MIN;
     1c8:	10 82       	st	Z, r1
      if (types[chanel - 1] == T_HEATER) {
     1ca:	29 5c       	subi	r18, 0xC9	; 201
     1cc:	3e 4f       	sbci	r19, 0xFE	; 254
     1ce:	f9 01       	movw	r30, r18
     1d0:	80 81       	ld	r24, Z
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	99 f4       	brne	.+38     	; 0x1fc <check_temp+0x6e>
     1d6:	15 c0       	rjmp	.+42     	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
	  }
    }
  } else {
   // отслеживаем превышение минимума
    if (t < temps[chanel - 1][T_MIN]) {
     1d8:	67 55       	subi	r22, 0x57	; 87
     1da:	7e 4f       	sbci	r23, 0xFE	; 254
     1dc:	db 01       	movw	r26, r22
     1de:	12 96       	adiw	r26, 0x02	; 2
     1e0:	6d 91       	ld	r22, X+
     1e2:	7c 91       	ld	r23, X
     1e4:	13 97       	sbiw	r26, 0x03	; 3
     1e6:	46 17       	cp	r20, r22
     1e8:	57 07       	cpc	r21, r23
     1ea:	7c f4       	brge	.+30     	; 0x20a <check_temp+0x7c>
      status[chanel - 1] = T_OTSLED_MAX;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 83       	st	Z, r24
      if (types[chanel - 1] == T_HEATER) {
     1f0:	29 5c       	subi	r18, 0xC9	; 201
     1f2:	3e 4f       	sbci	r19, 0xFE	; 254
     1f4:	f9 01       	movw	r30, r18
     1f6:	80 81       	ld	r24, Z
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	19 f4       	brne	.+6      	; 0x202 <check_temp+0x74>
        set_outport(chanel, 1);
     1fc:	81 2f       	mov	r24, r17
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	02 c0       	rjmp	.+4      	; 0x206 <check_temp+0x78>
	  } else {
        set_outport(chanel, 0);
     202:	81 2f       	mov	r24, r17
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	  }
    }
  }
}
     20a:	1f 91       	pop	r17
     20c:	08 95       	ret

0000020e <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     20e:	80 91 a8 01 	lds	r24, 0x01A8
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <DS18x20_scan+0x10>
    dscount--;
     216:	81 50       	subi	r24, 0x01	; 1
     218:	80 93 a8 01 	sts	0x01A8, r24
	return;
     21c:	08 95       	ret
  }
  switch(ds_state) {
     21e:	80 91 b5 01 	lds	r24, 0x01B5
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	b9 f0       	breq	.+46     	; 0x254 <DS18x20_scan+0x46>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	20 f0       	brcs	.+8      	; 0x232 <DS18x20_scan+0x24>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	09 f0       	breq	.+2      	; 0x230 <DS18x20_scan+0x22>
     22e:	59 c0       	rjmp	.+178    	; 0x2e2 <DS18x20_scan+0xd4>
     230:	24 c0       	rjmp	.+72     	; 0x27a <DS18x20_scan+0x6c>
    case 0:
      ds18x20ConvertTemp(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
	  dscount = 10;
     24a:	8a e0       	ldi	r24, 0x0A	; 10
     24c:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	10 c0       	rjmp	.+32     	; 0x274 <DS18x20_scan+0x66>
    break;
    case 1:
      ds18x20ReadStratchPad(1);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
	  dscount = 10;
     26c:	8a e0       	ldi	r24, 0x0A	; 10
     26e:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 2;
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	80 93 b5 01 	sts	0x01B5, r24
    break;
     278:	08 95       	ret
    case 2:
	if (ds18x20GetDevCount(1) == 1) {
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	31 f4       	brne	.+12     	; 0x290 <DS18x20_scan+0x82>
      ds18x20GetTemp(1);
     284:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
      check_temp(1);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
     28e:	04 c0       	rjmp	.+8      	; 0x298 <DS18x20_scan+0x8a>
    } else {
      set_outport(1, 0);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
    }
	if (ds18x20GetDevCount(2) == 1) {
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	39 f4       	brne	.+14     	; 0x2b0 <DS18x20_scan+0xa2>
      ds18x20GetTemp(2);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
      check_temp(2);
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <DS18x20_scan+0xaa>
    } else {
      set_outport(2, 0);
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
    }
	if (ds18x20GetDevCount(3) == 1) {
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	19 f4       	brne	.+6      	; 0x2c8 <DS18x20_scan+0xba>
      ds18x20GetTemp(3);
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
    }
	if (ds18x20GetDevCount(4) == 1) {
     2c8:	84 e0       	ldi	r24, 0x04	; 4
     2ca:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <DS18x20_scan+0xca>
      ds18x20GetTemp(4);
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
    }
	  dscount = SCAN_TIME / 100;
     2d8:	84 e1       	ldi	r24, 0x14	; 20
     2da:	80 93 a8 01 	sts	0x01A8, r24
	  ds_state = 0;
     2de:	10 92 b5 01 	sts	0x01B5, r1
     2e2:	08 95       	ret

000002e4 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     2e4:	89 3c       	cpi	r24, 0xC9	; 201
     2e6:	29 f0       	breq	.+10     	; 0x2f2 <events_default+0xe>
     2e8:	8c 3c       	cpi	r24, 0xCC	; 204
     2ea:	71 f0       	breq	.+28     	; 0x308 <events_default+0x24>
     2ec:	88 3c       	cpi	r24, 0xC8	; 200
     2ee:	71 f4       	brne	.+28     	; 0x30c <events_default+0x28>
     2f0:	08 c0       	rjmp	.+16     	; 0x302 <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 91 32 01 	lds	r25, 0x0132
     2f8:	91 11       	cpse	r25, r1
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	80 93 32 01 	sts	0x0132, r24
    break;
     300:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     302:	0e 94 37 08 	call	0x106e	; 0x106e <KBD_scan>
    break;
     306:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     308:	0e 94 07 01 	call	0x20e	; 0x20e <DS18x20_scan>
     30c:	08 95       	ret

0000030e <run_start>:
  MAX7219_setCommaPos(pos + 2,1);
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
     30e:	1f 93       	push	r17
  switch(event) {
     310:	85 36       	cpi	r24, 0x65	; 101
     312:	09 f4       	brne	.+2      	; 0x316 <run_start+0x8>
     314:	b9 c0       	rjmp	.+370    	; 0x488 <run_start+0x17a>
     316:	87 36       	cpi	r24, 0x67	; 103
     318:	09 f4       	brne	.+2      	; 0x31c <run_start+0xe>
     31a:	8f c0       	rjmp	.+286    	; 0x43a <run_start+0x12c>
     31c:	84 36       	cpi	r24, 0x64	; 100
     31e:	09 f0       	breq	.+2      	; 0x322 <run_start+0x14>
     320:	0e c1       	rjmp	.+540    	; 0x53e <run_start+0x230>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	6d e2       	ldi	r22, 0x2D	; 45
     330:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
	  ds_count = 0;
     334:	10 92 a6 01 	sts	0x01A6, r1
      ds18x20IsOnBus(1);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 12 0b 	call	0x1624	; 0x1624 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 12 0b 	call	0x1624	; 0x1624 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	0e 94 12 0b 	call	0x1624	; 0x1624 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	0e 94 12 0b 	call	0x1624	; 0x1624 <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	41 f4       	brne	.+16     	; 0x36a <run_start+0x5c>
     35a:	80 91 a6 01 	lds	r24, 0x01A6
     35e:	8f 5f       	subi	r24, 0xFF	; 255
     360:	80 93 a6 01 	sts	0x01A6, r24
     364:	85 e0       	ldi	r24, 0x05	; 5
     366:	61 e3       	ldi	r22, 0x31	; 49
     368:	02 c0       	rjmp	.+4      	; 0x36e <run_start+0x60>
     36a:	85 e0       	ldi	r24, 0x05	; 5
     36c:	60 e2       	ldi	r22, 0x20	; 32
     36e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	41 f4       	brne	.+16     	; 0x38c <run_start+0x7e>
     37c:	80 91 a6 01 	lds	r24, 0x01A6
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	80 93 a6 01 	sts	0x01A6, r24
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	61 e3       	ldi	r22, 0x31	; 49
     38a:	02 c0       	rjmp	.+4      	; 0x390 <run_start+0x82>
     38c:	86 e0       	ldi	r24, 0x06	; 6
     38e:	60 e2       	ldi	r22, 0x20	; 32
     390:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	41 f4       	brne	.+16     	; 0x3ae <run_start+0xa0>
     39e:	80 91 a6 01 	lds	r24, 0x01A6
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 a6 01 	sts	0x01A6, r24
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	61 e3       	ldi	r22, 0x31	; 49
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <run_start+0xa4>
     3ae:	87 e0       	ldi	r24, 0x07	; 7
     3b0:	60 e2       	ldi	r22, 0x20	; 32
     3b2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	41 f4       	brne	.+16     	; 0x3d0 <run_start+0xc2>
     3c0:	80 91 a6 01 	lds	r24, 0x01A6
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	80 93 a6 01 	sts	0x01A6, r24
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	61 e3       	ldi	r22, 0x31	; 49
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <run_start+0xc6>
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	60 e2       	ldi	r22, 0x20	; 32
     3d4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
	  if (ds_count == 0) {
     3d8:	60 91 a6 01 	lds	r22, 0x01A6
     3dc:	66 23       	and	r22, r22
     3de:	21 f4       	brne	.+8      	; 0x3e8 <run_start+0xda>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     3e0:	84 e6       	ldi	r24, 0x64	; 100
     3e2:	68 eb       	ldi	r22, 0xB8	; 184
     3e4:	7b e0       	ldi	r23, 0x0B	; 11
     3e6:	4b c0       	rjmp	.+150    	; 0x47e <run_start+0x170>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	20 e2       	ldi	r18, 0x20	; 32
     3f0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	11 f4       	brne	.+4      	; 0x402 <run_start+0xf4>
     3fe:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	19 f4       	brne	.+6      	; 0x412 <run_start+0x104>
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	19 f4       	brne	.+6      	; 0x422 <run_start+0x114>
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	19 f4       	brne	.+6      	; 0x432 <run_start+0x124>
     42c:	84 e0       	ldi	r24, 0x04	; 4
     42e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     432:	87 e6       	ldi	r24, 0x67	; 103
     434:	68 ee       	ldi	r22, 0xE8	; 232
     436:	73 e0       	ldi	r23, 0x03	; 3
     438:	22 c0       	rjmp	.+68     	; 0x47e <run_start+0x170>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	11 f4       	brne	.+4      	; 0x448 <run_start+0x13a>
     444:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	19 f4       	brne	.+6      	; 0x458 <run_start+0x14a>
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	19 f4       	brne	.+6      	; 0x468 <run_start+0x15a>
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	19 f4       	brne	.+6      	; 0x478 <run_start+0x16a>
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	0e 94 36 0c 	call	0x186c	; 0x186c <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     478:	85 e6       	ldi	r24, 0x65	; 101
     47a:	64 e6       	ldi	r22, 0x64	; 100
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    break;
     486:	5d c0       	rjmp	.+186    	; 0x542 <run_start+0x234>
    case EVENT_RUN_MAIN:
	if (ds18x20GetDevCount(1) == 1) {
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     48e:	18 2f       	mov	r17, r24
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	c1 f4       	brne	.+48     	; 0x4c4 <run_start+0x1b6>
	  if (ds18x20GetTemp(1) < temps[0][0]) {
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
     49a:	20 91 a9 01 	lds	r18, 0x01A9
     49e:	30 91 aa 01 	lds	r19, 0x01AA
     4a2:	40 91 37 01 	lds	r20, 0x0137
     4a6:	82 17       	cp	r24, r18
     4a8:	93 07       	cpc	r25, r19
     4aa:	2c f4       	brge	.+10     	; 0x4b6 <run_start+0x1a8>
	    status[0] = T_OTSLED_MAX;
     4ac:	10 93 39 01 	sts	0x0139, r17
		if (types[0] == T_HEATER) set_outport(1, 1); else set_outport(1, 0);
     4b0:	41 30       	cpi	r20, 0x01	; 1
     4b2:	41 f4       	brne	.+16     	; 0x4c4 <run_start+0x1b6>
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <run_start+0x1b0>
	  } else {
	    status[0] = T_OTSLED_MIN;
     4b6:	10 92 39 01 	sts	0x0139, r1
		if (types[0] == T_HEATER) set_outport(1, 0); else set_outport(1, 1);
     4ba:	41 30       	cpi	r20, 0x01	; 1
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <run_start+0x1b6>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <run_start+0x1ba>
	  }
    } else {
      set_outport(1, 0);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	}
	if (ds18x20GetDevCount(2) == 1) {
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     4d2:	18 2f       	mov	r17, r24
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	c1 f4       	brne	.+48     	; 0x508 <run_start+0x1fa>
	  if (ds18x20GetTemp(2) < temps[1][0]) {
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
     4de:	20 91 ad 01 	lds	r18, 0x01AD
     4e2:	30 91 ae 01 	lds	r19, 0x01AE
     4e6:	40 91 38 01 	lds	r20, 0x0138
     4ea:	82 17       	cp	r24, r18
     4ec:	93 07       	cpc	r25, r19
     4ee:	2c f4       	brge	.+10     	; 0x4fa <run_start+0x1ec>
	    status[1] = T_OTSLED_MAX;
     4f0:	10 93 3a 01 	sts	0x013A, r17
		if (types[1] == T_HEATER) set_outport(2, 1); else set_outport(2, 0);
     4f4:	41 30       	cpi	r20, 0x01	; 1
     4f6:	41 f4       	brne	.+16     	; 0x508 <run_start+0x1fa>
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <run_start+0x1f4>
	  } else {
	    status[1] = T_OTSLED_MIN;
     4fa:	10 92 3a 01 	sts	0x013A, r1
		if (types[1] == T_HEATER) set_outport(2, 0); else set_outport(2, 1);
     4fe:	41 30       	cpi	r20, 0x01	; 1
     500:	19 f0       	breq	.+6      	; 0x508 <run_start+0x1fa>
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	02 c0       	rjmp	.+4      	; 0x50c <run_start+0x1fe>
	  }
    } else {
      set_outport(2, 0);
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	0e 94 af 00 	call	0x15e	; 0x15e <set_outport>
	}
      MAX7219_clearDisplay();
     510:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     514:	8c ec       	ldi	r24, 0xCC	; 204
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	44 e6       	ldi	r20, 0x64	; 100
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     522:	88 e6       	ldi	r24, 0x68	; 104
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
      SET_STATE(run_main);
     530:	82 eb       	ldi	r24, 0xB2	; 178
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	90 93 3e 01 	sts	0x013E, r25
     538:	80 93 3d 01 	sts	0x013D, r24
    break;
     53c:	02 c0       	rjmp	.+4      	; 0x542 <run_start+0x234>
	default:
	  events_default(event);
     53e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     542:	1f 91       	pop	r17
     544:	08 95       	ret

00000546 <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     546:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__eewr_word_m328p>
}
     550:	08 95       	ret

00000552 <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     552:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     554:	80 e2       	ldi	r24, 0x20	; 32
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__eewr_word_m328p>
}
     55c:	08 95       	ret

0000055e <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     55e:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     560:	82 e1       	ldi	r24, 0x12	; 18
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__eewr_word_m328p>
}
     568:	08 95       	ret

0000056a <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     56a:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     56c:	82 e2       	ldi	r24, 0x22	; 34
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__eewr_word_m328p>
}
     574:	08 95       	ret

00000576 <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     576:	80 e1       	ldi	r24, 0x10	; 16
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     57e:	80 93 a9 01 	sts	0x01A9, r24
     582:	90 93 aa 01 	sts	0x01AA, r25
  return (int16_t)tu;
}
     586:	08 95       	ret

00000588 <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     588:	82 e1       	ldi	r24, 0x12	; 18
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     590:	80 93 ab 01 	sts	0x01AB, r24
     594:	90 93 ac 01 	sts	0x01AC, r25
  return (int16_t)tu;
}
     598:	08 95       	ret

0000059a <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     59a:	80 e2       	ldi	r24, 0x20	; 32
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     5a2:	80 93 ad 01 	sts	0x01AD, r24
     5a6:	90 93 ae 01 	sts	0x01AE, r25
  return (int16_t)tu;
}
     5aa:	08 95       	ret

000005ac <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     5ac:	82 e2       	ldi	r24, 0x22	; 34
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     5b4:	80 93 af 01 	sts	0x01AF, r24
     5b8:	90 93 b0 01 	sts	0x01B0, r25
  return (int16_t)tu;
}
     5bc:	08 95       	ret

000005be <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     5be:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     5c0:	80 e3       	ldi	r24, 0x30	; 48
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__eewr_byte_m328p>
}
     5c8:	08 95       	ret

000005ca <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     5ca:	80 e3       	ldi	r24, 0x30	; 48
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__eerd_byte_m328p>
     5d2:	80 93 36 01 	sts	0x0136, r24
  if (brightnes > 15) brightnes = 2;
     5d6:	80 31       	cpi	r24, 0x10	; 16
     5d8:	18 f0       	brcs	.+6      	; 0x5e0 <load_brightnes+0x16>
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	80 93 36 01 	sts	0x0136, r24
  return brightnes;
}
     5e0:	80 91 36 01 	lds	r24, 0x0136
     5e4:	08 95       	ret

000005e6 <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     5e6:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     5e8:	84 e1       	ldi	r24, 0x14	; 20
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__eewr_byte_m328p>
}
     5f0:	08 95       	ret

000005f2 <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     5f2:	84 e1       	ldi	r24, 0x14	; 20
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__eerd_byte_m328p>
     5fa:	81 11       	cpse	r24, r1
     5fc:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     5fe:	80 93 37 01 	sts	0x0137, r24
  return t;
}
     602:	08 95       	ret

00000604 <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     604:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     606:	84 e2       	ldi	r24, 0x24	; 36
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__eewr_byte_m328p>
}
     60e:	08 95       	ret

00000610 <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     610:	84 e2       	ldi	r24, 0x24	; 36
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__eerd_byte_m328p>
     618:	81 11       	cpse	r24, r1
     61a:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     61c:	80 93 38 01 	sts	0x0138, r24
  return t;
}
     620:	08 95       	ret

00000622 <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     622:	e0 91 b3 01 	lds	r30, 0x01B3
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	e6 5d       	subi	r30, 0xD6	; 214
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
}
     63a:	08 95       	ret

0000063c <run_error>:
  }    
}
//=============================================================================
void run_error(unsigned char event)
{
  switch(event) {
     63c:	8e 31       	cpi	r24, 0x1E	; 30
     63e:	09 f4       	brne	.+2      	; 0x642 <run_error+0x6>
     640:	3e c0       	rjmp	.+124    	; 0x6be <run_error+0x82>
     642:	8f 31       	cpi	r24, 0x1F	; 31
     644:	30 f4       	brcc	.+12     	; 0x652 <run_error+0x16>
     646:	8a 30       	cpi	r24, 0x0A	; 10
     648:	d1 f1       	breq	.+116    	; 0x6be <run_error+0x82>
     64a:	84 31       	cpi	r24, 0x14	; 20
     64c:	09 f0       	breq	.+2      	; 0x650 <run_error+0x14>
     64e:	44 c0       	rjmp	.+136    	; 0x6d8 <run_error+0x9c>
     650:	36 c0       	rjmp	.+108    	; 0x6be <run_error+0x82>
     652:	89 3c       	cpi	r24, 0xC9	; 201
     654:	21 f0       	breq	.+8      	; 0x65e <run_error+0x22>
     656:	8a 3c       	cpi	r24, 0xCA	; 202
     658:	09 f0       	breq	.+2      	; 0x65c <run_error+0x20>
     65a:	3e c0       	rjmp	.+124    	; 0x6d8 <run_error+0x9c>
     65c:	1d c0       	rjmp	.+58     	; 0x698 <run_error+0x5c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 91 32 01 	lds	r25, 0x0132
     664:	91 11       	cpse	r25, r1
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	80 93 32 01 	sts	0x0132, r24
	  if (error_cnt > 0) error_cnt--; else {
     66c:	80 91 35 01 	lds	r24, 0x0135
     670:	88 23       	and	r24, r24
     672:	21 f0       	breq	.+8      	; 0x67c <run_error+0x40>
     674:	81 50       	subi	r24, 0x01	; 1
     676:	80 93 35 01 	sts	0x0135, r24
     67a:	08 95       	ret
        wait_menu = WAIT_MENU_TIME;
     67c:	84 e1       	ldi	r24, 0x14	; 20
     67e:	80 93 34 01 	sts	0x0134, r24
        SET_STATE(run_menu);
     682:	8a ed       	ldi	r24, 0xDA	; 218
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	90 93 3e 01 	sts	0x013E, r25
     68a:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_clearDisplay();
     68e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        show_menu();
     692:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     696:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 91 33 01 	lds	r25, 0x0133
     69e:	91 11       	cpse	r25, r1
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     6a6:	88 23       	and	r24, r24
     6a8:	21 f0       	breq	.+8      	; 0x6b2 <run_error+0x76>
        MAX7219_printStr(1, "Err ");
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	63 e0       	ldi	r22, 0x03	; 3
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <run_error+0x7c>
	  } else {
        MAX7219_printStr(1, "    ");
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	68 e0       	ldi	r22, 0x08	; 8
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
     6bc:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     6be:	84 e1       	ldi	r24, 0x14	; 20
     6c0:	80 93 34 01 	sts	0x0134, r24
      SET_STATE(run_menu);
     6c4:	8a ed       	ldi	r24, 0xDA	; 218
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	90 93 3e 01 	sts	0x013E, r25
     6cc:	80 93 3d 01 	sts	0x013D, r24
      MAX7219_clearDisplay();
     6d0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
      show_menu();
     6d4:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     6d8:	08 95       	ret

000006da <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     6da:	8e 31       	cpi	r24, 0x1E	; 30
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <run_set_brightnes+0x6>
     6de:	3f c0       	rjmp	.+126    	; 0x75e <run_set_brightnes+0x84>
     6e0:	8f 31       	cpi	r24, 0x1F	; 31
     6e2:	38 f4       	brcc	.+14     	; 0x6f2 <run_set_brightnes+0x18>
     6e4:	8a 30       	cpi	r24, 0x0A	; 10
     6e6:	09 f4       	brne	.+2      	; 0x6ea <run_set_brightnes+0x10>
     6e8:	54 c0       	rjmp	.+168    	; 0x792 <run_set_brightnes+0xb8>
     6ea:	84 31       	cpi	r24, 0x14	; 20
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <run_set_brightnes+0x16>
     6ee:	5f c0       	rjmp	.+190    	; 0x7ae <run_set_brightnes+0xd4>
     6f0:	3f c0       	rjmp	.+126    	; 0x770 <run_set_brightnes+0x96>
     6f2:	89 3c       	cpi	r24, 0xC9	; 201
     6f4:	21 f0       	breq	.+8      	; 0x6fe <run_set_brightnes+0x24>
     6f6:	8a 3c       	cpi	r24, 0xCA	; 202
     6f8:	09 f0       	breq	.+2      	; 0x6fc <run_set_brightnes+0x22>
     6fa:	59 c0       	rjmp	.+178    	; 0x7ae <run_set_brightnes+0xd4>
     6fc:	18 c0       	rjmp	.+48     	; 0x72e <run_set_brightnes+0x54>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 91 32 01 	lds	r25, 0x0132
     704:	91 11       	cpse	r25, r1
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     70c:	80 91 34 01 	lds	r24, 0x0134
     710:	88 23       	and	r24, r24
     712:	21 f0       	breq	.+8      	; 0x71c <run_set_brightnes+0x42>
     714:	81 50       	subi	r24, 0x01	; 1
     716:	80 93 34 01 	sts	0x0134, r24
     71a:	08 95       	ret
        MAX7219_clearDisplay();
     71c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     720:	8a ed       	ldi	r24, 0xDA	; 218
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	90 93 3e 01 	sts	0x013E, r25
     728:	80 93 3d 01 	sts	0x013D, r24
     72c:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 91 33 01 	lds	r25, 0x0133
     734:	91 11       	cpse	r25, r1
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	80 93 33 01 	sts	0x0133, r24
	  if (blink05) {
     73c:	88 23       	and	r24, r24
     73e:	49 f0       	breq	.+18     	; 0x752 <run_set_brightnes+0x78>
        MAX7219_printNum(4, brightnes, 2, ' ');
     740:	60 91 36 01 	lds	r22, 0x0136
     744:	84 e0       	ldi	r24, 0x04	; 4
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	42 e0       	ldi	r20, 0x02	; 2
     74a:	20 e2       	ldi	r18, 0x20	; 32
     74c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <MAX7219_printNum>
     750:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	6d e0       	ldi	r22, 0x0D	; 13
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
     75c:	08 95       	ret
	  }
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     75e:	84 e1       	ldi	r24, 0x14	; 20
     760:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes > 0) {
     764:	60 91 36 01 	lds	r22, 0x0136
     768:	66 23       	and	r22, r22
     76a:	19 f1       	breq	.+70     	; 0x7b2 <run_set_brightnes+0xd8>
	    brightnes--;
     76c:	61 50       	subi	r22, 0x01	; 1
     76e:	19 c0       	rjmp	.+50     	; 0x7a2 <run_set_brightnes+0xc8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     770:	80 93 34 01 	sts	0x0134, r24
	  save_brightnes(brightnes);
     774:	80 91 36 01 	lds	r24, 0x0136
     778:	0e 94 df 02 	call	0x5be	; 0x5be <save_brightnes>
      MAX7219_clearDisplay();
     77c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     780:	8a ed       	ldi	r24, 0xDA	; 218
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	90 93 3e 01 	sts	0x013E, r25
     788:	80 93 3d 01 	sts	0x013D, r24
      show_menu();
     78c:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
    break;
     790:	08 95       	ret
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     792:	84 e1       	ldi	r24, 0x14	; 20
     794:	80 93 34 01 	sts	0x0134, r24
	  if (brightnes < 15) {
     798:	60 91 36 01 	lds	r22, 0x0136
     79c:	6f 30       	cpi	r22, 0x0F	; 15
     79e:	48 f4       	brcc	.+18     	; 0x7b2 <run_set_brightnes+0xd8>
	    brightnes++;
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	60 93 36 01 	sts	0x0136, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
     7ac:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     7ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     7b2:	08 95       	ret

000007b4 <run_menu>:
    break;
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
     7b4:	1f 93       	push	r17
  switch(event) {
     7b6:	8e 31       	cpi	r24, 0x1E	; 30
     7b8:	09 f4       	brne	.+2      	; 0x7bc <run_menu+0x8>
     7ba:	bb c0       	rjmp	.+374    	; 0x932 <__stack+0x33>
     7bc:	8f 31       	cpi	r24, 0x1F	; 31
     7be:	30 f4       	brcc	.+12     	; 0x7cc <run_menu+0x18>
     7c0:	8a 30       	cpi	r24, 0x0A	; 10
     7c2:	81 f1       	breq	.+96     	; 0x824 <run_menu+0x70>
     7c4:	84 31       	cpi	r24, 0x14	; 20
     7c6:	09 f0       	breq	.+2      	; 0x7ca <run_menu+0x16>
     7c8:	c9 c0       	rjmp	.+402    	; 0x95c <__stack+0x5d>
     7ca:	40 c0       	rjmp	.+128    	; 0x84c <run_menu+0x98>
     7cc:	89 36       	cpi	r24, 0x69	; 105
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <run_menu+0x1e>
     7d0:	78 c0       	rjmp	.+240    	; 0x8c2 <run_menu+0x10e>
     7d2:	89 3c       	cpi	r24, 0xC9	; 201
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <run_menu+0x24>
     7d6:	c2 c0       	rjmp	.+388    	; 0x95c <__stack+0x5d>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 91 32 01 	lds	r25, 0x0132
     7de:	91 11       	cpse	r25, r1
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     7e6:	80 91 34 01 	lds	r24, 0x0134
     7ea:	88 23       	and	r24, r24
     7ec:	21 f0       	breq	.+8      	; 0x7f6 <run_menu+0x42>
     7ee:	81 50       	subi	r24, 0x01	; 1
     7f0:	80 93 34 01 	sts	0x0134, r24
     7f4:	0f c0       	rjmp	.+30     	; 0x814 <run_menu+0x60>
        BEEPER_TICK(); 
     7f6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f8:	8f e3       	ldi	r24, 0x3F	; 63
     7fa:	9c e9       	ldi	r25, 0x9C	; 156
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <run_menu+0x48>
     800:	00 c0       	rjmp	.+0      	; 0x802 <run_menu+0x4e>
     802:	00 00       	nop
     804:	40 98       	cbi	0x08, 0	; 8
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     806:	89 e6       	ldi	r24, 0x69	; 105
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     814:	80 91 b3 01 	lds	r24, 0x01B3
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	f1 f1       	breq	.+124    	; 0x898 <run_menu+0xe4>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	6d e0       	ldi	r22, 0x0D	; 13
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	11 c0       	rjmp	.+34     	; 0x846 <run_menu+0x92>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     824:	84 e1       	ldi	r24, 0x14	; 20
     826:	80 93 34 01 	sts	0x0134, r24
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     82a:	80 91 b3 01 	lds	r24, 0x01B3
     82e:	88 23       	and	r24, r24
     830:	11 f0       	breq	.+4      	; 0x836 <run_menu+0x82>
     832:	81 50       	subi	r24, 0x01	; 1
     834:	01 c0       	rjmp	.+2      	; 0x838 <run_menu+0x84>
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	80 93 b3 01 	sts	0x01B3, r24
	  show_menu();
     83c:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
      MAX7219_printStr(5, "    ");
     840:	85 e0       	ldi	r24, 0x05	; 5
     842:	68 e0       	ldi	r22, 0x08	; 8
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
    break;
     84a:	8a c0       	rjmp	.+276    	; 0x960 <__stack+0x61>
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     84c:	80 93 34 01 	sts	0x0134, r24
	  n_edit = 0;
     850:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     854:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
	  if (m_menu == MM_D1) {
     858:	80 91 b3 01 	lds	r24, 0x01B3
     85c:	88 23       	and	r24, r24
     85e:	29 f4       	brne	.+10     	; 0x86a <run_menu+0xb6>
		KBD_set_type(0);
     860:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
        SET_STATE(run_set_1);
     864:	8f ec       	ldi	r24, 0xCF	; 207
     866:	96 e0       	ldi	r25, 0x06	; 6
     868:	07 c0       	rjmp	.+14     	; 0x878 <run_menu+0xc4>
	  } else if (m_menu == MM_D2) {
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	51 f4       	brne	.+20     	; 0x882 <run_menu+0xce>
		KBD_set_type(0);
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
        SET_STATE(run_set_2);
     874:	87 ed       	ldi	r24, 0xD7	; 215
     876:	95 e0       	ldi	r25, 0x05	; 5
     878:	90 93 3e 01 	sts	0x013E, r25
     87c:	80 93 3d 01 	sts	0x013D, r24
     880:	6f c0       	rjmp	.+222    	; 0x960 <__stack+0x61>
	  } else if (m_menu == MM_BRIGHTNES) {
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	91 f4       	brne	.+36     	; 0x8aa <run_menu+0xf6>
		KBD_set_type(1);
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
        SET_STATE(run_set_brightnes);
     88c:	8d e6       	ldi	r24, 0x6D	; 109
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	90 93 3e 01 	sts	0x013E, r25
     894:	80 93 3d 01 	sts	0x013D, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     898:	60 91 36 01 	lds	r22, 0x0136
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	42 e0       	ldi	r20, 0x02	; 2
     8a2:	20 e2       	ldi	r18, 0x20	; 32
     8a4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <MAX7219_printNum>
     8a8:	5b c0       	rjmp	.+182    	; 0x960 <__stack+0x61>
	  } else if (m_menu == MM_END) {
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <run_menu+0xfc>
     8ae:	58 c0       	rjmp	.+176    	; 0x960 <__stack+0x61>
		KBD_set_type(1);
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
        RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     8b6:	89 e6       	ldi	r24, 0x69	; 105
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	35 c0       	rjmp	.+106    	; 0x92c <__stack+0x2d>
	  }
    break;
    case EVENT_EXIT_MENU:
      MAX7219_clearDisplay();
     8c2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
	  chanel = 1;
     8c6:	11 e0       	ldi	r17, 0x01	; 1
     8c8:	10 93 3b 01 	sts	0x013B, r17
	  if (ds18x20GetTemp(1) < temps[0][0]) status[0] = T_OTSLED_MAX; else status[0] = T_OTSLED_MIN;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
     8d2:	20 91 a9 01 	lds	r18, 0x01A9
     8d6:	30 91 aa 01 	lds	r19, 0x01AA
     8da:	82 17       	cp	r24, r18
     8dc:	93 07       	cpc	r25, r19
     8de:	1c f4       	brge	.+6      	; 0x8e6 <run_menu+0x132>
     8e0:	10 93 39 01 	sts	0x0139, r17
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <run_menu+0x136>
     8e6:	10 92 39 01 	sts	0x0139, r1
	  if (ds18x20GetTemp(2) < temps[1][0]) status[1] = T_OTSLED_MAX; else status[1] = T_OTSLED_MIN;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
     8f0:	20 91 ad 01 	lds	r18, 0x01AD
     8f4:	30 91 ae 01 	lds	r19, 0x01AE
     8f8:	82 17       	cp	r24, r18
     8fa:	93 07       	cpc	r25, r19
     8fc:	24 f4       	brge	.+8      	; 0x906 <__stack+0x7>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 3a 01 	sts	0x013A, r24
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
     906:	10 92 3a 01 	sts	0x013A, r1
      check_temp(1);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      check_temp(2);
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	0e 94 c7 00 	call	0x18e	; 0x18e <check_temp>
      SET_STATE(run_main);
     916:	82 eb       	ldi	r24, 0xB2	; 178
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	90 93 3e 01 	sts	0x013E, r25
     91e:	80 93 3d 01 	sts	0x013D, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	40 ed       	ldi	r20, 0xD0	; 208
     92a:	57 e0       	ldi	r21, 0x07	; 7
     92c:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    break;
     930:	17 c0       	rjmp	.+46     	; 0x960 <__stack+0x61>
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     932:	84 e1       	ldi	r24, 0x14	; 20
     934:	80 93 34 01 	sts	0x0134, r24
      MAX7219_printStr(5, "    ");
     938:	85 e0       	ldi	r24, 0x05	; 5
     93a:	68 e0       	ldi	r22, 0x08	; 8
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     942:	80 91 b3 01 	lds	r24, 0x01B3
     946:	83 30       	cpi	r24, 0x03	; 3
     948:	20 f4       	brcc	.+8      	; 0x952 <__stack+0x53>
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 b3 01 	sts	0x01B3, r24
     950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
     952:	10 92 b3 01 	sts	0x01B3, r1
	  show_menu();
     956:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
    break;
     95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
	default:
	  events_default(event);
     95c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     960:	1f 91       	pop	r17
     962:	08 95       	ret

00000964 <run_main>:
    }
  }
}
//=============================================================================
void run_main(unsigned char event)
{
     964:	df 93       	push	r29
     966:	cf 93       	push	r28
     968:	0f 92       	push	r0
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
  switch(event) {
     96e:	84 31       	cpi	r24, 0x14	; 20
     970:	09 f4       	brne	.+2      	; 0x974 <run_main+0x10>
     972:	82 c0       	rjmp	.+260    	; 0xa78 <run_main+0x114>
     974:	85 31       	cpi	r24, 0x15	; 21
     976:	20 f4       	brcc	.+8      	; 0x980 <run_main+0x1c>
     978:	8a 30       	cpi	r24, 0x0A	; 10
     97a:	09 f0       	breq	.+2      	; 0x97e <run_main+0x1a>
     97c:	90 c0       	rjmp	.+288    	; 0xa9e <run_main+0x13a>
     97e:	5f c0       	rjmp	.+190    	; 0xa3e <run_main+0xda>
     980:	8e 31       	cpi	r24, 0x1E	; 30
     982:	09 f4       	brne	.+2      	; 0x986 <run_main+0x22>
     984:	5c c0       	rjmp	.+184    	; 0xa3e <run_main+0xda>
     986:	88 36       	cpi	r24, 0x68	; 104
     988:	09 f0       	breq	.+2      	; 0x98c <run_main+0x28>
     98a:	89 c0       	rjmp	.+274    	; 0xa9e <run_main+0x13a>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     98c:	80 91 3b 01 	lds	r24, 0x013B
     990:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	e1 f5       	brne	.+120    	; 0xa10 <run_main+0xac>
	    MAX7219_printChar(3, 'd');
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	64 e6       	ldi	r22, 0x64	; 100
     99c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     9a0:	60 91 3b 01 	lds	r22, 0x013B
     9a4:	60 5d       	subi	r22, 0xD0	; 208
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     9ac:	80 91 3b 01 	lds	r24, 0x013B
     9b0:	0e 94 9d 0c 	call	0x193a	; 0x193a <ds18x20GetTemp>
     9b4:	bc 01       	movw	r22, r24
     9b6:	85 e0       	ldi	r24, 0x05	; 5
     9b8:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     9bc:	e0 91 3b 01 	lds	r30, 0x013B
     9c0:	e3 30       	cpi	r30, 0x03	; 3
     9c2:	a8 f4       	brcc	.+42     	; 0x9ee <run_main+0x8a>
		  if (types[chanel - 1]) {
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	ea 5c       	subi	r30, 0xCA	; 202
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	80 81       	ld	r24, Z
     9cc:	88 23       	and	r24, r24
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <run_main+0x72>
	        MAX7219_printChar(1, 'H');
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	68 e4       	ldi	r22, 0x48	; 72
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <run_main+0x76>
		  } else {
	        MAX7219_printChar(1, 'F');
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	66 e4       	ldi	r22, 0x46	; 70
     9da:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
		  }
          MAX7219_setCommaPos(1, outs[chanel - 1]);
     9de:	e0 91 3b 01 	lds	r30, 0x013B
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	e0 55       	subi	r30, 0x50	; 80
     9e6:	fe 4f       	sbci	r31, 0xFE	; 254
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	60 81       	ld	r22, Z
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <run_main+0x96>
		} else {
	      MAX7219_printChar(1, ' ');
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	60 e2       	ldi	r22, 0x20	; 32
     9f2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     9fe:	87 e0       	ldi	r24, 0x07	; 7
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     a06:	84 e0       	ldi	r24, 0x04	; 4
     a08:	60 91 a7 01 	lds	r22, 0x01A7
     a0c:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
	  }
      if (!one_sensor_flag) {
     a10:	80 91 a7 01 	lds	r24, 0x01A7
     a14:	88 23       	and	r24, r24
     a16:	49 f4       	brne	.+18     	; 0xa2a <run_main+0xc6>
        if (chanel < 4) {
     a18:	80 91 3b 01 	lds	r24, 0x013B
     a1c:	84 30       	cpi	r24, 0x04	; 4
     a1e:	10 f4       	brcc	.+4      	; 0xa24 <run_main+0xc0>
          chanel++; 
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <run_main+0xc2>
	    } else { 
	      chanel = 1;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 3b 01 	sts	0x013B, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     a2a:	80 91 3b 01 	lds	r24, 0x013B
     a2e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <ds18x20GetDevCount>
     a32:	88 23       	and	r24, r24
     a34:	c9 f0       	breq	.+50     	; 0xa68 <run_main+0x104>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     a36:	88 e6       	ldi	r24, 0x68	; 104
     a38:	60 ed       	ldi	r22, 0xD0	; 208
     a3a:	77 e0       	ldi	r23, 0x07	; 7
     a3c:	18 c0       	rjmp	.+48     	; 0xa6e <run_main+0x10a>
	  }
    break;
    case EVENT_KEY_MINUS:
    case EVENT_KEY_PLUS:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     a3e:	88 e6       	ldi	r24, 0x68	; 104
     a40:	0e 94 32 09 	call	0x1264	; 0x1264 <RTOS_deleteTask>
      one_sensor_flag = !one_sensor_flag;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 91 a7 01 	lds	r25, 0x01A7
     a4a:	91 11       	cpse	r25, r1
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	80 93 a7 01 	sts	0x01A7, r24
	  if (one_sensor_flag) {
     a52:	88 23       	and	r24, r24
     a54:	49 f0       	breq	.+18     	; 0xa68 <run_main+0x104>
	    if (chanel > 1) chanel--; else chanel = 4;
     a56:	80 91 3b 01 	lds	r24, 0x013B
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <run_main+0xfe>
     a5e:	81 50       	subi	r24, 0x01	; 1
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <run_main+0x100>
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	80 93 3b 01 	sts	0x013B, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     a68:	88 e6       	ldi	r24, 0x68	; 104
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    break;
     a76:	15 c0       	rjmp	.+42     	; 0xaa2 <run_main+0x13e>
    case EVENT_KEY_SET:
	  m_menu = MM_D1;
     a78:	10 92 b3 01 	sts	0x01B3, r1
	  n_edit = 0;
     a7c:	10 92 b4 01 	sts	0x01B4, r1
      MAX7219_clearDisplay();
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     a86:	2a ed       	ldi	r18, 0xDA	; 218
     a88:	33 e0       	ldi	r19, 0x03	; 3
     a8a:	30 93 3e 01 	sts	0x013E, r19
     a8e:	20 93 3d 01 	sts	0x013D, r18
      wait_menu = WAIT_MENU_TIME;
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	80 93 34 01 	sts	0x0134, r24
	  show_menu();
     a98:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
    break;
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <run_main+0x13e>
	default:
	  events_default(event);
     a9e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
    break;
  }    
}
     aa2:	0f 90       	pop	r0
     aa4:	cf 91       	pop	r28
     aa6:	df 91       	pop	r29
     aa8:	08 95       	ret

00000aaa <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     aaa:	1f 93       	push	r17
     aac:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     aae:	80 91 b4 01 	lds	r24, 0x01B4
     ab2:	88 23       	and	r24, r24
     ab4:	61 f5       	brne	.+88     	; 0xb0e <show_set_temp+0x64>
    if (blink05) {
     ab6:	80 91 33 01 	lds	r24, 0x0133
     aba:	88 23       	and	r24, r24
     abc:	91 f0       	breq	.+36     	; 0xae2 <show_set_temp+0x38>
      print_temperature(1, temps[temp][0]);
     abe:	e1 2f       	mov	r30, r17
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	e7 55       	subi	r30, 0x57	; 87
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	60 81       	ld	r22, Z
     ad0:	71 81       	ldd	r23, Z+1	; 0x01
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <show_set_temp+0x42>
    } else {
      MAX7219_printStr(1, "    ");
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	68 e0       	ldi	r22, 0x08	; 8
     ae6:	71 e0       	ldi	r23, 0x01	; 1
     ae8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     aec:	e1 2f       	mov	r30, r17
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	e7 55       	subi	r30, 0x57	; 87
     afa:	fe 4f       	sbci	r31, 0xFE	; 254
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	85 e0       	ldi	r24, 0x05	; 5
     b02:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     b0e:	80 91 b4 01 	lds	r24, 0x01B4
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	61 f5       	brne	.+88     	; 0xb6e <show_set_temp+0xc4>
    if (blink05) {
     b16:	80 91 33 01 	lds	r24, 0x0133
     b1a:	88 23       	and	r24, r24
     b1c:	91 f0       	breq	.+36     	; 0xb42 <show_set_temp+0x98>
      print_temperature(5, temps[temp][1]);
     b1e:	e1 2f       	mov	r30, r17
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	e7 55       	subi	r30, 0x57	; 87
     b2c:	fe 4f       	sbci	r31, 0xFE	; 254
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     b38:	87 e0       	ldi	r24, 0x07	; 7
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <show_set_temp+0xa2>
    } else {
      MAX7219_printStr(5, "    ");
     b42:	85 e0       	ldi	r24, 0x05	; 5
     b44:	68 e0       	ldi	r22, 0x08	; 8
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     b4c:	e1 2f       	mov	r30, r17
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	e7 55       	subi	r30, 0x57	; 87
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	60 81       	ld	r22, Z
     b5e:	71 81       	ldd	r23, Z+1	; 0x01
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	0e 94 01 0b 	call	0x1602	; 0x1602 <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     b6e:	80 91 b4 01 	lds	r24, 0x01B4
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	d1 f4       	brne	.+52     	; 0xbaa <show_set_temp+0x100>
    MAX7219_printStr(1, "out-");
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	61 e1       	ldi	r22, 0x11	; 17
     b7a:	71 e0       	ldi	r23, 0x01	; 1
     b7c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MAX7219_printStr>
    if (blink05) {
     b80:	80 91 33 01 	lds	r24, 0x0133
     b84:	88 23       	and	r24, r24
     b86:	69 f0       	breq	.+26     	; 0xba2 <show_set_temp+0xf8>
	  if (types[temp]) MAX7219_printChar(5, 'H'); else MAX7219_printChar(5, 'F');
     b88:	e1 2f       	mov	r30, r17
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	e9 5c       	subi	r30, 0xC9	; 201
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	80 81       	ld	r24, Z
     b92:	88 23       	and	r24, r24
     b94:	19 f0       	breq	.+6      	; 0xb9c <show_set_temp+0xf2>
     b96:	85 e0       	ldi	r24, 0x05	; 5
     b98:	68 e4       	ldi	r22, 0x48	; 72
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <show_set_temp+0xfc>
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	66 e4       	ldi	r22, 0x46	; 70
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <show_set_temp+0xfc>
    } else {
	  MAX7219_printChar(5, ' ');
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	60 e2       	ldi	r22, 0x20	; 32
     ba6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <MAX7219_printChar>
	}
  }
}
     baa:	1f 91       	pop	r17
     bac:	08 95       	ret

00000bae <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     bae:	8e 31       	cpi	r24, 0x1E	; 30
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <run_set_2+0x6>
     bb2:	3e c0       	rjmp	.+124    	; 0xc30 <run_set_2+0x82>
     bb4:	8f 31       	cpi	r24, 0x1F	; 31
     bb6:	38 f4       	brcc	.+14     	; 0xbc6 <run_set_2+0x18>
     bb8:	8a 30       	cpi	r24, 0x0A	; 10
     bba:	09 f4       	brne	.+2      	; 0xbbe <run_set_2+0x10>
     bbc:	b8 c0       	rjmp	.+368    	; 0xd2e <run_set_2+0x180>
     bbe:	84 31       	cpi	r24, 0x14	; 20
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <run_set_2+0x16>
     bc2:	ea c0       	rjmp	.+468    	; 0xd98 <run_set_2+0x1ea>
     bc4:	58 c0       	rjmp	.+176    	; 0xc76 <run_set_2+0xc8>
     bc6:	89 3c       	cpi	r24, 0xC9	; 201
     bc8:	31 f0       	breq	.+12     	; 0xbd6 <run_set_2+0x28>
     bca:	8a 3c       	cpi	r24, 0xCA	; 202
     bcc:	49 f1       	breq	.+82     	; 0xc20 <run_set_2+0x72>
     bce:	89 36       	cpi	r24, 0x69	; 105
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <run_set_2+0x26>
     bd2:	e2 c0       	rjmp	.+452    	; 0xd98 <run_set_2+0x1ea>
     bd4:	6d c0       	rjmp	.+218    	; 0xcb0 <run_set_2+0x102>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 91 32 01 	lds	r25, 0x0132
     bdc:	91 11       	cpse	r25, r1
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     be4:	80 91 34 01 	lds	r24, 0x0134
     be8:	88 23       	and	r24, r24
     bea:	21 f0       	breq	.+8      	; 0xbf4 <run_set_2+0x46>
     bec:	81 50       	subi	r24, 0x01	; 1
     bee:	80 93 34 01 	sts	0x0134, r24
     bf2:	08 95       	ret
        BEEPER_TICK(); 
     bf4:	40 9a       	sbi	0x08, 0	; 8
     bf6:	8f e3       	ldi	r24, 0x3F	; 63
     bf8:	9c e9       	ldi	r25, 0x9C	; 156
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <run_set_2+0x4c>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <run_set_2+0x52>
     c00:	00 00       	nop
     c02:	40 98       	cbi	0x08, 0	; 8
	    KBD_set_type(1);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
        MAX7219_clearDisplay();
     c0a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     c0e:	8a ed       	ldi	r24, 0xDA	; 218
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	90 93 3e 01 	sts	0x013E, r25
     c16:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     c1a:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     c1e:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 91 33 01 	lds	r25, 0x0133
     c26:	91 11       	cpse	r25, r1
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	80 93 33 01 	sts	0x0133, r24
     c2e:	b0 c0       	rjmp	.+352    	; 0xd90 <run_set_2+0x1e2>
	  show_set_temp(1);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     c30:	84 e1       	ldi	r24, 0x14	; 20
     c32:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     c3c:	80 91 b4 01 	lds	r24, 0x01B4
     c40:	88 23       	and	r24, r24
     c42:	59 f4       	brne	.+22     	; 0xc5a <run_set_2+0xac>
        if (temps[1][0] > -550) {
     c44:	80 91 ad 01 	lds	r24, 0x01AD
     c48:	90 91 ae 01 	lds	r25, 0x01AE
     c4c:	2d ef       	ldi	r18, 0xFD	; 253
     c4e:	8b 3d       	cpi	r24, 0xDB	; 219
     c50:	92 07       	cpc	r25, r18
     c52:	0c f4       	brge	.+2      	; 0xc56 <run_set_2+0xa8>
     c54:	9d c0       	rjmp	.+314    	; 0xd90 <run_set_2+0x1e2>
		  temps[1][0]--;
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	7d c0       	rjmp	.+250    	; 0xd54 <run_set_2+0x1a6>
		}
	  }
	  if (n_edit == 1) {
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	09 f0       	breq	.+2      	; 0xc60 <run_set_2+0xb2>
     c5e:	8f c0       	rjmp	.+286    	; 0xd7e <run_set_2+0x1d0>
        if (temps[1][1] > -550) {
     c60:	80 91 af 01 	lds	r24, 0x01AF
     c64:	90 91 b0 01 	lds	r25, 0x01B0
     c68:	2d ef       	ldi	r18, 0xFD	; 253
     c6a:	8b 3d       	cpi	r24, 0xDB	; 219
     c6c:	92 07       	cpc	r25, r18
     c6e:	0c f4       	brge	.+2      	; 0xc72 <run_set_2+0xc4>
     c70:	8f c0       	rjmp	.+286    	; 0xd90 <run_set_2+0x1e2>
		  temps[1][1]--;
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	7f c0       	rjmp	.+254    	; 0xd74 <run_set_2+0x1c6>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     c76:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     c7a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     c7e:	80 91 b4 01 	lds	r24, 0x01B4
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	20 f4       	brcc	.+8      	; 0xc8e <run_set_2+0xe0>
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 b4 01 	sts	0x01B4, r24
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <run_set_2+0xee>
     c8e:	89 e6       	ldi	r24, 0x69	; 105
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     c9c:	80 91 b4 01 	lds	r24, 0x01B4
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	11 f4       	brne	.+4      	; 0xca8 <run_set_2+0xfa>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <run_set_2+0xfc>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
     cae:	70 c0       	rjmp	.+224    	; 0xd90 <run_set_2+0x1e2>
	  show_set_temp(1);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     cb0:	84 e1       	ldi	r24, 0x14	; 20
     cb2:	80 93 34 01 	sts	0x0134, r24
	  if (temps[1][0] > temps[1][1]) {
     cb6:	20 91 ad 01 	lds	r18, 0x01AD
     cba:	30 91 ae 01 	lds	r19, 0x01AE
     cbe:	80 91 af 01 	lds	r24, 0x01AF
     cc2:	90 91 b0 01 	lds	r25, 0x01B0
     cc6:	82 17       	cp	r24, r18
     cc8:	93 07       	cpc	r25, r19
     cca:	f4 f4       	brge	.+60     	; 0xd08 <run_set_2+0x15a>
        MAX7219_clearDisplay();
     ccc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     cd0:	8a ed       	ldi	r24, 0xDA	; 218
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	90 93 3e 01 	sts	0x013E, r25
     cd8:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_2(temps[1][0]);
     cdc:	80 91 ad 01 	lds	r24, 0x01AD
     ce0:	90 91 ae 01 	lds	r25, 0x01AE
     ce4:	0e 94 a9 02 	call	0x552	; 0x552 <save_max_temp_2>
        save_min_temp_2(temps[1][1]);
     ce8:	80 91 af 01 	lds	r24, 0x01AF
     cec:	90 91 b0 01 	lds	r25, 0x01B0
     cf0:	0e 94 b5 02 	call	0x56a	; 0x56a <save_min_temp_2>
	    save_type_2(types[1]);
     cf4:	80 91 38 01 	lds	r24, 0x0138
     cf8:	0e 94 02 03 	call	0x604	; 0x604 <save_type_2>
        show_menu();
     cfc:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
	    KBD_set_type(1);
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
     d06:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     d08:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     d0c:	8e e1       	ldi	r24, 0x1E	; 30
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	90 93 3e 01 	sts	0x013E, r25
     d14:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     d1e:	8a ec       	ldi	r24, 0xCA	; 202
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	44 ef       	ldi	r20, 0xF4	; 244
     d26:	51 e0       	ldi	r21, 0x01	; 1
     d28:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
     d2c:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     d2e:	84 e1       	ldi	r24, 0x14	; 20
     d30:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     d3a:	80 91 b4 01 	lds	r24, 0x01B4
     d3e:	88 23       	and	r24, r24
     d40:	71 f4       	brne	.+28     	; 0xd5e <run_set_2+0x1b0>
        if (temps[1][0] < 790) {
     d42:	80 91 ad 01 	lds	r24, 0x01AD
     d46:	90 91 ae 01 	lds	r25, 0x01AE
     d4a:	23 e0       	ldi	r18, 0x03	; 3
     d4c:	86 31       	cpi	r24, 0x16	; 22
     d4e:	92 07       	cpc	r25, r18
     d50:	fc f4       	brge	.+62     	; 0xd90 <run_set_2+0x1e2>
		  temps[1][0]++;
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	90 93 ae 01 	sts	0x01AE, r25
     d58:	80 93 ad 01 	sts	0x01AD, r24
     d5c:	19 c0       	rjmp	.+50     	; 0xd90 <run_set_2+0x1e2>
		}
	  }
	  if (n_edit == 1) {
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	71 f4       	brne	.+28     	; 0xd7e <run_set_2+0x1d0>
        if (temps[1][1] < 790) {
     d62:	80 91 af 01 	lds	r24, 0x01AF
     d66:	90 91 b0 01 	lds	r25, 0x01B0
     d6a:	23 e0       	ldi	r18, 0x03	; 3
     d6c:	86 31       	cpi	r24, 0x16	; 22
     d6e:	92 07       	cpc	r25, r18
     d70:	7c f4       	brge	.+30     	; 0xd90 <run_set_2+0x1e2>
		  temps[1][1]++;
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	90 93 b0 01 	sts	0x01B0, r25
     d78:	80 93 af 01 	sts	0x01AF, r24
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <run_set_2+0x1e2>
		}
	  }
	  if (n_edit == 2) {
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	39 f4       	brne	.+14     	; 0xd90 <run_set_2+0x1e2>
        types[1] = !types[1];
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 91 38 01 	lds	r25, 0x0138
     d88:	91 11       	cpse	r25, r1
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	80 93 38 01 	sts	0x0138, r24
	  }
	  show_set_temp(1);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 55 05 	call	0xaaa	; 0xaaa <show_set_temp>
    break;
     d96:	08 95       	ret
	default:
	  events_default(event);
     d98:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     d9c:	08 95       	ret

00000d9e <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     d9e:	8e 31       	cpi	r24, 0x1E	; 30
     da0:	09 f4       	brne	.+2      	; 0xda4 <run_set_1+0x6>
     da2:	3e c0       	rjmp	.+124    	; 0xe20 <run_set_1+0x82>
     da4:	8f 31       	cpi	r24, 0x1F	; 31
     da6:	38 f4       	brcc	.+14     	; 0xdb6 <run_set_1+0x18>
     da8:	8a 30       	cpi	r24, 0x0A	; 10
     daa:	09 f4       	brne	.+2      	; 0xdae <run_set_1+0x10>
     dac:	b8 c0       	rjmp	.+368    	; 0xf1e <run_set_1+0x180>
     dae:	84 31       	cpi	r24, 0x14	; 20
     db0:	09 f0       	breq	.+2      	; 0xdb4 <run_set_1+0x16>
     db2:	ea c0       	rjmp	.+468    	; 0xf88 <run_set_1+0x1ea>
     db4:	58 c0       	rjmp	.+176    	; 0xe66 <run_set_1+0xc8>
     db6:	89 3c       	cpi	r24, 0xC9	; 201
     db8:	31 f0       	breq	.+12     	; 0xdc6 <run_set_1+0x28>
     dba:	8a 3c       	cpi	r24, 0xCA	; 202
     dbc:	49 f1       	breq	.+82     	; 0xe10 <run_set_1+0x72>
     dbe:	89 36       	cpi	r24, 0x69	; 105
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <run_set_1+0x26>
     dc2:	e2 c0       	rjmp	.+452    	; 0xf88 <run_set_1+0x1ea>
     dc4:	6d c0       	rjmp	.+218    	; 0xea0 <run_set_1+0x102>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 91 32 01 	lds	r25, 0x0132
     dcc:	91 11       	cpse	r25, r1
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	80 93 32 01 	sts	0x0132, r24
	  if (wait_menu > 0) wait_menu--; else {
     dd4:	80 91 34 01 	lds	r24, 0x0134
     dd8:	88 23       	and	r24, r24
     dda:	21 f0       	breq	.+8      	; 0xde4 <run_set_1+0x46>
     ddc:	81 50       	subi	r24, 0x01	; 1
     dde:	80 93 34 01 	sts	0x0134, r24
     de2:	08 95       	ret
        BEEPER_TICK(); 
     de4:	40 9a       	sbi	0x08, 0	; 8
     de6:	8f e3       	ldi	r24, 0x3F	; 63
     de8:	9c e9       	ldi	r25, 0x9C	; 156
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <run_set_1+0x4c>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <run_set_1+0x52>
     df0:	00 00       	nop
     df2:	40 98       	cbi	0x08, 0	; 8
	    KBD_set_type(1);
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
        MAX7219_clearDisplay();
     dfa:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     dfe:	8a ed       	ldi	r24, 0xDA	; 218
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	90 93 3e 01 	sts	0x013E, r25
     e06:	80 93 3d 01 	sts	0x013D, r24
	    show_menu();
     e0a:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
     e0e:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 91 33 01 	lds	r25, 0x0133
     e16:	91 11       	cpse	r25, r1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	80 93 33 01 	sts	0x0133, r24
     e1e:	b0 c0       	rjmp	.+352    	; 0xf80 <run_set_1+0x1e2>
	  show_set_temp(0);
    break;
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     e20:	84 e1       	ldi	r24, 0x14	; 20
     e22:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     e2c:	80 91 b4 01 	lds	r24, 0x01B4
     e30:	88 23       	and	r24, r24
     e32:	59 f4       	brne	.+22     	; 0xe4a <run_set_1+0xac>
        if (temps[0][0] > -550) {
     e34:	80 91 a9 01 	lds	r24, 0x01A9
     e38:	90 91 aa 01 	lds	r25, 0x01AA
     e3c:	2d ef       	ldi	r18, 0xFD	; 253
     e3e:	8b 3d       	cpi	r24, 0xDB	; 219
     e40:	92 07       	cpc	r25, r18
     e42:	0c f4       	brge	.+2      	; 0xe46 <run_set_1+0xa8>
     e44:	9d c0       	rjmp	.+314    	; 0xf80 <run_set_1+0x1e2>
		  temps[0][0]--;
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	7d c0       	rjmp	.+250    	; 0xf44 <run_set_1+0x1a6>
		}
	  }
	  if (n_edit == 1) {
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <run_set_1+0xb2>
     e4e:	8f c0       	rjmp	.+286    	; 0xf6e <run_set_1+0x1d0>
        if (temps[0][1] > -550) {
     e50:	80 91 ab 01 	lds	r24, 0x01AB
     e54:	90 91 ac 01 	lds	r25, 0x01AC
     e58:	2d ef       	ldi	r18, 0xFD	; 253
     e5a:	8b 3d       	cpi	r24, 0xDB	; 219
     e5c:	92 07       	cpc	r25, r18
     e5e:	0c f4       	brge	.+2      	; 0xe62 <run_set_1+0xc4>
     e60:	8f c0       	rjmp	.+286    	; 0xf80 <run_set_1+0x1e2>
		  temps[0][1]--;
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	7f c0       	rjmp	.+254    	; 0xf64 <run_set_1+0x1c6>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     e66:	80 93 34 01 	sts	0x0134, r24
      MAX7219_clearDisplay();
     e6a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else RTOS_setTask(EVENT_EXIT_MENU, 0, 0); 
     e6e:	80 91 b4 01 	lds	r24, 0x01B4
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	20 f4       	brcc	.+8      	; 0xe7e <run_set_1+0xe0>
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	80 93 b4 01 	sts	0x01B4, r24
     e7c:	07 c0       	rjmp	.+14     	; 0xe8c <run_set_1+0xee>
     e7e:	89 e6       	ldi	r24, 0x69	; 105
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
	  if (n_edit == 2) KBD_set_type(1); else KBD_set_type(0);
     e8c:	80 91 b4 01 	lds	r24, 0x01B4
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	11 f4       	brne	.+4      	; 0xe98 <run_set_1+0xfa>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <run_set_1+0xfc>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
     e9e:	70 c0       	rjmp	.+224    	; 0xf80 <run_set_1+0x1e2>
	  show_set_temp(0);
    break;
    case EVENT_EXIT_MENU:
      wait_menu = WAIT_MENU_TIME;
     ea0:	84 e1       	ldi	r24, 0x14	; 20
     ea2:	80 93 34 01 	sts	0x0134, r24
	  if (temps[0][0] > temps[0][1]) {
     ea6:	20 91 a9 01 	lds	r18, 0x01A9
     eaa:	30 91 aa 01 	lds	r19, 0x01AA
     eae:	80 91 ab 01 	lds	r24, 0x01AB
     eb2:	90 91 ac 01 	lds	r25, 0x01AC
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	f4 f4       	brge	.+60     	; 0xef8 <run_set_1+0x15a>
        MAX7219_clearDisplay();
     ebc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     ec0:	8a ed       	ldi	r24, 0xDA	; 218
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	90 93 3e 01 	sts	0x013E, r25
     ec8:	80 93 3d 01 	sts	0x013D, r24
        save_max_temp_1(temps[0][0]);
     ecc:	80 91 a9 01 	lds	r24, 0x01A9
     ed0:	90 91 aa 01 	lds	r25, 0x01AA
     ed4:	0e 94 a3 02 	call	0x546	; 0x546 <save_max_temp_1>
        save_min_temp_1(temps[0][1]);
     ed8:	80 91 ab 01 	lds	r24, 0x01AB
     edc:	90 91 ac 01 	lds	r25, 0x01AC
     ee0:	0e 94 af 02 	call	0x55e	; 0x55e <save_min_temp_1>
	    save_type_1(types[0]);
     ee4:	80 91 37 01 	lds	r24, 0x0137
     ee8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <save_type_1>
        show_menu();
     eec:	0e 94 11 03 	call	0x622	; 0x622 <show_menu>
	    KBD_set_type(1);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <KBD_set_type>
     ef6:	08 95       	ret
	  } else {
        MAX7219_clearDisplay();
     ef8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
        SET_STATE(run_error);
     efc:	8e e1       	ldi	r24, 0x1E	; 30
     efe:	93 e0       	ldi	r25, 0x03	; 3
     f00:	90 93 3e 01 	sts	0x013E, r25
     f04:	80 93 3d 01 	sts	0x013D, r24
        error_cnt = ERROR_TIME;
     f08:	85 e0       	ldi	r24, 0x05	; 5
     f0a:	80 93 35 01 	sts	0x0135, r24
        RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); 
     f0e:	8a ec       	ldi	r24, 0xCA	; 202
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	44 ef       	ldi	r20, 0xF4	; 244
     f16:	51 e0       	ldi	r21, 0x01	; 1
     f18:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
     f1c:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     f1e:	84 e1       	ldi	r24, 0x14	; 20
     f20:	80 93 34 01 	sts	0x0134, r24
	  blink05 = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 33 01 	sts	0x0133, r24
	  if (n_edit == 0) {
     f2a:	80 91 b4 01 	lds	r24, 0x01B4
     f2e:	88 23       	and	r24, r24
     f30:	71 f4       	brne	.+28     	; 0xf4e <run_set_1+0x1b0>
        if (temps[0][0] < 790) {
     f32:	80 91 a9 01 	lds	r24, 0x01A9
     f36:	90 91 aa 01 	lds	r25, 0x01AA
     f3a:	23 e0       	ldi	r18, 0x03	; 3
     f3c:	86 31       	cpi	r24, 0x16	; 22
     f3e:	92 07       	cpc	r25, r18
     f40:	fc f4       	brge	.+62     	; 0xf80 <run_set_1+0x1e2>
		  temps[0][0]++;
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	90 93 aa 01 	sts	0x01AA, r25
     f48:	80 93 a9 01 	sts	0x01A9, r24
     f4c:	19 c0       	rjmp	.+50     	; 0xf80 <run_set_1+0x1e2>
		}
	  }
	  if (n_edit == 1) {
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	71 f4       	brne	.+28     	; 0xf6e <run_set_1+0x1d0>
        if (temps[0][1] < 790) {
     f52:	80 91 ab 01 	lds	r24, 0x01AB
     f56:	90 91 ac 01 	lds	r25, 0x01AC
     f5a:	23 e0       	ldi	r18, 0x03	; 3
     f5c:	86 31       	cpi	r24, 0x16	; 22
     f5e:	92 07       	cpc	r25, r18
     f60:	7c f4       	brge	.+30     	; 0xf80 <run_set_1+0x1e2>
		  temps[0][1]++;
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	90 93 ac 01 	sts	0x01AC, r25
     f68:	80 93 ab 01 	sts	0x01AB, r24
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <run_set_1+0x1e2>
		}
	  }
	  if (n_edit == 2) {
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	39 f4       	brne	.+14     	; 0xf80 <run_set_1+0x1e2>
        types[0] = !types[0];
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 91 37 01 	lds	r25, 0x0137
     f78:	91 11       	cpse	r25, r1
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	80 93 37 01 	sts	0x0137, r24
	  }
	  show_set_temp(0);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 55 05 	call	0xaaa	; 0xaaa <show_set_temp>
    break;
     f86:	08 95       	ret
	default:
	  events_default(event);
     f88:	0e 94 72 01 	call	0x2e4	; 0x2e4 <events_default>
     f8c:	08 95       	ret

00000f8e <KBD_init>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_PLUS) &= ~BUT_PLUS_LINE;
     f8e:	54 98       	cbi	0x0a, 4	; 10
  PORT(BUT_PLUS) |= BUT_PLUS_LINE;
     f90:	5c 9a       	sbi	0x0b, 4	; 11
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     f92:	55 98       	cbi	0x0a, 5	; 10
  PORT(BUT_SET) |= BUT_SET_LINE;
     f94:	5d 9a       	sbi	0x0b, 5	; 11
  DDR(BUT_MINUS) &= ~BUT_MINUS_LINE;
     f96:	56 98       	cbi	0x0a, 6	; 10
  PORT(BUT_MINUS) |= BUT_MINUS_LINE;
     f98:	5e 9a       	sbi	0x0b, 6	; 11
  kbd_type = 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 3c 01 	sts	0x013C, r24
}
     fa0:	08 95       	ret

00000fa2 <KBD_set_type>:
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     fa2:	80 93 3c 01 	sts	0x013C, r24
}
     fa6:	08 95       	ret

00000fa8 <debounce_sw_plus>:
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
     fa8:	80 91 ba 01 	lds	r24, 0x01BA
     fac:	90 91 bb 01 	lds	r25, 0x01BB
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	90 6e       	ori	r25, 0xE0	; 224
     fb6:	21 e0       	ldi	r18, 0x01	; 1
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4c 99       	sbic	0x09, 4	; 9
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <debounce_sw_plus+0x1a>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	82 2b       	or	r24, r18
     fc4:	93 2b       	or	r25, r19
     fc6:	90 93 bb 01 	sts	0x01BB, r25
     fca:	80 93 ba 01 	sts	0x01BA, r24
  if (state1 == 0xF000) return 1;
     fce:	20 ef       	ldi	r18, 0xF0	; 240
     fd0:	80 30       	cpi	r24, 0x00	; 0
     fd2:	92 07       	cpc	r25, r18
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <debounce_sw_plus+0x3a>
  if (state1 == 0xE000) return 2;
     fd6:	20 ee       	ldi	r18, 0xE0	; 224
     fd8:	80 30       	cpi	r24, 0x00	; 0
     fda:	92 07       	cpc	r25, r18
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <debounce_sw_plus+0x3e>
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_plus(void)
{
  static uint16_t state1 = 0; //holds present state
  state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_PLUS), BUT_PLUS_PIN)) | 0xE000;
  if (state1 == 0xF000) return 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	08 95       	ret
  if (state1 == 0xE000) return 2;
  return 0;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
}
     fe8:	08 95       	ret

00000fea <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     fea:	80 91 b8 01 	lds	r24, 0x01B8
     fee:	90 91 b9 01 	lds	r25, 0x01B9
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	90 6e       	ori	r25, 0xE0	; 224
     ff8:	21 e0       	ldi	r18, 0x01	; 1
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	4d 99       	sbic	0x09, 5	; 9
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <debounce_sw_set+0x1a>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	82 2b       	or	r24, r18
    1006:	93 2b       	or	r25, r19
    1008:	90 93 b9 01 	sts	0x01B9, r25
    100c:	80 93 b8 01 	sts	0x01B8, r24
  if (state2 == 0xF000) return 1;
    1010:	20 ef       	ldi	r18, 0xF0	; 240
    1012:	80 30       	cpi	r24, 0x00	; 0
    1014:	92 07       	cpc	r25, r18
    1016:	31 f0       	breq	.+12     	; 0x1024 <debounce_sw_set+0x3a>
  if (state2 == 0xE000) return 2;
    1018:	20 ee       	ldi	r18, 0xE0	; 224
    101a:	80 30       	cpi	r24, 0x00	; 0
    101c:	92 07       	cpc	r25, r18
    101e:	21 f4       	brne	.+8      	; 0x1028 <debounce_sw_set+0x3e>
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_set(void)
{
  static uint16_t state2 = 0; //holds present state
  state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
  if (state2 == 0xF000) return 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	08 95       	ret
  if (state2 == 0xE000) return 2;
  return 0;
    1028:	80 e0       	ldi	r24, 0x00	; 0
}
    102a:	08 95       	ret

0000102c <debounce_sw_minus>:
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
    102c:	80 91 b6 01 	lds	r24, 0x01B6
    1030:	90 91 b7 01 	lds	r25, 0x01B7
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	90 6e       	ori	r25, 0xE0	; 224
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4e 99       	sbic	0x09, 6	; 9
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <debounce_sw_minus+0x1a>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	82 2b       	or	r24, r18
    1048:	93 2b       	or	r25, r19
    104a:	90 93 b7 01 	sts	0x01B7, r25
    104e:	80 93 b6 01 	sts	0x01B6, r24
  if (state3 == 0xF000) return 1;
    1052:	20 ef       	ldi	r18, 0xF0	; 240
    1054:	80 30       	cpi	r24, 0x00	; 0
    1056:	92 07       	cpc	r25, r18
    1058:	31 f0       	breq	.+12     	; 0x1066 <debounce_sw_minus+0x3a>
  if (state3 == 0xE000) return 2;
    105a:	20 ee       	ldi	r18, 0xE0	; 224
    105c:	80 30       	cpi	r24, 0x00	; 0
    105e:	92 07       	cpc	r25, r18
    1060:	21 f4       	brne	.+8      	; 0x106a <debounce_sw_minus+0x3e>
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_minus(void)
{
  static uint16_t state3 = 0; //holds present state
  state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_MINUS), BUT_MINUS_PIN)) | 0xE000;
  if (state3 == 0xF000) return 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	08 95       	ret
  if (state3 == 0xE000) return 2;
  return 0;
    106a:	80 e0       	ldi	r24, 0x00	; 0
}
    106c:	08 95       	ret

0000106e <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
  if (kbd_type == 1) {
    106e:	80 91 3c 01 	lds	r24, 0x013C
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	51 f5       	brne	.+84     	; 0x10ca <KBD_scan+0x5c>
    if (debounce_sw_plus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    1076:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <debounce_sw_plus>
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	79 f4       	brne	.+30     	; 0x109c <KBD_scan+0x2e>
    107e:	40 9a       	sbi	0x08, 0	; 8
    1080:	8f e3       	ldi	r24, 0x3F	; 63
    1082:	9c e9       	ldi	r25, 0x9C	; 156
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <KBD_scan+0x16>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <KBD_scan+0x1c>
    108a:	00 00       	nop
    108c:	40 98       	cbi	0x08, 0	; 8
    108e:	8a e0       	ldi	r24, 0x0A	; 10
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    if (debounce_sw_minus() == 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    109c:	0e 94 16 08 	call	0x102c	; 0x102c <debounce_sw_minus>
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	79 f4       	brne	.+30     	; 0x10c2 <KBD_scan+0x54>
    10a4:	40 9a       	sbi	0x08, 0	; 8
    10a6:	8f e3       	ldi	r24, 0x3F	; 63
    10a8:	9c e9       	ldi	r25, 0x9C	; 156
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <KBD_scan+0x3c>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <KBD_scan+0x42>
    10b0:	00 00       	nop
    10b2:	40 98       	cbi	0x08, 0	; 8
    10b4:	8e e1       	ldi	r24, 0x1E	; 30
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    RTOS_setTask(EVENT_KEY_POLL, 10, 0);         // запускаем сканирование клавиатуры
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	6a e0       	ldi	r22, 0x0A	; 10
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	29 c0       	rjmp	.+82     	; 0x111c <KBD_scan+0xae>
  } else {
    if (debounce_sw_plus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    10ca:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <debounce_sw_plus>
    10ce:	88 23       	and	r24, r24
    10d0:	79 f0       	breq	.+30     	; 0x10f0 <KBD_scan+0x82>
    10d2:	40 9a       	sbi	0x08, 0	; 8
    10d4:	8f e3       	ldi	r24, 0x3F	; 63
    10d6:	9c e9       	ldi	r25, 0x9C	; 156
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <KBD_scan+0x6a>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <KBD_scan+0x70>
    10de:	00 00       	nop
    10e0:	40 98       	cbi	0x08, 0	; 8
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    if (debounce_sw_minus() >= 1) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    10f0:	0e 94 16 08 	call	0x102c	; 0x102c <debounce_sw_minus>
    10f4:	88 23       	and	r24, r24
    10f6:	79 f0       	breq	.+30     	; 0x1116 <KBD_scan+0xa8>
    10f8:	40 9a       	sbi	0x08, 0	; 8
    10fa:	8f e3       	ldi	r24, 0x3F	; 63
    10fc:	9c e9       	ldi	r25, 0x9C	; 156
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <KBD_scan+0x90>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <KBD_scan+0x96>
    1104:	00 00       	nop
    1106:	40 98       	cbi	0x08, 0	; 8
    1108:	8e e1       	ldi	r24, 0x1E	; 30
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    RTOS_setTask(EVENT_KEY_POLL, 50, 0);         // запускаем сканирование клавиатуры
    1116:	88 ec       	ldi	r24, 0xC8	; 200
    1118:	62 e3       	ldi	r22, 0x32	; 50
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
  }
  if (debounce_sw_set() == 1) { 
    1124:	0e 94 f5 07 	call	0xfea	; 0xfea <debounce_sw_set>
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	b1 f4       	brne	.+44     	; 0x1158 <KBD_scan+0xea>
    BEEPER_TICK(); 
    112c:	40 9a       	sbi	0x08, 0	; 8
    112e:	8f e3       	ldi	r24, 0x3F	; 63
    1130:	9c e9       	ldi	r25, 0x9C	; 156
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <KBD_scan+0xc4>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <KBD_scan+0xca>
    1138:	00 00       	nop
    113a:	40 98       	cbi	0x08, 0	; 8
	RTOS_setTask(EVENT_KEY_SET, 0, 0); 
    113c:	84 e1       	ldi	r24, 0x14	; 20
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    RTOS_setTask(EVENT_KEY_POLL, 10, 0);         // запускаем сканирование клавиатуры
    114a:	88 ec       	ldi	r24, 0xC8	; 200
    114c:	6a e0       	ldi	r22, 0x0A	; 10
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	0e 94 bf 08 	call	0x117e	; 0x117e <RTOS_setTask>
    1158:	08 95       	ret

0000115a <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    115a:	e1 eb       	ldi	r30, 0xB1	; 177
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	84 60       	ori	r24, 0x04	; 4
    1162:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    1168:	e0 e7       	ldi	r30, 0x70	; 112
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    1178:	10 92 1d 02 	sts	0x021D, r1
}
    117c:	08 95       	ret

0000117e <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <RTOS_setTask+0x6>
    1182:	6f c0       	rjmp	.+222    	; 0x1262 <RTOS_setTask+0xe4>
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	1b c0       	rjmp	.+54     	; 0x11be <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    1188:	29 2f       	mov	r18, r25
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	f9 01       	movw	r30, r18
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	e2 0f       	add	r30, r18
    1194:	f3 1f       	adc	r31, r19
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	e3 54       	subi	r30, 0x43	; 67
    119c:	fe 4f       	sbci	r31, 0xFE	; 254
    119e:	20 81       	ld	r18, Z
    11a0:	28 17       	cp	r18, r24
    11a2:	61 f4       	brne	.+24     	; 0x11bc <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    11a4:	72 83       	std	Z+2, r23	; 0x02
    11a6:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    11a8:	54 83       	std	Z+4, r21	; 0x04
    11aa:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    11ac:	61 15       	cp	r22, r1
    11ae:	71 05       	cpc	r23, r1
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	85 83       	std	Z+5, r24	; 0x05
    11b6:	08 95       	ret
      } else TaskArray[i].run = 0;   
    11b8:	15 82       	std	Z+5, r1	; 0x05
    11ba:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    11bc:	9f 5f       	subi	r25, 0xFF	; 255
    11be:	20 91 1d 02 	lds	r18, 0x021D
    11c2:	92 17       	cp	r25, r18
    11c4:	08 f3       	brcs	.-62     	; 0x1188 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    11c6:	20 91 1d 02 	lds	r18, 0x021D
    11ca:	20 31       	cpi	r18, 0x10	; 16
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <RTOS_setTask+0x52>
    11ce:	49 c0       	rjmp	.+146    	; 0x1262 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    11d0:	20 91 1d 02 	lds	r18, 0x021D
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	f9 01       	movw	r30, r18
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	e2 0f       	add	r30, r18
    11de:	f3 1f       	adc	r31, r19
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	e3 54       	subi	r30, 0x43	; 67
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    11ea:	20 91 1d 02 	lds	r18, 0x021D
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	f9 01       	movw	r30, r18
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	e3 54       	subi	r30, 0x43	; 67
    1200:	fe 4f       	sbci	r31, 0xFE	; 254
    1202:	72 83       	std	Z+2, r23	; 0x02
    1204:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    1206:	20 91 1d 02 	lds	r18, 0x021D
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	f9 01       	movw	r30, r18
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	e2 0f       	add	r30, r18
    1214:	f3 1f       	adc	r31, r19
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	e3 54       	subi	r30, 0x43	; 67
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	54 83       	std	Z+4, r21	; 0x04
    1220:	43 83       	std	Z+3, r20	; 0x03
    1222:	89 2f       	mov	r24, r25
    1224:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    1226:	61 15       	cp	r22, r1
    1228:	71 05       	cpc	r23, r1
    122a:	61 f4       	brne	.+24     	; 0x1244 <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    122c:	fc 01       	movw	r30, r24
    122e:	ee 0f       	add	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	e8 0f       	add	r30, r24
    1234:	f9 1f       	adc	r31, r25
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	e3 54       	subi	r30, 0x43	; 67
    123c:	fe 4f       	sbci	r31, 0xFE	; 254
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	85 83       	std	Z+5, r24	; 0x05
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    1244:	fc 01       	movw	r30, r24
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	e8 0f       	add	r30, r24
    124c:	f9 1f       	adc	r31, r25
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	e3 54       	subi	r30, 0x43	; 67
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    1258:	80 91 1d 02 	lds	r24, 0x021D
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	80 93 1d 02 	sts	0x021D, r24
    1262:	08 95       	ret

00001264 <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2e c0       	rjmp	.+92     	; 0x12c4 <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    1268:	29 2f       	mov	r18, r25
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	d9 01       	movw	r26, r18
    126e:	aa 0f       	add	r26, r26
    1270:	bb 1f       	adc	r27, r27
    1272:	a2 0f       	add	r26, r18
    1274:	b3 1f       	adc	r27, r19
    1276:	aa 0f       	add	r26, r26
    1278:	bb 1f       	adc	r27, r27
    127a:	a3 54       	subi	r26, 0x43	; 67
    127c:	be 4f       	sbci	r27, 0xFE	; 254
    127e:	4c 91       	ld	r20, X
    1280:	48 17       	cp	r20, r24
    1282:	f9 f4       	brne	.+62     	; 0x12c2 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    1284:	80 91 1d 02 	lds	r24, 0x021D
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	28 17       	cp	r18, r24
    128e:	39 07       	cpc	r19, r25
    1290:	91 f0       	breq	.+36     	; 0x12b6 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1292:	80 91 1d 02 	lds	r24, 0x021D
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	fc 01       	movw	r30, r24
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	e8 0f       	add	r30, r24
    12a2:	f9 1f       	adc	r31, r25
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	e3 54       	subi	r30, 0x43	; 67
    12aa:	fe 4f       	sbci	r31, 0xFE	; 254
    12ac:	86 e0       	ldi	r24, 0x06	; 6
    12ae:	01 90       	ld	r0, Z+
    12b0:	0d 92       	st	X+, r0
    12b2:	81 50       	subi	r24, 0x01	; 1
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    12b6:	80 91 1d 02 	lds	r24, 0x021D
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	80 93 1d 02 	sts	0x021D, r24
      return;
    12c0:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    12c2:	9f 5f       	subi	r25, 0xFF	; 255
    12c4:	20 91 1d 02 	lds	r18, 0x021D
    12c8:	92 17       	cp	r25, r18
    12ca:	70 f2       	brcs	.-100    	; 0x1268 <RTOS_deleteTask+0x4>
    12cc:	08 95       	ret

000012ce <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    12d2:	80 91 bc 01 	lds	r24, 0x01BC
    12d6:	88 23       	and	r24, r24
    12d8:	11 f4       	brne	.+4      	; 0x12de <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	4e c0       	rjmp	.+156    	; 0x137a <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    12de:	10 92 bc 01 	sts	0x01BC, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    12e4:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    12e6:	17 c0       	rjmp	.+46     	; 0x1316 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    12e8:	82 2f       	mov	r24, r18
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	fc 01       	movw	r30, r24
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e8 0f       	add	r30, r24
    12f4:	f9 1f       	adc	r31, r25
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	e3 54       	subi	r30, 0x43	; 67
    12fc:	fe 4f       	sbci	r31, 0xFE	; 254
    12fe:	81 81       	ldd	r24, Z+1	; 0x01
    1300:	92 81       	ldd	r25, Z+2	; 0x02
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	11 f4       	brne	.+4      	; 0x130a <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    1306:	35 83       	std	Z+5, r19	; 0x05
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    130a:	81 81       	ldd	r24, Z+1	; 0x01
    130c:	92 81       	ldd	r25, Z+2	; 0x02
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	92 83       	std	Z+2, r25	; 0x02
    1312:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1314:	2f 5f       	subi	r18, 0xFF	; 255
    1316:	80 91 1d 02 	lds	r24, 0x021D
    131a:	28 17       	cp	r18, r24
    131c:	28 f3       	brcs	.-54     	; 0x12e8 <RTOS_dispatchTask+0x1a>
    131e:	dd cf       	rjmp	.-70     	; 0x12da <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1320:	81 2f       	mov	r24, r17
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	e8 0f       	add	r30, r24
    132c:	f9 1f       	adc	r31, r25
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	e3 54       	subi	r30, 0x43	; 67
    1334:	fe 4f       	sbci	r31, 0xFE	; 254
    1336:	85 81       	ldd	r24, Z+5	; 0x05
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	f1 f4       	brne	.+60     	; 0x1378 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    133c:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    133e:	23 81       	ldd	r18, Z+3	; 0x03
    1340:	34 81       	ldd	r19, Z+4	; 0x04
    1342:	21 15       	cp	r18, r1
    1344:	31 05       	cpc	r19, r1
    1346:	31 f4       	brne	.+12     	; 0x1354 <RTOS_dispatchTask+0x86>
      {  
        cli();
    1348:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    134a:	80 81       	ld	r24, Z
    134c:	0e 94 32 09 	call	0x1264	; 0x1264 <RTOS_deleteTask>
        sei();
    1350:	78 94       	sei
    1352:	0c c0       	rjmp	.+24     	; 0x136c <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    1354:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    1356:	21 81       	ldd	r18, Z+1	; 0x01
    1358:	32 81       	ldd	r19, Z+2	; 0x02
    135a:	21 15       	cp	r18, r1
    135c:	31 05       	cpc	r19, r1
    135e:	31 f4       	brne	.+12     	; 0x136c <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1360:	23 81       	ldd	r18, Z+3	; 0x03
    1362:	34 81       	ldd	r19, Z+4	; 0x04
    1364:	21 50       	subi	r18, 0x01	; 1
    1366:	30 40       	sbci	r19, 0x00	; 0
    1368:	32 83       	std	Z+2, r19	; 0x02
    136a:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    136c:	e0 91 3d 01 	lds	r30, 0x013D
    1370:	f0 91 3e 01 	lds	r31, 0x013E
    1374:	80 2f       	mov	r24, r16
    1376:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    1378:	1f 5f       	subi	r17, 0xFF	; 255
    137a:	80 91 1d 02 	lds	r24, 0x021D
    137e:	18 17       	cp	r17, r24
    1380:	78 f2       	brcs	.-98     	; 0x1320 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    1388:	1f 92       	push	r1
    138a:	0f 92       	push	r0
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	0f 92       	push	r0
    1390:	11 24       	eor	r1, r1
    1392:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    1394:	86 e0       	ldi	r24, 0x06	; 6
    1396:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 bc 01 	sts	0x01BC, r24
}
    13a0:	8f 91       	pop	r24
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	1f 90       	pop	r1
    13aa:	18 95       	reti

000013ac <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    13ac:	80 52       	subi	r24, 0x20	; 32
    13ae:	86 35       	cpi	r24, 0x56	; 86
    13b0:	30 f4       	brcc	.+12     	; 0x13be <MAX7219_lookupCode+0x12>
    13b2:	e8 2f       	mov	r30, r24
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	e1 5b       	subi	r30, 0xB1	; 177
    13b8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ba:	80 81       	ld	r24, Z
    13bc:	08 95       	ret
    13be:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    13c0:	08 95       	ret

000013c2 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    13c2:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    13c4:	87 ff       	sbrs	r24, 7
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    13c8:	43 9a       	sbi	0x08, 3	; 8
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    13cc:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    13ce:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    13d0:	00 00       	nop
	asm("nop");
    13d2:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    13d4:	42 9a       	sbi	0x08, 2	; 8
    13d6:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    13d8:	11 f0       	breq	.+4      	; 0x13de <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    13da:	88 0f       	add	r24, r24
    13dc:	f3 cf       	rjmp	.-26     	; 0x13c4 <MAX7219_SendByte+0x2>
    13de:	08 95       	ret

000013e0 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	18 2f       	mov	r17, r24
    13e8:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    13ea:	41 98       	cbi	0x08, 1	; 8
    13ec:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    13ee:	81 2f       	mov	r24, r17
    13f0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <MAX7219_SendByte>
	MAX7219_SendByte(data);
    13f4:	8f 2d       	mov	r24, r15
    13f6:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <MAX7219_SendByte>
    13fa:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    13fc:	c1 f7       	brne	.-16     	; 0x13ee <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    13fe:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	08 95       	ret

00001408 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	cf e3       	ldi	r28, 0x3F	; 63
    1412:	d1 e0       	ldi	r29, 0x01	; 1
    1414:	07 e4       	ldi	r16, 0x47	; 71
    1416:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    1418:	89 91       	ld	r24, Y+
    141a:	f8 01       	movw	r30, r16
    141c:	61 91       	ld	r22, Z+
    141e:	8f 01       	movw	r16, r30
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	c7 34       	cpi	r28, 0x47	; 71
    142a:	df 07       	cpc	r29, r31
    142c:	a9 f7       	brne	.-22     	; 0x1418 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	08 95       	ret

00001438 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    1438:	10 92 47 01 	sts	0x0147, r1
    143c:	10 92 48 01 	sts	0x0148, r1
    1440:	10 92 49 01 	sts	0x0149, r1
    1444:	10 92 4a 01 	sts	0x014A, r1
    1448:	10 92 4b 01 	sts	0x014B, r1
    144c:	10 92 4c 01 	sts	0x014C, r1
    1450:	10 92 4d 01 	sts	0x014D, r1
    1454:	10 92 4e 01 	sts	0x014E, r1
  }
  MAX7219_updateDisplay();
    1458:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_updateDisplay>
}
    145c:	08 95       	ret

0000145e <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    145e:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    1460:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    1462:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1464:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    1466:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    1468:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    146a:	8c e0       	ldi	r24, 0x0C	; 12
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    1472:	8f e0       	ldi	r24, 0x0F	; 15
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    147a:	89 e0       	ldi	r24, 0x09	; 9
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    1482:	8a e0       	ldi	r24, 0x0A	; 10
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    148a:	8b e0       	ldi	r24, 0x0B	; 11
    148c:	67 e0       	ldi	r22, 0x07	; 7
    148e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    1492:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MAX7219_clearDisplay>
  return;
}
    1496:	08 95       	ret

00001498 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	27 97       	sbiw	r28, 0x07	; 7
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	b8 2e       	mov	r11, r24
    14bc:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    14be:	77 ff       	sbrs	r23, 7
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    14c2:	90 95       	com	r25
    14c4:	81 95       	neg	r24
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    14c8:	31 e0       	ldi	r19, 0x01	; 1
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    14ce:	e4 2f       	mov	r30, r20
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8e 01       	movw	r16, r28
    14d4:	0f 5f       	subi	r16, 0xFF	; 255
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	e0 0f       	add	r30, r16
    14da:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    14dc:	5a e0       	ldi	r21, 0x0A	; 10
    14de:	e5 2e       	mov	r14, r21
    14e0:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <MAX7219_printNum+0x5a>
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    14e6:	b7 01       	movw	r22, r14
    14e8:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__divmodhi4>
    14ec:	80 5d       	subi	r24, 0xD0	; 208
    14ee:	80 83       	st	Z, r24
    x /= 10;
    14f0:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    14f2:	e0 17       	cp	r30, r16
    14f4:	f1 07       	cpc	r31, r17
    14f6:	b1 f7       	brne	.-20     	; 0x14e4 <MAX7219_printNum+0x4c>
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    14fa:	84 2f       	mov	r24, r20
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    1500:	de 01       	movw	r26, r28
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <MAX7219_printNum+0x7e>
    1506:	fd 01       	movw	r30, r26
    1508:	e6 0f       	add	r30, r22
    150a:	f7 1f       	adc	r31, r23
    150c:	60 81       	ld	r22, Z
    150e:	60 33       	cpi	r22, 0x30	; 48
    1510:	11 f5       	brne	.+68     	; 0x1556 <MAX7219_printNum+0xbe>
    1512:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    1514:	5f 5f       	subi	r21, 0xFF	; 255
    1516:	65 2f       	mov	r22, r21
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	68 17       	cp	r22, r24
    151c:	79 07       	cpc	r23, r25
    151e:	9c f3       	brlt	.-26     	; 0x1506 <MAX7219_printNum+0x6e>
    1520:	1a c0       	rjmp	.+52     	; 0x1556 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1522:	82 2f       	mov	r24, r18
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	8c 01       	movw	r16, r24
    1528:	0c 0d       	add	r16, r12
    152a:	1d 1d       	adc	r17, r13
    152c:	08 30       	cpi	r16, 0x08	; 8
    152e:	11 05       	cpc	r17, r1
    1530:	84 f4       	brge	.+32     	; 0x1552 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    1532:	8e 0d       	add	r24, r14
    1534:	9f 1d       	adc	r25, r15
    1536:	fc 01       	movw	r30, r24
    1538:	80 81       	ld	r24, Z
    153a:	2d 83       	std	Y+5, r18	; 0x05
    153c:	3e 83       	std	Y+6, r19	; 0x06
    153e:	4f 83       	std	Y+7, r20	; 0x07
    1540:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MAX7219_lookupCode>
    1544:	f8 01       	movw	r30, r16
    1546:	e9 5b       	subi	r30, 0xB9	; 185
    1548:	fe 4f       	sbci	r31, 0xFE	; 254
    154a:	80 83       	st	Z, r24
    154c:	4f 81       	ldd	r20, Y+7	; 0x07
    154e:	3e 81       	ldd	r19, Y+6	; 0x06
    1550:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1552:	2f 5f       	subi	r18, 0xFF	; 255
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    1556:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1558:	cb 2c       	mov	r12, r11
    155a:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    155c:	7e 01       	movw	r14, r28
    155e:	08 94       	sec
    1560:	e1 1c       	adc	r14, r1
    1562:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    1564:	24 17       	cp	r18, r20
    1566:	e8 f2       	brcs	.-70     	; 0x1522 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    1568:	33 23       	and	r19, r19
    156a:	41 f0       	breq	.+16     	; 0x157c <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    156c:	8d e2       	ldi	r24, 0x2D	; 45
    156e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MAX7219_lookupCode>
    1572:	eb 2d       	mov	r30, r11
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	ea 5b       	subi	r30, 0xBA	; 186
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    157c:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_updateDisplay>
}
    1580:	27 96       	adiw	r28, 0x07	; 7
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	08 95       	ret

000015a0 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    15a0:	1f 93       	push	r17
    15a2:	18 2f       	mov	r17, r24
    15a4:	86 2f       	mov	r24, r22
  if (pos < 9) {
    15a6:	19 30       	cpi	r17, 0x09	; 9
    15a8:	48 f4       	brcc	.+18     	; 0x15bc <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    15aa:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MAX7219_lookupCode>
    15ae:	e1 2f       	mov	r30, r17
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	ea 5b       	subi	r30, 0xBA	; 186
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
    15b6:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    15b8:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_updateDisplay>
  }
}
    15bc:	1f 91       	pop	r17
    15be:	08 95       	ret

000015c0 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
  unsigned char i = pos;
    15ca:	e6 2e       	mov	r14, r22
    15cc:	e7 01       	movw	r28, r14
    15ce:	7e 01       	movw	r14, r28
    15d0:	f7 2e       	mov	r15, r23
    15d2:	e7 01       	movw	r28, r14
    15d4:	18 2f       	mov	r17, r24
  while(*data) {
    15d6:	0a c0       	rjmp	.+20     	; 0x15ec <MAX7219_printStr+0x2c>
    if (i < 9) {
    15d8:	19 30       	cpi	r17, 0x09	; 9
    15da:	58 f4       	brcc	.+22     	; 0x15f2 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    15dc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MAX7219_lookupCode>
    15e0:	e1 2f       	mov	r30, r17
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	ea 5b       	subi	r30, 0xBA	; 186
    15e6:	fe 4f       	sbci	r31, 0xFE	; 254
    15e8:	80 83       	st	Z, r24
      i++;
    15ea:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    15ec:	89 91       	ld	r24, Y+
    15ee:	88 23       	and	r24, r24
    15f0:	99 f7       	brne	.-26     	; 0x15d8 <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    15f2:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_updateDisplay>
}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    1602:	e8 2f       	mov	r30, r24
    1604:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    1606:	61 30       	cpi	r22, 0x01	; 1
    1608:	29 f4       	brne	.+10     	; 0x1614 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    160a:	ea 5b       	subi	r30, 0xBA	; 186
    160c:	fe 4f       	sbci	r31, 0xFE	; 254
    160e:	80 81       	ld	r24, Z
    1610:	80 68       	ori	r24, 0x80	; 128
    1612:	04 c0       	rjmp	.+8      	; 0x161c <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    1614:	ea 5b       	subi	r30, 0xBA	; 186
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	80 81       	ld	r24, Z
    161a:	8f 77       	andi	r24, 0x7F	; 127
    161c:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    161e:	0e 94 04 0a 	call	0x1408	; 0x1408 <MAX7219_updateDisplay>
}
    1622:	08 95       	ret

00001624 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    1624:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    1626:	f8 94       	cli
  switch(chanel) {
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	01 f1       	breq	.+64     	; 0x166c <ds18x20IsOnBus+0x48>
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	20 f4       	brcc	.+8      	; 0x1638 <ds18x20IsOnBus+0x14>
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	09 f0       	breq	.+2      	; 0x1636 <ds18x20IsOnBus+0x12>
    1634:	57 c0       	rjmp	.+174    	; 0x16e4 <ds18x20IsOnBus+0xc0>
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <ds18x20IsOnBus+0x20>
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	61 f1       	breq	.+88     	; 0x1694 <ds18x20IsOnBus+0x70>
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	09 f0       	breq	.+2      	; 0x1642 <ds18x20IsOnBus+0x1e>
    1640:	51 c0       	rjmp	.+162    	; 0x16e4 <ds18x20IsOnBus+0xc0>
    1642:	3e c0       	rjmp	.+124    	; 0x16c0 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1644:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1646:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1648:	8f e7       	ldi	r24, 0x7F	; 127
    164a:	97 e0       	ldi	r25, 0x07	; 7
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <ds18x20IsOnBus+0x28>
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <ds18x20IsOnBus+0x2e>
    1652:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    1654:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1656:	29 9a       	sbi	0x05, 1	; 5
    1658:	a7 e1       	ldi	r26, 0x17	; 23
    165a:	b1 e0       	ldi	r27, 0x01	; 1
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <ds18x20IsOnBus+0x38>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <ds18x20IsOnBus+0x3e>
    1662:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	19 9b       	sbis	0x03, 1	; 3
    1668:	3e c0       	rjmp	.+124    	; 0x16e6 <ds18x20IsOnBus+0xc2>
    166a:	3c c0       	rjmp	.+120    	; 0x16e4 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    166c:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    166e:	28 98       	cbi	0x05, 0	; 5
    1670:	8f e7       	ldi	r24, 0x7F	; 127
    1672:	97 e0       	ldi	r25, 0x07	; 7
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <ds18x20IsOnBus+0x50>
    1678:	00 c0       	rjmp	.+0      	; 0x167a <ds18x20IsOnBus+0x56>
    167a:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    167c:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    167e:	28 9a       	sbi	0x05, 0	; 5
    1680:	a7 e1       	ldi	r26, 0x17	; 23
    1682:	b1 e0       	ldi	r27, 0x01	; 1
    1684:	11 97       	sbiw	r26, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <ds18x20IsOnBus+0x60>
    1688:	00 c0       	rjmp	.+0      	; 0x168a <ds18x20IsOnBus+0x66>
    168a:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	18 9b       	sbis	0x03, 0	; 3
    1690:	2a c0       	rjmp	.+84     	; 0x16e6 <ds18x20IsOnBus+0xc2>
    1692:	28 c0       	rjmp	.+80     	; 0x16e4 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1694:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1696:	5f 98       	cbi	0x0b, 7	; 11
    1698:	8f e7       	ldi	r24, 0x7F	; 127
    169a:	97 e0       	ldi	r25, 0x07	; 7
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <ds18x20IsOnBus+0x78>
    16a0:	00 c0       	rjmp	.+0      	; 0x16a2 <ds18x20IsOnBus+0x7e>
    16a2:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    16a4:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    16a6:	5f 9a       	sbi	0x0b, 7	; 11
    16a8:	a7 e1       	ldi	r26, 0x17	; 23
    16aa:	b1 e0       	ldi	r27, 0x01	; 1
    16ac:	11 97       	sbiw	r26, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <ds18x20IsOnBus+0x88>
    16b0:	00 c0       	rjmp	.+0      	; 0x16b2 <ds18x20IsOnBus+0x8e>
    16b2:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    16b4:	89 b1       	in	r24, 0x09	; 9
    16b6:	80 95       	com	r24
    16b8:	88 1f       	adc	r24, r24
    16ba:	88 27       	eor	r24, r24
    16bc:	88 1f       	adc	r24, r24
    break;
    16be:	13 c0       	rjmp	.+38     	; 0x16e6 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    16c0:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    16c2:	2a 98       	cbi	0x05, 2	; 5
    16c4:	8f e7       	ldi	r24, 0x7F	; 127
    16c6:	97 e0       	ldi	r25, 0x07	; 7
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <ds18x20IsOnBus+0xa4>
    16cc:	00 c0       	rjmp	.+0      	; 0x16ce <ds18x20IsOnBus+0xaa>
    16ce:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    16d0:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    16d2:	2a 9a       	sbi	0x05, 2	; 5
    16d4:	a7 e1       	ldi	r26, 0x17	; 23
    16d6:	b1 e0       	ldi	r27, 0x01	; 1
    16d8:	11 97       	sbiw	r26, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <ds18x20IsOnBus+0xb4>
    16dc:	00 c0       	rjmp	.+0      	; 0x16de <ds18x20IsOnBus+0xba>
    16de:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	a7 e6       	ldi	r26, 0x67	; 103
    16e8:	b6 e0       	ldi	r27, 0x06	; 6
    16ea:	11 97       	sbiw	r26, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <ds18x20IsOnBus+0xc6>
    16ee:	00 c0       	rjmp	.+0      	; 0x16f0 <ds18x20IsOnBus+0xcc>
    16f0:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	e3 5e       	subi	r30, 0xE3	; 227
    16f6:	fd 4f       	sbci	r31, 0xFD	; 253
    16f8:	80 83       	st	Z, r24
  sei();
    16fa:	78 94       	sei
  return ret;
}
    16fc:	08 95       	ret

000016fe <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    16fe:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    1700:	98 2f       	mov	r25, r24
    1702:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    1704:	f8 94       	cli
  switch(chanel) {
    1706:	62 30       	cpi	r22, 0x02	; 2
    1708:	e1 f0       	breq	.+56     	; 0x1742 <ds18x20SendByte+0x44>
    170a:	63 30       	cpi	r22, 0x03	; 3
    170c:	20 f4       	brcc	.+8      	; 0x1716 <ds18x20SendByte+0x18>
    170e:	61 30       	cpi	r22, 0x01	; 1
    1710:	09 f0       	breq	.+2      	; 0x1714 <ds18x20SendByte+0x16>
    1712:	52 c0       	rjmp	.+164    	; 0x17b8 <ds18x20SendByte+0xba>
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <ds18x20SendByte+0x24>
    1716:	63 30       	cpi	r22, 0x03	; 3
    1718:	21 f1       	breq	.+72     	; 0x1762 <ds18x20SendByte+0x64>
    171a:	64 30       	cpi	r22, 0x04	; 4
    171c:	09 f0       	breq	.+2      	; 0x1720 <ds18x20SendByte+0x22>
    171e:	4c c0       	rjmp	.+152    	; 0x17b8 <ds18x20SendByte+0xba>
    1720:	30 c0       	rjmp	.+96     	; 0x1782 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1722:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    1724:	29 98       	cbi	0x05, 1	; 5
    1726:	30 e2       	ldi	r19, 0x20	; 32
    1728:	3a 95       	dec	r19
    172a:	f1 f7       	brne	.-4      	; 0x1728 <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    172c:	99 23       	and	r25, r25
    172e:	31 f4       	brne	.+12     	; 0x173c <ds18x20SendByte+0x3e>
    1730:	e7 ed       	ldi	r30, 0xD7	; 215
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	31 97       	sbiw	r30, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <ds18x20SendByte+0x36>
    1738:	00 c0       	rjmp	.+0      	; 0x173a <ds18x20SendByte+0x3c>
    173a:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    173c:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    173e:	29 9a       	sbi	0x05, 1	; 5
    1740:	2f c0       	rjmp	.+94     	; 0x17a0 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    1742:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    1744:	28 98       	cbi	0x05, 0	; 5
    1746:	f0 e2       	ldi	r31, 0x20	; 32
    1748:	fa 95       	dec	r31
    174a:	f1 f7       	brne	.-4      	; 0x1748 <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    174c:	99 23       	and	r25, r25
    174e:	31 f4       	brne	.+12     	; 0x175c <ds18x20SendByte+0x5e>
    1750:	e7 ed       	ldi	r30, 0xD7	; 215
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	31 97       	sbiw	r30, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <ds18x20SendByte+0x56>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <ds18x20SendByte+0x5c>
    175a:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    175c:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    175e:	28 9a       	sbi	0x05, 0	; 5
    1760:	1f c0       	rjmp	.+62     	; 0x17a0 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    1762:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    1764:	5f 98       	cbi	0x0b, 7	; 11
    1766:	f0 e2       	ldi	r31, 0x20	; 32
    1768:	fa 95       	dec	r31
    176a:	f1 f7       	brne	.-4      	; 0x1768 <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    176c:	99 23       	and	r25, r25
    176e:	31 f4       	brne	.+12     	; 0x177c <ds18x20SendByte+0x7e>
    1770:	e7 ed       	ldi	r30, 0xD7	; 215
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	31 97       	sbiw	r30, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <ds18x20SendByte+0x76>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <ds18x20SendByte+0x7c>
    177a:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    177c:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    177e:	5f 9a       	sbi	0x0b, 7	; 11
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    1782:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    1784:	2a 98       	cbi	0x05, 2	; 5
    1786:	f0 e2       	ldi	r31, 0x20	; 32
    1788:	fa 95       	dec	r31
    178a:	f1 f7       	brne	.-4      	; 0x1788 <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    178c:	99 23       	and	r25, r25
    178e:	31 f4       	brne	.+12     	; 0x179c <ds18x20SendByte+0x9e>
    1790:	e7 ed       	ldi	r30, 0xD7	; 215
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	31 97       	sbiw	r30, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <ds18x20SendByte+0x96>
    1798:	00 c0       	rjmp	.+0      	; 0x179a <ds18x20SendByte+0x9c>
    179a:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    179c:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    179e:	2a 9a       	sbi	0x05, 2	; 5
    17a0:	f5 e3       	ldi	r31, 0x35	; 53
    17a2:	fa 95       	dec	r31
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <ds18x20SendByte+0xa4>
    17a6:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    17a8:	99 23       	and	r25, r25
    17aa:	31 f0       	breq	.+12     	; 0x17b8 <ds18x20SendByte+0xba>
    17ac:	e7 ed       	ldi	r30, 0xD7	; 215
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	31 97       	sbiw	r30, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <ds18x20SendByte+0xb2>
    17b4:	00 c0       	rjmp	.+0      	; 0x17b6 <ds18x20SendByte+0xb8>
    17b6:	00 00       	nop
    break;
  }
  sei();
    17b8:	78 94       	sei
    17ba:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    17be:	86 95       	lsr	r24
    17c0:	9f cf       	rjmp	.-194    	; 0x1700 <ds18x20SendByte+0x2>
    17c2:	08 95       	ret

000017c4 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    17c4:	28 2f       	mov	r18, r24
    17c6:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    17ca:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    17cc:	f8 94       	cli
  switch(chanel) {
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	c1 f0       	breq	.+48     	; 0x1802 <ds18x20GetByte+0x3e>
    17d2:	23 30       	cpi	r18, 0x03	; 3
    17d4:	20 f4       	brcc	.+8      	; 0x17de <ds18x20GetByte+0x1a>
    17d6:	21 30       	cpi	r18, 0x01	; 1
    17d8:	09 f0       	breq	.+2      	; 0x17dc <ds18x20GetByte+0x18>
    17da:	40 c0       	rjmp	.+128    	; 0x185c <ds18x20GetByte+0x98>
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <ds18x20GetByte+0x24>
    17de:	23 30       	cpi	r18, 0x03	; 3
    17e0:	e9 f0       	breq	.+58     	; 0x181c <ds18x20GetByte+0x58>
    17e2:	24 30       	cpi	r18, 0x04	; 4
    17e4:	d9 f5       	brne	.+118    	; 0x185c <ds18x20GetByte+0x98>
    17e6:	27 c0       	rjmp	.+78     	; 0x1836 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    17e8:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    17ea:	29 98       	cbi	0x05, 1	; 5
    17ec:	90 e2       	ldi	r25, 0x20	; 32
    17ee:	9a 95       	dec	r25
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    17f2:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    17f4:	29 9a       	sbi	0x05, 1	; 5
    17f6:	e0 e3       	ldi	r30, 0x30	; 48
    17f8:	ea 95       	dec	r30
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    17fc:	93 b1       	in	r25, 0x03	; 3
    17fe:	92 70       	andi	r25, 0x02	; 2
    1800:	26 c0       	rjmp	.+76     	; 0x184e <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    1802:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    1804:	28 98       	cbi	0x05, 0	; 5
    1806:	f0 e2       	ldi	r31, 0x20	; 32
    1808:	fa 95       	dec	r31
    180a:	f1 f7       	brne	.-4      	; 0x1808 <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    180c:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    180e:	28 9a       	sbi	0x05, 0	; 5
    1810:	90 e3       	ldi	r25, 0x30	; 48
    1812:	9a 95       	dec	r25
    1814:	f1 f7       	brne	.-4      	; 0x1812 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    1816:	93 b1       	in	r25, 0x03	; 3
    1818:	91 70       	andi	r25, 0x01	; 1
    181a:	19 c0       	rjmp	.+50     	; 0x184e <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    181c:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    181e:	5f 98       	cbi	0x0b, 7	; 11
    1820:	f0 e2       	ldi	r31, 0x20	; 32
    1822:	fa 95       	dec	r31
    1824:	f1 f7       	brne	.-4      	; 0x1822 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    1826:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    1828:	5f 9a       	sbi	0x0b, 7	; 11
    182a:	90 e3       	ldi	r25, 0x30	; 48
    182c:	9a 95       	dec	r25
    182e:	f1 f7       	brne	.-4      	; 0x182c <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    1830:	99 b1       	in	r25, 0x09	; 9
    1832:	90 78       	andi	r25, 0x80	; 128
    1834:	0c c0       	rjmp	.+24     	; 0x184e <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    1836:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    1838:	2a 98       	cbi	0x05, 2	; 5
    183a:	f0 e2       	ldi	r31, 0x20	; 32
    183c:	fa 95       	dec	r31
    183e:	f1 f7       	brne	.-4      	; 0x183c <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    1840:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    1842:	2a 9a       	sbi	0x05, 2	; 5
    1844:	90 e3       	ldi	r25, 0x30	; 48
    1846:	9a 95       	dec	r25
    1848:	f1 f7       	brne	.-4      	; 0x1846 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    184a:	93 b1       	in	r25, 0x03	; 3
    184c:	94 70       	andi	r25, 0x04	; 4
    184e:	eb ed       	ldi	r30, 0xDB	; 219
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	31 97       	sbiw	r30, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <ds18x20GetByte+0x8e>
    1856:	00 c0       	rjmp	.+0      	; 0x1858 <ds18x20GetByte+0x94>
    1858:	00 00       	nop
    185a:	01 c0       	rjmp	.+2      	; 0x185e <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    185c:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    185e:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    1860:	91 11       	cpse	r25, r1
    1862:	80 68       	ori	r24, 0x80	; 128
    1864:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    1866:	09 f0       	breq	.+2      	; 0x186a <ds18x20GetByte+0xa6>
    1868:	b0 cf       	rjmp	.-160    	; 0x17ca <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    186a:	08 95       	ret

0000186c <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    1876:	0e 94 12 0b 	call	0x1624	; 0x1624 <ds18x20IsOnBus>
    187a:	88 23       	and	r24, r24
    187c:	91 f1       	breq	.+100    	; 0x18e2 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    187e:	8c ec       	ldi	r24, 0xCC	; 204
    1880:	61 2f       	mov	r22, r17
    1882:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    1886:	8e eb       	ldi	r24, 0xBE	; 190
    1888:	61 2f       	mov	r22, r17
    188a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ds18x20SendByte>
    188e:	ca e4       	ldi	r28, 0x4A	; 74
    1890:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    1892:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    1894:	81 2f       	mov	r24, r17
    1896:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <ds18x20GetByte>
    189a:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    189c:	08 27       	eor	r16, r24
    189e:	88 e0       	ldi	r24, 0x08	; 8
    18a0:	9c e8       	ldi	r25, 0x8C	; 140
    18a2:	06 95       	lsr	r16
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <ds18x20ReadStratchPad+0x3c>
    18a6:	09 27       	eor	r16, r25
    18a8:	8a 95       	dec	r24
    18aa:	d9 f7       	brne	.-10     	; 0x18a2 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    18ac:	82 e0       	ldi	r24, 0x02	; 2
    18ae:	c3 35       	cpi	r28, 0x53	; 83
    18b0:	d8 07       	cpc	r29, r24
    18b2:	81 f7       	brne	.-32     	; 0x1894 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    18b4:	00 23       	and	r16, r16
    18b6:	a9 f4       	brne	.+42     	; 0x18e2 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    18b8:	81 2f       	mov	r24, r17
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	fc 01       	movw	r30, r24
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	23 e0       	ldi	r18, 0x03	; 3
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	2a 95       	dec	r18
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <ds18x20ReadStratchPad+0x5a>
    18ce:	e8 0f       	add	r30, r24
    18d0:	f9 1f       	adc	r31, r25
    18d2:	ee 5d       	subi	r30, 0xDE	; 222
    18d4:	fd 4f       	sbci	r31, 0xFD	; 253
    18d6:	80 91 4a 02 	lds	r24, 0x024A
    18da:	80 83       	st	Z, r24
    18dc:	80 91 4b 02 	lds	r24, 0x024B
    18e0:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    18ec:	1f 93       	push	r17
    18ee:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    18f0:	0e 94 12 0b 	call	0x1624	; 0x1624 <ds18x20IsOnBus>
    18f4:	88 23       	and	r24, r24
    18f6:	41 f0       	breq	.+16     	; 0x1908 <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    18f8:	8c ec       	ldi	r24, 0xCC	; 204
    18fa:	61 2f       	mov	r22, r17
    18fc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    1900:	84 e4       	ldi	r24, 0x44	; 68
    1902:	61 2f       	mov	r22, r17
    1904:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    1908:	12 30       	cpi	r17, 0x02	; 2
    190a:	69 f0       	breq	.+26     	; 0x1926 <ds18x20ConvertTemp+0x3a>
    190c:	13 30       	cpi	r17, 0x03	; 3
    190e:	18 f4       	brcc	.+6      	; 0x1916 <ds18x20ConvertTemp+0x2a>
    1910:	11 30       	cpi	r17, 0x01	; 1
    1912:	89 f4       	brne	.+34     	; 0x1936 <ds18x20ConvertTemp+0x4a>
    1914:	05 c0       	rjmp	.+10     	; 0x1920 <ds18x20ConvertTemp+0x34>
    1916:	13 30       	cpi	r17, 0x03	; 3
    1918:	49 f0       	breq	.+18     	; 0x192c <ds18x20ConvertTemp+0x40>
    191a:	14 30       	cpi	r17, 0x04	; 4
    191c:	61 f4       	brne	.+24     	; 0x1936 <ds18x20ConvertTemp+0x4a>
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1920:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1922:	21 9a       	sbi	0x04, 1	; 4
    break;
    1924:	08 c0       	rjmp	.+16     	; 0x1936 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1926:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    1928:	20 9a       	sbi	0x04, 0	; 4
    break;
    192a:	05 c0       	rjmp	.+10     	; 0x1936 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    192c:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    192e:	57 9a       	sbi	0x0a, 7	; 10
    break;
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1932:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1934:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    1936:	1f 91       	pop	r17
    1938:	08 95       	ret

0000193a <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	fc 01       	movw	r30, r24
    1940:	ee 0f       	add	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	23 e0       	ldi	r18, 0x03	; 3
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	2a 95       	dec	r18
    194c:	e1 f7       	brne	.-8      	; 0x1946 <ds18x20GetTemp+0xc>
    194e:	e8 0f       	add	r30, r24
    1950:	f9 1f       	adc	r31, r25
    1952:	ee 5d       	subi	r30, 0xDE	; 222
    1954:	fd 4f       	sbci	r31, 0xFD	; 253
    1956:	40 81       	ld	r20, Z
    1958:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    195a:	9a 01       	movw	r18, r20
    195c:	2f 70       	andi	r18, 0x0F	; 15
    195e:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    1960:	c9 01       	movw	r24, r18
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	a3 e0       	ldi	r26, 0x03	; 3
    1968:	22 0f       	add	r18, r18
    196a:	33 1f       	adc	r19, r19
    196c:	aa 95       	dec	r26
    196e:	e1 f7       	brne	.-8      	; 0x1968 <ds18x20GetTemp+0x2e>
    1970:	28 0f       	add	r18, r24
    1972:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	84 2b       	or	r24, r20
    197a:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    197c:	60 e1       	ldi	r22, 0x10	; 16
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__divmodhi4>
    1984:	ab 01       	movw	r20, r22
    1986:	44 0f       	add	r20, r20
    1988:	55 1f       	adc	r21, r21
    198a:	e3 e0       	ldi	r30, 0x03	; 3
    198c:	66 0f       	add	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	ea 95       	dec	r30
    1992:	e1 f7       	brne	.-8      	; 0x198c <ds18x20GetTemp+0x52>
    1994:	46 0f       	add	r20, r22
    1996:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    1998:	64 e0       	ldi	r22, 0x04	; 4
    199a:	35 95       	asr	r19
    199c:	27 95       	ror	r18
    199e:	6a 95       	dec	r22
    19a0:	e1 f7       	brne	.-8      	; 0x199a <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    19a2:	42 0f       	add	r20, r18
    19a4:	53 1f       	adc	r21, r19
  return ret;
}
    19a6:	ca 01       	movw	r24, r20
    19a8:	08 95       	ret

000019aa <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    19aa:	e8 2f       	mov	r30, r24
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	e3 5e       	subi	r30, 0xE3	; 227
    19b0:	fd 4f       	sbci	r31, 0xFD	; 253
}
    19b2:	80 81       	ld	r24, Z
    19b4:	08 95       	ret

000019b6 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    19b6:	e8 2f       	mov	r30, r24
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	e3 5e       	subi	r30, 0xE3	; 227
    19bc:	fd 4f       	sbci	r31, 0xFD	; 253
    19be:	60 83       	st	Z, r22
}
    19c0:	08 95       	ret

000019c2 <__divmodhi4>:
    19c2:	97 fb       	bst	r25, 7
    19c4:	09 2e       	mov	r0, r25
    19c6:	07 26       	eor	r0, r23
    19c8:	0a d0       	rcall	.+20     	; 0x19de <__divmodhi4_neg1>
    19ca:	77 fd       	sbrc	r23, 7
    19cc:	04 d0       	rcall	.+8      	; 0x19d6 <__divmodhi4_neg2>
    19ce:	0c d0       	rcall	.+24     	; 0x19e8 <__udivmodhi4>
    19d0:	06 d0       	rcall	.+12     	; 0x19de <__divmodhi4_neg1>
    19d2:	00 20       	and	r0, r0
    19d4:	1a f4       	brpl	.+6      	; 0x19dc <__divmodhi4_exit>

000019d6 <__divmodhi4_neg2>:
    19d6:	70 95       	com	r23
    19d8:	61 95       	neg	r22
    19da:	7f 4f       	sbci	r23, 0xFF	; 255

000019dc <__divmodhi4_exit>:
    19dc:	08 95       	ret

000019de <__divmodhi4_neg1>:
    19de:	f6 f7       	brtc	.-4      	; 0x19dc <__divmodhi4_exit>
    19e0:	90 95       	com	r25
    19e2:	81 95       	neg	r24
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	08 95       	ret

000019e8 <__udivmodhi4>:
    19e8:	aa 1b       	sub	r26, r26
    19ea:	bb 1b       	sub	r27, r27
    19ec:	51 e1       	ldi	r21, 0x11	; 17
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <__udivmodhi4_ep>

000019f0 <__udivmodhi4_loop>:
    19f0:	aa 1f       	adc	r26, r26
    19f2:	bb 1f       	adc	r27, r27
    19f4:	a6 17       	cp	r26, r22
    19f6:	b7 07       	cpc	r27, r23
    19f8:	10 f0       	brcs	.+4      	; 0x19fe <__udivmodhi4_ep>
    19fa:	a6 1b       	sub	r26, r22
    19fc:	b7 0b       	sbc	r27, r23

000019fe <__udivmodhi4_ep>:
    19fe:	88 1f       	adc	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	5a 95       	dec	r21
    1a04:	a9 f7       	brne	.-22     	; 0x19f0 <__udivmodhi4_loop>
    1a06:	80 95       	com	r24
    1a08:	90 95       	com	r25
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	08 95       	ret

00001a10 <__eerd_byte_m328p>:
    1a10:	f9 99       	sbic	0x1f, 1	; 31
    1a12:	fe cf       	rjmp	.-4      	; 0x1a10 <__eerd_byte_m328p>
    1a14:	92 bd       	out	0x22, r25	; 34
    1a16:	81 bd       	out	0x21, r24	; 33
    1a18:	f8 9a       	sbi	0x1f, 0	; 31
    1a1a:	99 27       	eor	r25, r25
    1a1c:	80 b5       	in	r24, 0x20	; 32
    1a1e:	08 95       	ret

00001a20 <__eerd_word_m328p>:
    1a20:	a8 e1       	ldi	r26, 0x18	; 24
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	42 e0       	ldi	r20, 0x02	; 2
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__eerd_blraw_m328p>

00001a2c <__eewr_byte_m328p>:
    1a2c:	26 2f       	mov	r18, r22

00001a2e <__eewr_r18_m328p>:
    1a2e:	f9 99       	sbic	0x1f, 1	; 31
    1a30:	fe cf       	rjmp	.-4      	; 0x1a2e <__eewr_r18_m328p>
    1a32:	1f ba       	out	0x1f, r1	; 31
    1a34:	92 bd       	out	0x22, r25	; 34
    1a36:	81 bd       	out	0x21, r24	; 33
    1a38:	20 bd       	out	0x20, r18	; 32
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	fa 9a       	sbi	0x1f, 2	; 31
    1a40:	f9 9a       	sbi	0x1f, 1	; 31
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	08 95       	ret

00001a48 <__eewr_word_m328p>:
    1a48:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__eewr_byte_m328p>
    1a4c:	27 2f       	mov	r18, r23
    1a4e:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__eewr_r18_m328p>

00001a52 <__eerd_block_m328p>:
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22

00001a56 <__eerd_blraw_m328p>:
    1a56:	fc 01       	movw	r30, r24
    1a58:	f9 99       	sbic	0x1f, 1	; 31
    1a5a:	fe cf       	rjmp	.-4      	; 0x1a58 <__eerd_blraw_m328p+0x2>
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <__eerd_blraw_m328p+0x14>
    1a5e:	f2 bd       	out	0x22, r31	; 34
    1a60:	e1 bd       	out	0x21, r30	; 33
    1a62:	f8 9a       	sbi	0x1f, 0	; 31
    1a64:	31 96       	adiw	r30, 0x01	; 1
    1a66:	00 b4       	in	r0, 0x20	; 32
    1a68:	0d 92       	st	X+, r0
    1a6a:	41 50       	subi	r20, 0x01	; 1
    1a6c:	50 40       	sbci	r21, 0x00	; 0
    1a6e:	b8 f7       	brcc	.-18     	; 0x1a5e <__eerd_blraw_m328p+0x8>
    1a70:	08 95       	ret

00001a72 <_exit>:
    1a72:	f8 94       	cli

00001a74 <__stop_program>:
    1a74:	ff cf       	rjmp	.-2      	; 0x1a74 <__stop_program>
