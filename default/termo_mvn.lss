
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000f74  00001008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ab  0080016c  0080016c  00001074  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000332  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001872  00000000  00000000  00001bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000772  00000000  00000000  00003429  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017b7  00000000  00000000  00003b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000290  00000000  00000000  00005354  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000047e  00000000  00000000  000055e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014d6  00000000  00000000  00005a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000121  00000000  00000000  00006f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
  a6:	0e 94 df 04 	call	0x9be	; 0x9be <MAX7219_Init>
  KBD_init();
  aa:	0e 94 93 02 	call	0x526	; 0x526 <KBD_init>
  OUT_1_init();
  ae:	53 9a       	sbi	0x0a, 3	; 10
  b0:	5b 98       	cbi	0x0b, 3	; 11
  OUT_2_init();
  b2:	53 9a       	sbi	0x0a, 3	; 10
  b4:	5b 98       	cbi	0x0b, 3	; 11
  BEEPER_init();
  b6:	38 9a       	sbi	0x07, 0	; 7
  b8:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
  ba:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000); // запускаем секундный таймер,
  be:	89 ec       	ldi	r24, 0xC9	; 201
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	48 ee       	ldi	r20, 0xE8	; 232
  c6:	53 e0       	ldi	r21, 0x03	; 3
  c8:	0e 94 6f 03 	call	0x6de	; 0x6de <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 10);       // запускаем сканирование клавиатуры
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	4a e0       	ldi	r20, 0x0A	; 10
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	0e 94 6f 03 	call	0x6de	; 0x6de <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);   // запускаем сканирование сенсоров
  da:	84 e6       	ldi	r24, 0x64	; 100
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 6f 03 	call	0x6de	; 0x6de <RTOS_setTask>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
  e8:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
  ea:	0e 94 17 04 	call	0x82e	; 0x82e <RTOS_dispatchTask>
  ee:	fd cf       	rjmp	.-6      	; 0xea <main+0x44>

000000f0 <print_temperature>:
unsigned char ds_count = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
  f6:	77 ff       	sbrs	r23, 7
  f8:	05 c0       	rjmp	.+10     	; 0x104 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
  fa:	70 95       	com	r23
  fc:	61 95       	neg	r22
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
 100:	01 e0       	ldi	r16, 0x01	; 1
 102:	01 c0       	rjmp	.+2      	; 0x106 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
 104:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
 106:	81 2f       	mov	r24, r17
 108:	43 e0       	ldi	r20, 0x03	; 3
 10a:	20 e2       	ldi	r18, 0x20	; 32
 10c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
 110:	81 2f       	mov	r24, r17
 112:	8e 5f       	subi	r24, 0xFE	; 254
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	0e 94 b1 05 	call	0xb62	; 0xb62 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
 11a:	01 30       	cpi	r16, 0x01	; 1
 11c:	21 f4       	brne	.+8      	; 0x126 <print_temperature+0x36>
 11e:	81 2f       	mov	r24, r17
 120:	6d e2       	ldi	r22, 0x2D	; 45
 122:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
}
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
 12c:	88 3c       	cpi	r24, 0xC8	; 200
 12e:	51 f0       	breq	.+20     	; 0x144 <events_default+0x18>
 130:	89 3c       	cpi	r24, 0xC9	; 201
 132:	51 f4       	brne	.+20     	; 0x148 <events_default+0x1c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 91 6c 01 	lds	r25, 0x016C
 13a:	91 11       	cpse	r25, r1
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	80 93 6c 01 	sts	0x016C, r24
    break;
 142:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
 144:	0e 94 cf 02 	call	0x59e	; 0x59e <KBD_scan>
 148:	08 95       	ret

0000014a <run_menu>:
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
  switch(event) {
 14a:	87 31       	cpi	r24, 0x17	; 23
 14c:	38 f4       	brcc	.+14     	; 0x15c <run_menu+0x12>
 14e:	84 31       	cpi	r24, 0x14	; 20
 150:	58 f4       	brcc	.+22     	; 0x168 <run_menu+0x1e>
 152:	98 2f       	mov	r25, r24
 154:	9a 50       	subi	r25, 0x0A	; 10
 156:	93 30       	cpi	r25, 0x03	; 3
 158:	28 f4       	brcc	.+10     	; 0x164 <run_menu+0x1a>
 15a:	08 95       	ret
 15c:	98 2f       	mov	r25, r24
 15e:	9e 51       	subi	r25, 0x1E	; 30
 160:	93 30       	cpi	r25, 0x03	; 3
 162:	10 f0       	brcs	.+4      	; 0x168 <run_menu+0x1e>
    case EVENT_KEY_MINUS:
    case EVENT_KEY_MINUS_LONG:
    case EVENT_KEY_MINUS_HOLD:
    break;
	default:
	  events_default(event);
 164:	0e 94 96 00 	call	0x12c	; 0x12c <events_default>
 168:	08 95       	ret

0000016a <run_main>:
}
//=============================================================================
void run_main(unsigned char event)
{
  static uint8_t chanel = 1;
  switch(event) {
 16a:	81 32       	cpi	r24, 0x21	; 33
 16c:	78 f4       	brcc	.+30     	; 0x18c <run_main+0x22>
 16e:	8e 31       	cpi	r24, 0x1E	; 30
 170:	08 f0       	brcs	.+2      	; 0x174 <run_main+0xa>
 172:	8a c0       	rjmp	.+276    	; 0x288 <run_main+0x11e>
 174:	8a 30       	cpi	r24, 0x0A	; 10
 176:	08 f4       	brcc	.+2      	; 0x17a <run_main+0x10>
 178:	85 c0       	rjmp	.+266    	; 0x284 <run_main+0x11a>
 17a:	8d 30       	cpi	r24, 0x0D	; 13
 17c:	08 f4       	brcc	.+2      	; 0x180 <run_main+0x16>
 17e:	84 c0       	rjmp	.+264    	; 0x288 <run_main+0x11e>
 180:	98 2f       	mov	r25, r24
 182:	94 51       	subi	r25, 0x14	; 20
 184:	93 30       	cpi	r25, 0x03	; 3
 186:	08 f0       	brcs	.+2      	; 0x18a <run_main+0x20>
 188:	7d c0       	rjmp	.+250    	; 0x284 <run_main+0x11a>
 18a:	08 95       	ret
 18c:	88 36       	cpi	r24, 0x68	; 104
 18e:	09 f4       	brne	.+2      	; 0x192 <run_main+0x28>
 190:	52 c0       	rjmp	.+164    	; 0x236 <run_main+0xcc>
 192:	89 36       	cpi	r24, 0x69	; 105
 194:	31 f1       	breq	.+76     	; 0x1e2 <run_main+0x78>
 196:	87 36       	cpi	r24, 0x67	; 103
 198:	09 f0       	breq	.+2      	; 0x19c <run_main+0x32>
 19a:	74 c0       	rjmp	.+232    	; 0x284 <run_main+0x11a>
    case EVENT_START_CONVERTIONS:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	11 f4       	brne	.+4      	; 0x1aa <run_main+0x40>
 1a6:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	19 f4       	brne	.+6      	; 0x1ba <run_main+0x50>
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	19 f4       	brne	.+6      	; 0x1ca <run_main+0x60>
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	19 f4       	brne	.+6      	; 0x1da <run_main+0x70>
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
      RTOS_setTask(EVENT_SHOW_TEMP_1, 0, 0);
 1da:	89 e6       	ldi	r24, 0x69	; 105
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	4c c0       	rjmp	.+152    	; 0x27a <run_main+0x110>
    break;
    case EVENT_SHOW_TEMP_1:
	  MAX7219_printChar(2, 'd');
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	64 e6       	ldi	r22, 0x64	; 100
 1e6:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
	  MAX7219_printChar(3, '-');
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	6d e2       	ldi	r22, 0x2D	; 45
 1ee:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
	  MAX7219_printChar(4, 0x30 + chanel);
 1f2:	60 91 03 01 	lds	r22, 0x0103
 1f6:	60 5d       	subi	r22, 0xD0	; 208
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
      print_temperature(5, ds18x20GetTemp(chanel));
 1fe:	80 91 03 01 	lds	r24, 0x0103
 202:	0e 94 4d 07 	call	0xe9a	; 0xe9a <ds18x20GetTemp>
 206:	bc 01       	movw	r22, r24
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	0e 94 78 00 	call	0xf0	; 0xf0 <print_temperature>
      MAX7219_setCommaPos(7,1);
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	0e 94 b1 05 	call	0xb62	; 0xb62 <MAX7219_setCommaPos>
	  if (chanel < 4) {
 216:	80 91 03 01 	lds	r24, 0x0103
 21a:	84 30       	cpi	r24, 0x04	; 4
 21c:	28 f4       	brcc	.+10     	; 0x228 <run_main+0xbe>
	    chanel++; 
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 03 01 	sts	0x0103, r24
        RTOS_setTask(EVENT_SHOW_TEMP_1, SHOW_TIME, 0);
 224:	89 e6       	ldi	r24, 0x69	; 105
 226:	04 c0       	rjmp	.+8      	; 0x230 <run_main+0xc6>
	  } else { 
	    chanel = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 03 01 	sts	0x0103, r24
        RTOS_setTask(EVENT_GET_TEMPERATURE, SHOW_TIME, 0);
 22e:	88 e6       	ldi	r24, 0x68	; 104
 230:	60 ed       	ldi	r22, 0xD0	; 208
 232:	77 e0       	ldi	r23, 0x07	; 7
 234:	22 c0       	rjmp	.+68     	; 0x27a <run_main+0x110>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	11 f4       	brne	.+4      	; 0x244 <run_main+0xda>
 240:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	19 f4       	brne	.+6      	; 0x254 <run_main+0xea>
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	19 f4       	brne	.+6      	; 0x264 <run_main+0xfa>
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	19 f4       	brne	.+6      	; 0x274 <run_main+0x10a>
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_START_CONVERTIONS, 50, 0);
 274:	87 e6       	ldi	r24, 0x67	; 103
 276:	62 e3       	ldi	r22, 0x32	; 50
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	0e 94 6f 03 	call	0x6de	; 0x6de <RTOS_setTask>
    break;
 282:	08 95       	ret
    case EVENT_KEY_MINUS:
    case EVENT_KEY_MINUS_LONG:
    case EVENT_KEY_MINUS_HOLD:
    break;
	default:
	  events_default(event);
 284:	0e 94 96 00 	call	0x12c	; 0x12c <events_default>
 288:	08 95       	ret

0000028a <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
 28a:	86 36       	cpi	r24, 0x66	; 102
 28c:	09 f4       	brne	.+2      	; 0x290 <run_start+0x6>
 28e:	c4 c0       	rjmp	.+392    	; 0x418 <run_start+0x18e>
 290:	87 36       	cpi	r24, 0x67	; 103
 292:	30 f4       	brcc	.+12     	; 0x2a0 <run_start+0x16>
 294:	84 36       	cpi	r24, 0x64	; 100
 296:	59 f0       	breq	.+22     	; 0x2ae <run_start+0x24>
 298:	85 36       	cpi	r24, 0x65	; 101
 29a:	09 f0       	breq	.+2      	; 0x29e <run_start+0x14>
 29c:	cd c0       	rjmp	.+410    	; 0x438 <run_start+0x1ae>
 29e:	20 c0       	rjmp	.+64     	; 0x2e0 <run_start+0x56>
 2a0:	87 36       	cpi	r24, 0x67	; 103
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <run_start+0x1c>
 2a4:	73 c0       	rjmp	.+230    	; 0x38c <run_start+0x102>
 2a6:	88 36       	cpi	r24, 0x68	; 104
 2a8:	09 f0       	breq	.+2      	; 0x2ac <run_start+0x22>
 2aa:	c6 c0       	rjmp	.+396    	; 0x438 <run_start+0x1ae>
 2ac:	92 c0       	rjmp	.+292    	; 0x3d2 <run_start+0x148>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	0e 94 90 05 	call	0xb20	; 0xb20 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	6d e2       	ldi	r22, 0x2D	; 45
 2bc:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
	  ds_count = 0;
 2c0:	10 92 6d 01 	sts	0x016D, r1
      ds18x20IsOnBus(1);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 c2 05 	call	0xb84	; 0xb84 <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 c2 05 	call	0xb84	; 0xb84 <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 c2 05 	call	0xb84	; 0xb84 <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	0e 94 c2 05 	call	0xb84	; 0xb84 <ds18x20IsOnBus>
      RTOS_setTask(EVENT_PRINT_COUNT, 0, 0);
 2dc:	85 e6       	ldi	r24, 0x65	; 101
 2de:	a5 c0       	rjmp	.+330    	; 0x42a <run_start+0x1a0>
    break;
    case EVENT_PRINT_COUNT:
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	41 f4       	brne	.+16     	; 0x2fa <run_start+0x70>
 2ea:	80 91 6d 01 	lds	r24, 0x016D
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	80 93 6d 01 	sts	0x016D, r24
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	61 e3       	ldi	r22, 0x31	; 49
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <run_start+0x74>
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	60 e2       	ldi	r22, 0x20	; 32
 2fe:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	41 f4       	brne	.+16     	; 0x31c <run_start+0x92>
 30c:	80 91 6d 01 	lds	r24, 0x016D
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 6d 01 	sts	0x016D, r24
 316:	86 e0       	ldi	r24, 0x06	; 6
 318:	61 e3       	ldi	r22, 0x31	; 49
 31a:	02 c0       	rjmp	.+4      	; 0x320 <run_start+0x96>
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	60 e2       	ldi	r22, 0x20	; 32
 320:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	41 f4       	brne	.+16     	; 0x33e <run_start+0xb4>
 32e:	80 91 6d 01 	lds	r24, 0x016D
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 6d 01 	sts	0x016D, r24
 338:	87 e0       	ldi	r24, 0x07	; 7
 33a:	61 e3       	ldi	r22, 0x31	; 49
 33c:	02 c0       	rjmp	.+4      	; 0x342 <run_start+0xb8>
 33e:	87 e0       	ldi	r24, 0x07	; 7
 340:	60 e2       	ldi	r22, 0x20	; 32
 342:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	41 f4       	brne	.+16     	; 0x360 <run_start+0xd6>
 350:	80 91 6d 01 	lds	r24, 0x016D
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 6d 01 	sts	0x016D, r24
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	61 e3       	ldi	r22, 0x31	; 49
 35e:	02 c0       	rjmp	.+4      	; 0x364 <run_start+0xda>
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	60 e2       	ldi	r22, 0x20	; 32
 364:	0e 94 80 05 	call	0xb00	; 0xb00 <MAX7219_printChar>
	  if (ds_count == 0) {
 368:	60 91 6d 01 	lds	r22, 0x016D
 36c:	66 23       	and	r22, r22
 36e:	21 f4       	brne	.+8      	; 0x378 <run_start+0xee>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
 370:	84 e6       	ldi	r24, 0x64	; 100
 372:	68 eb       	ldi	r22, 0xB8	; 184
 374:	7b e0       	ldi	r23, 0x0B	; 11
 376:	5b c0       	rjmp	.+182    	; 0x42e <run_start+0x1a4>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	20 e2       	ldi	r18, 0x20	; 32
 380:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <MAX7219_printNum>
        RTOS_setTask(EVENT_START_CONVERTIONS, 10, 0);
 384:	87 e6       	ldi	r24, 0x67	; 103
 386:	6a e0       	ldi	r22, 0x0A	; 10
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	51 c0       	rjmp	.+162    	; 0x42e <run_start+0x1a4>
	  }
    break;
    case EVENT_START_CONVERTIONS:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	11 f4       	brne	.+4      	; 0x39a <run_start+0x110>
 396:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	19 f4       	brne	.+6      	; 0x3aa <run_start+0x120>
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	19 f4       	brne	.+6      	; 0x3ba <run_start+0x130>
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	19 f4       	brne	.+6      	; 0x3ca <run_start+0x140>
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	0e 94 26 07 	call	0xe4c	; 0xe4c <ds18x20ConvertTemp>
      RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
 3ca:	88 e6       	ldi	r24, 0x68	; 104
 3cc:	68 ee       	ldi	r22, 0xE8	; 232
 3ce:	73 e0       	ldi	r23, 0x03	; 3
 3d0:	2e c0       	rjmp	.+92     	; 0x42e <run_start+0x1a4>
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	11 f4       	brne	.+4      	; 0x3e0 <run_start+0x156>
 3dc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	19 f4       	brne	.+6      	; 0x3f0 <run_start+0x166>
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	19 f4       	brne	.+6      	; 0x400 <run_start+0x176>
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
 400:	84 e0       	ldi	r24, 0x04	; 4
 402:	0e 94 85 07 	call	0xf0a	; 0xf0a <ds18x20GetDevCount>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	19 f4       	brne	.+6      	; 0x410 <run_start+0x186>
 40a:	84 e0       	ldi	r24, 0x04	; 4
 40c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
 410:	86 e6       	ldi	r24, 0x66	; 102
 412:	64 e6       	ldi	r22, 0x64	; 100
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	0b c0       	rjmp	.+22     	; 0x42e <run_start+0x1a4>
    break;
    case EVENT_RUN_MAIN:
      MAX7219_clearDisplay();
 418:	0e 94 cc 04 	call	0x998	; 0x998 <MAX7219_clearDisplay>
      SET_STATE(run_main);
 41c:	85 eb       	ldi	r24, 0xB5	; 181
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	90 93 05 01 	sts	0x0105, r25
 424:	80 93 04 01 	sts	0x0104, r24
      RTOS_setTask(EVENT_START_CONVERTIONS, 0, 0);
 428:	87 e6       	ldi	r24, 0x67	; 103
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	0e 94 6f 03 	call	0x6de	; 0x6de <RTOS_setTask>
    break;
 436:	08 95       	ret
	default:
	  events_default(event);
 438:	0e 94 96 00 	call	0x12c	; 0x12c <events_default>
 43c:	08 95       	ret

0000043e <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
 43e:	20 91 75 01 	lds	r18, 0x0175
 442:	28 30       	cpi	r18, 0x08	; 8
 444:	78 f4       	brcc	.+30     	; 0x464 <PutBut+0x26>
     buf[head] = but;
 446:	90 91 76 01 	lds	r25, 0x0176
 44a:	e9 2f       	mov	r30, r25
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	e9 58       	subi	r30, 0x89	; 137
 450:	fe 4f       	sbci	r31, 0xFE	; 254
 452:	80 83       	st	Z, r24
     count++;
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	20 93 75 01 	sts	0x0175, r18
     head++;
 45a:	89 2f       	mov	r24, r25
 45c:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
 45e:	87 70       	andi	r24, 0x07	; 7
 460:	80 93 76 01 	sts	0x0176, r24
 464:	08 95       	ret

00000466 <BUT_Check.clone.0>:
  }
  
  return but;
}
//=============================================================================
static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
 46e:	96 2f       	mov	r25, r22
 470:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
 472:	c9 2f       	mov	r28, r25
 474:	d0 e0       	ldi	r29, 0x00	; 0
 476:	fe 01       	movw	r30, r28
 478:	e2 59       	subi	r30, 0x92	; 146
 47a:	fe 4f       	sbci	r31, 0xFE	; 254
 47c:	10 81       	ld	r17, Z

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
#endif

 countDebTmp = countDeb[i];
 47e:	fe 01       	movw	r30, r28
 480:	ef 58       	subi	r30, 0x8F	; 143
 482:	fe 4f       	sbci	r31, 0xFE	; 254
 484:	90 81       	ld	r25, Z
 486:	90 93 74 01 	sts	0x0174, r25
  
 if (state){
 48a:	88 23       	and	r24, r24
 48c:	a9 f0       	breq	.+42     	; 0x4b8 <BUT_Check.clone.0+0x52>
    if (countDebTmp < BUT_COUNT_MAX){
 48e:	97 39       	cpi	r25, 0x97	; 151
 490:	28 f5       	brcc	.+74     	; 0x4dc <BUT_Check.clone.0+0x76>
       countDebTmp++;
 492:	9f 5f       	subi	r25, 0xFF	; 255
 494:	90 93 74 01 	sts	0x0174, r25

       if (countDebTmp > BUT_COUNT_THR){
 498:	95 31       	cpi	r25, 0x15	; 21
 49a:	00 f1       	brcs	.+64     	; 0x4dc <BUT_Check.clone.0+0x76>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
 49c:	10 fd       	sbrc	r17, 0
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <BUT_Check.clone.0+0x40>
             stateTmp |= FLAG_BUT_PRESSED;
 4a0:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
 4a2:	01 e0       	ldi	r16, 0x01	; 1
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <BUT_Check.clone.0+0x42>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 4a6:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
 4a8:	97 39       	cpi	r25, 0x97	; 151
 4aa:	81 f4       	brne	.+32     	; 0x4cc <BUT_Check.clone.0+0x66>
         if (!(stateTmp & FLAG_BUT_HOLD)){
 4ac:	11 fd       	sbrc	r17, 1
 4ae:	0e c0       	rjmp	.+28     	; 0x4cc <BUT_Check.clone.0+0x66>
            stateTmp &= ~(FLAG_BUT_RELEASED);
 4b0:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
 4b2:	12 60       	ori	r17, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
 4b4:	02 e0       	ldi	r16, 0x02	; 2
 4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <BUT_Check.clone.0+0x6a>
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
  #endif           
        }
     }
#else
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
 4b8:	10 ff       	sbrs	r17, 0
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <BUT_Check.clone.0+0x5e>
 4bc:	11 fd       	sbrc	r17, 1
 4be:	1c c0       	rjmp	.+56     	; 0x4f8 <BUT_Check.clone.0+0x92>
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
 4c0:	03 e0       	ldi	r16, 0x03	; 3
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <BUT_Check.clone.0+0x60>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
 4c4:	00 e0       	ldi	r16, 0x00	; 0
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
 4c6:	10 92 74 01 	sts	0x0174, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
 4ca:	1c 7f       	andi	r17, 0xFC	; 252
  }
 
  countHold[i] = countHoldTmp;
#endif       
  
  if (event){
 4cc:	00 23       	and	r16, r16
 4ce:	31 f0       	breq	.+12     	; 0x4dc <BUT_Check.clone.0+0x76>
     PutBut(i+1);
 4d0:	86 2f       	mov	r24, r22
 4d2:	0e 94 1f 02 	call	0x43e	; 0x43e <PutBut>
     PutBut(event);
 4d6:	80 2f       	mov	r24, r16
 4d8:	0e 94 1f 02 	call	0x43e	; 0x43e <PutBut>
  }
  
  countDeb[i] = countDebTmp;
 4dc:	fe 01       	movw	r30, r28
 4de:	ef 58       	subi	r30, 0x8F	; 143
 4e0:	fe 4f       	sbci	r31, 0xFE	; 254
 4e2:	80 91 74 01 	lds	r24, 0x0174
 4e6:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
 4e8:	c2 59       	subi	r28, 0x92	; 146
 4ea:	de 4f       	sbci	r29, 0xFE	; 254
 4ec:	18 83       	st	Y, r17
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
 4f8:	04 e0       	ldi	r16, 0x04	; 4
 4fa:	e5 cf       	rjmp	.-54     	; 0x4c6 <BUT_Check.clone.0+0x60>

000004fc <KBD_getBut>:

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    
  if (count){
 4fc:	20 91 75 01 	lds	r18, 0x0175
 500:	22 23       	and	r18, r18
 502:	79 f0       	breq	.+30     	; 0x522 <KBD_getBut+0x26>
     but = buf[tail];
 504:	90 91 7f 01 	lds	r25, 0x017F
 508:	e9 2f       	mov	r30, r25
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	e9 58       	subi	r30, 0x89	; 137
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	80 81       	ld	r24, Z
     count--;
 512:	21 50       	subi	r18, 0x01	; 1
 514:	20 93 75 01 	sts	0x0175, r18
     tail++;
 518:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
 51a:	97 70       	andi	r25, 0x07	; 7
 51c:	90 93 7f 01 	sts	0x017F, r25
 520:	08 95       	ret
  }
}

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
 522:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
 524:	08 95       	ret

00000526 <KBD_init>:
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 526:	10 92 71 01 	sts	0x0171, r1
     stateBut[i] = 0;
 52a:	10 92 6e 01 	sts	0x016E, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 52e:	10 92 72 01 	sts	0x0172, r1
     stateBut[i] = 0;
 532:	10 92 6f 01 	sts	0x016F, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
 536:	10 92 73 01 	sts	0x0173, r1
     stateBut[i] = 0;
 53a:	10 92 70 01 	sts	0x0170, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
 53e:	10 92 77 01 	sts	0x0177, r1
 542:	10 92 78 01 	sts	0x0178, r1
 546:	10 92 79 01 	sts	0x0179, r1
 54a:	10 92 7a 01 	sts	0x017A, r1
 54e:	10 92 7b 01 	sts	0x017B, r1
 552:	10 92 7c 01 	sts	0x017C, r1
 556:	10 92 7d 01 	sts	0x017D, r1
 55a:	10 92 7e 01 	sts	0x017E, r1
  }
  
  head = 0;
 55e:	10 92 76 01 	sts	0x0176, r1
  tail = 0;  
 562:	10 92 7f 01 	sts	0x017F, r1
  count = 0;
 566:	10 92 75 01 	sts	0x0175, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
 56a:	54 98       	cbi	0x0a, 4	; 10
 56c:	5c 9a       	sbi	0x0b, 4	; 11
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
 56e:	55 98       	cbi	0x0a, 5	; 10
 570:	5d 9a       	sbi	0x0b, 5	; 11
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
 572:	56 98       	cbi	0x0a, 6	; 10
 574:	5e 9a       	sbi	0x0b, 6	; 11
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
 576:	08 95       	ret

00000578 <KBD_poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	4c 99       	sbic	0x09, 4	; 9
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	0e 94 33 02 	call	0x466	; 0x466 <BUT_Check.clone.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	4d 99       	sbic	0x09, 5	; 9
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	62 e0       	ldi	r22, 0x02	; 2
 58c:	0e 94 33 02 	call	0x466	; 0x466 <BUT_Check.clone.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	4e 99       	sbic	0x09, 6	; 9
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	63 e0       	ldi	r22, 0x03	; 3
 598:	0e 94 33 02 	call	0x466	; 0x466 <BUT_Check.clone.0>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
 59c:	08 95       	ret

0000059e <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
 59e:	1f 93       	push	r17
  uint8_t but = 0;
  uint8_t code = 0;
  KBD_poll();
 5a0:	0e 94 bc 02 	call	0x578	; 0x578 <KBD_poll>
  but = KBD_getBut();
 5a4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <KBD_getBut>
 5a8:	18 2f       	mov	r17, r24
  if (but) {
 5aa:	88 23       	and	r24, r24
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <KBD_scan+0x12>
 5ae:	83 c0       	rjmp	.+262    	; 0x6b6 <KBD_scan+0x118>
    code = KBD_getBut(); 
 5b0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <KBD_getBut>
    if (but == 1) {
 5b4:	11 30       	cpi	r17, 0x01	; 1
 5b6:	41 f5       	brne	.+80     	; 0x608 <KBD_scan+0x6a>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	51 f4       	brne	.+20     	; 0x5d0 <KBD_scan+0x32>
 5bc:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5be:	8f e3       	ldi	r24, 0x3F	; 63
 5c0:	9c e9       	ldi	r25, 0x9C	; 156
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <KBD_scan+0x24>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <KBD_scan+0x2a>
 5c8:	00 00       	nop
 5ca:	40 98       	cbi	0x08, 0	; 8
 5cc:	8a e0       	ldi	r24, 0x0A	; 10
 5ce:	6d c0       	rjmp	.+218    	; 0x6aa <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_PLUS_HOLD, 0, 0); }
 5d0:	82 30       	cpi	r24, 0x02	; 2
 5d2:	69 f4       	brne	.+26     	; 0x5ee <KBD_scan+0x50>
 5d4:	40 9a       	sbi	0x08, 0	; 8
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	97 ee       	ldi	r25, 0xE7	; 231
 5da:	a3 e0       	ldi	r26, 0x03	; 3
 5dc:	81 50       	subi	r24, 0x01	; 1
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	a0 40       	sbci	r26, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <KBD_scan+0x3e>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <KBD_scan+0x48>
 5e6:	00 00       	nop
 5e8:	40 98       	cbi	0x08, 0	; 8
 5ea:	8c e0       	ldi	r24, 0x0C	; 12
 5ec:	5e c0       	rjmp	.+188    	; 0x6aa <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_PLUS_LONG, 0, 0); }
 5ee:	84 30       	cpi	r24, 0x04	; 4
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <KBD_scan+0x56>
 5f2:	61 c0       	rjmp	.+194    	; 0x6b6 <KBD_scan+0x118>
 5f4:	40 9a       	sbi	0x08, 0	; 8
 5f6:	af e3       	ldi	r26, 0x3F	; 63
 5f8:	bc e9       	ldi	r27, 0x9C	; 156
 5fa:	11 97       	sbiw	r26, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <KBD_scan+0x5c>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <KBD_scan+0x62>
 600:	00 00       	nop
 602:	40 98       	cbi	0x08, 0	; 8
 604:	8b e0       	ldi	r24, 0x0B	; 11
 606:	51 c0       	rjmp	.+162    	; 0x6aa <KBD_scan+0x10c>
    } 
	if (but == 2) {
 608:	12 30       	cpi	r17, 0x02	; 2
 60a:	39 f5       	brne	.+78     	; 0x65a <KBD_scan+0xbc>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET, 0, 0); }
 60c:	83 30       	cpi	r24, 0x03	; 3
 60e:	51 f4       	brne	.+20     	; 0x624 <KBD_scan+0x86>
 610:	40 9a       	sbi	0x08, 0	; 8
 612:	8f e3       	ldi	r24, 0x3F	; 63
 614:	9c e9       	ldi	r25, 0x9C	; 156
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <KBD_scan+0x78>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <KBD_scan+0x7e>
 61c:	00 00       	nop
 61e:	40 98       	cbi	0x08, 0	; 8
 620:	84 e1       	ldi	r24, 0x14	; 20
 622:	43 c0       	rjmp	.+134    	; 0x6aa <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_HOLD, 0, 0); }
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	69 f4       	brne	.+26     	; 0x642 <KBD_scan+0xa4>
 628:	40 9a       	sbi	0x08, 0	; 8
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	97 ee       	ldi	r25, 0xE7	; 231
 62e:	a3 e0       	ldi	r26, 0x03	; 3
 630:	81 50       	subi	r24, 0x01	; 1
 632:	90 40       	sbci	r25, 0x00	; 0
 634:	a0 40       	sbci	r26, 0x00	; 0
 636:	e1 f7       	brne	.-8      	; 0x630 <KBD_scan+0x92>
 638:	00 c0       	rjmp	.+0      	; 0x63a <KBD_scan+0x9c>
 63a:	00 00       	nop
 63c:	40 98       	cbi	0x08, 0	; 8
 63e:	86 e1       	ldi	r24, 0x16	; 22
 640:	34 c0       	rjmp	.+104    	; 0x6aa <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
 642:	84 30       	cpi	r24, 0x04	; 4
 644:	c1 f5       	brne	.+112    	; 0x6b6 <KBD_scan+0x118>
 646:	40 9a       	sbi	0x08, 0	; 8
 648:	af e3       	ldi	r26, 0x3F	; 63
 64a:	bc e9       	ldi	r27, 0x9C	; 156
 64c:	11 97       	sbiw	r26, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <KBD_scan+0xae>
 650:	00 c0       	rjmp	.+0      	; 0x652 <KBD_scan+0xb4>
 652:	00 00       	nop
 654:	40 98       	cbi	0x08, 0	; 8
 656:	85 e1       	ldi	r24, 0x15	; 21
 658:	28 c0       	rjmp	.+80     	; 0x6aa <KBD_scan+0x10c>
    }
	if (but == 3) {
 65a:	13 30       	cpi	r17, 0x03	; 3
 65c:	61 f5       	brne	.+88     	; 0x6b6 <KBD_scan+0x118>
	  if (code == BUT_RELEASED_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
 65e:	83 30       	cpi	r24, 0x03	; 3
 660:	51 f4       	brne	.+20     	; 0x676 <KBD_scan+0xd8>
 662:	40 9a       	sbi	0x08, 0	; 8
 664:	8f e3       	ldi	r24, 0x3F	; 63
 666:	9c e9       	ldi	r25, 0x9C	; 156
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <KBD_scan+0xca>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <KBD_scan+0xd0>
 66e:	00 00       	nop
 670:	40 98       	cbi	0x08, 0	; 8
 672:	8e e1       	ldi	r24, 0x1E	; 30
 674:	1a c0       	rjmp	.+52     	; 0x6aa <KBD_scan+0x10c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_MINUS_HOLD, 0, 0); }
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	69 f4       	brne	.+26     	; 0x694 <KBD_scan+0xf6>
 67a:	40 9a       	sbi	0x08, 0	; 8
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	97 ee       	ldi	r25, 0xE7	; 231
 680:	a3 e0       	ldi	r26, 0x03	; 3
 682:	81 50       	subi	r24, 0x01	; 1
 684:	90 40       	sbci	r25, 0x00	; 0
 686:	a0 40       	sbci	r26, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <KBD_scan+0xe4>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <KBD_scan+0xee>
 68c:	00 00       	nop
 68e:	40 98       	cbi	0x08, 0	; 8
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	0b c0       	rjmp	.+22     	; 0x6aa <KBD_scan+0x10c>
	  if (code == BUT_RELEASED_LONG_CODE) { BEEPER_TICK(); RTOS_setTask(EVENT_KEY_MINUS_LONG, 0, 0); }
 694:	84 30       	cpi	r24, 0x04	; 4
 696:	79 f4       	brne	.+30     	; 0x6b6 <KBD_scan+0x118>
 698:	40 9a       	sbi	0x08, 0	; 8
 69a:	af e3       	ldi	r26, 0x3F	; 63
 69c:	bc e9       	ldi	r27, 0x9C	; 156
 69e:	11 97       	sbiw	r26, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <KBD_scan+0x100>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <KBD_scan+0x106>
 6a4:	00 00       	nop
 6a6:	40 98       	cbi	0x08, 0	; 8
 6a8:	8f e1       	ldi	r24, 0x1F	; 31
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	0e 94 6f 03 	call	0x6de	; 0x6de <RTOS_setTask>
    }
  }
}
 6b6:	1f 91       	pop	r17
 6b8:	08 95       	ret

000006ba <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
 6ba:	e1 eb       	ldi	r30, 0xB1	; 177
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	84 60       	ori	r24, 0x04	; 4
 6c2:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
 6c8:	e0 e7       	ldi	r30, 0x70	; 112
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	81 60       	ori	r24, 0x01	; 1
 6d0:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
 6d2:	86 e0       	ldi	r24, 0x06	; 6
 6d4:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
 6d8:	10 92 e1 01 	sts	0x01E1, r1
}
 6dc:	08 95       	ret

000006de <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
 6de:	88 23       	and	r24, r24
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <RTOS_setTask+0x6>
 6e2:	6f c0       	rjmp	.+222    	; 0x7c2 <RTOS_setTask+0xe4>
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	1b c0       	rjmp	.+54     	; 0x71e <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
 6e8:	29 2f       	mov	r18, r25
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	f9 01       	movw	r30, r18
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	e2 0f       	add	r30, r18
 6f4:	f3 1f       	adc	r31, r19
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	ef 57       	subi	r30, 0x7F	; 127
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	20 81       	ld	r18, Z
 700:	28 17       	cp	r18, r24
 702:	61 f4       	brne	.+24     	; 0x71c <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
 704:	72 83       	std	Z+2, r23	; 0x02
 706:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
 708:	54 83       	std	Z+4, r21	; 0x04
 70a:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
 70c:	61 15       	cp	r22, r1
 70e:	71 05       	cpc	r23, r1
 710:	19 f4       	brne	.+6      	; 0x718 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	85 83       	std	Z+5, r24	; 0x05
 716:	08 95       	ret
      } else TaskArray[i].run = 0;   
 718:	15 82       	std	Z+5, r1	; 0x05
 71a:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
 71c:	9f 5f       	subi	r25, 0xFF	; 255
 71e:	20 91 e1 01 	lds	r18, 0x01E1
 722:	92 17       	cp	r25, r18
 724:	08 f3       	brcs	.-62     	; 0x6e8 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
 726:	20 91 e1 01 	lds	r18, 0x01E1
 72a:	20 31       	cpi	r18, 0x10	; 16
 72c:	08 f0       	brcs	.+2      	; 0x730 <RTOS_setTask+0x52>
 72e:	49 c0       	rjmp	.+146    	; 0x7c2 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
 730:	20 91 e1 01 	lds	r18, 0x01E1
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	f9 01       	movw	r30, r18
 738:	ee 0f       	add	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	e2 0f       	add	r30, r18
 73e:	f3 1f       	adc	r31, r19
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	ef 57       	subi	r30, 0x7F	; 127
 746:	fe 4f       	sbci	r31, 0xFE	; 254
 748:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
 74a:	20 91 e1 01 	lds	r18, 0x01E1
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	e2 0f       	add	r30, r18
 758:	f3 1f       	adc	r31, r19
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	ef 57       	subi	r30, 0x7F	; 127
 760:	fe 4f       	sbci	r31, 0xFE	; 254
 762:	72 83       	std	Z+2, r23	; 0x02
 764:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
 766:	20 91 e1 01 	lds	r18, 0x01E1
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	f9 01       	movw	r30, r18
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	e2 0f       	add	r30, r18
 774:	f3 1f       	adc	r31, r19
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	ef 57       	subi	r30, 0x7F	; 127
 77c:	fe 4f       	sbci	r31, 0xFE	; 254
 77e:	54 83       	std	Z+4, r21	; 0x04
 780:	43 83       	std	Z+3, r20	; 0x03
 782:	89 2f       	mov	r24, r25
 784:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
 786:	61 15       	cp	r22, r1
 788:	71 05       	cpc	r23, r1
 78a:	61 f4       	brne	.+24     	; 0x7a4 <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
 78c:	fc 01       	movw	r30, r24
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	e8 0f       	add	r30, r24
 794:	f9 1f       	adc	r31, r25
 796:	ee 0f       	add	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	ef 57       	subi	r30, 0x7F	; 127
 79c:	fe 4f       	sbci	r31, 0xFE	; 254
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	85 83       	std	Z+5, r24	; 0x05
 7a2:	0a c0       	rjmp	.+20     	; 0x7b8 <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
 7a4:	fc 01       	movw	r30, r24
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31
 7aa:	e8 0f       	add	r30, r24
 7ac:	f9 1f       	adc	r31, r25
 7ae:	ee 0f       	add	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	ef 57       	subi	r30, 0x7F	; 127
 7b4:	fe 4f       	sbci	r31, 0xFE	; 254
 7b6:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
 7b8:	80 91 e1 01 	lds	r24, 0x01E1
 7bc:	8f 5f       	subi	r24, 0xFF	; 255
 7be:	80 93 e1 01 	sts	0x01E1, r24
 7c2:	08 95       	ret

000007c4 <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	2e c0       	rjmp	.+92     	; 0x824 <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
 7c8:	29 2f       	mov	r18, r25
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	d9 01       	movw	r26, r18
 7ce:	aa 0f       	add	r26, r26
 7d0:	bb 1f       	adc	r27, r27
 7d2:	a2 0f       	add	r26, r18
 7d4:	b3 1f       	adc	r27, r19
 7d6:	aa 0f       	add	r26, r26
 7d8:	bb 1f       	adc	r27, r27
 7da:	af 57       	subi	r26, 0x7F	; 127
 7dc:	be 4f       	sbci	r27, 0xFE	; 254
 7de:	4c 91       	ld	r20, X
 7e0:	48 17       	cp	r20, r24
 7e2:	f9 f4       	brne	.+62     	; 0x822 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
 7e4:	80 91 e1 01 	lds	r24, 0x01E1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	01 97       	sbiw	r24, 0x01	; 1
 7ec:	28 17       	cp	r18, r24
 7ee:	39 07       	cpc	r19, r25
 7f0:	91 f0       	breq	.+36     	; 0x816 <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
 7f2:	80 91 e1 01 	lds	r24, 0x01E1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	fc 01       	movw	r30, r24
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	e8 0f       	add	r30, r24
 802:	f9 1f       	adc	r31, r25
 804:	ee 0f       	add	r30, r30
 806:	ff 1f       	adc	r31, r31
 808:	ef 57       	subi	r30, 0x7F	; 127
 80a:	fe 4f       	sbci	r31, 0xFE	; 254
 80c:	86 e0       	ldi	r24, 0x06	; 6
 80e:	01 90       	ld	r0, Z+
 810:	0d 92       	st	X+, r0
 812:	81 50       	subi	r24, 0x01	; 1
 814:	e1 f7       	brne	.-8      	; 0x80e <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
 816:	80 91 e1 01 	lds	r24, 0x01E1
 81a:	81 50       	subi	r24, 0x01	; 1
 81c:	80 93 e1 01 	sts	0x01E1, r24
      return;
 820:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
 822:	9f 5f       	subi	r25, 0xFF	; 255
 824:	20 91 e1 01 	lds	r18, 0x01E1
 828:	92 17       	cp	r25, r18
 82a:	70 f2       	brcs	.-100    	; 0x7c8 <RTOS_deleteTask+0x4>
 82c:	08 95       	ret

0000082e <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
 832:	80 91 80 01 	lds	r24, 0x0180
 836:	88 23       	and	r24, r24
 838:	11 f4       	brne	.+4      	; 0x83e <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 83a:	10 e0       	ldi	r17, 0x00	; 0
 83c:	4e c0       	rjmp	.+156    	; 0x8da <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
 83e:	10 92 80 01 	sts	0x0180, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 842:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
 844:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 846:	17 c0       	rjmp	.+46     	; 0x876 <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
 848:	82 2f       	mov	r24, r18
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	fc 01       	movw	r30, r24
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	e8 0f       	add	r30, r24
 854:	f9 1f       	adc	r31, r25
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	ef 57       	subi	r30, 0x7F	; 127
 85c:	fe 4f       	sbci	r31, 0xFE	; 254
 85e:	81 81       	ldd	r24, Z+1	; 0x01
 860:	92 81       	ldd	r25, Z+2	; 0x02
 862:	00 97       	sbiw	r24, 0x00	; 0
 864:	11 f4       	brne	.+4      	; 0x86a <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
 866:	35 83       	std	Z+5, r19	; 0x05
 868:	05 c0       	rjmp	.+10     	; 0x874 <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
 86a:	81 81       	ldd	r24, Z+1	; 0x01
 86c:	92 81       	ldd	r25, Z+2	; 0x02
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	92 83       	std	Z+2, r25	; 0x02
 872:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
 874:	2f 5f       	subi	r18, 0xFF	; 255
 876:	80 91 e1 01 	lds	r24, 0x01E1
 87a:	28 17       	cp	r18, r24
 87c:	28 f3       	brcs	.-54     	; 0x848 <RTOS_dispatchTask+0x1a>
 87e:	dd cf       	rjmp	.-70     	; 0x83a <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
 880:	81 2f       	mov	r24, r17
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	fc 01       	movw	r30, r24
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	e8 0f       	add	r30, r24
 88c:	f9 1f       	adc	r31, r25
 88e:	ee 0f       	add	r30, r30
 890:	ff 1f       	adc	r31, r31
 892:	ef 57       	subi	r30, 0x7F	; 127
 894:	fe 4f       	sbci	r31, 0xFE	; 254
 896:	85 81       	ldd	r24, Z+5	; 0x05
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	f1 f4       	brne	.+60     	; 0x8d8 <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
 89c:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
 89e:	23 81       	ldd	r18, Z+3	; 0x03
 8a0:	34 81       	ldd	r19, Z+4	; 0x04
 8a2:	21 15       	cp	r18, r1
 8a4:	31 05       	cpc	r19, r1
 8a6:	31 f4       	brne	.+12     	; 0x8b4 <RTOS_dispatchTask+0x86>
      {  
        cli();
 8a8:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
 8aa:	80 81       	ld	r24, Z
 8ac:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <RTOS_deleteTask>
        sei();
 8b0:	78 94       	sei
 8b2:	0c c0       	rjmp	.+24     	; 0x8cc <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
 8b4:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
 8b6:	21 81       	ldd	r18, Z+1	; 0x01
 8b8:	32 81       	ldd	r19, Z+2	; 0x02
 8ba:	21 15       	cp	r18, r1
 8bc:	31 05       	cpc	r19, r1
 8be:	31 f4       	brne	.+12     	; 0x8cc <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
 8c0:	23 81       	ldd	r18, Z+3	; 0x03
 8c2:	34 81       	ldd	r19, Z+4	; 0x04
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	30 40       	sbci	r19, 0x00	; 0
 8c8:	32 83       	std	Z+2, r19	; 0x02
 8ca:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
 8cc:	e0 91 04 01 	lds	r30, 0x0104
 8d0:	f0 91 05 01 	lds	r31, 0x0105
 8d4:	80 2f       	mov	r24, r16
 8d6:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
 8d8:	1f 5f       	subi	r17, 0xFF	; 255
 8da:	80 91 e1 01 	lds	r24, 0x01E1
 8de:	18 17       	cp	r17, r24
 8e0:	78 f2       	brcs	.-98     	; 0x880 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	08 95       	ret

000008e8 <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
 8e8:	1f 92       	push	r1
 8ea:	0f 92       	push	r0
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	0f 92       	push	r0
 8f0:	11 24       	eor	r1, r1
 8f2:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
 8f4:	86 e0       	ldi	r24, 0x06	; 6
 8f6:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	80 93 80 01 	sts	0x0180, r24
}
 900:	8f 91       	pop	r24
 902:	0f 90       	pop	r0
 904:	0f be       	out	0x3f, r0	; 63
 906:	0f 90       	pop	r0
 908:	1f 90       	pop	r1
 90a:	18 95       	reti

0000090c <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
 90c:	80 52       	subi	r24, 0x20	; 32
 90e:	86 35       	cpi	r24, 0x56	; 86
 910:	30 f4       	brcc	.+12     	; 0x91e <MAX7219_lookupCode+0x12>
 912:	e8 2f       	mov	r30, r24
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	ea 5e       	subi	r30, 0xEA	; 234
 918:	fe 4f       	sbci	r31, 0xFE	; 254
 91a:	80 81       	ld	r24, Z
 91c:	08 95       	ret
 91e:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
 920:	08 95       	ret

00000922 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
 922:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
 924:	87 ff       	sbrs	r24, 7
 926:	02 c0       	rjmp	.+4      	; 0x92c <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
 928:	43 9a       	sbi	0x08, 3	; 8
 92a:	01 c0       	rjmp	.+2      	; 0x92e <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 92c:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 92e:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
 930:	00 00       	nop
	asm("nop");
 932:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
 934:	42 9a       	sbi	0x08, 2	; 8
 936:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
 938:	11 f0       	breq	.+4      	; 0x93e <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
 93a:	88 0f       	add	r24, r24
 93c:	f3 cf       	rjmp	.-26     	; 0x924 <MAX7219_SendByte+0x2>
 93e:	08 95       	ret

00000940 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
 940:	ff 92       	push	r15
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	18 2f       	mov	r17, r24
 948:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
 94a:	41 98       	cbi	0x08, 1	; 8
 94c:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
 94e:	81 2f       	mov	r24, r17
 950:	0e 94 91 04 	call	0x922	; 0x922 <MAX7219_SendByte>
	MAX7219_SendByte(data);
 954:	8f 2d       	mov	r24, r15
 956:	0e 94 91 04 	call	0x922	; 0x922 <MAX7219_SendByte>
 95a:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
 95c:	c1 f7       	brne	.-16     	; 0x94e <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 95e:	41 9a       	sbi	0x08, 1	; 8
  return;
}
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	ff 90       	pop	r15
 966:	08 95       	ret

00000968 <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
 968:	0f 93       	push	r16
 96a:	1f 93       	push	r17
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	c6 e0       	ldi	r28, 0x06	; 6
 972:	d1 e0       	ldi	r29, 0x01	; 1
 974:	0e e0       	ldi	r16, 0x0E	; 14
 976:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
 978:	89 91       	ld	r24, Y+
 97a:	f8 01       	movw	r30, r16
 97c:	61 91       	ld	r22, Z+
 97e:	8f 01       	movw	r16, r30
 980:	8f 5f       	subi	r24, 0xFF	; 255
 982:	0e 94 a0 04 	call	0x940	; 0x940 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
 986:	f1 e0       	ldi	r31, 0x01	; 1
 988:	ce 30       	cpi	r28, 0x0E	; 14
 98a:	df 07       	cpc	r29, r31
 98c:	a9 f7       	brne	.-22     	; 0x978 <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	08 95       	ret

00000998 <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
 998:	10 92 0e 01 	sts	0x010E, r1
 99c:	10 92 0f 01 	sts	0x010F, r1
 9a0:	10 92 10 01 	sts	0x0110, r1
 9a4:	10 92 11 01 	sts	0x0111, r1
 9a8:	10 92 12 01 	sts	0x0112, r1
 9ac:	10 92 13 01 	sts	0x0113, r1
 9b0:	10 92 14 01 	sts	0x0114, r1
 9b4:	10 92 15 01 	sts	0x0115, r1
  }
  MAX7219_updateDisplay();
 9b8:	0e 94 b4 04 	call	0x968	; 0x968 <MAX7219_updateDisplay>
}
 9bc:	08 95       	ret

000009be <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 9be:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
 9c0:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
 9c2:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
 9c4:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
 9c6:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
 9c8:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
 9ca:	8c e0       	ldi	r24, 0x0C	; 12
 9cc:	61 e0       	ldi	r22, 0x01	; 1
 9ce:	0e 94 a0 04 	call	0x940	; 0x940 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
 9d2:	8f e0       	ldi	r24, 0x0F	; 15
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	0e 94 a0 04 	call	0x940	; 0x940 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
 9da:	89 e0       	ldi	r24, 0x09	; 9
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	0e 94 a0 04 	call	0x940	; 0x940 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
 9e2:	8a e0       	ldi	r24, 0x0A	; 10
 9e4:	62 e0       	ldi	r22, 0x02	; 2
 9e6:	0e 94 a0 04 	call	0x940	; 0x940 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
 9ea:	8b e0       	ldi	r24, 0x0B	; 11
 9ec:	67 e0       	ldi	r22, 0x07	; 7
 9ee:	0e 94 a0 04 	call	0x940	; 0x940 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
 9f2:	0e 94 cc 04 	call	0x998	; 0x998 <MAX7219_clearDisplay>
  return;
}
 9f6:	08 95       	ret

000009f8 <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
 9f8:	bf 92       	push	r11
 9fa:	cf 92       	push	r12
 9fc:	df 92       	push	r13
 9fe:	ef 92       	push	r14
 a00:	ff 92       	push	r15
 a02:	0f 93       	push	r16
 a04:	1f 93       	push	r17
 a06:	df 93       	push	r29
 a08:	cf 93       	push	r28
 a0a:	cd b7       	in	r28, 0x3d	; 61
 a0c:	de b7       	in	r29, 0x3e	; 62
 a0e:	27 97       	sbiw	r28, 0x07	; 7
 a10:	0f b6       	in	r0, 0x3f	; 63
 a12:	f8 94       	cli
 a14:	de bf       	out	0x3e, r29	; 62
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	cd bf       	out	0x3d, r28	; 61
 a1a:	b8 2e       	mov	r11, r24
 a1c:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
 a1e:	77 ff       	sbrs	r23, 7
 a20:	05 c0       	rjmp	.+10     	; 0xa2c <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
 a22:	90 95       	com	r25
 a24:	81 95       	neg	r24
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
 a28:	31 e0       	ldi	r19, 0x01	; 1
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
 a2c:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
 a2e:	e4 2f       	mov	r30, r20
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	8e 01       	movw	r16, r28
 a34:	0f 5f       	subi	r16, 0xFF	; 255
 a36:	1f 4f       	sbci	r17, 0xFF	; 255
 a38:	e0 0f       	add	r30, r16
 a3a:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
 a3c:	5a e0       	ldi	r21, 0x0A	; 10
 a3e:	e5 2e       	mov	r14, r21
 a40:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
 a42:	07 c0       	rjmp	.+14     	; 0xa52 <MAX7219_printNum+0x5a>
 a44:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
 a46:	b7 01       	movw	r22, r14
 a48:	0e 94 91 07 	call	0xf22	; 0xf22 <__divmodhi4>
 a4c:	80 5d       	subi	r24, 0xD0	; 208
 a4e:	80 83       	st	Z, r24
    x /= 10;
 a50:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
 a52:	e0 17       	cp	r30, r16
 a54:	f1 07       	cpc	r31, r17
 a56:	b1 f7       	brne	.-20     	; 0xa44 <MAX7219_printNum+0x4c>
 a58:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 a5a:	84 2f       	mov	r24, r20
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
 a60:	de 01       	movw	r26, r28
 a62:	11 96       	adiw	r26, 0x01	; 1
 a64:	08 c0       	rjmp	.+16     	; 0xa76 <MAX7219_printNum+0x7e>
 a66:	fd 01       	movw	r30, r26
 a68:	e6 0f       	add	r30, r22
 a6a:	f7 1f       	adc	r31, r23
 a6c:	60 81       	ld	r22, Z
 a6e:	60 33       	cpi	r22, 0x30	; 48
 a70:	11 f5       	brne	.+68     	; 0xab6 <MAX7219_printNum+0xbe>
 a72:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
 a74:	5f 5f       	subi	r21, 0xFF	; 255
 a76:	65 2f       	mov	r22, r21
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	68 17       	cp	r22, r24
 a7c:	79 07       	cpc	r23, r25
 a7e:	9c f3       	brlt	.-26     	; 0xa66 <MAX7219_printNum+0x6e>
 a80:	1a c0       	rjmp	.+52     	; 0xab6 <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 a82:	82 2f       	mov	r24, r18
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	8c 01       	movw	r16, r24
 a88:	0c 0d       	add	r16, r12
 a8a:	1d 1d       	adc	r17, r13
 a8c:	08 30       	cpi	r16, 0x08	; 8
 a8e:	11 05       	cpc	r17, r1
 a90:	84 f4       	brge	.+32     	; 0xab2 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 a92:	8e 0d       	add	r24, r14
 a94:	9f 1d       	adc	r25, r15
 a96:	fc 01       	movw	r30, r24
 a98:	80 81       	ld	r24, Z
 a9a:	2d 83       	std	Y+5, r18	; 0x05
 a9c:	3e 83       	std	Y+6, r19	; 0x06
 a9e:	4f 83       	std	Y+7, r20	; 0x07
 aa0:	0e 94 86 04 	call	0x90c	; 0x90c <MAX7219_lookupCode>
 aa4:	f8 01       	movw	r30, r16
 aa6:	e2 5f       	subi	r30, 0xF2	; 242
 aa8:	fe 4f       	sbci	r31, 0xFE	; 254
 aaa:	80 83       	st	Z, r24
 aac:	4f 81       	ldd	r20, Y+7	; 0x07
 aae:	3e 81       	ldd	r19, Y+6	; 0x06
 ab0:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 ab2:	2f 5f       	subi	r18, 0xFF	; 255
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
 ab6:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
 ab8:	cb 2c       	mov	r12, r11
 aba:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
 abc:	7e 01       	movw	r14, r28
 abe:	08 94       	sec
 ac0:	e1 1c       	adc	r14, r1
 ac2:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
 ac4:	24 17       	cp	r18, r20
 ac6:	e8 f2       	brcs	.-70     	; 0xa82 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
 ac8:	33 23       	and	r19, r19
 aca:	41 f0       	breq	.+16     	; 0xadc <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
 acc:	8d e2       	ldi	r24, 0x2D	; 45
 ace:	0e 94 86 04 	call	0x90c	; 0x90c <MAX7219_lookupCode>
 ad2:	eb 2d       	mov	r30, r11
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	e3 5f       	subi	r30, 0xF3	; 243
 ad8:	fe 4f       	sbci	r31, 0xFE	; 254
 ada:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
 adc:	0e 94 b4 04 	call	0x968	; 0x968 <MAX7219_updateDisplay>
}
 ae0:	27 96       	adiw	r28, 0x07	; 7
 ae2:	0f b6       	in	r0, 0x3f	; 63
 ae4:	f8 94       	cli
 ae6:	de bf       	out	0x3e, r29	; 62
 ae8:	0f be       	out	0x3f, r0	; 63
 aea:	cd bf       	out	0x3d, r28	; 61
 aec:	cf 91       	pop	r28
 aee:	df 91       	pop	r29
 af0:	1f 91       	pop	r17
 af2:	0f 91       	pop	r16
 af4:	ff 90       	pop	r15
 af6:	ef 90       	pop	r14
 af8:	df 90       	pop	r13
 afa:	cf 90       	pop	r12
 afc:	bf 90       	pop	r11
 afe:	08 95       	ret

00000b00 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
 b00:	1f 93       	push	r17
 b02:	18 2f       	mov	r17, r24
 b04:	86 2f       	mov	r24, r22
  if (pos < 9) {
 b06:	19 30       	cpi	r17, 0x09	; 9
 b08:	48 f4       	brcc	.+18     	; 0xb1c <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
 b0a:	0e 94 86 04 	call	0x90c	; 0x90c <MAX7219_lookupCode>
 b0e:	e1 2f       	mov	r30, r17
 b10:	f0 e0       	ldi	r31, 0x00	; 0
 b12:	e3 5f       	subi	r30, 0xF3	; 243
 b14:	fe 4f       	sbci	r31, 0xFE	; 254
 b16:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
 b18:	0e 94 b4 04 	call	0x968	; 0x968 <MAX7219_updateDisplay>
  }
}
 b1c:	1f 91       	pop	r17
 b1e:	08 95       	ret

00000b20 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
 b20:	ef 92       	push	r14
 b22:	ff 92       	push	r15
 b24:	1f 93       	push	r17
 b26:	cf 93       	push	r28
 b28:	df 93       	push	r29
  unsigned char i = pos;
 b2a:	e6 2e       	mov	r14, r22
 b2c:	e7 01       	movw	r28, r14
 b2e:	7e 01       	movw	r14, r28
 b30:	f7 2e       	mov	r15, r23
 b32:	e7 01       	movw	r28, r14
 b34:	18 2f       	mov	r17, r24
  while(*data) {
 b36:	0a c0       	rjmp	.+20     	; 0xb4c <MAX7219_printStr+0x2c>
    if (i < 9) {
 b38:	19 30       	cpi	r17, 0x09	; 9
 b3a:	58 f4       	brcc	.+22     	; 0xb52 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
 b3c:	0e 94 86 04 	call	0x90c	; 0x90c <MAX7219_lookupCode>
 b40:	e1 2f       	mov	r30, r17
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	e3 5f       	subi	r30, 0xF3	; 243
 b46:	fe 4f       	sbci	r31, 0xFE	; 254
 b48:	80 83       	st	Z, r24
      i++;
 b4a:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
 b4c:	89 91       	ld	r24, Y+
 b4e:	88 23       	and	r24, r24
 b50:	99 f7       	brne	.-26     	; 0xb38 <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
 b52:	0e 94 b4 04 	call	0x968	; 0x968 <MAX7219_updateDisplay>
}
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	1f 91       	pop	r17
 b5c:	ff 90       	pop	r15
 b5e:	ef 90       	pop	r14
 b60:	08 95       	ret

00000b62 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
 b62:	e8 2f       	mov	r30, r24
 b64:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
 b66:	61 30       	cpi	r22, 0x01	; 1
 b68:	29 f4       	brne	.+10     	; 0xb74 <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
 b6a:	e3 5f       	subi	r30, 0xF3	; 243
 b6c:	fe 4f       	sbci	r31, 0xFE	; 254
 b6e:	80 81       	ld	r24, Z
 b70:	80 68       	ori	r24, 0x80	; 128
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
 b74:	e3 5f       	subi	r30, 0xF3	; 243
 b76:	fe 4f       	sbci	r31, 0xFE	; 254
 b78:	80 81       	ld	r24, Z
 b7a:	8f 77       	andi	r24, 0x7F	; 127
 b7c:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
 b7e:	0e 94 b4 04 	call	0x968	; 0x968 <MAX7219_updateDisplay>
}
 b82:	08 95       	ret

00000b84 <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
 b84:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
 b86:	f8 94       	cli
  switch(chanel) {
 b88:	82 30       	cpi	r24, 0x02	; 2
 b8a:	01 f1       	breq	.+64     	; 0xbcc <ds18x20IsOnBus+0x48>
 b8c:	83 30       	cpi	r24, 0x03	; 3
 b8e:	20 f4       	brcc	.+8      	; 0xb98 <ds18x20IsOnBus+0x14>
 b90:	81 30       	cpi	r24, 0x01	; 1
 b92:	09 f0       	breq	.+2      	; 0xb96 <ds18x20IsOnBus+0x12>
 b94:	57 c0       	rjmp	.+174    	; 0xc44 <ds18x20IsOnBus+0xc0>
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <ds18x20IsOnBus+0x20>
 b98:	83 30       	cpi	r24, 0x03	; 3
 b9a:	61 f1       	breq	.+88     	; 0xbf4 <ds18x20IsOnBus+0x70>
 b9c:	84 30       	cpi	r24, 0x04	; 4
 b9e:	09 f0       	breq	.+2      	; 0xba2 <ds18x20IsOnBus+0x1e>
 ba0:	51 c0       	rjmp	.+162    	; 0xc44 <ds18x20IsOnBus+0xc0>
 ba2:	3e c0       	rjmp	.+124    	; 0xc20 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
 ba4:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 ba6:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ba8:	8f e7       	ldi	r24, 0x7F	; 127
 baa:	97 e0       	ldi	r25, 0x07	; 7
 bac:	01 97       	sbiw	r24, 0x01	; 1
 bae:	f1 f7       	brne	.-4      	; 0xbac <ds18x20IsOnBus+0x28>
 bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <ds18x20IsOnBus+0x2e>
 bb2:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 bb4:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 bb6:	29 9a       	sbi	0x05, 1	; 5
 bb8:	a7 e1       	ldi	r26, 0x17	; 23
 bba:	b1 e0       	ldi	r27, 0x01	; 1
 bbc:	11 97       	sbiw	r26, 0x01	; 1
 bbe:	f1 f7       	brne	.-4      	; 0xbbc <ds18x20IsOnBus+0x38>
 bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <ds18x20IsOnBus+0x3e>
 bc2:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
 bc4:	81 e0       	ldi	r24, 0x01	; 1
 bc6:	19 9b       	sbis	0x03, 1	; 3
 bc8:	3e c0       	rjmp	.+124    	; 0xc46 <ds18x20IsOnBus+0xc2>
 bca:	3c c0       	rjmp	.+120    	; 0xc44 <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
 bcc:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
 bce:	28 98       	cbi	0x05, 0	; 5
 bd0:	8f e7       	ldi	r24, 0x7F	; 127
 bd2:	97 e0       	ldi	r25, 0x07	; 7
 bd4:	01 97       	sbiw	r24, 0x01	; 1
 bd6:	f1 f7       	brne	.-4      	; 0xbd4 <ds18x20IsOnBus+0x50>
 bd8:	00 c0       	rjmp	.+0      	; 0xbda <ds18x20IsOnBus+0x56>
 bda:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
 bdc:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
 bde:	28 9a       	sbi	0x05, 0	; 5
 be0:	a7 e1       	ldi	r26, 0x17	; 23
 be2:	b1 e0       	ldi	r27, 0x01	; 1
 be4:	11 97       	sbiw	r26, 0x01	; 1
 be6:	f1 f7       	brne	.-4      	; 0xbe4 <ds18x20IsOnBus+0x60>
 be8:	00 c0       	rjmp	.+0      	; 0xbea <ds18x20IsOnBus+0x66>
 bea:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	18 9b       	sbis	0x03, 0	; 3
 bf0:	2a c0       	rjmp	.+84     	; 0xc46 <ds18x20IsOnBus+0xc2>
 bf2:	28 c0       	rjmp	.+80     	; 0xc44 <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
 bf4:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
 bf6:	5f 98       	cbi	0x0b, 7	; 11
 bf8:	8f e7       	ldi	r24, 0x7F	; 127
 bfa:	97 e0       	ldi	r25, 0x07	; 7
 bfc:	01 97       	sbiw	r24, 0x01	; 1
 bfe:	f1 f7       	brne	.-4      	; 0xbfc <ds18x20IsOnBus+0x78>
 c00:	00 c0       	rjmp	.+0      	; 0xc02 <ds18x20IsOnBus+0x7e>
 c02:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
 c04:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
 c06:	5f 9a       	sbi	0x0b, 7	; 11
 c08:	a7 e1       	ldi	r26, 0x17	; 23
 c0a:	b1 e0       	ldi	r27, 0x01	; 1
 c0c:	11 97       	sbiw	r26, 0x01	; 1
 c0e:	f1 f7       	brne	.-4      	; 0xc0c <ds18x20IsOnBus+0x88>
 c10:	00 c0       	rjmp	.+0      	; 0xc12 <ds18x20IsOnBus+0x8e>
 c12:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
 c14:	89 b1       	in	r24, 0x09	; 9
 c16:	80 95       	com	r24
 c18:	88 1f       	adc	r24, r24
 c1a:	88 27       	eor	r24, r24
 c1c:	88 1f       	adc	r24, r24
    break;
 c1e:	13 c0       	rjmp	.+38     	; 0xc46 <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
 c20:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
 c22:	2a 98       	cbi	0x05, 2	; 5
 c24:	8f e7       	ldi	r24, 0x7F	; 127
 c26:	97 e0       	ldi	r25, 0x07	; 7
 c28:	01 97       	sbiw	r24, 0x01	; 1
 c2a:	f1 f7       	brne	.-4      	; 0xc28 <ds18x20IsOnBus+0xa4>
 c2c:	00 c0       	rjmp	.+0      	; 0xc2e <ds18x20IsOnBus+0xaa>
 c2e:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
 c30:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
 c32:	2a 9a       	sbi	0x05, 2	; 5
 c34:	a7 e1       	ldi	r26, 0x17	; 23
 c36:	b1 e0       	ldi	r27, 0x01	; 1
 c38:	11 97       	sbiw	r26, 0x01	; 1
 c3a:	f1 f7       	brne	.-4      	; 0xc38 <ds18x20IsOnBus+0xb4>
 c3c:	00 c0       	rjmp	.+0      	; 0xc3e <ds18x20IsOnBus+0xba>
 c3e:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
 c40:	81 e0       	ldi	r24, 0x01	; 1
 c42:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	a7 e6       	ldi	r26, 0x67	; 103
 c48:	b6 e0       	ldi	r27, 0x06	; 6
 c4a:	11 97       	sbiw	r26, 0x01	; 1
 c4c:	f1 f7       	brne	.-4      	; 0xc4a <ds18x20IsOnBus+0xc6>
 c4e:	00 c0       	rjmp	.+0      	; 0xc50 <ds18x20IsOnBus+0xcc>
 c50:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	ef 51       	subi	r30, 0x1F	; 31
 c56:	fe 4f       	sbci	r31, 0xFE	; 254
 c58:	80 83       	st	Z, r24
  sei();
 c5a:	78 94       	sei
  return ret;
}
 c5c:	08 95       	ret

00000c5e <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
 c5e:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
 c60:	98 2f       	mov	r25, r24
 c62:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
 c64:	f8 94       	cli
  switch(chanel) {
 c66:	62 30       	cpi	r22, 0x02	; 2
 c68:	e1 f0       	breq	.+56     	; 0xca2 <ds18x20SendByte+0x44>
 c6a:	63 30       	cpi	r22, 0x03	; 3
 c6c:	20 f4       	brcc	.+8      	; 0xc76 <ds18x20SendByte+0x18>
 c6e:	61 30       	cpi	r22, 0x01	; 1
 c70:	09 f0       	breq	.+2      	; 0xc74 <ds18x20SendByte+0x16>
 c72:	52 c0       	rjmp	.+164    	; 0xd18 <ds18x20SendByte+0xba>
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <ds18x20SendByte+0x24>
 c76:	63 30       	cpi	r22, 0x03	; 3
 c78:	21 f1       	breq	.+72     	; 0xcc2 <ds18x20SendByte+0x64>
 c7a:	64 30       	cpi	r22, 0x04	; 4
 c7c:	09 f0       	breq	.+2      	; 0xc80 <ds18x20SendByte+0x22>
 c7e:	4c c0       	rjmp	.+152    	; 0xd18 <ds18x20SendByte+0xba>
 c80:	30 c0       	rjmp	.+96     	; 0xce2 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
 c82:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
 c84:	29 98       	cbi	0x05, 1	; 5
 c86:	30 e2       	ldi	r19, 0x20	; 32
 c88:	3a 95       	dec	r19
 c8a:	f1 f7       	brne	.-4      	; 0xc88 <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 c8c:	99 23       	and	r25, r25
 c8e:	31 f4       	brne	.+12     	; 0xc9c <ds18x20SendByte+0x3e>
 c90:	e7 ed       	ldi	r30, 0xD7	; 215
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	31 97       	sbiw	r30, 0x01	; 1
 c96:	f1 f7       	brne	.-4      	; 0xc94 <ds18x20SendByte+0x36>
 c98:	00 c0       	rjmp	.+0      	; 0xc9a <ds18x20SendByte+0x3c>
 c9a:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
 c9c:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
 c9e:	29 9a       	sbi	0x05, 1	; 5
 ca0:	2f c0       	rjmp	.+94     	; 0xd00 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
 ca2:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
 ca4:	28 98       	cbi	0x05, 0	; 5
 ca6:	f0 e2       	ldi	r31, 0x20	; 32
 ca8:	fa 95       	dec	r31
 caa:	f1 f7       	brne	.-4      	; 0xca8 <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 cac:	99 23       	and	r25, r25
 cae:	31 f4       	brne	.+12     	; 0xcbc <ds18x20SendByte+0x5e>
 cb0:	e7 ed       	ldi	r30, 0xD7	; 215
 cb2:	f0 e0       	ldi	r31, 0x00	; 0
 cb4:	31 97       	sbiw	r30, 0x01	; 1
 cb6:	f1 f7       	brne	.-4      	; 0xcb4 <ds18x20SendByte+0x56>
 cb8:	00 c0       	rjmp	.+0      	; 0xcba <ds18x20SendByte+0x5c>
 cba:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
 cbc:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
 cbe:	28 9a       	sbi	0x05, 0	; 5
 cc0:	1f c0       	rjmp	.+62     	; 0xd00 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
 cc2:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
 cc4:	5f 98       	cbi	0x0b, 7	; 11
 cc6:	f0 e2       	ldi	r31, 0x20	; 32
 cc8:	fa 95       	dec	r31
 cca:	f1 f7       	brne	.-4      	; 0xcc8 <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 ccc:	99 23       	and	r25, r25
 cce:	31 f4       	brne	.+12     	; 0xcdc <ds18x20SendByte+0x7e>
 cd0:	e7 ed       	ldi	r30, 0xD7	; 215
 cd2:	f0 e0       	ldi	r31, 0x00	; 0
 cd4:	31 97       	sbiw	r30, 0x01	; 1
 cd6:	f1 f7       	brne	.-4      	; 0xcd4 <ds18x20SendByte+0x76>
 cd8:	00 c0       	rjmp	.+0      	; 0xcda <ds18x20SendByte+0x7c>
 cda:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
 cdc:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
 cde:	5f 9a       	sbi	0x0b, 7	; 11
 ce0:	0f c0       	rjmp	.+30     	; 0xd00 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
 ce2:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
 ce4:	2a 98       	cbi	0x05, 2	; 5
 ce6:	f0 e2       	ldi	r31, 0x20	; 32
 ce8:	fa 95       	dec	r31
 cea:	f1 f7       	brne	.-4      	; 0xce8 <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
 cec:	99 23       	and	r25, r25
 cee:	31 f4       	brne	.+12     	; 0xcfc <ds18x20SendByte+0x9e>
 cf0:	e7 ed       	ldi	r30, 0xD7	; 215
 cf2:	f0 e0       	ldi	r31, 0x00	; 0
 cf4:	31 97       	sbiw	r30, 0x01	; 1
 cf6:	f1 f7       	brne	.-4      	; 0xcf4 <ds18x20SendByte+0x96>
 cf8:	00 c0       	rjmp	.+0      	; 0xcfa <ds18x20SendByte+0x9c>
 cfa:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
 cfc:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
 cfe:	2a 9a       	sbi	0x05, 2	; 5
 d00:	f5 e3       	ldi	r31, 0x35	; 53
 d02:	fa 95       	dec	r31
 d04:	f1 f7       	brne	.-4      	; 0xd02 <ds18x20SendByte+0xa4>
 d06:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
 d08:	99 23       	and	r25, r25
 d0a:	31 f0       	breq	.+12     	; 0xd18 <ds18x20SendByte+0xba>
 d0c:	e7 ed       	ldi	r30, 0xD7	; 215
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	31 97       	sbiw	r30, 0x01	; 1
 d12:	f1 f7       	brne	.-4      	; 0xd10 <ds18x20SendByte+0xb2>
 d14:	00 c0       	rjmp	.+0      	; 0xd16 <ds18x20SendByte+0xb8>
 d16:	00 00       	nop
    break;
  }
  sei();
 d18:	78 94       	sei
 d1a:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
 d1c:	11 f0       	breq	.+4      	; 0xd22 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
 d1e:	86 95       	lsr	r24
 d20:	9f cf       	rjmp	.-194    	; 0xc60 <ds18x20SendByte+0x2>
 d22:	08 95       	ret

00000d24 <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
 d24:	28 2f       	mov	r18, r24
 d26:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
 d28:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
 d2a:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
 d2c:	f8 94       	cli
  switch(chanel) {
 d2e:	22 30       	cpi	r18, 0x02	; 2
 d30:	c1 f0       	breq	.+48     	; 0xd62 <ds18x20GetByte+0x3e>
 d32:	23 30       	cpi	r18, 0x03	; 3
 d34:	20 f4       	brcc	.+8      	; 0xd3e <ds18x20GetByte+0x1a>
 d36:	21 30       	cpi	r18, 0x01	; 1
 d38:	09 f0       	breq	.+2      	; 0xd3c <ds18x20GetByte+0x18>
 d3a:	40 c0       	rjmp	.+128    	; 0xdbc <ds18x20GetByte+0x98>
 d3c:	05 c0       	rjmp	.+10     	; 0xd48 <ds18x20GetByte+0x24>
 d3e:	23 30       	cpi	r18, 0x03	; 3
 d40:	e9 f0       	breq	.+58     	; 0xd7c <ds18x20GetByte+0x58>
 d42:	24 30       	cpi	r18, 0x04	; 4
 d44:	d9 f5       	brne	.+118    	; 0xdbc <ds18x20GetByte+0x98>
 d46:	27 c0       	rjmp	.+78     	; 0xd96 <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
 d48:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
 d4a:	29 98       	cbi	0x05, 1	; 5
 d4c:	90 e2       	ldi	r25, 0x20	; 32
 d4e:	9a 95       	dec	r25
 d50:	f1 f7       	brne	.-4      	; 0xd4e <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
 d52:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
 d54:	29 9a       	sbi	0x05, 1	; 5
 d56:	e0 e3       	ldi	r30, 0x30	; 48
 d58:	ea 95       	dec	r30
 d5a:	f1 f7       	brne	.-4      	; 0xd58 <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
 d5c:	93 b1       	in	r25, 0x03	; 3
 d5e:	92 70       	andi	r25, 0x02	; 2
 d60:	26 c0       	rjmp	.+76     	; 0xdae <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
 d62:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
 d64:	28 98       	cbi	0x05, 0	; 5
 d66:	f0 e2       	ldi	r31, 0x20	; 32
 d68:	fa 95       	dec	r31
 d6a:	f1 f7       	brne	.-4      	; 0xd68 <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
 d6c:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
 d6e:	28 9a       	sbi	0x05, 0	; 5
 d70:	90 e3       	ldi	r25, 0x30	; 48
 d72:	9a 95       	dec	r25
 d74:	f1 f7       	brne	.-4      	; 0xd72 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
 d76:	93 b1       	in	r25, 0x03	; 3
 d78:	91 70       	andi	r25, 0x01	; 1
 d7a:	19 c0       	rjmp	.+50     	; 0xdae <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
 d7c:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
 d7e:	5f 98       	cbi	0x0b, 7	; 11
 d80:	f0 e2       	ldi	r31, 0x20	; 32
 d82:	fa 95       	dec	r31
 d84:	f1 f7       	brne	.-4      	; 0xd82 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
 d86:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
 d88:	5f 9a       	sbi	0x0b, 7	; 11
 d8a:	90 e3       	ldi	r25, 0x30	; 48
 d8c:	9a 95       	dec	r25
 d8e:	f1 f7       	brne	.-4      	; 0xd8c <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
 d90:	99 b1       	in	r25, 0x09	; 9
 d92:	90 78       	andi	r25, 0x80	; 128
 d94:	0c c0       	rjmp	.+24     	; 0xdae <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
 d96:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
 d98:	2a 98       	cbi	0x05, 2	; 5
 d9a:	f0 e2       	ldi	r31, 0x20	; 32
 d9c:	fa 95       	dec	r31
 d9e:	f1 f7       	brne	.-4      	; 0xd9c <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
 da0:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
 da2:	2a 9a       	sbi	0x05, 2	; 5
 da4:	90 e3       	ldi	r25, 0x30	; 48
 da6:	9a 95       	dec	r25
 da8:	f1 f7       	brne	.-4      	; 0xda6 <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
 daa:	93 b1       	in	r25, 0x03	; 3
 dac:	94 70       	andi	r25, 0x04	; 4
 dae:	eb ed       	ldi	r30, 0xDB	; 219
 db0:	f0 e0       	ldi	r31, 0x00	; 0
 db2:	31 97       	sbiw	r30, 0x01	; 1
 db4:	f1 f7       	brne	.-4      	; 0xdb2 <ds18x20GetByte+0x8e>
 db6:	00 c0       	rjmp	.+0      	; 0xdb8 <ds18x20GetByte+0x94>
 db8:	00 00       	nop
 dba:	01 c0       	rjmp	.+2      	; 0xdbe <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
 dbc:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
 dbe:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
 dc0:	91 11       	cpse	r25, r1
 dc2:	80 68       	ori	r24, 0x80	; 128
 dc4:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
 dc6:	09 f0       	breq	.+2      	; 0xdca <ds18x20GetByte+0xa6>
 dc8:	b0 cf       	rjmp	.-160    	; 0xd2a <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
 dca:	08 95       	ret

00000dcc <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
 dcc:	0f 93       	push	r16
 dce:	1f 93       	push	r17
 dd0:	cf 93       	push	r28
 dd2:	df 93       	push	r29
 dd4:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
 dd6:	0e 94 c2 05 	call	0xb84	; 0xb84 <ds18x20IsOnBus>
 dda:	88 23       	and	r24, r24
 ddc:	91 f1       	breq	.+100    	; 0xe42 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
 dde:	8c ec       	ldi	r24, 0xCC	; 204
 de0:	61 2f       	mov	r22, r17
 de2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
 de6:	8e eb       	ldi	r24, 0xBE	; 190
 de8:	61 2f       	mov	r22, r17
 dea:	0e 94 2f 06 	call	0xc5e	; 0xc5e <ds18x20SendByte>
 dee:	ce e0       	ldi	r28, 0x0E	; 14
 df0:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
 df2:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
 df4:	81 2f       	mov	r24, r17
 df6:	0e 94 92 06 	call	0xd24	; 0xd24 <ds18x20GetByte>
 dfa:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
 dfc:	08 27       	eor	r16, r24
 dfe:	88 e0       	ldi	r24, 0x08	; 8
 e00:	9c e8       	ldi	r25, 0x8C	; 140
 e02:	06 95       	lsr	r16
 e04:	08 f4       	brcc	.+2      	; 0xe08 <ds18x20ReadStratchPad+0x3c>
 e06:	09 27       	eor	r16, r25
 e08:	8a 95       	dec	r24
 e0a:	d9 f7       	brne	.-10     	; 0xe02 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
 e0c:	82 e0       	ldi	r24, 0x02	; 2
 e0e:	c7 31       	cpi	r28, 0x17	; 23
 e10:	d8 07       	cpc	r29, r24
 e12:	81 f7       	brne	.-32     	; 0xdf4 <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
 e14:	00 23       	and	r16, r16
 e16:	a9 f4       	brne	.+42     	; 0xe42 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
 e18:	81 2f       	mov	r24, r17
 e1a:	90 e0       	ldi	r25, 0x00	; 0
 e1c:	01 97       	sbiw	r24, 0x01	; 1
 e1e:	fc 01       	movw	r30, r24
 e20:	ee 0f       	add	r30, r30
 e22:	ff 1f       	adc	r31, r31
 e24:	23 e0       	ldi	r18, 0x03	; 3
 e26:	88 0f       	add	r24, r24
 e28:	99 1f       	adc	r25, r25
 e2a:	2a 95       	dec	r18
 e2c:	e1 f7       	brne	.-8      	; 0xe26 <ds18x20ReadStratchPad+0x5a>
 e2e:	e8 0f       	add	r30, r24
 e30:	f9 1f       	adc	r31, r25
 e32:	ea 51       	subi	r30, 0x1A	; 26
 e34:	fe 4f       	sbci	r31, 0xFE	; 254
 e36:	80 91 0e 02 	lds	r24, 0x020E
 e3a:	80 83       	st	Z, r24
 e3c:	80 91 0f 02 	lds	r24, 0x020F
 e40:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
 e42:	df 91       	pop	r29
 e44:	cf 91       	pop	r28
 e46:	1f 91       	pop	r17
 e48:	0f 91       	pop	r16
 e4a:	08 95       	ret

00000e4c <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
 e4c:	1f 93       	push	r17
 e4e:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
 e50:	0e 94 c2 05 	call	0xb84	; 0xb84 <ds18x20IsOnBus>
 e54:	88 23       	and	r24, r24
 e56:	41 f0       	breq	.+16     	; 0xe68 <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
 e58:	8c ec       	ldi	r24, 0xCC	; 204
 e5a:	61 2f       	mov	r22, r17
 e5c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
 e60:	84 e4       	ldi	r24, 0x44	; 68
 e62:	61 2f       	mov	r22, r17
 e64:	0e 94 2f 06 	call	0xc5e	; 0xc5e <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
 e68:	12 30       	cpi	r17, 0x02	; 2
 e6a:	69 f0       	breq	.+26     	; 0xe86 <ds18x20ConvertTemp+0x3a>
 e6c:	13 30       	cpi	r17, 0x03	; 3
 e6e:	18 f4       	brcc	.+6      	; 0xe76 <ds18x20ConvertTemp+0x2a>
 e70:	11 30       	cpi	r17, 0x01	; 1
 e72:	89 f4       	brne	.+34     	; 0xe96 <ds18x20ConvertTemp+0x4a>
 e74:	05 c0       	rjmp	.+10     	; 0xe80 <ds18x20ConvertTemp+0x34>
 e76:	13 30       	cpi	r17, 0x03	; 3
 e78:	49 f0       	breq	.+18     	; 0xe8c <ds18x20ConvertTemp+0x40>
 e7a:	14 30       	cpi	r17, 0x04	; 4
 e7c:	61 f4       	brne	.+24     	; 0xe96 <ds18x20ConvertTemp+0x4a>
 e7e:	09 c0       	rjmp	.+18     	; 0xe92 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 e80:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
 e82:	21 9a       	sbi	0x04, 1	; 4
    break;
 e84:	08 c0       	rjmp	.+16     	; 0xe96 <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
 e86:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
 e88:	20 9a       	sbi	0x04, 0	; 4
    break;
 e8a:	05 c0       	rjmp	.+10     	; 0xe96 <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
 e8c:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
 e8e:	57 9a       	sbi	0x0a, 7	; 10
    break;
 e90:	02 c0       	rjmp	.+4      	; 0xe96 <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
 e92:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
 e94:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
 e96:	1f 91       	pop	r17
 e98:	08 95       	ret

00000e9a <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
 e9a:	90 e0       	ldi	r25, 0x00	; 0
 e9c:	01 97       	sbiw	r24, 0x01	; 1
 e9e:	fc 01       	movw	r30, r24
 ea0:	ee 0f       	add	r30, r30
 ea2:	ff 1f       	adc	r31, r31
 ea4:	23 e0       	ldi	r18, 0x03	; 3
 ea6:	88 0f       	add	r24, r24
 ea8:	99 1f       	adc	r25, r25
 eaa:	2a 95       	dec	r18
 eac:	e1 f7       	brne	.-8      	; 0xea6 <ds18x20GetTemp+0xc>
 eae:	e8 0f       	add	r30, r24
 eb0:	f9 1f       	adc	r31, r25
 eb2:	ea 51       	subi	r30, 0x1A	; 26
 eb4:	fe 4f       	sbci	r31, 0xFE	; 254
 eb6:	40 81       	ld	r20, Z
 eb8:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
 eba:	9a 01       	movw	r18, r20
 ebc:	2f 70       	andi	r18, 0x0F	; 15
 ebe:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
 ec0:	c9 01       	movw	r24, r18
 ec2:	88 0f       	add	r24, r24
 ec4:	99 1f       	adc	r25, r25
 ec6:	a3 e0       	ldi	r26, 0x03	; 3
 ec8:	22 0f       	add	r18, r18
 eca:	33 1f       	adc	r19, r19
 ecc:	aa 95       	dec	r26
 ece:	e1 f7       	brne	.-8      	; 0xec8 <ds18x20GetTemp+0x2e>
 ed0:	28 0f       	add	r18, r24
 ed2:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
 ed4:	91 81       	ldd	r25, Z+1	; 0x01
 ed6:	80 e0       	ldi	r24, 0x00	; 0
 ed8:	84 2b       	or	r24, r20
 eda:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
 edc:	60 e1       	ldi	r22, 0x10	; 16
 ede:	70 e0       	ldi	r23, 0x00	; 0
 ee0:	0e 94 91 07 	call	0xf22	; 0xf22 <__divmodhi4>
 ee4:	ab 01       	movw	r20, r22
 ee6:	44 0f       	add	r20, r20
 ee8:	55 1f       	adc	r21, r21
 eea:	e3 e0       	ldi	r30, 0x03	; 3
 eec:	66 0f       	add	r22, r22
 eee:	77 1f       	adc	r23, r23
 ef0:	ea 95       	dec	r30
 ef2:	e1 f7       	brne	.-8      	; 0xeec <ds18x20GetTemp+0x52>
 ef4:	46 0f       	add	r20, r22
 ef6:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
 ef8:	64 e0       	ldi	r22, 0x04	; 4
 efa:	35 95       	asr	r19
 efc:	27 95       	ror	r18
 efe:	6a 95       	dec	r22
 f00:	e1 f7       	brne	.-8      	; 0xefa <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
 f02:	42 0f       	add	r20, r18
 f04:	53 1f       	adc	r21, r19
  return ret;
}
 f06:	ca 01       	movw	r24, r20
 f08:	08 95       	ret

00000f0a <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
 f0a:	e8 2f       	mov	r30, r24
 f0c:	f0 e0       	ldi	r31, 0x00	; 0
 f0e:	ef 51       	subi	r30, 0x1F	; 31
 f10:	fe 4f       	sbci	r31, 0xFE	; 254
}
 f12:	80 81       	ld	r24, Z
 f14:	08 95       	ret

00000f16 <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
 f16:	e8 2f       	mov	r30, r24
 f18:	f0 e0       	ldi	r31, 0x00	; 0
 f1a:	ef 51       	subi	r30, 0x1F	; 31
 f1c:	fe 4f       	sbci	r31, 0xFE	; 254
 f1e:	60 83       	st	Z, r22
}
 f20:	08 95       	ret

00000f22 <__divmodhi4>:
 f22:	97 fb       	bst	r25, 7
 f24:	09 2e       	mov	r0, r25
 f26:	07 26       	eor	r0, r23
 f28:	0a d0       	rcall	.+20     	; 0xf3e <__divmodhi4_neg1>
 f2a:	77 fd       	sbrc	r23, 7
 f2c:	04 d0       	rcall	.+8      	; 0xf36 <__divmodhi4_neg2>
 f2e:	0c d0       	rcall	.+24     	; 0xf48 <__udivmodhi4>
 f30:	06 d0       	rcall	.+12     	; 0xf3e <__divmodhi4_neg1>
 f32:	00 20       	and	r0, r0
 f34:	1a f4       	brpl	.+6      	; 0xf3c <__divmodhi4_exit>

00000f36 <__divmodhi4_neg2>:
 f36:	70 95       	com	r23
 f38:	61 95       	neg	r22
 f3a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f3c <__divmodhi4_exit>:
 f3c:	08 95       	ret

00000f3e <__divmodhi4_neg1>:
 f3e:	f6 f7       	brtc	.-4      	; 0xf3c <__divmodhi4_exit>
 f40:	90 95       	com	r25
 f42:	81 95       	neg	r24
 f44:	9f 4f       	sbci	r25, 0xFF	; 255
 f46:	08 95       	ret

00000f48 <__udivmodhi4>:
 f48:	aa 1b       	sub	r26, r26
 f4a:	bb 1b       	sub	r27, r27
 f4c:	51 e1       	ldi	r21, 0x11	; 17
 f4e:	07 c0       	rjmp	.+14     	; 0xf5e <__udivmodhi4_ep>

00000f50 <__udivmodhi4_loop>:
 f50:	aa 1f       	adc	r26, r26
 f52:	bb 1f       	adc	r27, r27
 f54:	a6 17       	cp	r26, r22
 f56:	b7 07       	cpc	r27, r23
 f58:	10 f0       	brcs	.+4      	; 0xf5e <__udivmodhi4_ep>
 f5a:	a6 1b       	sub	r26, r22
 f5c:	b7 0b       	sbc	r27, r23

00000f5e <__udivmodhi4_ep>:
 f5e:	88 1f       	adc	r24, r24
 f60:	99 1f       	adc	r25, r25
 f62:	5a 95       	dec	r21
 f64:	a9 f7       	brne	.-22     	; 0xf50 <__udivmodhi4_loop>
 f66:	80 95       	com	r24
 f68:	90 95       	com	r25
 f6a:	bc 01       	movw	r22, r24
 f6c:	cd 01       	movw	r24, r26
 f6e:	08 95       	ret

00000f70 <_exit>:
 f70:	f8 94       	cli

00000f72 <__stop_program>:
 f72:	ff cf       	rjmp	.-2      	; 0xf72 <__stop_program>
