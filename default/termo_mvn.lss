
termo_mvn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000019cc  00001a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800198  00800198  00001af8  2**0
                  ALLOC
  3 .stab         00000a08  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002775  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000531  00000000  00000000  00002835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000021d1  00000000  00000000  00002d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008f3  00000000  00000000  00004f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002373  00000000  00000000  0000582a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e0  00000000  00000000  00007ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005f1  00000000  00000000  00007f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c05  00000000  00000000  00008571  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000147  00000000  00000000  0000a176  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 39       	cpi	r26, 0x98	; 152
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a8 e9       	ldi	r26, 0x98	; 152
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 34       	cpi	r26, 0x4F	; 79
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
//=============================================================================
#define	DEBUG	0
//=============================================================================
int main(void)
{
  MAX7219_Init();
      a6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <MAX7219_Init>
  MAX7219_SendCmd(MAX7219_INTENSITY, load_brightnes());
      aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <load_brightnes>
      ae:	68 2f       	mov	r22, r24
      b0:	8a e0       	ldi	r24, 0x0A	; 10
      b2:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
  KBD_init();
      b6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <KBD_init>
  OUT_1_init();
      ba:	53 9a       	sbi	0x0a, 3	; 10
      bc:	5b 9a       	sbi	0x0b, 3	; 11
  OUT_2_init();
      be:	53 9a       	sbi	0x0a, 3	; 10
      c0:	5b 9a       	sbi	0x0b, 3	; 11
  BEEPER_init();
      c2:	38 9a       	sbi	0x07, 0	; 7
      c4:	40 98       	cbi	0x08, 0	; 8
  RTOS_init();
      c6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <RTOS_init>
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 1000); // запускаем секундный таймер,
      ca:	89 ec       	ldi	r24, 0xC9	; 201
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	48 ee       	ldi	r20, 0xE8	; 232
      d2:	53 e0       	ldi	r21, 0x03	; 3
      d4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
  RTOS_setTask(EVENT_TIMER_SECOND05, 0, 500); // запускаем секундный таймер,
      d8:	8a ec       	ldi	r24, 0xCA	; 202
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	44 ef       	ldi	r20, 0xF4	; 244
      e0:	51 e0       	ldi	r21, 0x01	; 1
      e2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
  RTOS_setTask(EVENT_KEY_POLL, 0, 5);        // запускаем сканирование клавиатуры
      e6:	88 ec       	ldi	r24, 0xC8	; 200
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	45 e0       	ldi	r20, 0x05	; 5
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
  RTOS_setTask(EVENT_SEARCH_SENSOR, 0, 0);   // запускаем сканирование сенсоров
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
  load_max_temp_1();
     102:	0e 94 31 02 	call	0x462	; 0x462 <load_max_temp_1>
  load_max_temp_2();
     106:	0e 94 43 02 	call	0x486	; 0x486 <load_max_temp_2>
  load_min_temp_1();
     10a:	0e 94 3a 02 	call	0x474	; 0x474 <load_min_temp_1>
  load_min_temp_2();
     10e:	0e 94 4c 02 	call	0x498	; 0x498 <load_min_temp_2>
  load_type1();
     112:	0e 94 6f 02 	call	0x4de	; 0x4de <load_type1>
  load_type2();
     116:	0e 94 7e 02 	call	0x4fc	; 0x4fc <load_type2>
    _delay_ms(100);
  }
  MAX7219_clearDisplay();
  }
#endif
  sei();
     11a:	78 94       	sei
  while(1) {
    RTOS_dispatchTask();        
     11c:	0e 94 12 09 	call	0x1224	; 0x1224 <RTOS_dispatchTask>
     120:	fd cf       	rjmp	.-6      	; 0x11c <main+0x76>

00000122 <print_temperature>:
uint8_t m_menu = MM_D1, n_edit = 0;
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	18 2f       	mov	r17, r24
  uint8_t sign = 0;
  if (temp < 0) { 
     128:	77 ff       	sbrs	r23, 7
     12a:	05 c0       	rjmp	.+10     	; 0x136 <print_temperature+0x14>
    sign = 1;
	temp = -temp;
     12c:	70 95       	com	r23
     12e:	61 95       	neg	r22
     130:	7f 4f       	sbci	r23, 0xFF	; 255
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
  if (temp < 0) { 
    sign = 1;
     132:	01 e0       	ldi	r16, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <print_temperature+0x16>
//=============================================================================
#define SET_STATE(a) pState = a // макрос для смены состояния
//=============================================================================
void print_temperature(uint8_t pos, int temp)
{
  uint8_t sign = 0;
     136:	00 e0       	ldi	r16, 0x00	; 0
  if (temp < 0) { 
    sign = 1;
	temp = -temp;
  }
  MAX7219_printNum(pos, temp, 3, ' ');
     138:	81 2f       	mov	r24, r17
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	20 e2       	ldi	r18, 0x20	; 32
     13e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MAX7219_printNum>
  MAX7219_setCommaPos(pos + 2,1);
     142:	81 2f       	mov	r24, r17
     144:	8e 5f       	subi	r24, 0xFE	; 254
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
  if (sign == 1) MAX7219_printChar(pos, '-');
     14c:	01 30       	cpi	r16, 0x01	; 1
     14e:	21 f4       	brne	.+8      	; 0x158 <print_temperature+0x36>
     150:	81 2f       	mov	r24, r17
     152:	6d e2       	ldi	r22, 0x2D	; 45
     154:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
}
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <check_temp>:
    break;
  }    
}
//=============================================================================
void check_temp(uint8_t chanel)
{
     15e:	1f 93       	push	r17
     160:	18 2f       	mov	r17, r24
 int16_t t = ds18x20GetTemp(chanel);
     162:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetTemp>
     166:	ac 01       	movw	r20, r24
 if (status[chanel - 1] == T_OTSLED_MAX) {
     168:	21 2f       	mov	r18, r17
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	30 40       	sbci	r19, 0x00	; 0
     170:	d9 01       	movw	r26, r18
     172:	a4 5d       	subi	r26, 0xD4	; 212
     174:	be 4f       	sbci	r27, 0xFE	; 254
     176:	8c 91       	ld	r24, X
     178:	b9 01       	movw	r22, r18
     17a:	66 0f       	add	r22, r22
     17c:	77 1f       	adc	r23, r23
     17e:	66 0f       	add	r22, r22
     180:	77 1f       	adc	r23, r23
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	81 f4       	brne	.+32     	; 0x1a6 <check_temp+0x48>
 // отслеживаем превышение максимума
   if (t < temps[chanel - 1][T_MAX]) {
     186:	65 56       	subi	r22, 0x65	; 101
     188:	7e 4f       	sbci	r23, 0xFE	; 254
     18a:	fb 01       	movw	r30, r22
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	f9 01       	movw	r30, r18
     192:	e6 5d       	subi	r30, 0xD6	; 214
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	48 17       	cp	r20, r24
     198:	59 07       	cpc	r21, r25
     19a:	94 f0       	brlt	.+36     	; 0x1c0 <check_temp+0x62>
       if (chanel == 1) OUT_1_0();
       if (chanel == 2) OUT_2_0();
       MAX7219_setCommaPos(1, 0);
	 }
   } else {
     status[chanel - 1] = T_OTSLED_MIN;
     19c:	1c 92       	st	X, r1
     if (types[chanel - 1] == 1) {
     19e:	80 81       	ld	r24, Z
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	89 f4       	brne	.+34     	; 0x1c6 <check_temp+0x68>
     1a4:	18 c0       	rjmp	.+48     	; 0x1d6 <check_temp+0x78>
       MAX7219_setCommaPos(1, 1);
	 }
   }
 } else {
 // отслеживаем превышение минимума
   if (t < temps[chanel - 1][T_MIN]) {
     1a6:	65 56       	subi	r22, 0x65	; 101
     1a8:	7e 4f       	sbci	r23, 0xFE	; 254
     1aa:	fb 01       	movw	r30, r22
     1ac:	62 81       	ldd	r22, Z+2	; 0x02
     1ae:	73 81       	ldd	r23, Z+3	; 0x03
     1b0:	f9 01       	movw	r30, r18
     1b2:	e6 5d       	subi	r30, 0xD6	; 214
     1b4:	fe 4f       	sbci	r31, 0xFE	; 254
     1b6:	46 17       	cp	r20, r22
     1b8:	57 07       	cpc	r21, r23
     1ba:	14 f4       	brge	.+4      	; 0x1c0 <check_temp+0x62>
     status[chanel - 1] = T_OTSLED_MAX;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	8c 93       	st	X, r24
       if (chanel == 1) OUT_1_0();
       if (chanel == 2) OUT_2_0();
       MAX7219_setCommaPos(1, 0);
	 }
   } else {
     if (types[chanel - 1] == 1) {
     1c0:	80 81       	ld	r24, Z
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	41 f4       	brne	.+16     	; 0x1d6 <check_temp+0x78>
       if (chanel == 1) OUT_1_1();
     1c6:	11 30       	cpi	r17, 0x01	; 1
     1c8:	11 f0       	breq	.+4      	; 0x1ce <check_temp+0x70>
       if (chanel == 2) OUT_2_1();
     1ca:	12 30       	cpi	r17, 0x02	; 2
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <check_temp+0x72>
     1ce:	5b 9a       	sbi	0x0b, 3	; 11
       MAX7219_setCommaPos(1, 1);
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <check_temp+0x86>
	 } else {
       if (chanel == 1) OUT_1_0();
     1d6:	11 30       	cpi	r17, 0x01	; 1
     1d8:	11 f0       	breq	.+4      	; 0x1de <check_temp+0x80>
       if (chanel == 2) OUT_2_0();
     1da:	12 30       	cpi	r17, 0x02	; 2
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <check_temp+0x82>
     1de:	5b 98       	cbi	0x0b, 3	; 11
       MAX7219_setCommaPos(1, 0);
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
	 }
   }
 }
}
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <DS18x20_scan>:
}
//=============================================================================
void DS18x20_scan(void)
{
  static uint8_t ds_state = 0;
  if (dscount > 0) { 
     1ec:	80 91 9a 01 	lds	r24, 0x019A
     1f0:	88 23       	and	r24, r24
     1f2:	21 f0       	breq	.+8      	; 0x1fc <DS18x20_scan+0x10>
    dscount--;
     1f4:	81 50       	subi	r24, 0x01	; 1
     1f6:	80 93 9a 01 	sts	0x019A, r24
	return;
     1fa:	08 95       	ret
  }
  switch(ds_state) {
     1fc:	80 91 a5 01 	lds	r24, 0x01A5
     200:	88 23       	and	r24, r24
     202:	19 f0       	breq	.+6      	; 0x20a <DS18x20_scan+0x1e>
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	29 f5       	brne	.+74     	; 0x252 <DS18x20_scan+0x66>
     208:	13 c0       	rjmp	.+38     	; 0x230 <DS18x20_scan+0x44>
    case 0:
      ds18x20ConvertTemp(1);
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(2);
     210:	82 e0       	ldi	r24, 0x02	; 2
     212:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(3);
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
      ds18x20ConvertTemp(4);
     21c:	84 e0       	ldi	r24, 0x04	; 4
     21e:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
	  dscount = 10;
     222:	8a e0       	ldi	r24, 0x0A	; 10
     224:	80 93 9a 01 	sts	0x019A, r24
	  ds_state = 1;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	80 93 a5 01 	sts	0x01A5, r24
    break;
     22e:	08 95       	ret
    case 1:
      ds18x20ReadStratchPad(1);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(2);
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(3);
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
      ds18x20ReadStratchPad(4);
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
	  dscount = SCAN_TIME / 100;
     248:	84 e1       	ldi	r24, 0x14	; 20
     24a:	80 93 9a 01 	sts	0x019A, r24
	  ds_state = 0;
     24e:	10 92 a5 01 	sts	0x01A5, r1
     252:	08 95       	ret

00000254 <events_default>:
  }    
}
//=============================================================================
void events_default(unsigned char event)
{
  switch(event) {
     254:	89 3c       	cpi	r24, 0xC9	; 201
     256:	29 f0       	breq	.+10     	; 0x262 <events_default+0xe>
     258:	8c 3c       	cpi	r24, 0xCC	; 204
     25a:	71 f0       	breq	.+28     	; 0x278 <events_default+0x24>
     25c:	88 3c       	cpi	r24, 0xC8	; 200
     25e:	71 f4       	brne	.+28     	; 0x27c <events_default+0x28>
     260:	08 c0       	rjmp	.+16     	; 0x272 <events_default+0x1e>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 91 26 01 	lds	r25, 0x0126
     268:	91 11       	cpse	r25, r1
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	80 93 26 01 	sts	0x0126, r24
    break;
     270:	08 95       	ret
    case EVENT_KEY_POLL: 
	  KBD_scan();
     272:	0e 94 02 08 	call	0x1004	; 0x1004 <KBD_scan>
    break;
     276:	08 95       	ret
    case EVENT_SCAN_SENSOR: 
	  DS18x20_scan();
     278:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DS18x20_scan>
     27c:	08 95       	ret

0000027e <run_start>:
  if (sign == 1) MAX7219_printChar(pos, '-');
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
     27e:	85 36       	cpi	r24, 0x65	; 101
     280:	09 f4       	brne	.+2      	; 0x284 <run_start+0x6>
     282:	b9 c0       	rjmp	.+370    	; 0x3f6 <run_start+0x178>
     284:	87 36       	cpi	r24, 0x67	; 103
     286:	09 f4       	brne	.+2      	; 0x28a <run_start+0xc>
     288:	8f c0       	rjmp	.+286    	; 0x3a8 <run_start+0x12a>
     28a:	84 36       	cpi	r24, 0x64	; 100
     28c:	09 f0       	breq	.+2      	; 0x290 <run_start+0x12>
     28e:	ce c0       	rjmp	.+412    	; 0x42c <run_start+0x1ae>
    case EVENT_SEARCH_SENSOR:
	  MAX7219_printStr(1, "dc");
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	71 e0       	ldi	r23, 0x01	; 1
     296:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
	  MAX7219_printChar(3, '-');
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	6d e2       	ldi	r22, 0x2D	; 45
     29e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	  ds_count = 0;
     2a2:	10 92 98 01 	sts	0x0198, r1
      ds18x20IsOnBus(1);
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 bd 0a 	call	0x157a	; 0x157a <ds18x20IsOnBus>
      ds18x20IsOnBus(2);
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	0e 94 bd 0a 	call	0x157a	; 0x157a <ds18x20IsOnBus>
      ds18x20IsOnBus(3);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	0e 94 bd 0a 	call	0x157a	; 0x157a <ds18x20IsOnBus>
      ds18x20IsOnBus(4);
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	0e 94 bd 0a 	call	0x157a	; 0x157a <ds18x20IsOnBus>
	  if (ds18x20GetDevCount(1) == 1) { ds_count++; MAX7219_printChar(5, '1'); } else { MAX7219_printChar(5, ' '); }
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	41 f4       	brne	.+16     	; 0x2d8 <run_start+0x5a>
     2c8:	80 91 98 01 	lds	r24, 0x0198
     2cc:	8f 5f       	subi	r24, 0xFF	; 255
     2ce:	80 93 98 01 	sts	0x0198, r24
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	61 e3       	ldi	r22, 0x31	; 49
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <run_start+0x5e>
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	60 e2       	ldi	r22, 0x20	; 32
     2dc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	  if (ds18x20GetDevCount(2) == 1) { ds_count++; MAX7219_printChar(6, '1'); } else { MAX7219_printChar(6, ' '); }
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	41 f4       	brne	.+16     	; 0x2fa <run_start+0x7c>
     2ea:	80 91 98 01 	lds	r24, 0x0198
     2ee:	8f 5f       	subi	r24, 0xFF	; 255
     2f0:	80 93 98 01 	sts	0x0198, r24
     2f4:	86 e0       	ldi	r24, 0x06	; 6
     2f6:	61 e3       	ldi	r22, 0x31	; 49
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <run_start+0x80>
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	60 e2       	ldi	r22, 0x20	; 32
     2fe:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	  if (ds18x20GetDevCount(3) == 1) { ds_count++; MAX7219_printChar(7, '1'); } else { MAX7219_printChar(7, ' '); }
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	41 f4       	brne	.+16     	; 0x31c <run_start+0x9e>
     30c:	80 91 98 01 	lds	r24, 0x0198
     310:	8f 5f       	subi	r24, 0xFF	; 255
     312:	80 93 98 01 	sts	0x0198, r24
     316:	87 e0       	ldi	r24, 0x07	; 7
     318:	61 e3       	ldi	r22, 0x31	; 49
     31a:	02 c0       	rjmp	.+4      	; 0x320 <run_start+0xa2>
     31c:	87 e0       	ldi	r24, 0x07	; 7
     31e:	60 e2       	ldi	r22, 0x20	; 32
     320:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	  if (ds18x20GetDevCount(4) == 1) { ds_count++; MAX7219_printChar(8, '1'); } else { MAX7219_printChar(8, ' '); }
     324:	84 e0       	ldi	r24, 0x04	; 4
     326:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	41 f4       	brne	.+16     	; 0x33e <run_start+0xc0>
     32e:	80 91 98 01 	lds	r24, 0x0198
     332:	8f 5f       	subi	r24, 0xFF	; 255
     334:	80 93 98 01 	sts	0x0198, r24
     338:	88 e0       	ldi	r24, 0x08	; 8
     33a:	61 e3       	ldi	r22, 0x31	; 49
     33c:	02 c0       	rjmp	.+4      	; 0x342 <run_start+0xc4>
     33e:	88 e0       	ldi	r24, 0x08	; 8
     340:	60 e2       	ldi	r22, 0x20	; 32
     342:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	  if (ds_count == 0) {
     346:	60 91 98 01 	lds	r22, 0x0198
     34a:	66 23       	and	r22, r22
     34c:	21 f4       	brne	.+8      	; 0x356 <run_start+0xd8>
        RTOS_setTask(EVENT_SEARCH_SENSOR, 3000, 0);
     34e:	84 e6       	ldi	r24, 0x64	; 100
     350:	68 eb       	ldi	r22, 0xB8	; 184
     352:	7b e0       	ldi	r23, 0x0B	; 11
     354:	4b c0       	rjmp	.+150    	; 0x3ec <run_start+0x16e>
	  } else {
	    MAX7219_printNum(3, ds_count, 1, ' ');
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	20 e2       	ldi	r18, 0x20	; 32
     35e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MAX7219_printNum>
	    if (ds18x20GetDevCount(1) == 1) { ds18x20ConvertTemp(1); }
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	11 f4       	brne	.+4      	; 0x370 <run_start+0xf2>
     36c:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(2) == 1) { ds18x20ConvertTemp(2); }
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	19 f4       	brne	.+6      	; 0x380 <run_start+0x102>
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(3) == 1) { ds18x20ConvertTemp(3); }
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	19 f4       	brne	.+6      	; 0x390 <run_start+0x112>
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
	    if (ds18x20GetDevCount(4) == 1) { ds18x20ConvertTemp(4); }
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	19 f4       	brne	.+6      	; 0x3a0 <run_start+0x122>
     39a:	84 e0       	ldi	r24, 0x04	; 4
     39c:	0e 94 21 0c 	call	0x1842	; 0x1842 <ds18x20ConvertTemp>
        RTOS_setTask(EVENT_GET_TEMPERATURE, 1000, 0);
     3a0:	87 e6       	ldi	r24, 0x67	; 103
     3a2:	68 ee       	ldi	r22, 0xE8	; 232
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	22 c0       	rjmp	.+68     	; 0x3ec <run_start+0x16e>
	  }
    break;
    case EVENT_GET_TEMPERATURE:
	  if (ds18x20GetDevCount(1) == 1) { ds18x20ReadStratchPad(1); }
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <run_start+0x138>
     3b2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(2) == 1) { ds18x20ReadStratchPad(2); }
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	19 f4       	brne	.+6      	; 0x3c6 <run_start+0x148>
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(3) == 1) { ds18x20ReadStratchPad(3); }
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	19 f4       	brne	.+6      	; 0x3d6 <run_start+0x158>
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
	  if (ds18x20GetDevCount(4) == 1) { ds18x20ReadStratchPad(4); }
     3d6:	84 e0       	ldi	r24, 0x04	; 4
     3d8:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <run_start+0x168>
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ds18x20ReadStratchPad>
      RTOS_setTask(EVENT_RUN_MAIN, 100, 0);
     3e6:	85 e6       	ldi	r24, 0x65	; 101
     3e8:	64 e6       	ldi	r22, 0x64	; 100
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
    break;
     3f4:	08 95       	ret
    case EVENT_RUN_MAIN:
      check_temp(chanel);
     3f6:	80 91 2e 01 	lds	r24, 0x012E
     3fa:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
      MAX7219_clearDisplay();
     3fe:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
      RTOS_setTask(EVENT_SCAN_SENSOR, 0, 100); 
     402:	8c ec       	ldi	r24, 0xCC	; 204
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	44 e6       	ldi	r20, 0x64	; 100
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     410:	88 e6       	ldi	r24, 0x68	; 104
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
      SET_STATE(run_main);
     41e:	82 ed       	ldi	r24, 0xD2	; 210
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	90 93 30 01 	sts	0x0130, r25
     426:	80 93 2f 01 	sts	0x012F, r24
    break;
     42a:	08 95       	ret
	default:
	  events_default(event);
     42c:	0e 94 2a 01 	call	0x254	; 0x254 <events_default>
     430:	08 95       	ret

00000432 <save_max_temp_1>:
    break;
  }
}
//=============================================================================
void save_max_temp_1(uint16_t temp)
{
     432:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_1_ADDR, temp);
     434:	80 e1       	ldi	r24, 0x10	; 16
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 cf 0c 	call	0x199e	; 0x199e <__eewr_word_m328p>
}
     43c:	08 95       	ret

0000043e <save_max_temp_2>:
//=============================================================================
void save_max_temp_2(uint16_t temp)
{
     43e:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MAX_TEMP_2_ADDR, temp);
     440:	80 e2       	ldi	r24, 0x20	; 32
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 cf 0c 	call	0x199e	; 0x199e <__eewr_word_m328p>
}
     448:	08 95       	ret

0000044a <save_min_temp_1>:
//=============================================================================
void save_min_temp_1(uint16_t temp)
{
     44a:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_1_ADDR, temp);
     44c:	82 e1       	ldi	r24, 0x12	; 18
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 cf 0c 	call	0x199e	; 0x199e <__eewr_word_m328p>
}
     454:	08 95       	ret

00000456 <save_min_temp_2>:
//=============================================================================
void save_min_temp_2(uint16_t temp)
{
     456:	bc 01       	movw	r22, r24
  eeprom_write_word((uint16_t*)MIN_TEMP_2_ADDR, temp);
     458:	82 e2       	ldi	r24, 0x22	; 34
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 cf 0c 	call	0x199e	; 0x199e <__eewr_word_m328p>
}
     460:	08 95       	ret

00000462 <load_max_temp_1>:
//=============================================================================
int16_t load_max_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_1_ADDR);
     462:	80 e1       	ldi	r24, 0x10	; 16
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][0] = (int16_t)tu;
     46a:	80 93 9b 01 	sts	0x019B, r24
     46e:	90 93 9c 01 	sts	0x019C, r25
  return (int16_t)tu;
}
     472:	08 95       	ret

00000474 <load_min_temp_1>:
//=============================================================================
int16_t load_min_temp_1(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_1_ADDR);
     474:	82 e1       	ldi	r24, 0x12	; 18
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[0][1] = (int16_t)tu;
     47c:	80 93 9d 01 	sts	0x019D, r24
     480:	90 93 9e 01 	sts	0x019E, r25
  return (int16_t)tu;
}
     484:	08 95       	ret

00000486 <load_max_temp_2>:
//=============================================================================
int16_t load_max_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MAX_TEMP_2_ADDR);
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][0] = (int16_t)tu;
     48e:	80 93 9f 01 	sts	0x019F, r24
     492:	90 93 a0 01 	sts	0x01A0, r25
  return (int16_t)tu;
}
     496:	08 95       	ret

00000498 <load_min_temp_2>:
//=============================================================================
int16_t load_min_temp_2(void)
{
  int16_t tu;
  uint16_t t = eeprom_read_word((uint16_t*)MIN_TEMP_2_ADDR);
     498:	82 e2       	ldi	r24, 0x22	; 34
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__eerd_word_m328p>
  tu = (int16_t)t;
  if ((tu > 800) && (tu < -45)) tu = 250;
  temps[1][1] = (int16_t)tu;
     4a0:	80 93 a1 01 	sts	0x01A1, r24
     4a4:	90 93 a2 01 	sts	0x01A2, r25
  return (int16_t)tu;
}
     4a8:	08 95       	ret

000004aa <save_brightnes>:
//=============================================================================
void save_brightnes(uint8_t val)
{
     4aa:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)BRIGHTNES_ADDR, val);
     4ac:	80 e3       	ldi	r24, 0x30	; 48
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__eewr_byte_m328p>
}
     4b4:	08 95       	ret

000004b6 <load_brightnes>:
//=============================================================================
uint8_t load_brightnes(void)
{
  brightnes = eeprom_read_byte((uint8_t*)BRIGHTNES_ADDR);
     4b6:	80 e3       	ldi	r24, 0x30	; 48
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__eerd_byte_m328p>
     4be:	80 93 29 01 	sts	0x0129, r24
  if (brightnes > 15) brightnes = 2;
     4c2:	80 31       	cpi	r24, 0x10	; 16
     4c4:	18 f0       	brcs	.+6      	; 0x4cc <load_brightnes+0x16>
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	80 93 29 01 	sts	0x0129, r24
  return brightnes;
}
     4cc:	80 91 29 01 	lds	r24, 0x0129
     4d0:	08 95       	ret

000004d2 <save_type_1>:
//=============================================================================
void save_type_1(uint8_t temp)
{
     4d2:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_1_ADDR, temp);
     4d4:	84 e1       	ldi	r24, 0x14	; 20
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__eewr_byte_m328p>
}
     4dc:	08 95       	ret

000004de <load_type1>:
//=============================================================================
uint8_t load_type1(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_1_ADDR);
     4de:	84 e1       	ldi	r24, 0x14	; 20
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__eerd_byte_m328p>
     4e6:	81 11       	cpse	r24, r1
     4e8:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[0] = t;
     4ea:	80 93 2a 01 	sts	0x012A, r24
  return t;
}
     4ee:	08 95       	ret

000004f0 <save_type_2>:
//=============================================================================
void save_type_2(uint8_t temp)
{
     4f0:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)OUT_TYPE_2_ADDR, temp);
     4f2:	84 e2       	ldi	r24, 0x24	; 36
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__eewr_byte_m328p>
}
     4fa:	08 95       	ret

000004fc <load_type2>:
//=============================================================================
uint8_t load_type2(void)
{
  uint8_t t = eeprom_read_byte((uint8_t*)OUT_TYPE_2_ADDR);
     4fc:	84 e2       	ldi	r24, 0x24	; 36
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__eerd_byte_m328p>
     504:	81 11       	cpse	r24, r1
     506:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = 1;
  types[1] = t;
     508:	80 93 2b 01 	sts	0x012B, r24
  return t;
}
     50c:	08 95       	ret

0000050e <show_menu>:
//=============================================================================
void show_menu(void)
{
  MAX7219_printStr(1, setmenu[m_menu]);
     50e:	e0 91 a3 01 	lds	r30, 0x01A3
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e0 5e       	subi	r30, 0xE0	; 224
     51a:	fe 4f       	sbci	r31, 0xFE	; 254
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
}
     526:	08 95       	ret

00000528 <run_set_brightnes>:
  }
}
//=============================================================================
void run_set_brightnes(unsigned char event)
{
  switch(event) {
     528:	86 31       	cpi	r24, 0x16	; 22
     52a:	38 f4       	brcc	.+14     	; 0x53a <run_set_brightnes+0x12>
     52c:	84 31       	cpi	r24, 0x14	; 20
     52e:	08 f0       	brcs	.+2      	; 0x532 <run_set_brightnes+0xa>
     530:	4d c0       	rjmp	.+154    	; 0x5cc <run_set_brightnes+0xa4>
     532:	8a 30       	cpi	r24, 0x0A	; 10
     534:	09 f0       	breq	.+2      	; 0x538 <run_set_brightnes+0x10>
     536:	7a c0       	rjmp	.+244    	; 0x62c <run_set_brightnes+0x104>
     538:	38 c0       	rjmp	.+112    	; 0x5aa <run_set_brightnes+0x82>
     53a:	89 3c       	cpi	r24, 0xC9	; 201
     53c:	31 f0       	breq	.+12     	; 0x54a <run_set_brightnes+0x22>
     53e:	8a 3c       	cpi	r24, 0xCA	; 202
     540:	e1 f0       	breq	.+56     	; 0x57a <run_set_brightnes+0x52>
     542:	8e 31       	cpi	r24, 0x1E	; 30
     544:	09 f0       	breq	.+2      	; 0x548 <run_set_brightnes+0x20>
     546:	72 c0       	rjmp	.+228    	; 0x62c <run_set_brightnes+0x104>
     548:	5b c0       	rjmp	.+182    	; 0x600 <run_set_brightnes+0xd8>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 91 26 01 	lds	r25, 0x0126
     550:	91 11       	cpse	r25, r1
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	80 93 26 01 	sts	0x0126, r24
	  if (wait_menu > 0) wait_menu--; else {
     558:	80 91 28 01 	lds	r24, 0x0128
     55c:	88 23       	and	r24, r24
     55e:	21 f0       	breq	.+8      	; 0x568 <run_set_brightnes+0x40>
     560:	81 50       	subi	r24, 0x01	; 1
     562:	80 93 28 01 	sts	0x0128, r24
     566:	08 95       	ret
        MAX7219_clearDisplay();
     568:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     56c:	89 e1       	ldi	r24, 0x19	; 25
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	90 93 30 01 	sts	0x0130, r25
     574:	80 93 2f 01 	sts	0x012F, r24
     578:	08 95       	ret
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 91 27 01 	lds	r25, 0x0127
     580:	91 11       	cpse	r25, r1
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	80 93 27 01 	sts	0x0127, r24
	  if (blink05) {
     588:	88 23       	and	r24, r24
     58a:	49 f0       	breq	.+18     	; 0x59e <run_set_brightnes+0x76>
        MAX7219_printNum(4, brightnes, 2, ' ');
     58c:	60 91 29 01 	lds	r22, 0x0129
     590:	84 e0       	ldi	r24, 0x04	; 4
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	42 e0       	ldi	r20, 0x02	; 2
     596:	20 e2       	ldi	r18, 0x20	; 32
     598:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MAX7219_printNum>
     59c:	08 95       	ret
	  } else {
        MAX7219_printStr(4, "   ");
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	63 e0       	ldi	r22, 0x03	; 3
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
     5a8:	08 95       	ret
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     5aa:	84 e1       	ldi	r24, 0x14	; 20
     5ac:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     5b0:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b2:	8f e3       	ldi	r24, 0x3F	; 63
     5b4:	9c e9       	ldi	r25, 0x9C	; 156
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <run_set_brightnes+0x8e>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <run_set_brightnes+0x94>
     5bc:	00 00       	nop
     5be:	40 98       	cbi	0x08, 0	; 8
	  if (brightnes > 0) {
     5c0:	60 91 29 01 	lds	r22, 0x0129
     5c4:	66 23       	and	r22, r22
     5c6:	a1 f1       	breq	.+104    	; 0x630 <run_set_brightnes+0x108>
	    brightnes--;
     5c8:	61 50       	subi	r22, 0x01	; 1
     5ca:	2a c0       	rjmp	.+84     	; 0x620 <run_set_brightnes+0xf8>
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
      }
    break;
    case EVENT_KEY_SET:
    case EVENT_KEY_SET_LONG:
      wait_menu = WAIT_MENU_TIME;
     5cc:	84 e1       	ldi	r24, 0x14	; 20
     5ce:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     5d2:	40 9a       	sbi	0x08, 0	; 8
     5d4:	8f e3       	ldi	r24, 0x3F	; 63
     5d6:	9c e9       	ldi	r25, 0x9C	; 156
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <run_set_brightnes+0xb0>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <run_set_brightnes+0xb6>
     5de:	00 00       	nop
     5e0:	40 98       	cbi	0x08, 0	; 8
	  save_brightnes(brightnes);
     5e2:	80 91 29 01 	lds	r24, 0x0129
     5e6:	0e 94 55 02 	call	0x4aa	; 0x4aa <save_brightnes>
      MAX7219_clearDisplay();
     5ea:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     5ee:	89 e1       	ldi	r24, 0x19	; 25
     5f0:	93 e0       	ldi	r25, 0x03	; 3
     5f2:	90 93 30 01 	sts	0x0130, r25
     5f6:	80 93 2f 01 	sts	0x012F, r24
      show_menu();
     5fa:	0e 94 87 02 	call	0x50e	; 0x50e <show_menu>
    break;
     5fe:	08 95       	ret
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     600:	84 e1       	ldi	r24, 0x14	; 20
     602:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     606:	40 9a       	sbi	0x08, 0	; 8
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	9c e9       	ldi	r25, 0x9C	; 156
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <run_set_brightnes+0xe4>
     610:	00 c0       	rjmp	.+0      	; 0x612 <run_set_brightnes+0xea>
     612:	00 00       	nop
     614:	40 98       	cbi	0x08, 0	; 8
	  if (brightnes < 15) {
     616:	60 91 29 01 	lds	r22, 0x0129
     61a:	6f 30       	cpi	r22, 0x0F	; 15
     61c:	48 f4       	brcc	.+18     	; 0x630 <run_set_brightnes+0x108>
	    brightnes++;
     61e:	6f 5f       	subi	r22, 0xFF	; 255
     620:	60 93 29 01 	sts	0x0129, r22
	    MAX7219_SendCmd(MAX7219_INTENSITY, brightnes);
     624:	8a e0       	ldi	r24, 0x0A	; 10
     626:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
     62a:	08 95       	ret
      }
    break;
	default:
	  events_default(event);
     62c:	0e 94 2a 01 	call	0x254	; 0x254 <events_default>
     630:	08 95       	ret

00000632 <run_menu>:
  }    
}
//=============================================================================
void run_menu(unsigned char event)
{
  switch(event) {
     632:	85 31       	cpi	r24, 0x15	; 21
     634:	09 f4       	brne	.+2      	; 0x638 <run_menu+0x6>
     636:	7b c0       	rjmp	.+246    	; 0x72e <run_menu+0xfc>
     638:	86 31       	cpi	r24, 0x16	; 22
     63a:	30 f4       	brcc	.+12     	; 0x648 <run_menu+0x16>
     63c:	8a 30       	cpi	r24, 0x0A	; 10
     63e:	49 f1       	breq	.+82     	; 0x692 <run_menu+0x60>
     640:	84 31       	cpi	r24, 0x14	; 20
     642:	09 f0       	breq	.+2      	; 0x646 <run_menu+0x14>
     644:	ac c0       	rjmp	.+344    	; 0x79e <run_menu+0x16c>
     646:	41 c0       	rjmp	.+130    	; 0x6ca <run_menu+0x98>
     648:	8e 31       	cpi	r24, 0x1E	; 30
     64a:	09 f4       	brne	.+2      	; 0x64e <run_menu+0x1c>
     64c:	8b c0       	rjmp	.+278    	; 0x764 <run_menu+0x132>
     64e:	89 3c       	cpi	r24, 0xC9	; 201
     650:	09 f0       	breq	.+2      	; 0x654 <run_menu+0x22>
     652:	a5 c0       	rjmp	.+330    	; 0x79e <run_menu+0x16c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 91 26 01 	lds	r25, 0x0126
     65a:	91 11       	cpse	r25, r1
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	80 93 26 01 	sts	0x0126, r24
	  if (wait_menu > 0) wait_menu--; else {
     662:	80 91 28 01 	lds	r24, 0x0128
     666:	88 23       	and	r24, r24
     668:	21 f0       	breq	.+8      	; 0x672 <run_menu+0x40>
     66a:	81 50       	subi	r24, 0x01	; 1
     66c:	80 93 28 01 	sts	0x0128, r24
     670:	07 c0       	rjmp	.+14     	; 0x680 <run_menu+0x4e>
        RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); 
     672:	85 e1       	ldi	r24, 0x15	; 21
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
	  }
	  if (m_menu == MM_BRIGHTNES) {
     680:	80 91 a3 01 	lds	r24, 0x01A3
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	09 f4       	brne	.+2      	; 0x68a <run_menu+0x58>
     688:	49 c0       	rjmp	.+146    	; 0x71c <run_menu+0xea>
        MAX7219_printNum(4, brightnes, 2, ' ');
	  } else {
        MAX7219_printStr(4, "   ");
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	19 c0       	rjmp	.+50     	; 0x6c4 <run_menu+0x92>
	  }
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     692:	84 e1       	ldi	r24, 0x14	; 20
     694:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     698:	40 9a       	sbi	0x08, 0	; 8
     69a:	8f e3       	ldi	r24, 0x3F	; 63
     69c:	9c e9       	ldi	r25, 0x9C	; 156
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <run_menu+0x6c>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <run_menu+0x72>
     6a4:	00 00       	nop
     6a6:	40 98       	cbi	0x08, 0	; 8
	  if (m_menu > 0) m_menu--; else m_menu = MMENU_MAX;
     6a8:	80 91 a3 01 	lds	r24, 0x01A3
     6ac:	88 23       	and	r24, r24
     6ae:	11 f0       	breq	.+4      	; 0x6b4 <run_menu+0x82>
     6b0:	81 50       	subi	r24, 0x01	; 1
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <run_menu+0x84>
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	80 93 a3 01 	sts	0x01A3, r24
	  show_menu();
     6ba:	0e 94 87 02 	call	0x50e	; 0x50e <show_menu>
      MAX7219_printStr(5, "    ");
     6be:	85 e0       	ldi	r24, 0x05	; 5
     6c0:	67 e0       	ldi	r22, 0x07	; 7
     6c2:	71 e0       	ldi	r23, 0x01	; 1
     6c4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
    break;
     6c8:	08 95       	ret
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     6ca:	80 93 28 01 	sts	0x0128, r24
	  n_edit = 0;
     6ce:	10 92 a4 01 	sts	0x01A4, r1
	  BEEPER_TICK();
     6d2:	40 9a       	sbi	0x08, 0	; 8
     6d4:	8f e3       	ldi	r24, 0x3F	; 63
     6d6:	9c e9       	ldi	r25, 0x9C	; 156
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <run_menu+0xa6>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <run_menu+0xac>
     6de:	00 00       	nop
     6e0:	40 98       	cbi	0x08, 0	; 8
	  if (m_menu == MM_D1) {
     6e2:	80 91 a3 01 	lds	r24, 0x01A3
     6e6:	88 23       	and	r24, r24
     6e8:	29 f4       	brne	.+10     	; 0x6f4 <run_menu+0xc2>
        MAX7219_clearDisplay();
     6ea:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
        SET_STATE(run_set_1);
     6ee:	84 e2       	ldi	r24, 0x24	; 36
     6f0:	96 e0       	ldi	r25, 0x06	; 6
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <run_menu+0xce>
	  } else if (m_menu == MM_D2) {
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	49 f4       	brne	.+18     	; 0x70a <run_menu+0xd8>
        MAX7219_clearDisplay();
     6f8:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
        SET_STATE(run_set_2);
     6fc:	86 ef       	ldi	r24, 0xF6	; 246
     6fe:	94 e0       	ldi	r25, 0x04	; 4
     700:	90 93 30 01 	sts	0x0130, r25
     704:	80 93 2f 01 	sts	0x012F, r24
     708:	08 95       	ret
	  } else if (m_menu == MM_BRIGHTNES) {
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	09 f0       	breq	.+2      	; 0x710 <run_menu+0xde>
     70e:	49 c0       	rjmp	.+146    	; 0x7a2 <run_menu+0x170>
        SET_STATE(run_set_brightnes);
     710:	84 e9       	ldi	r24, 0x94	; 148
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	90 93 30 01 	sts	0x0130, r25
     718:	80 93 2f 01 	sts	0x012F, r24
        MAX7219_printNum(4, brightnes, 2, ' ');
     71c:	60 91 29 01 	lds	r22, 0x0129
     720:	84 e0       	ldi	r24, 0x04	; 4
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	42 e0       	ldi	r20, 0x02	; 2
     726:	20 e2       	ldi	r18, 0x20	; 32
     728:	0e 94 f7 09 	call	0x13ee	; 0x13ee <MAX7219_printNum>
     72c:	08 95       	ret
	  }
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     72e:	40 9a       	sbi	0x08, 0	; 8
     730:	8f e3       	ldi	r24, 0x3F	; 63
     732:	9c e9       	ldi	r25, 0x9C	; 156
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <run_menu+0x102>
     738:	00 c0       	rjmp	.+0      	; 0x73a <run_menu+0x108>
     73a:	00 00       	nop
     73c:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     73e:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
	  chanel = 1;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 2e 01 	sts	0x012E, r24
      SET_STATE(run_main);
     748:	82 ed       	ldi	r24, 0xD2	; 210
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	90 93 30 01 	sts	0x0130, r25
     750:	80 93 2f 01 	sts	0x012F, r24
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, SHOW_TIME); 
     754:	88 e6       	ldi	r24, 0x68	; 104
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	40 ed       	ldi	r20, 0xD0	; 208
     75c:	57 e0       	ldi	r21, 0x07	; 7
     75e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
    break;
     762:	08 95       	ret
    case EVENT_KEY_MINUS:
	  BEEPER_TICK();
     764:	40 9a       	sbi	0x08, 0	; 8
     766:	8f e3       	ldi	r24, 0x3F	; 63
     768:	9c e9       	ldi	r25, 0x9C	; 156
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <run_menu+0x138>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <run_menu+0x13e>
     770:	00 00       	nop
     772:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     774:	84 e1       	ldi	r24, 0x14	; 20
     776:	80 93 28 01 	sts	0x0128, r24
      MAX7219_printStr(5, "    ");
     77a:	85 e0       	ldi	r24, 0x05	; 5
     77c:	67 e0       	ldi	r22, 0x07	; 7
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
	  if (m_menu < MMENU_MAX) m_menu++; else m_menu = 0;
     784:	80 91 a3 01 	lds	r24, 0x01A3
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	20 f4       	brcc	.+8      	; 0x794 <run_menu+0x162>
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	80 93 a3 01 	sts	0x01A3, r24
     792:	02 c0       	rjmp	.+4      	; 0x798 <run_menu+0x166>
     794:	10 92 a3 01 	sts	0x01A3, r1
	  show_menu();
     798:	0e 94 87 02 	call	0x50e	; 0x50e <show_menu>
    break;
     79c:	08 95       	ret
	default:
	  events_default(event);
     79e:	0e 94 2a 01 	call	0x254	; 0x254 <events_default>
     7a2:	08 95       	ret

000007a4 <run_main>:
 }
}
//=============================================================================
void run_main(unsigned char event)
{
  switch(event) {
     7a4:	85 31       	cpi	r24, 0x15	; 21
     7a6:	09 f4       	brne	.+2      	; 0x7aa <run_main+0x6>
     7a8:	8e c0       	rjmp	.+284    	; 0x8c6 <run_main+0x122>
     7aa:	86 31       	cpi	r24, 0x16	; 22
     7ac:	38 f4       	brcc	.+14     	; 0x7bc <run_main+0x18>
     7ae:	8a 30       	cpi	r24, 0x0A	; 10
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <run_main+0x10>
     7b2:	99 c0       	rjmp	.+306    	; 0x8e6 <run_main+0x142>
     7b4:	84 31       	cpi	r24, 0x14	; 20
     7b6:	09 f0       	breq	.+2      	; 0x7ba <run_main+0x16>
     7b8:	94 c0       	rjmp	.+296    	; 0x8e2 <run_main+0x13e>
     7ba:	60 c0       	rjmp	.+192    	; 0x87c <run_main+0xd8>
     7bc:	8e 31       	cpi	r24, 0x1E	; 30
     7be:	09 f4       	brne	.+2      	; 0x7c2 <run_main+0x1e>
     7c0:	92 c0       	rjmp	.+292    	; 0x8e6 <run_main+0x142>
     7c2:	88 36       	cpi	r24, 0x68	; 104
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <run_main+0x24>
     7c6:	8d c0       	rjmp	.+282    	; 0x8e2 <run_main+0x13e>
    case EVENT_SHOW_SENSOR:
	  if (ds18x20GetDevCount(chanel) == 1) {
     7c8:	80 91 2e 01 	lds	r24, 0x012E
     7cc:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	e9 f5       	brne	.+122    	; 0x84e <run_main+0xaa>
	    MAX7219_printChar(2, 'd');
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	64 e6       	ldi	r22, 0x64	; 100
     7d8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	    MAX7219_printChar(3, '-');
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	6d e2       	ldi	r22, 0x2D	; 45
     7e0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	    MAX7219_printChar(4, 0x30 + chanel);
     7e4:	60 91 2e 01 	lds	r22, 0x012E
     7e8:	60 5d       	subi	r22, 0xD0	; 208
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
        print_temperature(5, ds18x20GetTemp(chanel));
     7f0:	80 91 2e 01 	lds	r24, 0x012E
     7f4:	0e 94 48 0c 	call	0x1890	; 0x1890 <ds18x20GetTemp>
     7f8:	bc 01       	movw	r22, r24
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
		if (chanel < 3) {
     800:	e0 91 2e 01 	lds	r30, 0x012E
     804:	e3 30       	cpi	r30, 0x03	; 3
     806:	90 f4       	brcc	.+36     	; 0x82c <run_main+0x88>
		  if (types[chanel - 1]) {
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	e7 5d       	subi	r30, 0xD7	; 215
     80c:	fe 4f       	sbci	r31, 0xFE	; 254
     80e:	80 81       	ld	r24, Z
     810:	88 23       	and	r24, r24
     812:	19 f0       	breq	.+6      	; 0x81a <run_main+0x76>
	        MAX7219_printChar(1, '^');
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	6e e5       	ldi	r22, 0x5E	; 94
     818:	02 c0       	rjmp	.+4      	; 0x81e <run_main+0x7a>
		  } else {
	        MAX7219_printChar(1, '_');
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	6f e5       	ldi	r22, 0x5F	; 95
     81e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
		  }
          check_temp(chanel);
     822:	80 91 2e 01 	lds	r24, 0x012E
     826:	0e 94 af 00 	call	0x15e	; 0x15e <check_temp>
     82a:	08 c0       	rjmp	.+16     	; 0x83c <run_main+0x98>
		} else {
	      MAX7219_printChar(1, ' ');
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	60 e2       	ldi	r22, 0x20	; 32
     830:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
          MAX7219_setCommaPos(1, 0);
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
		}
        MAX7219_setCommaPos(7, 1);
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
        MAX7219_setCommaPos(4, one_sensor_flag);
     844:	84 e0       	ldi	r24, 0x04	; 4
     846:	60 91 99 01 	lds	r22, 0x0199
     84a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
	  }
      if (!one_sensor_flag) {
     84e:	80 91 99 01 	lds	r24, 0x0199
     852:	88 23       	and	r24, r24
     854:	49 f4       	brne	.+18     	; 0x868 <run_main+0xc4>
        if (chanel < 4) {
     856:	80 91 2e 01 	lds	r24, 0x012E
     85a:	84 30       	cpi	r24, 0x04	; 4
     85c:	10 f4       	brcc	.+4      	; 0x862 <run_main+0xbe>
          chanel++; 
     85e:	8f 5f       	subi	r24, 0xFF	; 255
     860:	01 c0       	rjmp	.+2      	; 0x864 <run_main+0xc0>
	    } else { 
	      chanel = 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 2e 01 	sts	0x012E, r24
        }
	  }
	  if (ds18x20GetDevCount(chanel) == 0) {
     868:	80 91 2e 01 	lds	r24, 0x012E
     86c:	0e 94 80 0c 	call	0x1900	; 0x1900 <ds18x20GetDevCount>
     870:	88 23       	and	r24, r24
     872:	09 f1       	breq	.+66     	; 0x8b6 <run_main+0x112>
        RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
	  } else {
        RTOS_setTask(EVENT_SHOW_SENSOR, SHOW_TIME, 0); 
     874:	88 e6       	ldi	r24, 0x68	; 104
     876:	60 ed       	ldi	r22, 0xD0	; 208
     878:	77 e0       	ldi	r23, 0x07	; 7
     87a:	20 c0       	rjmp	.+64     	; 0x8bc <run_main+0x118>
	  }
    break;
    case EVENT_KEY_PLUS:
    break;
    case EVENT_KEY_SET:
	  RTOS_deleteTask(EVENT_SHOW_SENSOR);
     87c:	88 e6       	ldi	r24, 0x68	; 104
     87e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <RTOS_deleteTask>
	  BEEPER_TICK();
     882:	40 9a       	sbi	0x08, 0	; 8
     884:	8f e3       	ldi	r24, 0x3F	; 63
     886:	9c e9       	ldi	r25, 0x9C	; 156
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <run_main+0xe4>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <run_main+0xea>
     88e:	00 00       	nop
     890:	40 98       	cbi	0x08, 0	; 8
      one_sensor_flag = !one_sensor_flag;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 91 99 01 	lds	r25, 0x0199
     898:	91 11       	cpse	r25, r1
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	80 93 99 01 	sts	0x0199, r24
	  if (one_sensor_flag) {
     8a0:	88 23       	and	r24, r24
     8a2:	49 f0       	breq	.+18     	; 0x8b6 <run_main+0x112>
	    if (chanel > 1) chanel--; else chanel = 4;
     8a4:	80 91 2e 01 	lds	r24, 0x012E
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	10 f0       	brcs	.+4      	; 0x8b0 <run_main+0x10c>
     8ac:	81 50       	subi	r24, 0x01	; 1
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <run_main+0x10e>
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	80 93 2e 01 	sts	0x012E, r24
	  }
      RTOS_setTask(EVENT_SHOW_SENSOR, 0, 0); 
     8b6:	88 e6       	ldi	r24, 0x68	; 104
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
    break;
     8c4:	08 95       	ret
    case EVENT_KEY_SET_LONG:
      MAX7219_clearDisplay();
     8c6:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     8ca:	89 e1       	ldi	r24, 0x19	; 25
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	90 93 30 01 	sts	0x0130, r25
     8d2:	80 93 2f 01 	sts	0x012F, r24
      wait_menu = WAIT_MENU_TIME;
     8d6:	84 e1       	ldi	r24, 0x14	; 20
     8d8:	80 93 28 01 	sts	0x0128, r24
	  show_menu();
     8dc:	0e 94 87 02 	call	0x50e	; 0x50e <show_menu>
    break;
     8e0:	08 95       	ret
    case EVENT_KEY_MINUS:
    break;
	default:
	  events_default(event);
     8e2:	0e 94 2a 01 	call	0x254	; 0x254 <events_default>
     8e6:	08 95       	ret

000008e8 <show_set_temp>:
    break;
  }    
}
//=============================================================================
void show_set_temp(uint8_t temp)
{
     8e8:	1f 93       	push	r17
     8ea:	18 2f       	mov	r17, r24
  if (n_edit == 0) {
     8ec:	80 91 a4 01 	lds	r24, 0x01A4
     8f0:	88 23       	and	r24, r24
     8f2:	61 f5       	brne	.+88     	; 0x94c <__stack+0x4d>
    if (blink05) {
     8f4:	80 91 27 01 	lds	r24, 0x0127
     8f8:	88 23       	and	r24, r24
     8fa:	91 f0       	breq	.+36     	; 0x920 <__stack+0x21>
      print_temperature(1, temps[temp][0]);
     8fc:	e1 2f       	mov	r30, r17
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	e5 56       	subi	r30, 0x65	; 101
     90a:	fe 4f       	sbci	r31, 0xFE	; 254
     90c:	60 81       	ld	r22, Z
     90e:	71 81       	ldd	r23, Z+1	; 0x01
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(3, 1);
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
     91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
    } else {
      MAX7219_printStr(1, "    ");
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	67 e0       	ldi	r22, 0x07	; 7
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
    }
    print_temperature(5, temps[temp][1]);
     92a:	e1 2f       	mov	r30, r17
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	e5 56       	subi	r30, 0x65	; 101
     938:	fe 4f       	sbci	r31, 0xFE	; 254
     93a:	62 81       	ldd	r22, Z+2	; 0x02
     93c:	73 81       	ldd	r23, Z+3	; 0x03
     93e:	85 e0       	ldi	r24, 0x05	; 5
     940:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(7, 1);
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
  }
  if (n_edit == 1) {
     94c:	80 91 a4 01 	lds	r24, 0x01A4
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	61 f5       	brne	.+88     	; 0x9ac <__stack+0xad>
    if (blink05) {
     954:	80 91 27 01 	lds	r24, 0x0127
     958:	88 23       	and	r24, r24
     95a:	91 f0       	breq	.+36     	; 0x980 <__stack+0x81>
      print_temperature(5, temps[temp][1]);
     95c:	e1 2f       	mov	r30, r17
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	e5 56       	subi	r30, 0x65	; 101
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	62 81       	ldd	r22, Z+2	; 0x02
     96e:	73 81       	ldd	r23, Z+3	; 0x03
     970:	85 e0       	ldi	r24, 0x05	; 5
     972:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
      MAX7219_setCommaPos(7, 1);
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
     97e:	05 c0       	rjmp	.+10     	; 0x98a <__stack+0x8b>
    } else {
      MAX7219_printStr(5, "    ");
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	67 e0       	ldi	r22, 0x07	; 7
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
	}
    print_temperature(1, temps[temp][0]);
     98a:	e1 2f       	mov	r30, r17
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	ee 0f       	add	r30, r30
     994:	ff 1f       	adc	r31, r31
     996:	e5 56       	subi	r30, 0x65	; 101
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	60 81       	ld	r22, Z
     99c:	71 81       	ldd	r23, Z+1	; 0x01
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0e 94 91 00 	call	0x122	; 0x122 <print_temperature>
    MAX7219_setCommaPos(3, 1);
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MAX7219_setCommaPos>
  }
  if (n_edit == 2) {
     9ac:	80 91 a4 01 	lds	r24, 0x01A4
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	d1 f4       	brne	.+52     	; 0x9e8 <__stack+0xe9>
    MAX7219_printStr(1, "out-");
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	6c e0       	ldi	r22, 0x0C	; 12
     9b8:	71 e0       	ldi	r23, 0x01	; 1
     9ba:	0e 94 8b 0a 	call	0x1516	; 0x1516 <MAX7219_printStr>
    if (blink05) {
     9be:	80 91 27 01 	lds	r24, 0x0127
     9c2:	88 23       	and	r24, r24
     9c4:	69 f0       	breq	.+26     	; 0x9e0 <__stack+0xe1>
	  if (types[temp]) MAX7219_printChar(5, 'o'); else MAX7219_printChar(5, 'i');
     9c6:	e1 2f       	mov	r30, r17
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	e6 5d       	subi	r30, 0xD6	; 214
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	80 81       	ld	r24, Z
     9d0:	88 23       	and	r24, r24
     9d2:	19 f0       	breq	.+6      	; 0x9da <__stack+0xdb>
     9d4:	85 e0       	ldi	r24, 0x05	; 5
     9d6:	6f e6       	ldi	r22, 0x6F	; 111
     9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <__stack+0xe5>
     9da:	85 e0       	ldi	r24, 0x05	; 5
     9dc:	69 e6       	ldi	r22, 0x69	; 105
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0xe5>
    } else {
	  MAX7219_printChar(5, ' ');
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	60 e2       	ldi	r22, 0x20	; 32
     9e4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <MAX7219_printChar>
	}
  }
}
     9e8:	1f 91       	pop	r17
     9ea:	08 95       	ret

000009ec <run_set_2>:
  }    
}
//=============================================================================
void run_set_2(unsigned char event)
{
  switch(event) {
     9ec:	85 31       	cpi	r24, 0x15	; 21
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <run_set_2+0x6>
     9f0:	a2 c0       	rjmp	.+324    	; 0xb36 <run_set_2+0x14a>
     9f2:	86 31       	cpi	r24, 0x16	; 22
     9f4:	50 f4       	brcc	.+20     	; 0xa0a <run_set_2+0x1e>
     9f6:	8c 30       	cpi	r24, 0x0C	; 12
     9f8:	09 f4       	brne	.+2      	; 0x9fc <run_set_2+0x10>
     9fa:	5e c0       	rjmp	.+188    	; 0xab8 <run_set_2+0xcc>
     9fc:	84 31       	cpi	r24, 0x14	; 20
     9fe:	09 f4       	brne	.+2      	; 0xa02 <run_set_2+0x16>
     a00:	83 c0       	rjmp	.+262    	; 0xb08 <run_set_2+0x11c>
     a02:	8a 30       	cpi	r24, 0x0A	; 10
     a04:	09 f0       	breq	.+2      	; 0xa08 <run_set_2+0x1c>
     a06:	1d c1       	rjmp	.+570    	; 0xc42 <run_set_2+0x256>
     a08:	2f c0       	rjmp	.+94     	; 0xa68 <run_set_2+0x7c>
     a0a:	80 32       	cpi	r24, 0x20	; 32
     a0c:	09 f4       	brne	.+2      	; 0xa10 <run_set_2+0x24>
     a0e:	e9 c0       	rjmp	.+466    	; 0xbe2 <run_set_2+0x1f6>
     a10:	81 32       	cpi	r24, 0x21	; 33
     a12:	20 f4       	brcc	.+8      	; 0xa1c <run_set_2+0x30>
     a14:	8e 31       	cpi	r24, 0x1E	; 30
     a16:	09 f0       	breq	.+2      	; 0xa1a <run_set_2+0x2e>
     a18:	14 c1       	rjmp	.+552    	; 0xc42 <run_set_2+0x256>
     a1a:	b3 c0       	rjmp	.+358    	; 0xb82 <run_set_2+0x196>
     a1c:	89 3c       	cpi	r24, 0xC9	; 201
     a1e:	21 f0       	breq	.+8      	; 0xa28 <run_set_2+0x3c>
     a20:	8a 3c       	cpi	r24, 0xCA	; 202
     a22:	09 f0       	breq	.+2      	; 0xa26 <run_set_2+0x3a>
     a24:	0e c1       	rjmp	.+540    	; 0xc42 <run_set_2+0x256>
     a26:	18 c0       	rjmp	.+48     	; 0xa58 <run_set_2+0x6c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 91 26 01 	lds	r25, 0x0126
     a2e:	91 11       	cpse	r25, r1
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	80 93 26 01 	sts	0x0126, r24
	  if (wait_menu > 0) wait_menu--; else {
     a36:	80 91 28 01 	lds	r24, 0x0128
     a3a:	88 23       	and	r24, r24
     a3c:	21 f0       	breq	.+8      	; 0xa46 <run_set_2+0x5a>
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	80 93 28 01 	sts	0x0128, r24
     a44:	08 95       	ret
        MAX7219_clearDisplay();
     a46:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     a4a:	89 e1       	ldi	r24, 0x19	; 25
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	90 93 30 01 	sts	0x0130, r25
     a52:	80 93 2f 01 	sts	0x012F, r24
     a56:	92 c0       	rjmp	.+292    	; 0xb7c <run_set_2+0x190>
	    show_menu();
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 91 27 01 	lds	r25, 0x0127
     a5e:	91 11       	cpse	r25, r1
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	80 93 27 01 	sts	0x0127, r24
     a66:	e9 c0       	rjmp	.+466    	; 0xc3a <run_set_2+0x24e>
	  show_set_temp(1);
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     a68:	84 e1       	ldi	r24, 0x14	; 20
     a6a:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     a6e:	40 9a       	sbi	0x08, 0	; 8
     a70:	8f e3       	ldi	r24, 0x3F	; 63
     a72:	9c e9       	ldi	r25, 0x9C	; 156
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <run_set_2+0x88>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <run_set_2+0x8e>
     a7a:	00 00       	nop
     a7c:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     a7e:	80 91 a4 01 	lds	r24, 0x01A4
     a82:	88 23       	and	r24, r24
     a84:	59 f4       	brne	.+22     	; 0xa9c <run_set_2+0xb0>
        if (temps[1][0] > -550) {
     a86:	80 91 9f 01 	lds	r24, 0x019F
     a8a:	90 91 a0 01 	lds	r25, 0x01A0
     a8e:	2d ef       	ldi	r18, 0xFD	; 253
     a90:	8b 3d       	cpi	r24, 0xDB	; 219
     a92:	92 07       	cpc	r25, r18
     a94:	0c f4       	brge	.+2      	; 0xa98 <run_set_2+0xac>
     a96:	d1 c0       	rjmp	.+418    	; 0xc3a <run_set_2+0x24e>
		  temps[1][0]--;
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	bb c0       	rjmp	.+374    	; 0xc12 <run_set_2+0x226>
		}
	  }
	  if (n_edit == 1) {
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <run_set_2+0xb6>
     aa0:	96 c0       	rjmp	.+300    	; 0xbce <run_set_2+0x1e2>
        if (temps[1][1] > -550) {
     aa2:	80 91 a1 01 	lds	r24, 0x01A1
     aa6:	90 91 a2 01 	lds	r25, 0x01A2
     aaa:	2d ef       	ldi	r18, 0xFD	; 253
     aac:	8b 3d       	cpi	r24, 0xDB	; 219
     aae:	92 07       	cpc	r25, r18
     ab0:	0c f4       	brge	.+2      	; 0xab4 <run_set_2+0xc8>
     ab2:	c3 c0       	rjmp	.+390    	; 0xc3a <run_set_2+0x24e>
		  temps[1][1]--;
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	bd c0       	rjmp	.+378    	; 0xc32 <run_set_2+0x246>
        types[1] = !types[1];
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_PLUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     ab8:	84 e1       	ldi	r24, 0x14	; 20
     aba:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     abe:	40 9a       	sbi	0x08, 0	; 8
     ac0:	8f e3       	ldi	r24, 0x3F	; 63
     ac2:	9c e9       	ldi	r25, 0x9C	; 156
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <run_set_2+0xd8>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <run_set_2+0xde>
     aca:	00 00       	nop
     acc:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     ace:	80 91 a4 01 	lds	r24, 0x01A4
     ad2:	88 23       	and	r24, r24
     ad4:	59 f4       	brne	.+22     	; 0xaec <run_set_2+0x100>
        if (temps[1][0] > -550) {
     ad6:	80 91 9f 01 	lds	r24, 0x019F
     ada:	90 91 a0 01 	lds	r25, 0x01A0
     ade:	2d ef       	ldi	r18, 0xFD	; 253
     ae0:	8b 3d       	cpi	r24, 0xDB	; 219
     ae2:	92 07       	cpc	r25, r18
     ae4:	0c f4       	brge	.+2      	; 0xae8 <run_set_2+0xfc>
     ae6:	a9 c0       	rjmp	.+338    	; 0xc3a <run_set_2+0x24e>
		  temps[1][0] -= 10;
     ae8:	0a 97       	sbiw	r24, 0x0a	; 10
     aea:	93 c0       	rjmp	.+294    	; 0xc12 <run_set_2+0x226>
		}
	  }
	  if (n_edit == 1) {
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	09 f0       	breq	.+2      	; 0xaf2 <run_set_2+0x106>
     af0:	a4 c0       	rjmp	.+328    	; 0xc3a <run_set_2+0x24e>
        if (temps[1][1] > -550) {
     af2:	80 91 a1 01 	lds	r24, 0x01A1
     af6:	90 91 a2 01 	lds	r25, 0x01A2
     afa:	2d ef       	ldi	r18, 0xFD	; 253
     afc:	8b 3d       	cpi	r24, 0xDB	; 219
     afe:	92 07       	cpc	r25, r18
     b00:	0c f4       	brge	.+2      	; 0xb04 <run_set_2+0x118>
     b02:	9b c0       	rjmp	.+310    	; 0xc3a <run_set_2+0x24e>
		  temps[1][1] -= 10;
     b04:	0a 97       	sbiw	r24, 0x0a	; 10
     b06:	95 c0       	rjmp	.+298    	; 0xc32 <run_set_2+0x246>
		}
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     b08:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     b0c:	40 9a       	sbi	0x08, 0	; 8
     b0e:	8f e3       	ldi	r24, 0x3F	; 63
     b10:	9c e9       	ldi	r25, 0x9C	; 156
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <run_set_2+0x126>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <run_set_2+0x12c>
     b18:	00 00       	nop
     b1a:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     b1c:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else n_edit = 0;
     b20:	80 91 a4 01 	lds	r24, 0x01A4
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	20 f4       	brcc	.+8      	; 0xb30 <run_set_2+0x144>
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	80 93 a4 01 	sts	0x01A4, r24
     b2e:	85 c0       	rjmp	.+266    	; 0xc3a <run_set_2+0x24e>
     b30:	10 92 a4 01 	sts	0x01A4, r1
     b34:	82 c0       	rjmp	.+260    	; 0xc3a <run_set_2+0x24e>
	  show_set_temp(1);
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     b36:	40 9a       	sbi	0x08, 0	; 8
     b38:	8f e3       	ldi	r24, 0x3F	; 63
     b3a:	9c e9       	ldi	r25, 0x9C	; 156
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <run_set_2+0x150>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <run_set_2+0x156>
     b42:	00 00       	nop
     b44:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     b46:	84 e1       	ldi	r24, 0x14	; 20
     b48:	80 93 28 01 	sts	0x0128, r24
      MAX7219_clearDisplay();
     b4c:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     b50:	89 e1       	ldi	r24, 0x19	; 25
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	90 93 30 01 	sts	0x0130, r25
     b58:	80 93 2f 01 	sts	0x012F, r24
      save_max_temp_2(temps[1][0]);
     b5c:	80 91 9f 01 	lds	r24, 0x019F
     b60:	90 91 a0 01 	lds	r25, 0x01A0
     b64:	0e 94 1f 02 	call	0x43e	; 0x43e <save_max_temp_2>
      save_min_temp_2(temps[1][1]);
     b68:	80 91 a1 01 	lds	r24, 0x01A1
     b6c:	90 91 a2 01 	lds	r25, 0x01A2
     b70:	0e 94 2b 02 	call	0x456	; 0x456 <save_min_temp_2>
	  save_type_2(types[1]);
     b74:	80 91 2b 01 	lds	r24, 0x012B
     b78:	0e 94 78 02 	call	0x4f0	; 0x4f0 <save_type_2>
      show_menu();
     b7c:	0e 94 87 02 	call	0x50e	; 0x50e <show_menu>
    break;
     b80:	08 95       	ret
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     b82:	84 e1       	ldi	r24, 0x14	; 20
     b84:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     b88:	40 9a       	sbi	0x08, 0	; 8
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	9c e9       	ldi	r25, 0x9C	; 156
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <run_set_2+0x1a2>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <run_set_2+0x1a8>
     b94:	00 00       	nop
     b96:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     b98:	80 91 a4 01 	lds	r24, 0x01A4
     b9c:	88 23       	and	r24, r24
     b9e:	59 f4       	brne	.+22     	; 0xbb6 <run_set_2+0x1ca>
        if (temps[1][0] < 790) {
     ba0:	80 91 9f 01 	lds	r24, 0x019F
     ba4:	90 91 a0 01 	lds	r25, 0x01A0
     ba8:	23 e0       	ldi	r18, 0x03	; 3
     baa:	86 31       	cpi	r24, 0x16	; 22
     bac:	92 07       	cpc	r25, r18
     bae:	0c f0       	brlt	.+2      	; 0xbb2 <run_set_2+0x1c6>
     bb0:	44 c0       	rjmp	.+136    	; 0xc3a <run_set_2+0x24e>
		  temps[1][0]++;
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	2e c0       	rjmp	.+92     	; 0xc12 <run_set_2+0x226>
		}
	  }
	  if (n_edit == 1) {
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	51 f4       	brne	.+20     	; 0xbce <run_set_2+0x1e2>
        if (temps[1][1] < 790) {
     bba:	80 91 a1 01 	lds	r24, 0x01A1
     bbe:	90 91 a2 01 	lds	r25, 0x01A2
     bc2:	23 e0       	ldi	r18, 0x03	; 3
     bc4:	86 31       	cpi	r24, 0x16	; 22
     bc6:	92 07       	cpc	r25, r18
     bc8:	c4 f5       	brge	.+112    	; 0xc3a <run_set_2+0x24e>
		  temps[1][1]++;
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	32 c0       	rjmp	.+100    	; 0xc32 <run_set_2+0x246>
		}
	  }
	  if (n_edit == 2) {
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	a1 f5       	brne	.+104    	; 0xc3a <run_set_2+0x24e>
        types[1] = !types[1];
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 91 2b 01 	lds	r25, 0x012B
     bd8:	91 11       	cpse	r25, r1
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	80 93 2b 01 	sts	0x012B, r24
     be0:	2c c0       	rjmp	.+88     	; 0xc3a <run_set_2+0x24e>
	  }
	  show_set_temp(1);
    break;
    case EVENT_KEY_MINUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     be2:	84 e1       	ldi	r24, 0x14	; 20
     be4:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     be8:	40 9a       	sbi	0x08, 0	; 8
     bea:	8f e3       	ldi	r24, 0x3F	; 63
     bec:	9c e9       	ldi	r25, 0x9C	; 156
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <run_set_2+0x202>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <run_set_2+0x208>
     bf4:	00 00       	nop
     bf6:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     bf8:	80 91 a4 01 	lds	r24, 0x01A4
     bfc:	88 23       	and	r24, r24
     bfe:	71 f4       	brne	.+28     	; 0xc1c <run_set_2+0x230>
        if (temps[1][0] < 790) {
     c00:	80 91 9f 01 	lds	r24, 0x019F
     c04:	90 91 a0 01 	lds	r25, 0x01A0
     c08:	23 e0       	ldi	r18, 0x03	; 3
     c0a:	86 31       	cpi	r24, 0x16	; 22
     c0c:	92 07       	cpc	r25, r18
     c0e:	ac f4       	brge	.+42     	; 0xc3a <run_set_2+0x24e>
		  temps[1][0] += 10;
     c10:	0a 96       	adiw	r24, 0x0a	; 10
     c12:	90 93 a0 01 	sts	0x01A0, r25
     c16:	80 93 9f 01 	sts	0x019F, r24
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <run_set_2+0x24e>
		}
	  }
	  if (n_edit == 1) {
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	69 f4       	brne	.+26     	; 0xc3a <run_set_2+0x24e>
        if (temps[1][1] < 790) {
     c20:	80 91 a1 01 	lds	r24, 0x01A1
     c24:	90 91 a2 01 	lds	r25, 0x01A2
     c28:	23 e0       	ldi	r18, 0x03	; 3
     c2a:	86 31       	cpi	r24, 0x16	; 22
     c2c:	92 07       	cpc	r25, r18
     c2e:	2c f4       	brge	.+10     	; 0xc3a <run_set_2+0x24e>
		  temps[1][1] += 10;
     c30:	0a 96       	adiw	r24, 0x0a	; 10
     c32:	90 93 a2 01 	sts	0x01A2, r25
     c36:	80 93 a1 01 	sts	0x01A1, r24
		}
	  }
	  show_set_temp(1);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <show_set_temp>
    break;
     c40:	08 95       	ret
	default:
	  events_default(event);
     c42:	0e 94 2a 01 	call	0x254	; 0x254 <events_default>
     c46:	08 95       	ret

00000c48 <run_set_1>:
  MAX7219_printStr(1, setmenu[m_menu]);
}
//=============================================================================
void run_set_1(unsigned char event)
{
  switch(event) {
     c48:	85 31       	cpi	r24, 0x15	; 21
     c4a:	09 f4       	brne	.+2      	; 0xc4e <run_set_1+0x6>
     c4c:	a2 c0       	rjmp	.+324    	; 0xd92 <run_set_1+0x14a>
     c4e:	86 31       	cpi	r24, 0x16	; 22
     c50:	50 f4       	brcc	.+20     	; 0xc66 <run_set_1+0x1e>
     c52:	8c 30       	cpi	r24, 0x0C	; 12
     c54:	09 f4       	brne	.+2      	; 0xc58 <run_set_1+0x10>
     c56:	5e c0       	rjmp	.+188    	; 0xd14 <run_set_1+0xcc>
     c58:	84 31       	cpi	r24, 0x14	; 20
     c5a:	09 f4       	brne	.+2      	; 0xc5e <run_set_1+0x16>
     c5c:	83 c0       	rjmp	.+262    	; 0xd64 <run_set_1+0x11c>
     c5e:	8a 30       	cpi	r24, 0x0A	; 10
     c60:	09 f0       	breq	.+2      	; 0xc64 <run_set_1+0x1c>
     c62:	1d c1       	rjmp	.+570    	; 0xe9e <run_set_1+0x256>
     c64:	2f c0       	rjmp	.+94     	; 0xcc4 <run_set_1+0x7c>
     c66:	80 32       	cpi	r24, 0x20	; 32
     c68:	09 f4       	brne	.+2      	; 0xc6c <run_set_1+0x24>
     c6a:	e9 c0       	rjmp	.+466    	; 0xe3e <run_set_1+0x1f6>
     c6c:	81 32       	cpi	r24, 0x21	; 33
     c6e:	20 f4       	brcc	.+8      	; 0xc78 <run_set_1+0x30>
     c70:	8e 31       	cpi	r24, 0x1E	; 30
     c72:	09 f0       	breq	.+2      	; 0xc76 <run_set_1+0x2e>
     c74:	14 c1       	rjmp	.+552    	; 0xe9e <run_set_1+0x256>
     c76:	b3 c0       	rjmp	.+358    	; 0xdde <run_set_1+0x196>
     c78:	89 3c       	cpi	r24, 0xC9	; 201
     c7a:	21 f0       	breq	.+8      	; 0xc84 <run_set_1+0x3c>
     c7c:	8a 3c       	cpi	r24, 0xCA	; 202
     c7e:	09 f0       	breq	.+2      	; 0xc82 <run_set_1+0x3a>
     c80:	0e c1       	rjmp	.+540    	; 0xe9e <run_set_1+0x256>
     c82:	18 c0       	rjmp	.+48     	; 0xcb4 <run_set_1+0x6c>
    case EVENT_TIMER_SECOND:
	  blink = !blink;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 91 26 01 	lds	r25, 0x0126
     c8a:	91 11       	cpse	r25, r1
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	80 93 26 01 	sts	0x0126, r24
	  if (wait_menu > 0) wait_menu--; else {
     c92:	80 91 28 01 	lds	r24, 0x0128
     c96:	88 23       	and	r24, r24
     c98:	21 f0       	breq	.+8      	; 0xca2 <run_set_1+0x5a>
     c9a:	81 50       	subi	r24, 0x01	; 1
     c9c:	80 93 28 01 	sts	0x0128, r24
     ca0:	08 95       	ret
        MAX7219_clearDisplay();
     ca2:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
        SET_STATE(run_menu);
     ca6:	89 e1       	ldi	r24, 0x19	; 25
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	90 93 30 01 	sts	0x0130, r25
     cae:	80 93 2f 01 	sts	0x012F, r24
     cb2:	92 c0       	rjmp	.+292    	; 0xdd8 <run_set_1+0x190>
	    show_menu();
	  }
    break;
    case EVENT_TIMER_SECOND05:
	  blink05 = !blink05;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 91 27 01 	lds	r25, 0x0127
     cba:	91 11       	cpse	r25, r1
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	80 93 27 01 	sts	0x0127, r24
     cc2:	e9 c0       	rjmp	.+466    	; 0xe96 <run_set_1+0x24e>
	  show_set_temp(0);
    break;
    case EVENT_KEY_PLUS:
      wait_menu = WAIT_MENU_TIME;
     cc4:	84 e1       	ldi	r24, 0x14	; 20
     cc6:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     cca:	40 9a       	sbi	0x08, 0	; 8
     ccc:	8f e3       	ldi	r24, 0x3F	; 63
     cce:	9c e9       	ldi	r25, 0x9C	; 156
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <run_set_1+0x88>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <run_set_1+0x8e>
     cd6:	00 00       	nop
     cd8:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     cda:	80 91 a4 01 	lds	r24, 0x01A4
     cde:	88 23       	and	r24, r24
     ce0:	59 f4       	brne	.+22     	; 0xcf8 <run_set_1+0xb0>
        if (temps[0][0] > -550) {
     ce2:	80 91 9b 01 	lds	r24, 0x019B
     ce6:	90 91 9c 01 	lds	r25, 0x019C
     cea:	2d ef       	ldi	r18, 0xFD	; 253
     cec:	8b 3d       	cpi	r24, 0xDB	; 219
     cee:	92 07       	cpc	r25, r18
     cf0:	0c f4       	brge	.+2      	; 0xcf4 <run_set_1+0xac>
     cf2:	d1 c0       	rjmp	.+418    	; 0xe96 <run_set_1+0x24e>
		  temps[0][0]--;
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	bb c0       	rjmp	.+374    	; 0xe6e <run_set_1+0x226>
		}
	  }
	  if (n_edit == 1) {
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	09 f0       	breq	.+2      	; 0xcfe <run_set_1+0xb6>
     cfc:	96 c0       	rjmp	.+300    	; 0xe2a <run_set_1+0x1e2>
        if (temps[0][1] > -550) {
     cfe:	80 91 9d 01 	lds	r24, 0x019D
     d02:	90 91 9e 01 	lds	r25, 0x019E
     d06:	2d ef       	ldi	r18, 0xFD	; 253
     d08:	8b 3d       	cpi	r24, 0xDB	; 219
     d0a:	92 07       	cpc	r25, r18
     d0c:	0c f4       	brge	.+2      	; 0xd10 <run_set_1+0xc8>
     d0e:	c3 c0       	rjmp	.+390    	; 0xe96 <run_set_1+0x24e>
		  temps[0][1]--;
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	bd c0       	rjmp	.+378    	; 0xe8e <run_set_1+0x246>
        types[0] = !types[0];
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_PLUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     d14:	84 e1       	ldi	r24, 0x14	; 20
     d16:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     d1a:	40 9a       	sbi	0x08, 0	; 8
     d1c:	8f e3       	ldi	r24, 0x3F	; 63
     d1e:	9c e9       	ldi	r25, 0x9C	; 156
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <run_set_1+0xd8>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <run_set_1+0xde>
     d26:	00 00       	nop
     d28:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     d2a:	80 91 a4 01 	lds	r24, 0x01A4
     d2e:	88 23       	and	r24, r24
     d30:	59 f4       	brne	.+22     	; 0xd48 <run_set_1+0x100>
        if (temps[0][0] > -550) {
     d32:	80 91 9b 01 	lds	r24, 0x019B
     d36:	90 91 9c 01 	lds	r25, 0x019C
     d3a:	2d ef       	ldi	r18, 0xFD	; 253
     d3c:	8b 3d       	cpi	r24, 0xDB	; 219
     d3e:	92 07       	cpc	r25, r18
     d40:	0c f4       	brge	.+2      	; 0xd44 <run_set_1+0xfc>
     d42:	a9 c0       	rjmp	.+338    	; 0xe96 <run_set_1+0x24e>
		  temps[0][0] -= 10;
     d44:	0a 97       	sbiw	r24, 0x0a	; 10
     d46:	93 c0       	rjmp	.+294    	; 0xe6e <run_set_1+0x226>
		}
	  }
	  if (n_edit == 1) {
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <run_set_1+0x106>
     d4c:	a4 c0       	rjmp	.+328    	; 0xe96 <run_set_1+0x24e>
        if (temps[0][1] > -550) {
     d4e:	80 91 9d 01 	lds	r24, 0x019D
     d52:	90 91 9e 01 	lds	r25, 0x019E
     d56:	2d ef       	ldi	r18, 0xFD	; 253
     d58:	8b 3d       	cpi	r24, 0xDB	; 219
     d5a:	92 07       	cpc	r25, r18
     d5c:	0c f4       	brge	.+2      	; 0xd60 <run_set_1+0x118>
     d5e:	9b c0       	rjmp	.+310    	; 0xe96 <run_set_1+0x24e>
		  temps[0][1] -= 10;
     d60:	0a 97       	sbiw	r24, 0x0a	; 10
     d62:	95 c0       	rjmp	.+298    	; 0xe8e <run_set_1+0x246>
		}
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET:
      wait_menu = WAIT_MENU_TIME;
     d64:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     d68:	40 9a       	sbi	0x08, 0	; 8
     d6a:	8f e3       	ldi	r24, 0x3F	; 63
     d6c:	9c e9       	ldi	r25, 0x9C	; 156
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <run_set_1+0x126>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <run_set_1+0x12c>
     d74:	00 00       	nop
     d76:	40 98       	cbi	0x08, 0	; 8
      MAX7219_clearDisplay();
     d78:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
	  if (n_edit < 2) n_edit++; else n_edit = 0;
     d7c:	80 91 a4 01 	lds	r24, 0x01A4
     d80:	82 30       	cpi	r24, 0x02	; 2
     d82:	20 f4       	brcc	.+8      	; 0xd8c <run_set_1+0x144>
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	80 93 a4 01 	sts	0x01A4, r24
     d8a:	85 c0       	rjmp	.+266    	; 0xe96 <run_set_1+0x24e>
     d8c:	10 92 a4 01 	sts	0x01A4, r1
     d90:	82 c0       	rjmp	.+260    	; 0xe96 <run_set_1+0x24e>
	  show_set_temp(0);
    break;
    case EVENT_KEY_SET_LONG:
	  BEEPER_TICK();
     d92:	40 9a       	sbi	0x08, 0	; 8
     d94:	8f e3       	ldi	r24, 0x3F	; 63
     d96:	9c e9       	ldi	r25, 0x9C	; 156
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <run_set_1+0x150>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <run_set_1+0x156>
     d9e:	00 00       	nop
     da0:	40 98       	cbi	0x08, 0	; 8
      wait_menu = WAIT_MENU_TIME;
     da2:	84 e1       	ldi	r24, 0x14	; 20
     da4:	80 93 28 01 	sts	0x0128, r24
      MAX7219_clearDisplay();
     da8:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
      SET_STATE(run_menu);
     dac:	89 e1       	ldi	r24, 0x19	; 25
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	90 93 30 01 	sts	0x0130, r25
     db4:	80 93 2f 01 	sts	0x012F, r24
      save_max_temp_1(temps[0][0]);
     db8:	80 91 9b 01 	lds	r24, 0x019B
     dbc:	90 91 9c 01 	lds	r25, 0x019C
     dc0:	0e 94 19 02 	call	0x432	; 0x432 <save_max_temp_1>
      save_min_temp_1(temps[0][1]);
     dc4:	80 91 9d 01 	lds	r24, 0x019D
     dc8:	90 91 9e 01 	lds	r25, 0x019E
     dcc:	0e 94 25 02 	call	0x44a	; 0x44a <save_min_temp_1>
	  save_type_1(types[0]);
     dd0:	80 91 2a 01 	lds	r24, 0x012A
     dd4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <save_type_1>
      show_menu();
     dd8:	0e 94 87 02 	call	0x50e	; 0x50e <show_menu>
    break;
     ddc:	08 95       	ret
    case EVENT_KEY_MINUS:
      wait_menu = WAIT_MENU_TIME;
     dde:	84 e1       	ldi	r24, 0x14	; 20
     de0:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     de4:	40 9a       	sbi	0x08, 0	; 8
     de6:	8f e3       	ldi	r24, 0x3F	; 63
     de8:	9c e9       	ldi	r25, 0x9C	; 156
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <run_set_1+0x1a2>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <run_set_1+0x1a8>
     df0:	00 00       	nop
     df2:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     df4:	80 91 a4 01 	lds	r24, 0x01A4
     df8:	88 23       	and	r24, r24
     dfa:	59 f4       	brne	.+22     	; 0xe12 <run_set_1+0x1ca>
        if (temps[0][0] < 790) {
     dfc:	80 91 9b 01 	lds	r24, 0x019B
     e00:	90 91 9c 01 	lds	r25, 0x019C
     e04:	23 e0       	ldi	r18, 0x03	; 3
     e06:	86 31       	cpi	r24, 0x16	; 22
     e08:	92 07       	cpc	r25, r18
     e0a:	0c f0       	brlt	.+2      	; 0xe0e <run_set_1+0x1c6>
     e0c:	44 c0       	rjmp	.+136    	; 0xe96 <run_set_1+0x24e>
		  temps[0][0]++;
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	2e c0       	rjmp	.+92     	; 0xe6e <run_set_1+0x226>
		}
	  }
	  if (n_edit == 1) {
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	51 f4       	brne	.+20     	; 0xe2a <run_set_1+0x1e2>
        if (temps[0][1] < 790) {
     e16:	80 91 9d 01 	lds	r24, 0x019D
     e1a:	90 91 9e 01 	lds	r25, 0x019E
     e1e:	23 e0       	ldi	r18, 0x03	; 3
     e20:	86 31       	cpi	r24, 0x16	; 22
     e22:	92 07       	cpc	r25, r18
     e24:	c4 f5       	brge	.+112    	; 0xe96 <run_set_1+0x24e>
		  temps[0][1]++;
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	32 c0       	rjmp	.+100    	; 0xe8e <run_set_1+0x246>
		}
	  }
	  if (n_edit == 2) {
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	a1 f5       	brne	.+104    	; 0xe96 <run_set_1+0x24e>
        types[0] = !types[0];
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 91 2a 01 	lds	r25, 0x012A
     e34:	91 11       	cpse	r25, r1
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	80 93 2a 01 	sts	0x012A, r24
     e3c:	2c c0       	rjmp	.+88     	; 0xe96 <run_set_1+0x24e>
	  }
	  show_set_temp(0);
    break;
    case EVENT_KEY_MINUS_HOLD:
      wait_menu = WAIT_MENU_TIME;
     e3e:	84 e1       	ldi	r24, 0x14	; 20
     e40:	80 93 28 01 	sts	0x0128, r24
	  BEEPER_TICK();
     e44:	40 9a       	sbi	0x08, 0	; 8
     e46:	8f e3       	ldi	r24, 0x3F	; 63
     e48:	9c e9       	ldi	r25, 0x9C	; 156
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <run_set_1+0x202>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <run_set_1+0x208>
     e50:	00 00       	nop
     e52:	40 98       	cbi	0x08, 0	; 8
	  if (n_edit == 0) {
     e54:	80 91 a4 01 	lds	r24, 0x01A4
     e58:	88 23       	and	r24, r24
     e5a:	71 f4       	brne	.+28     	; 0xe78 <run_set_1+0x230>
        if (temps[0][0] < 790) {
     e5c:	80 91 9b 01 	lds	r24, 0x019B
     e60:	90 91 9c 01 	lds	r25, 0x019C
     e64:	23 e0       	ldi	r18, 0x03	; 3
     e66:	86 31       	cpi	r24, 0x16	; 22
     e68:	92 07       	cpc	r25, r18
     e6a:	ac f4       	brge	.+42     	; 0xe96 <run_set_1+0x24e>
		  temps[0][0] += 10;
     e6c:	0a 96       	adiw	r24, 0x0a	; 10
     e6e:	90 93 9c 01 	sts	0x019C, r25
     e72:	80 93 9b 01 	sts	0x019B, r24
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <run_set_1+0x24e>
		}
	  }
	  if (n_edit == 1) {
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	69 f4       	brne	.+26     	; 0xe96 <run_set_1+0x24e>
        if (temps[0][1] < 790) {
     e7c:	80 91 9d 01 	lds	r24, 0x019D
     e80:	90 91 9e 01 	lds	r25, 0x019E
     e84:	23 e0       	ldi	r18, 0x03	; 3
     e86:	86 31       	cpi	r24, 0x16	; 22
     e88:	92 07       	cpc	r25, r18
     e8a:	2c f4       	brge	.+10     	; 0xe96 <run_set_1+0x24e>
		  temps[0][1] += 10;
     e8c:	0a 96       	adiw	r24, 0x0a	; 10
     e8e:	90 93 9e 01 	sts	0x019E, r25
     e92:	80 93 9d 01 	sts	0x019D, r24
		}
	  }
	  show_set_temp(0);
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	0e 94 74 04 	call	0x8e8	; 0x8e8 <show_set_temp>
    break;
     e9c:	08 95       	ret
	default:
	  events_default(event);
     e9e:	0e 94 2a 01 	call	0x254	; 0x254 <events_default>
     ea2:	08 95       	ret

00000ea4 <PutBut>:
static uint8_t buf[BUT_SIZE_BUF];
static uint8_t head, tail, count;

static void PutBut(uint8_t but)
{
  if (count < BUT_SIZE_BUF){
     ea4:	20 91 ad 01 	lds	r18, 0x01AD
     ea8:	28 30       	cpi	r18, 0x08	; 8
     eaa:	78 f4       	brcc	.+30     	; 0xeca <PutBut+0x26>
     buf[head] = but;
     eac:	90 91 ae 01 	lds	r25, 0x01AE
     eb0:	e9 2f       	mov	r30, r25
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	e1 55       	subi	r30, 0x51	; 81
     eb6:	fe 4f       	sbci	r31, 0xFE	; 254
     eb8:	80 83       	st	Z, r24
     count++;
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	20 93 ad 01 	sts	0x01AD, r18
     head++;
     ec0:	89 2f       	mov	r24, r25
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     head &= (BUT_SIZE_BUF - 1);    
     ec4:	87 70       	andi	r24, 0x07	; 7
     ec6:	80 93 ae 01 	sts	0x01AE, r24
     eca:	08 95       	ret

00000ecc <BUT_Check.clone.0>:
  }
  
  return but;
}
//=============================================================================
static void BUT_Check(uint8_t state, uint8_t i, uint8_t settings)
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
{
  uint8_t stateTmp; 
  uint8_t event;
  
  i--;
     ed4:	96 2f       	mov	r25, r22
     ed6:	91 50       	subi	r25, 0x01	; 1
   
  stateTmp = stateBut[i];
     ed8:	c9 2f       	mov	r28, r25
     eda:	d0 e0       	ldi	r29, 0x00	; 0
     edc:	fe 01       	movw	r30, r28
     ede:	ea 55       	subi	r30, 0x5A	; 90
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	10 81       	ld	r17, Z

#if (BUT_DOUBLE_CLICK_EN == 1)  
  countHoldTmp = countHold[i];
#endif

 countDebTmp = countDeb[i];
     ee4:	fe 01       	movw	r30, r28
     ee6:	e7 55       	subi	r30, 0x57	; 87
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	90 81       	ld	r25, Z
     eec:	90 93 ac 01 	sts	0x01AC, r25
  
 if (state){
     ef0:	88 23       	and	r24, r24
     ef2:	a9 f0       	breq	.+42     	; 0xf1e <BUT_Check.clone.0+0x52>
    if (countDebTmp < BUT_COUNT_MAX){
     ef4:	97 39       	cpi	r25, 0x97	; 151
     ef6:	28 f5       	brcc	.+74     	; 0xf42 <BUT_Check.clone.0+0x76>
       countDebTmp++;
     ef8:	9f 5f       	subi	r25, 0xFF	; 255
     efa:	90 93 ac 01 	sts	0x01AC, r25

       if (countDebTmp > BUT_COUNT_THR){
     efe:	95 31       	cpi	r25, 0x15	; 21
     f00:	00 f1       	brcs	.+64     	; 0xf42 <BUT_Check.clone.0+0x76>
          if (!(stateTmp & FLAG_BUT_PRESSED)){
     f02:	10 fd       	sbrc	r17, 0
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <BUT_Check.clone.0+0x40>
             stateTmp |= FLAG_BUT_PRESSED;
     f06:	11 60       	ori	r17, 0x01	; 1
             
#if (BUT_PRESSED_EN == 1)
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
     f08:	01 e0       	ldi	r16, 0x01	; 1
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <BUT_Check.clone.0+0x42>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     f0c:	00 e0       	ldi	r16, 0x00	; 0
             SaveEvent_m(settings, BUT_EV_PRESSED, BUT_PRESSED_CODE, event);  
#endif                   
          }
       }
       
       if (countDebTmp > BUT_COUNT_HELD){
     f0e:	97 39       	cpi	r25, 0x97	; 151
     f10:	81 f4       	brne	.+32     	; 0xf32 <BUT_Check.clone.0+0x66>
         if (!(stateTmp & FLAG_BUT_HOLD)){
     f12:	11 fd       	sbrc	r17, 1
     f14:	0e c0       	rjmp	.+28     	; 0xf32 <BUT_Check.clone.0+0x66>
            stateTmp &= ~(FLAG_BUT_RELEASED);
     f16:	1b 7f       	andi	r17, 0xFB	; 251
            stateTmp |= FLAG_BUT_HOLD;
     f18:	12 60       	ori	r17, 0x02	; 2

#if (BUT_HELD_EN == 1)
            SaveEvent_m(settings, BUT_EV_HELD, BUT_HELD_CODE, event);
     f1a:	02 e0       	ldi	r16, 0x02	; 2
     f1c:	0c c0       	rjmp	.+24     	; 0xf36 <BUT_Check.clone.0+0x6a>
           SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
  #endif           
        }
     }
#else
     if ((stateTmp & FLAG_BUT_PRESSED)&&(!(stateTmp & FLAG_BUT_HOLD))){
     f1e:	10 ff       	sbrs	r17, 0
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <BUT_Check.clone.0+0x5e>
     f22:	11 fd       	sbrc	r17, 1
     f24:	1c c0       	rjmp	.+56     	; 0xf5e <BUT_Check.clone.0+0x92>
        SaveEvent_m(settings, BUT_EV_RELEASED, BUT_RELEASED_CODE, event);
     f26:	03 e0       	ldi	r16, 0x03	; 3
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <BUT_Check.clone.0+0x60>
  uint8_t event;
  
  i--;
   
  stateTmp = stateBut[i];
  event = 0;
     f2a:	00 e0       	ldi	r16, 0x00	; 0
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     }
#endif     

     countDebTmp = 0;
     f2c:	10 92 ac 01 	sts	0x01AC, r1
     stateTmp &= ~(FLAG_BUT_PRESSED|FLAG_BUT_HOLD);
     f30:	1c 7f       	andi	r17, 0xFC	; 252
  }
 
  countHold[i] = countHoldTmp;
#endif       
  
  if (event){
     f32:	00 23       	and	r16, r16
     f34:	31 f0       	breq	.+12     	; 0xf42 <BUT_Check.clone.0+0x76>
     PutBut(i+1);
     f36:	86 2f       	mov	r24, r22
     f38:	0e 94 52 07 	call	0xea4	; 0xea4 <PutBut>
     PutBut(event);
     f3c:	80 2f       	mov	r24, r16
     f3e:	0e 94 52 07 	call	0xea4	; 0xea4 <PutBut>
  }
  
  countDeb[i] = countDebTmp;
     f42:	fe 01       	movw	r30, r28
     f44:	e7 55       	subi	r30, 0x57	; 87
     f46:	fe 4f       	sbci	r31, 0xFE	; 254
     f48:	80 91 ac 01 	lds	r24, 0x01AC
     f4c:	80 83       	st	Z, r24
  stateBut[i] = stateTmp; 
     f4e:	ca 55       	subi	r28, 0x5A	; 90
     f50:	de 4f       	sbci	r29, 0xFE	; 254
     f52:	18 83       	st	Y, r17
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret
     }       
#endif      
     
#if (BUT_RELEASE_LONG_EN == 1)
     if ((stateTmp & FLAG_BUT_PRESSED)&&(stateTmp & FLAG_BUT_HOLD)){
        SaveEvent_m(settings, BUT_EV_RELEASED_LONG, BUT_RELEASED_LONG_CODE, event);
     f5e:	04 e0       	ldi	r16, 0x04	; 4
     f60:	e5 cf       	rjmp	.-54     	; 0xf2c <BUT_Check.clone.0+0x60>

00000f62 <KBD_getBut>:

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
    
  if (count){
     f62:	20 91 ad 01 	lds	r18, 0x01AD
     f66:	22 23       	and	r18, r18
     f68:	79 f0       	breq	.+30     	; 0xf88 <KBD_getBut+0x26>
     but = buf[tail];
     f6a:	90 91 b7 01 	lds	r25, 0x01B7
     f6e:	e9 2f       	mov	r30, r25
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	e1 55       	subi	r30, 0x51	; 81
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	80 81       	ld	r24, Z
     count--;
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	20 93 ad 01 	sts	0x01AD, r18
     tail++;
     f7e:	9f 5f       	subi	r25, 0xFF	; 255
     tail &= (BUT_SIZE_BUF - 1);    
     f80:	97 70       	andi	r25, 0x07	; 7
     f82:	90 93 b7 01 	sts	0x01B7, r25
     f86:	08 95       	ret
  }
}

uint8_t KBD_getBut(void)
{
  uint8_t but = 0;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     tail++;
     tail &= (BUT_SIZE_BUF - 1);    
  }
  
  return but;
}
     f8a:	08 95       	ret

00000f8c <KBD_init>:
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     f8c:	10 92 a9 01 	sts	0x01A9, r1
     stateBut[i] = 0;
     f90:	10 92 a6 01 	sts	0x01A6, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     f94:	10 92 aa 01 	sts	0x01AA, r1
     stateBut[i] = 0;
     f98:	10 92 a7 01 	sts	0x01A7, r1
void KBD_init(void)
{
  uint8_t i;
  
  for(i = 0; i < BUT_AMOUNT; i++){
     countDeb[i] = 0;
     f9c:	10 92 ab 01 	sts	0x01AB, r1
     stateBut[i] = 0;
     fa0:	10 92 a8 01 	sts	0x01A8, r1
#endif
     
  }
  
  for(i = 0; i < BUT_SIZE_BUF; i++){
     buf[i] = 0;    
     fa4:	10 92 af 01 	sts	0x01AF, r1
     fa8:	10 92 b0 01 	sts	0x01B0, r1
     fac:	10 92 b1 01 	sts	0x01B1, r1
     fb0:	10 92 b2 01 	sts	0x01B2, r1
     fb4:	10 92 b3 01 	sts	0x01B3, r1
     fb8:	10 92 b4 01 	sts	0x01B4, r1
     fbc:	10 92 b5 01 	sts	0x01B5, r1
     fc0:	10 92 b6 01 	sts	0x01B6, r1
  }
  
  head = 0;
     fc4:	10 92 ae 01 	sts	0x01AE, r1
  tail = 0;  
     fc8:	10 92 b7 01 	sts	0x01B7, r1
  count = 0;
     fcc:	10 92 ad 01 	sts	0x01AD, r1

#ifdef BUT_1_ID  
  ButtonInit_m(BUT_1_DDRX, BUT_1_PORTX, BUT_1_PIN, BUT_1_PULL);
     fd0:	54 98       	cbi	0x0a, 4	; 10
     fd2:	5c 9a       	sbi	0x0b, 4	; 11
#endif

#ifdef BUT_2_ID  
  ButtonInit_m(BUT_2_DDRX, BUT_2_PORTX, BUT_2_PIN, BUT_2_PULL);
     fd4:	55 98       	cbi	0x0a, 5	; 10
     fd6:	5d 9a       	sbi	0x0b, 5	; 11
#endif  

#ifdef BUT_3_ID  
  ButtonInit_m(BUT_3_DDRX, BUT_3_PORTX, BUT_3_PIN, BUT_3_PULL);
     fd8:	56 98       	cbi	0x0a, 6	; 10
     fda:	5e 9a       	sbi	0x0b, 6	; 11
#endif  

#ifdef BUT_32_ID  
  ButtonInit_m(BUT_32_DDRX, BUT_32_PORTX, BUT_32_PIN, BUT_32_PULL);
#endif  
}
     fdc:	08 95       	ret

00000fde <KBD_poll>:
  uint8_t state = 0;

  Switch_m(i);
  
#ifdef BUT_1_ID  
  CheckOneBut_m(BUT_1_ID, BUT_1_PINX, BUT_1_PIN, BUT_1_LEV, BUT_1_EVENT, state);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	4c 99       	sbic	0x09, 4	; 9
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	0e 94 66 07 	call	0xecc	; 0xecc <BUT_Check.clone.0>
#endif

#ifdef BUT_2_ID  
  CheckOneBut_m(BUT_2_ID, BUT_2_PINX, BUT_2_PIN, BUT_2_LEV, BUT_2_EVENT, state);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	4d 99       	sbic	0x09, 5	; 9
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	62 e0       	ldi	r22, 0x02	; 2
     ff2:	0e 94 66 07 	call	0xecc	; 0xecc <BUT_Check.clone.0>
#endif  

#ifdef BUT_3_ID  
  CheckOneBut_m(BUT_3_ID, BUT_3_PINX, BUT_3_PIN, BUT_3_LEV, BUT_3_EVENT, state);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	4e 99       	sbic	0x09, 6	; 9
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	63 e0       	ldi	r22, 0x03	; 3
     ffe:	0e 94 66 07 	call	0xecc	; 0xecc <BUT_Check.clone.0>
   if (i >= BUT_AMOUNT){
     i = 0;
   }
#endif   
   
}
    1002:	08 95       	ret

00001004 <KBD_scan>:
//=============================================================================
void KBD_scan(void)
{
    1004:	1f 93       	push	r17
  uint8_t but = 0;
  uint8_t code = 0;
  KBD_poll();
    1006:	0e 94 ef 07 	call	0xfde	; 0xfde <KBD_poll>
  but = KBD_getBut();
    100a:	0e 94 b1 07 	call	0xf62	; 0xf62 <KBD_getBut>
    100e:	18 2f       	mov	r17, r24
  if (but) {
    1010:	88 23       	and	r24, r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <KBD_scan+0x12>
    1014:	4b c0       	rjmp	.+150    	; 0x10ac <KBD_scan+0xa8>
    code = KBD_getBut(); 
    1016:	0e 94 b1 07 	call	0xf62	; 0xf62 <KBD_getBut>
    if (but == 1) {
    101a:	11 30       	cpi	r17, 0x01	; 1
    101c:	a1 f4       	brne	.+40     	; 0x1046 <KBD_scan+0x42>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_PLUS, 0, 0); }
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	11 f4       	brne	.+4      	; 0x1026 <KBD_scan+0x22>
    1022:	8a e0       	ldi	r24, 0x0A	; 10
    1024:	3d c0       	rjmp	.+122    	; 0x10a0 <KBD_scan+0x9c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_PLUS_HOLD, 0, 0); }
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	09 f0       	breq	.+2      	; 0x102c <KBD_scan+0x28>
    102a:	40 c0       	rjmp	.+128    	; 0x10ac <KBD_scan+0xa8>
    102c:	40 9a       	sbi	0x08, 0	; 8
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	97 ee       	ldi	r25, 0xE7	; 231
    1032:	a3 e0       	ldi	r26, 0x03	; 3
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	a0 40       	sbci	r26, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <KBD_scan+0x30>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <KBD_scan+0x3a>
    103e:	00 00       	nop
    1040:	40 98       	cbi	0x08, 0	; 8
    1042:	8c e0       	ldi	r24, 0x0C	; 12
    1044:	2d c0       	rjmp	.+90     	; 0x10a0 <KBD_scan+0x9c>
    } 
	if (but == 2) {
    1046:	12 30       	cpi	r17, 0x02	; 2
    1048:	b9 f4       	brne	.+46     	; 0x1078 <KBD_scan+0x74>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_SET, 0, 0); }
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	11 f4       	brne	.+4      	; 0x1052 <KBD_scan+0x4e>
    104e:	84 e1       	ldi	r24, 0x14	; 20
    1050:	27 c0       	rjmp	.+78     	; 0x10a0 <KBD_scan+0x9c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_SET_HOLD, 0, 0); }
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	69 f4       	brne	.+26     	; 0x1070 <KBD_scan+0x6c>
    1056:	40 9a       	sbi	0x08, 0	; 8
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	97 ee       	ldi	r25, 0xE7	; 231
    105c:	a3 e0       	ldi	r26, 0x03	; 3
    105e:	81 50       	subi	r24, 0x01	; 1
    1060:	90 40       	sbci	r25, 0x00	; 0
    1062:	a0 40       	sbci	r26, 0x00	; 0
    1064:	e1 f7       	brne	.-8      	; 0x105e <KBD_scan+0x5a>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <KBD_scan+0x64>
    1068:	00 00       	nop
    106a:	40 98       	cbi	0x08, 0	; 8
    106c:	86 e1       	ldi	r24, 0x16	; 22
    106e:	18 c0       	rjmp	.+48     	; 0x10a0 <KBD_scan+0x9c>
	  if (code == BUT_RELEASED_LONG_CODE) { RTOS_setTask(EVENT_KEY_SET_LONG, 0, 0); }
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	e1 f4       	brne	.+56     	; 0x10ac <KBD_scan+0xa8>
    1074:	85 e1       	ldi	r24, 0x15	; 21
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <KBD_scan+0x9c>
    }
	if (but == 3) {
    1078:	13 30       	cpi	r17, 0x03	; 3
    107a:	c1 f4       	brne	.+48     	; 0x10ac <KBD_scan+0xa8>
	  if (code == BUT_RELEASED_CODE) { RTOS_setTask(EVENT_KEY_MINUS, 0, 0); }
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	11 f4       	brne	.+4      	; 0x1084 <KBD_scan+0x80>
    1080:	8e e1       	ldi	r24, 0x1E	; 30
    1082:	0e c0       	rjmp	.+28     	; 0x10a0 <KBD_scan+0x9c>
      if ((code == BUT_HELD_CODE)) { BEEPER_TICK_LONG(); RTOS_setTask(EVENT_KEY_MINUS_HOLD, 0, 0); }
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	91 f4       	brne	.+36     	; 0x10ac <KBD_scan+0xa8>
    1088:	40 9a       	sbi	0x08, 0	; 8
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	97 ee       	ldi	r25, 0xE7	; 231
    108e:	a3 e0       	ldi	r26, 0x03	; 3
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	90 40       	sbci	r25, 0x00	; 0
    1094:	a0 40       	sbci	r26, 0x00	; 0
    1096:	e1 f7       	brne	.-8      	; 0x1090 <KBD_scan+0x8c>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <KBD_scan+0x96>
    109a:	00 00       	nop
    109c:	40 98       	cbi	0x08, 0	; 8
    109e:	80 e2       	ldi	r24, 0x20	; 32
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <RTOS_setTask>
    }
  }
}
    10ac:	1f 91       	pop	r17
    10ae:	08 95       	ret

000010b0 <RTOS_init>:
volatile static task TaskArray[MAX_TASKS]; // очередь задач
volatile static unsigned char arrayTail;   // "хвост" очереди
//=============================================================================
void RTOS_init()
{
  TCCR2B |= (1 << CS22);          // прескалер - 64
    10b0:	e1 eb       	ldi	r30, 0xB1	; 177
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	84 60       	ori	r24, 0x04	; 4
    10b8:	80 83       	st	Z, r24
  TIFR2 = (1 << TOV2);            // очищаем флаг прерывания таймера Т2
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	87 bb       	out	0x17, r24	; 23
  TIMSK2 |= (1 << TOIE2);         // разрешаем прерывание по переполнению
    10be:	e0 e7       	ldi	r30, 0x70	; 112
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	80 83       	st	Z, r24
  TIMER_COUNTER = TIMER_START;   // загружаем начальное зн. в счетный регистр
    10c8:	86 e0       	ldi	r24, 0x06	; 6
    10ca:	80 93 b2 00 	sts	0x00B2, r24
  arrayTail = 0;                 // "хвост" в 0
    10ce:	10 92 19 02 	sts	0x0219, r1
}
    10d2:	08 95       	ret

000010d4 <RTOS_setTask>:
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
    10d4:	88 23       	and	r24, r24
    10d6:	09 f4       	brne	.+2      	; 0x10da <RTOS_setTask+0x6>
    10d8:	6f c0       	rjmp	.+222    	; 0x11b8 <RTOS_setTask+0xe4>
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	1b c0       	rjmp	.+54     	; 0x1114 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
    10de:	29 2f       	mov	r18, r25
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	f9 01       	movw	r30, r18
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	e7 54       	subi	r30, 0x47	; 71
    10f2:	fe 4f       	sbci	r31, 0xFE	; 254
    10f4:	20 81       	ld	r18, Z
    10f6:	28 17       	cp	r18, r24
    10f8:	61 f4       	brne	.+24     	; 0x1112 <RTOS_setTask+0x3e>
    {
      TaskArray[i].delay  = taskDelay;
    10fa:	72 83       	std	Z+2, r23	; 0x02
    10fc:	61 83       	std	Z+1, r22	; 0x01
      TaskArray[i].period = taskPeriod;
    10fe:	54 83       	std	Z+4, r21	; 0x04
    1100:	43 83       	std	Z+3, r20	; 0x03
      if (!taskDelay) {                       // если задержка запуска == 0
    1102:	61 15       	cp	r22, r1
    1104:	71 05       	cpc	r23, r1
    1106:	19 f4       	brne	.+6      	; 0x110e <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	85 83       	std	Z+5, r24	; 0x05
    110c:	08 95       	ret
      } else TaskArray[i].run = 0;   
    110e:	15 82       	std	Z+5, r1	; 0x05
    1110:	08 95       	ret
//=============================================================================
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
    1112:	9f 5f       	subi	r25, 0xFF	; 255
    1114:	20 91 19 02 	lds	r18, 0x0219
    1118:	92 17       	cp	r25, r18
    111a:	08 f3       	brcs	.-62     	; 0x10de <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
    111c:	20 91 19 02 	lds	r18, 0x0219
    1120:	20 31       	cpi	r18, 0x10	; 16
    1122:	08 f0       	brcs	.+2      	; 0x1126 <RTOS_setTask+0x52>
    1124:	49 c0       	rjmp	.+146    	; 0x11b8 <RTOS_setTask+0xe4>
  {                                           // и есть место,то добавляем
    TaskArray[arrayTail].event  = event;
    1126:	20 91 19 02 	lds	r18, 0x0219
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	f9 01       	movw	r30, r18
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e7 54       	subi	r30, 0x47	; 71
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
    113e:	80 83       	st	Z, r24
    TaskArray[arrayTail].delay  = taskDelay;
    1140:	20 91 19 02 	lds	r18, 0x0219
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	f9 01       	movw	r30, r18
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	e2 0f       	add	r30, r18
    114e:	f3 1f       	adc	r31, r19
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	e7 54       	subi	r30, 0x47	; 71
    1156:	fe 4f       	sbci	r31, 0xFE	; 254
    1158:	72 83       	std	Z+2, r23	; 0x02
    115a:	61 83       	std	Z+1, r22	; 0x01
    TaskArray[arrayTail].period = taskPeriod;
    115c:	20 91 19 02 	lds	r18, 0x0219
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	f9 01       	movw	r30, r18
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	e2 0f       	add	r30, r18
    116a:	f3 1f       	adc	r31, r19
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	e7 54       	subi	r30, 0x47	; 71
    1172:	fe 4f       	sbci	r31, 0xFE	; 254
    1174:	54 83       	std	Z+4, r21	; 0x04
    1176:	43 83       	std	Z+3, r20	; 0x03
    1178:	89 2f       	mov	r24, r25
    117a:	90 e0       	ldi	r25, 0x00	; 0
    if (!taskDelay) {                         // если задержка запуска == 0
    117c:	61 15       	cp	r22, r1
    117e:	71 05       	cpc	r23, r1
    1180:	61 f4       	brne	.+24     	; 0x119a <RTOS_setTask+0xc6>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
    1182:	fc 01       	movw	r30, r24
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	e8 0f       	add	r30, r24
    118a:	f9 1f       	adc	r31, r25
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	e7 54       	subi	r30, 0x47	; 71
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	85 83       	std	Z+5, r24	; 0x05
    1198:	0a c0       	rjmp	.+20     	; 0x11ae <RTOS_setTask+0xda>
    } else TaskArray[i].run = 0;   
    119a:	fc 01       	movw	r30, r24
    119c:	ee 0f       	add	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	e8 0f       	add	r30, r24
    11a2:	f9 1f       	adc	r31, r25
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	e7 54       	subi	r30, 0x47	; 71
    11aa:	fe 4f       	sbci	r31, 0xFE	; 254
    11ac:	15 82       	std	Z+5, r1	; 0x05
    arrayTail++;                              // увеличиваем "хвост"
    11ae:	80 91 19 02 	lds	r24, 0x0219
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	80 93 19 02 	sts	0x0219, r24
    11b8:	08 95       	ret

000011ba <RTOS_deleteTask>:
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	2e c0       	rjmp	.+92     	; 0x121a <RTOS_deleteTask+0x60>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
    11be:	29 2f       	mov	r18, r25
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	d9 01       	movw	r26, r18
    11c4:	aa 0f       	add	r26, r26
    11c6:	bb 1f       	adc	r27, r27
    11c8:	a2 0f       	add	r26, r18
    11ca:	b3 1f       	adc	r27, r19
    11cc:	aa 0f       	add	r26, r26
    11ce:	bb 1f       	adc	r27, r27
    11d0:	a7 54       	subi	r26, 0x47	; 71
    11d2:	be 4f       	sbci	r27, 0xFE	; 254
    11d4:	4c 91       	ld	r20, X
    11d6:	48 17       	cp	r20, r24
    11d8:	f9 f4       	brne	.+62     	; 0x1218 <RTOS_deleteTask+0x5e>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    11da:	80 91 19 02 	lds	r24, 0x0219
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	91 f0       	breq	.+36     	; 0x120c <RTOS_deleteTask+0x52>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    11e8:	80 91 19 02 	lds	r24, 0x0219
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	fc 01       	movw	r30, r24
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	e8 0f       	add	r30, r24
    11f8:	f9 1f       	adc	r31, r25
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	e7 54       	subi	r30, 0x47	; 71
    1200:	fe 4f       	sbci	r31, 0xFE	; 254
    1202:	86 e0       	ldi	r24, 0x06	; 6
    1204:	01 90       	ld	r0, Z+
    1206:	0d 92       	st	X+, r0
    1208:	81 50       	subi	r24, 0x01	; 1
    120a:	e1 f7       	brne	.-8      	; 0x1204 <RTOS_deleteTask+0x4a>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    120c:	80 91 19 02 	lds	r24, 0x0219
    1210:	81 50       	subi	r24, 0x01	; 1
    1212:	80 93 19 02 	sts	0x0219, r24
      return;
    1216:	08 95       	ret
}
//=============================================================================
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1218:	9f 5f       	subi	r25, 0xFF	; 255
    121a:	20 91 19 02 	lds	r18, 0x0219
    121e:	92 17       	cp	r25, r18
    1220:	70 f2       	brcs	.-100    	; 0x11be <RTOS_deleteTask+0x4>
    1222:	08 95       	ret

00001224 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
  unsigned char i, temp;
  if (timerInterrupt)
    1228:	80 91 b8 01 	lds	r24, 0x01B8
    122c:	88 23       	and	r24, r24
    122e:	11 f4       	brne	.+4      	; 0x1234 <RTOS_dispatchTask+0x10>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	4e c0       	rjmp	.+156    	; 0x12d0 <RTOS_dispatchTask+0xac>
void RTOS_dispatchTask()
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    1234:	10 92 b8 01 	sts	0x01B8, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    1238:	20 e0       	ldi	r18, 0x00	; 0
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    123a:	31 e0       	ldi	r19, 0x01	; 1
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    123c:	17 c0       	rjmp	.+46     	; 0x126c <RTOS_dispatchTask+0x48>
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
    123e:	82 2f       	mov	r24, r18
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	fc 01       	movw	r30, r24
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	e8 0f       	add	r30, r24
    124a:	f9 1f       	adc	r31, r25
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	e7 54       	subi	r30, 0x47	; 71
    1252:	fe 4f       	sbci	r31, 0xFE	; 254
    1254:	81 81       	ldd	r24, Z+1	; 0x01
    1256:	92 81       	ldd	r25, Z+2	; 0x02
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	11 f4       	brne	.+4      	; 0x1260 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    125c:	35 83       	std	Z+5, r19	; 0x05
    125e:	05 c0       	rjmp	.+10     	; 0x126a <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	92 81       	ldd	r25, Z+2	; 0x02
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	92 83       	std	Z+2, r25	; 0x02
    1268:	81 83       	std	Z+1, r24	; 0x01
{
  unsigned char i, temp;
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    126a:	2f 5f       	subi	r18, 0xFF	; 255
    126c:	80 91 19 02 	lds	r24, 0x0219
    1270:	28 17       	cp	r18, r24
    1272:	28 f3       	brcs	.-54     	; 0x123e <RTOS_dispatchTask+0x1a>
    1274:	dd cf       	rjmp	.-70     	; 0x1230 <RTOS_dispatchTask+0xc>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1276:	81 2f       	mov	r24, r17
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	fc 01       	movw	r30, r24
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	e8 0f       	add	r30, r24
    1282:	f9 1f       	adc	r31, r25
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	e7 54       	subi	r30, 0x47	; 71
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	85 81       	ldd	r24, Z+5	; 0x05
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	f1 f4       	brne	.+60     	; 0x12ce <RTOS_dispatchTask+0xaa>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    1292:	00 81       	ld	r16, Z
      if(TaskArray[i].period == 0)                 
    1294:	23 81       	ldd	r18, Z+3	; 0x03
    1296:	34 81       	ldd	r19, Z+4	; 0x04
    1298:	21 15       	cp	r18, r1
    129a:	31 05       	cpc	r19, r1
    129c:	31 f4       	brne	.+12     	; 0x12aa <RTOS_dispatchTask+0x86>
      {  
        cli();
    129e:	f8 94       	cli
        RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    12a0:	80 81       	ld	r24, Z
    12a2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <RTOS_deleteTask>
        sei();
    12a6:	78 94       	sei
    12a8:	0c c0       	rjmp	.+24     	; 0x12c2 <RTOS_dispatchTask+0x9e>
      } else {
        TaskArray[i].run = 0;                // иначе снимаем флаг запуска
    12aa:	15 82       	std	Z+5, r1	; 0x05
        if (!TaskArray[i].delay)             // если задача не изменила задержку
    12ac:	21 81       	ldd	r18, Z+1	; 0x01
    12ae:	32 81       	ldd	r19, Z+2	; 0x02
    12b0:	21 15       	cp	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	31 f4       	brne	.+12     	; 0x12c2 <RTOS_dispatchTask+0x9e>
        {                                    // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    12b6:	23 81       	ldd	r18, Z+3	; 0x03
    12b8:	34 81       	ldd	r19, Z+4	; 0x04
    12ba:	21 50       	subi	r18, 0x01	; 1
    12bc:	30 40       	sbci	r19, 0x00	; 0
    12be:	32 83       	std	Z+2, r19	; 0x02
    12c0:	21 83       	std	Z+1, r18	; 0x01
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    12c2:	e0 91 2f 01 	lds	r30, 0x012F
    12c6:	f0 91 30 01 	lds	r31, 0x0130
    12ca:	80 2f       	mov	r24, r16
    12cc:	09 95       	icall
    {      if (TaskArray[i].delay == 0) {               // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    12ce:	1f 5f       	subi	r17, 0xFF	; 255
    12d0:	80 91 19 02 	lds	r24, 0x0219
    12d4:	18 17       	cp	r17, r24
    12d6:	78 f2       	brcs	.-98     	; 0x1276 <RTOS_dispatchTask+0x52>
        }                                    // задача для себя может сделать паузу  
      }
      pState(temp);                          // выполняем задачу
    }
  }
}
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	08 95       	ret

000012de <__vector_9>:
//=============================================================================
ISR(TIMER_ISR)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	80 93 b2 00 	sts	0x00B2, r24
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 b8 01 	sts	0x01B8, r24
}
    12f6:	8f 91       	pop	r24
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <MAX7219_lookupCode>:
//=============================================================================
uint8_t digit_pin[] = {MAX_DIG_1, MAX_DIG_2, MAX_DIG_3, MAX_DIG_4, MAX_DIG_5, MAX_DIG_6, MAX_DIG_7, MAX_DIG_8};
uint8_t buffer_display[8] = {' ',' ',' ',' ',' ',' ',' ',' '};
//=============================================================================
char MAX7219_lookupCode(char character)
{
    1302:	80 52       	subi	r24, 0x20	; 32
    1304:	86 35       	cpi	r24, 0x56	; 86
    1306:	30 f4       	brcc	.+12     	; 0x1314 <MAX7219_lookupCode+0x12>
    1308:	e8 2f       	mov	r30, r24
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	ef 5b       	subi	r30, 0xBF	; 191
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	80 81       	ld	r24, Z
    1312:	08 95       	ret
    1314:	80 e0       	ldi	r24, 0x00	; 0
    break;
	default:
      return IND_BLANK;
    break;
  }    
}
    1316:	08 95       	ret

00001318 <MAX7219_SendByte>:

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
    1318:	98 e0       	ldi	r25, 0x08	; 8
  uint8_t i;
  for(i = 0; i < 8; i++) {
	if (data & 0x80)
    131a:	87 ff       	sbrs	r24, 7
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <MAX7219_SendByte+0xa>
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
    131e:	43 9a       	sbi	0x08, 3	; 8
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <MAX7219_SendByte+0xc>
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    1322:	43 98       	cbi	0x08, 3	; 8
	data <<= 1;
	PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    1324:	42 98       	cbi	0x08, 2	; 8
	asm("nop");
    1326:	00 00       	nop
	asm("nop");
    1328:	00 00       	nop
	PORT(MAX7219_CLK) |= MAX7219_CLK_LINE;
    132a:	42 9a       	sbi	0x08, 2	; 8
    132c:	91 50       	subi	r25, 0x01	; 1

//=============================================================================
void MAX7219_SendByte(uint8_t data)
{
  uint8_t i;
  for(i = 0; i < 8; i++) {
    132e:	11 f0       	breq	.+4      	; 0x1334 <MAX7219_SendByte+0x1c>
	if (data & 0x80)
	  PORT(MAX7219_DIN) |= MAX7219_DIN_LINE;
	else
	  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
	data <<= 1;
    1330:	88 0f       	add	r24, r24
    1332:	f3 cf       	rjmp	.-26     	; 0x131a <MAX7219_SendByte+0x2>
    1334:	08 95       	ret

00001336 <MAX7219_SendCmd>:
  }
  return;
}
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	18 2f       	mov	r17, r24
    133e:	f6 2e       	mov	r15, r22
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
    1340:	41 98       	cbi	0x08, 1	; 8
    1342:	08 e0       	ldi	r16, 0x08	; 8
  for (j = 0; j < 8; j++) {
	MAX7219_SendByte(reg);
    1344:	81 2f       	mov	r24, r17
    1346:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendByte>
	MAX7219_SendByte(data);
    134a:	8f 2d       	mov	r24, r15
    134c:	0e 94 8c 09 	call	0x1318	; 0x1318 <MAX7219_SendByte>
    1350:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
void MAX7219_SendCmd(uint8_t reg, uint8_t data)
{
  uint8_t j;
  PORT(MAX7219_LOAD) &= ~MAX7219_LOAD_LINE;
  for (j = 0; j < 8; j++) {
    1352:	c1 f7       	brne	.-16     	; 0x1344 <MAX7219_SendCmd+0xe>
	MAX7219_SendByte(reg);
	MAX7219_SendByte(data);
  }
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    1354:	41 9a       	sbi	0x08, 1	; 8
  return;
}
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	08 95       	ret

0000135e <MAX7219_updateDisplay>:
  MAX7219_clearDisplay();
  return;
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	c1 e3       	ldi	r28, 0x31	; 49
    1368:	d1 e0       	ldi	r29, 0x01	; 1
    136a:	09 e3       	ldi	r16, 0x39	; 57
    136c:	11 e0       	ldi	r17, 0x01	; 1
  uint8_t j;
  for (j = 0; j < 8; j++) {
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
    136e:	89 91       	ld	r24, Y+
    1370:	f8 01       	movw	r30, r16
    1372:	61 91       	ld	r22, Z+
    1374:	8f 01       	movw	r16, r30
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
}
//=============================================================================
void MAX7219_updateDisplay(void)
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    137c:	f1 e0       	ldi	r31, 0x01	; 1
    137e:	c9 33       	cpi	r28, 0x39	; 57
    1380:	df 07       	cpc	r29, r31
    1382:	a9 f7       	brne	.-22     	; 0x136e <MAX7219_updateDisplay+0x10>
    MAX7219_SendCmd(MAX7219_DIGIT_0 + digit_pin[j], buffer_display[j]);
  }
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <MAX7219_clearDisplay>:
//=============================================================================
void MAX7219_clearDisplay(void) 
{
  uint8_t j;
  for (j = 0; j < 8; j++) {
    buffer_display[j] = IND_BLANK;
    138e:	10 92 39 01 	sts	0x0139, r1
    1392:	10 92 3a 01 	sts	0x013A, r1
    1396:	10 92 3b 01 	sts	0x013B, r1
    139a:	10 92 3c 01 	sts	0x013C, r1
    139e:	10 92 3d 01 	sts	0x013D, r1
    13a2:	10 92 3e 01 	sts	0x013E, r1
    13a6:	10 92 3f 01 	sts	0x013F, r1
    13aa:	10 92 40 01 	sts	0x0140, r1
  }
  MAX7219_updateDisplay();
    13ae:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_updateDisplay>
}
    13b2:	08 95       	ret

000013b4 <MAX7219_Init>:
  return;
}
//=============================================================================
void MAX7219_Init(void)
{
  DDR(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    13b4:	39 9a       	sbi	0x07, 1	; 7
  DDR(MAX7219_DIN) |= MAX7219_DIN_LINE;
    13b6:	3b 9a       	sbi	0x07, 3	; 7
  DDR(MAX7219_CLK) |= MAX7219_CLK_LINE;
    13b8:	3a 9a       	sbi	0x07, 2	; 7
  PORT(MAX7219_LOAD) |= MAX7219_LOAD_LINE;
    13ba:	41 9a       	sbi	0x08, 1	; 8
  PORT(MAX7219_DIN) &= ~MAX7219_DIN_LINE;
    13bc:	43 98       	cbi	0x08, 3	; 8
  PORT(MAX7219_CLK) &= ~MAX7219_CLK_LINE;
    13be:	42 98       	cbi	0x08, 2	; 8
  MAX7219_SendCmd(MAX7219_SHUTDOWN, 1);
    13c0:	8c e0       	ldi	r24, 0x0C	; 12
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DISP_TEST, 0);
    13c8:	8f e0       	ldi	r24, 0x0F	; 15
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_DEC_MODE, 0);
    13d0:	89 e0       	ldi	r24, 0x09	; 9
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_INTENSITY, 2);
    13d8:	8a e0       	ldi	r24, 0x0A	; 10
    13da:	62 e0       	ldi	r22, 0x02	; 2
    13dc:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
  MAX7219_SendCmd(MAX7219_SCAN_LIMIT, 7);
    13e0:	8b e0       	ldi	r24, 0x0B	; 11
    13e2:	67 e0       	ldi	r22, 0x07	; 7
    13e4:	0e 94 9b 09 	call	0x1336	; 0x1336 <MAX7219_SendCmd>
  MAX7219_clearDisplay();
    13e8:	0e 94 c7 09 	call	0x138e	; 0x138e <MAX7219_clearDisplay>
  return;
}
    13ec:	08 95       	ret

000013ee <MAX7219_printNum>:
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	27 97       	sbiw	r28, 0x07	; 7
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	b8 2e       	mov	r11, r24
    1412:	cb 01       	movw	r24, r22
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    1414:	77 ff       	sbrs	r23, 7
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <MAX7219_printNum+0x34>
    sign = 1;
    x *= -1;
    1418:	90 95       	com	r25
    141a:	81 95       	neg	r24
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    141e:	31 e0       	ldi	r19, 0x01	; 1
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <MAX7219_printNum+0x36>
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
{
  unsigned char i, sign = 0;
    1422:	30 e0       	ldi	r19, 0x00	; 0
    buffer_display[j] = IND_BLANK;
  }
  MAX7219_updateDisplay();
}
//=============================================================================
void MAX7219_printNum(uint8_t pos, int16_t x, unsigned char n, unsigned char fillch)
    1424:	e4 2f       	mov	r30, r20
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8e 01       	movw	r16, r28
    142a:	0f 5f       	subi	r16, 0xFF	; 255
    142c:	1f 4f       	sbci	r17, 0xFF	; 255
    142e:	e0 0f       	add	r30, r16
    1430:	f1 1f       	adc	r31, r17
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    1432:	5a e0       	ldi	r21, 0x0A	; 10
    1434:	e5 2e       	mov	r14, r21
    1436:	f1 2c       	mov	r15, r1
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    1438:	07 c0       	rjmp	.+14     	; 0x1448 <MAX7219_printNum+0x5a>
    143a:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
    143c:	b7 01       	movw	r22, r14
    143e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__divmodhi4>
    1442:	80 5d       	subi	r24, 0xD0	; 208
    1444:	80 83       	st	Z, r24
    x /= 10;
    1446:	cb 01       	movw	r24, r22
  unsigned char s[4];
  if (x < 0) {
    sign = 1;
    x *= -1;
  }
  for (i = 0; i < n; i++) {
    1448:	e0 17       	cp	r30, r16
    144a:	f1 07       	cpc	r31, r17
    144c:	b1 f7       	brne	.-20     	; 0x143a <MAX7219_printNum+0x4c>
    144e:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    1450:	84 2f       	mov	r24, r20
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
    1456:	de 01       	movw	r26, r28
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	08 c0       	rjmp	.+16     	; 0x146c <MAX7219_printNum+0x7e>
    145c:	fd 01       	movw	r30, r26
    145e:	e6 0f       	add	r30, r22
    1460:	f7 1f       	adc	r31, r23
    1462:	60 81       	ld	r22, Z
    1464:	60 33       	cpi	r22, 0x30	; 48
    1466:	11 f5       	brne	.+68     	; 0x14ac <MAX7219_printNum+0xbe>
    1468:	20 83       	st	Z, r18
  }
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    146a:	5f 5f       	subi	r21, 0xFF	; 255
    146c:	65 2f       	mov	r22, r21
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	68 17       	cp	r22, r24
    1472:	79 07       	cpc	r23, r25
    1474:	9c f3       	brlt	.-26     	; 0x145c <MAX7219_printNum+0x6e>
    1476:	1a c0       	rjmp	.+52     	; 0x14ac <MAX7219_printNum+0xbe>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    1478:	82 2f       	mov	r24, r18
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	8c 01       	movw	r16, r24
    147e:	0c 0d       	add	r16, r12
    1480:	1d 1d       	adc	r17, r13
    1482:	08 30       	cpi	r16, 0x08	; 8
    1484:	11 05       	cpc	r17, r1
    1486:	84 f4       	brge	.+32     	; 0x14a8 <MAX7219_printNum+0xba>
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    1488:	8e 0d       	add	r24, r14
    148a:	9f 1d       	adc	r25, r15
    148c:	fc 01       	movw	r30, r24
    148e:	80 81       	ld	r24, Z
    1490:	2d 83       	std	Y+5, r18	; 0x05
    1492:	3e 83       	std	Y+6, r19	; 0x06
    1494:	4f 83       	std	Y+7, r20	; 0x07
    1496:	0e 94 81 09 	call	0x1302	; 0x1302 <MAX7219_lookupCode>
    149a:	f8 01       	movw	r30, r16
    149c:	e7 5c       	subi	r30, 0xC7	; 199
    149e:	fe 4f       	sbci	r31, 0xFE	; 254
    14a0:	80 83       	st	Z, r24
    14a2:	4f 81       	ldd	r20, Y+7	; 0x07
    14a4:	3e 81       	ldd	r19, Y+6	; 0x06
    14a6:	2d 81       	ldd	r18, Y+5	; 0x05
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    14a8:	2f 5f       	subi	r18, 0xFF	; 255
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <MAX7219_printNum+0xcc>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
    14ac:	20 e0       	ldi	r18, 0x00	; 0
  }
  for (i = 0; i < n; i++) {
    if ((pos + i) < 8) {
    14ae:	cb 2c       	mov	r12, r11
    14b0:	dd 24       	eor	r13, r13
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    14b2:	7e 01       	movw	r14, r28
    14b4:	08 94       	sec
    14b6:	e1 1c       	adc	r14, r1
    14b8:	f1 1c       	adc	r15, r1
    x /= 10;
  }
  for (i = 0; i < (n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i = 0; i < n; i++) {
    14ba:	24 17       	cp	r18, r20
    14bc:	e8 f2       	brcs	.-70     	; 0x1478 <MAX7219_printNum+0x8a>
    if ((pos + i) < 8) {
      buffer_display[pos + i] = MAX7219_lookupCode(s[i]);
    }
  }
  if (sign) {
    14be:	33 23       	and	r19, r19
    14c0:	41 f0       	breq	.+16     	; 0x14d2 <MAX7219_printNum+0xe4>
    buffer_display[pos - 1] = MAX7219_lookupCode('-');
    14c2:	8d e2       	ldi	r24, 0x2D	; 45
    14c4:	0e 94 81 09 	call	0x1302	; 0x1302 <MAX7219_lookupCode>
    14c8:	eb 2d       	mov	r30, r11
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	e8 5c       	subi	r30, 0xC8	; 200
    14ce:	fe 4f       	sbci	r31, 0xFE	; 254
    14d0:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    14d2:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_updateDisplay>
}
    14d6:	27 96       	adiw	r28, 0x07	; 7
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	bf 90       	pop	r11
    14f4:	08 95       	ret

000014f6 <MAX7219_printChar>:
//=============================================================================
void MAX7219_printChar(uint8_t pos, char data)
{
    14f6:	1f 93       	push	r17
    14f8:	18 2f       	mov	r17, r24
    14fa:	86 2f       	mov	r24, r22
  if (pos < 9) {
    14fc:	19 30       	cpi	r17, 0x09	; 9
    14fe:	48 f4       	brcc	.+18     	; 0x1512 <MAX7219_printChar+0x1c>
    buffer_display[pos - 1] = MAX7219_lookupCode(data);
    1500:	0e 94 81 09 	call	0x1302	; 0x1302 <MAX7219_lookupCode>
    1504:	e1 2f       	mov	r30, r17
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	e8 5c       	subi	r30, 0xC8	; 200
    150a:	fe 4f       	sbci	r31, 0xFE	; 254
    150c:	80 83       	st	Z, r24
    MAX7219_updateDisplay();
    150e:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_updateDisplay>
  }
}
    1512:	1f 91       	pop	r17
    1514:	08 95       	ret

00001516 <MAX7219_printStr>:
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
  unsigned char i = pos;
    1520:	e6 2e       	mov	r14, r22
    1522:	e7 01       	movw	r28, r14
    1524:	7e 01       	movw	r14, r28
    1526:	f7 2e       	mov	r15, r23
    1528:	e7 01       	movw	r28, r14
    152a:	18 2f       	mov	r17, r24
  while(*data) {
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <MAX7219_printStr+0x2c>
    if (i < 9) {
    152e:	19 30       	cpi	r17, 0x09	; 9
    1530:	58 f4       	brcc	.+22     	; 0x1548 <MAX7219_printStr+0x32>
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
    1532:	0e 94 81 09 	call	0x1302	; 0x1302 <MAX7219_lookupCode>
    1536:	e1 2f       	mov	r30, r17
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	e8 5c       	subi	r30, 0xC8	; 200
    153c:	fe 4f       	sbci	r31, 0xFE	; 254
    153e:	80 83       	st	Z, r24
      i++;
    1540:	1f 5f       	subi	r17, 0xFF	; 255
}
//=============================================================================
void MAX7219_printStr(uint8_t pos, char *data)
{
  unsigned char i = pos;
  while(*data) {
    1542:	89 91       	ld	r24, Y+
    1544:	88 23       	and	r24, r24
    1546:	99 f7       	brne	.-26     	; 0x152e <MAX7219_printStr+0x18>
    if (i < 9) {
	  buffer_display[i - 1] = MAX7219_lookupCode(*(data++));
      i++;
	} else break;
  }
  MAX7219_updateDisplay();
    1548:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_updateDisplay>
}
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	08 95       	ret

00001558 <MAX7219_setCommaPos>:
//=============================================================================
void MAX7219_setCommaPos(uint8_t pos, uint8_t comma)
{
    1558:	e8 2f       	mov	r30, r24
    155a:	f0 e0       	ldi	r31, 0x00	; 0
  if (comma == 1) {
    155c:	61 30       	cpi	r22, 0x01	; 1
    155e:	29 f4       	brne	.+10     	; 0x156a <MAX7219_setCommaPos+0x12>
    buffer_display[pos - 1] |= (1 << SEG_H);
    1560:	e8 5c       	subi	r30, 0xC8	; 200
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	80 81       	ld	r24, Z
    1566:	80 68       	ori	r24, 0x80	; 128
    1568:	04 c0       	rjmp	.+8      	; 0x1572 <MAX7219_setCommaPos+0x1a>
  } else {
    buffer_display[pos - 1] &= (~(1 << SEG_H));
    156a:	e8 5c       	subi	r30, 0xC8	; 200
    156c:	fe 4f       	sbci	r31, 0xFE	; 254
    156e:	80 81       	ld	r24, Z
    1570:	8f 77       	andi	r24, 0x7F	; 127
    1572:	80 83       	st	Z, r24
  }
  MAX7219_updateDisplay();
    1574:	0e 94 af 09 	call	0x135e	; 0x135e <MAX7219_updateDisplay>
}
    1578:	08 95       	ret

0000157a <ds18x20IsOnBus>:
//=============================================================================
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
    157a:	e8 2f       	mov	r30, r24
  uint8_t ret = 0;
  cli();
    157c:	f8 94       	cli
  switch(chanel) {
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	01 f1       	breq	.+64     	; 0x15c2 <ds18x20IsOnBus+0x48>
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	20 f4       	brcc	.+8      	; 0x158e <ds18x20IsOnBus+0x14>
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	09 f0       	breq	.+2      	; 0x158c <ds18x20IsOnBus+0x12>
    158a:	57 c0       	rjmp	.+174    	; 0x163a <ds18x20IsOnBus+0xc0>
    158c:	06 c0       	rjmp	.+12     	; 0x159a <ds18x20IsOnBus+0x20>
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	61 f1       	breq	.+88     	; 0x15ea <ds18x20IsOnBus+0x70>
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	09 f0       	breq	.+2      	; 0x1598 <ds18x20IsOnBus+0x1e>
    1596:	51 c0       	rjmp	.+162    	; 0x163a <ds18x20IsOnBus+0xc0>
    1598:	3e c0       	rjmp	.+124    	; 0x1616 <ds18x20IsOnBus+0x9c>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    159a:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    159c:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    159e:	8f e7       	ldi	r24, 0x7F	; 127
    15a0:	97 e0       	ldi	r25, 0x07	; 7
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <ds18x20IsOnBus+0x28>
    15a6:	00 c0       	rjmp	.+0      	; 0x15a8 <ds18x20IsOnBus+0x2e>
    15a8:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    15aa:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    15ac:	29 9a       	sbi	0x05, 1	; 5
    15ae:	a7 e1       	ldi	r26, 0x17	; 23
    15b0:	b1 e0       	ldi	r27, 0x01	; 1
    15b2:	11 97       	sbiw	r26, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <ds18x20IsOnBus+0x38>
    15b6:	00 c0       	rjmp	.+0      	; 0x15b8 <ds18x20IsOnBus+0x3e>
    15b8:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	19 9b       	sbis	0x03, 1	; 3
    15be:	3e c0       	rjmp	.+124    	; 0x163c <ds18x20IsOnBus+0xc2>
    15c0:	3c c0       	rjmp	.+120    	; 0x163a <ds18x20IsOnBus+0xc0>
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    15c2:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    15c4:	28 98       	cbi	0x05, 0	; 5
    15c6:	8f e7       	ldi	r24, 0x7F	; 127
    15c8:	97 e0       	ldi	r25, 0x07	; 7
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <ds18x20IsOnBus+0x50>
    15ce:	00 c0       	rjmp	.+0      	; 0x15d0 <ds18x20IsOnBus+0x56>
    15d0:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    15d2:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    15d4:	28 9a       	sbi	0x05, 0	; 5
    15d6:	a7 e1       	ldi	r26, 0x17	; 23
    15d8:	b1 e0       	ldi	r27, 0x01	; 1
    15da:	11 97       	sbiw	r26, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <ds18x20IsOnBus+0x60>
    15de:	00 c0       	rjmp	.+0      	; 0x15e0 <ds18x20IsOnBus+0x66>
    15e0:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	18 9b       	sbis	0x03, 0	; 3
    15e6:	2a c0       	rjmp	.+84     	; 0x163c <ds18x20IsOnBus+0xc2>
    15e8:	28 c0       	rjmp	.+80     	; 0x163a <ds18x20IsOnBus+0xc0>
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    15ea:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    15ec:	5f 98       	cbi	0x0b, 7	; 11
    15ee:	8f e7       	ldi	r24, 0x7F	; 127
    15f0:	97 e0       	ldi	r25, 0x07	; 7
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <ds18x20IsOnBus+0x78>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <ds18x20IsOnBus+0x7e>
    15f8:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    15fa:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    15fc:	5f 9a       	sbi	0x0b, 7	; 11
    15fe:	a7 e1       	ldi	r26, 0x17	; 23
    1600:	b1 e0       	ldi	r27, 0x01	; 1
    1602:	11 97       	sbiw	r26, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <ds18x20IsOnBus+0x88>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <ds18x20IsOnBus+0x8e>
    1608:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE);
    160a:	89 b1       	in	r24, 0x09	; 9
    160c:	80 95       	com	r24
    160e:	88 1f       	adc	r24, r24
    1610:	88 27       	eor	r24, r24
    1612:	88 1f       	adc	r24, r24
    break;
    1614:	13 c0       	rjmp	.+38     	; 0x163c <ds18x20IsOnBus+0xc2>
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    1616:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    1618:	2a 98       	cbi	0x05, 2	; 5
    161a:	8f e7       	ldi	r24, 0x7F	; 127
    161c:	97 e0       	ldi	r25, 0x07	; 7
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <ds18x20IsOnBus+0xa4>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <ds18x20IsOnBus+0xaa>
    1624:	00 00       	nop
      _delay_us(480);										/* Reset */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    1626:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    1628:	2a 9a       	sbi	0x05, 2	; 5
    162a:	a7 e1       	ldi	r26, 0x17	; 23
    162c:	b1 e0       	ldi	r27, 0x01	; 1
    162e:	11 97       	sbiw	r26, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <ds18x20IsOnBus+0xb4>
    1632:	00 c0       	rjmp	.+0      	; 0x1634 <ds18x20IsOnBus+0xba>
    1634:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	1a 99       	sbic	0x03, 2	; 3
static ds18x20Dev devs[DS18X20_MAX_DEV];
static uint8_t devCount[DS18X20_MAX_DEV] = {0, 0, 0, 0};
//=============================================================================
uint8_t ds18x20IsOnBus(uint8_t chanel)
{
  uint8_t ret = 0;
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	a7 e6       	ldi	r26, 0x67	; 103
    163e:	b6 e0       	ldi	r27, 0x06	; 6
    1640:	11 97       	sbiw	r26, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <ds18x20IsOnBus+0xc6>
    1644:	00 c0       	rjmp	.+0      	; 0x1646 <ds18x20IsOnBus+0xcc>
    1646:	00 00       	nop
      _delay_us(70);										/* Wait for response */
      ret = !(PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE);
    break;
  }
  _delay_us(410);
  devCount[chanel - 1] = ret;
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	e7 5e       	subi	r30, 0xE7	; 231
    164c:	fd 4f       	sbci	r31, 0xFD	; 253
    164e:	80 83       	st	Z, r24
  sei();
    1650:	78 94       	sei
  return ret;
}
    1652:	08 95       	ret

00001654 <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
    1654:	28 e0       	ldi	r18, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01, chanel);
    1656:	98 2f       	mov	r25, r24
    1658:	91 70       	andi	r25, 0x01	; 1
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit, uint8_t chanel)
{
  cli();
    165a:	f8 94       	cli
  switch(chanel) {
    165c:	62 30       	cpi	r22, 0x02	; 2
    165e:	e1 f0       	breq	.+56     	; 0x1698 <ds18x20SendByte+0x44>
    1660:	63 30       	cpi	r22, 0x03	; 3
    1662:	20 f4       	brcc	.+8      	; 0x166c <ds18x20SendByte+0x18>
    1664:	61 30       	cpi	r22, 0x01	; 1
    1666:	09 f0       	breq	.+2      	; 0x166a <ds18x20SendByte+0x16>
    1668:	52 c0       	rjmp	.+164    	; 0x170e <ds18x20SendByte+0xba>
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <ds18x20SendByte+0x24>
    166c:	63 30       	cpi	r22, 0x03	; 3
    166e:	21 f1       	breq	.+72     	; 0x16b8 <ds18x20SendByte+0x64>
    1670:	64 30       	cpi	r22, 0x04	; 4
    1672:	09 f0       	breq	.+2      	; 0x1676 <ds18x20SendByte+0x22>
    1674:	4c c0       	rjmp	.+152    	; 0x170e <ds18x20SendByte+0xba>
    1676:	30 c0       	rjmp	.+96     	; 0x16d8 <ds18x20SendByte+0x84>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Pin as output (0) */
    1678:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Set active 0 */
    167a:	29 98       	cbi	0x05, 1	; 5
    167c:	30 e2       	ldi	r19, 0x20	; 32
    167e:	3a 95       	dec	r19
    1680:	f1 f7       	brne	.-4      	; 0x167e <ds18x20SendByte+0x2a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    1682:	99 23       	and	r25, r25
    1684:	31 f4       	brne	.+12     	; 0x1692 <ds18x20SendByte+0x3e>
    1686:	e7 ed       	ldi	r30, 0xD7	; 215
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <ds18x20SendByte+0x36>
    168e:	00 c0       	rjmp	.+0      	; 0x1690 <ds18x20SendByte+0x3c>
    1690:	00 00       	nop
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;					/* Pin as input (1) */
    1692:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;					/* Enable pull-up resitor */
    1694:	29 9a       	sbi	0x05, 1	; 5
    1696:	2f c0       	rjmp	.+94     	; 0x16f6 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Pin as output (0) */
    1698:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Set active 0 */
    169a:	28 98       	cbi	0x05, 0	; 5
    169c:	f0 e2       	ldi	r31, 0x20	; 32
    169e:	fa 95       	dec	r31
    16a0:	f1 f7       	brne	.-4      	; 0x169e <ds18x20SendByte+0x4a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16a2:	99 23       	and	r25, r25
    16a4:	31 f4       	brne	.+12     	; 0x16b2 <ds18x20SendByte+0x5e>
    16a6:	e7 ed       	ldi	r30, 0xD7	; 215
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <ds18x20SendByte+0x56>
    16ae:	00 c0       	rjmp	.+0      	; 0x16b0 <ds18x20SendByte+0x5c>
    16b0:	00 00       	nop
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;					/* Pin as input (1) */
    16b2:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;					/* Enable pull-up resitor */
    16b4:	28 9a       	sbi	0x05, 0	; 5
    16b6:	1f c0       	rjmp	.+62     	; 0x16f6 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Pin as output (0) */
    16b8:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Set active 0 */
    16ba:	5f 98       	cbi	0x0b, 7	; 11
    16bc:	f0 e2       	ldi	r31, 0x20	; 32
    16be:	fa 95       	dec	r31
    16c0:	f1 f7       	brne	.-4      	; 0x16be <ds18x20SendByte+0x6a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16c2:	99 23       	and	r25, r25
    16c4:	31 f4       	brne	.+12     	; 0x16d2 <ds18x20SendByte+0x7e>
    16c6:	e7 ed       	ldi	r30, 0xD7	; 215
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	31 97       	sbiw	r30, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <ds18x20SendByte+0x76>
    16ce:	00 c0       	rjmp	.+0      	; 0x16d0 <ds18x20SendByte+0x7c>
    16d0:	00 00       	nop
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;					/* Pin as input (1) */
    16d2:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;					/* Enable pull-up resitor */
    16d4:	5f 9a       	sbi	0x0b, 7	; 11
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <ds18x20SendByte+0xa2>
      _delay_us(10);
      if (bit) _delay_us(54);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Pin as output (0) */
    16d8:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Set active 0 */
    16da:	2a 98       	cbi	0x05, 2	; 5
    16dc:	f0 e2       	ldi	r31, 0x20	; 32
    16de:	fa 95       	dec	r31
    16e0:	f1 f7       	brne	.-4      	; 0x16de <ds18x20SendByte+0x8a>
      _delay_us(6);
      if (!bit)	_delay_us(54);
    16e2:	99 23       	and	r25, r25
    16e4:	31 f4       	brne	.+12     	; 0x16f2 <ds18x20SendByte+0x9e>
    16e6:	e7 ed       	ldi	r30, 0xD7	; 215
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	31 97       	sbiw	r30, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <ds18x20SendByte+0x96>
    16ee:	00 c0       	rjmp	.+0      	; 0x16f0 <ds18x20SendByte+0x9c>
    16f0:	00 00       	nop
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;					/* Pin as input (1) */
    16f2:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;					/* Enable pull-up resitor */
    16f4:	2a 9a       	sbi	0x05, 2	; 5
    16f6:	f5 e3       	ldi	r31, 0x35	; 53
    16f8:	fa 95       	dec	r31
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <ds18x20SendByte+0xa4>
    16fc:	00 00       	nop
      _delay_us(10);
      if (bit) _delay_us(54);
    16fe:	99 23       	and	r25, r25
    1700:	31 f0       	breq	.+12     	; 0x170e <ds18x20SendByte+0xba>
    1702:	e7 ed       	ldi	r30, 0xD7	; 215
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	31 97       	sbiw	r30, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <ds18x20SendByte+0xb2>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <ds18x20SendByte+0xb8>
    170c:	00 00       	nop
    break;
  }
  sei();
    170e:	78 94       	sei
    1710:	21 50       	subi	r18, 0x01	; 1
}
//=============================================================================
void ds18x20SendByte(uint8_t byte, uint8_t chanel)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    1712:	11 f0       	breq	.+4      	; 0x1718 <ds18x20SendByte+0xc4>
	ds18x20SendBit(byte & 0x01, chanel);
	byte >>= 1;
    1714:	86 95       	lsr	r24
    1716:	9f cf       	rjmp	.-194    	; 0x1656 <ds18x20SendByte+0x2>
    1718:	08 95       	ret

0000171a <ds18x20GetByte>:
  }
  return;
}
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
    171a:	28 2f       	mov	r18, r24
    171c:	38 e0       	ldi	r19, 0x08	; 8
  uint8_t i, ret;
  ret = 0;
    171e:	80 e0       	ldi	r24, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    1720:	86 95       	lsr	r24
}
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
    1722:	f8 94       	cli
  switch(chanel) {
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	c1 f0       	breq	.+48     	; 0x1758 <ds18x20GetByte+0x3e>
    1728:	23 30       	cpi	r18, 0x03	; 3
    172a:	20 f4       	brcc	.+8      	; 0x1734 <ds18x20GetByte+0x1a>
    172c:	21 30       	cpi	r18, 0x01	; 1
    172e:	09 f0       	breq	.+2      	; 0x1732 <ds18x20GetByte+0x18>
    1730:	40 c0       	rjmp	.+128    	; 0x17b2 <ds18x20GetByte+0x98>
    1732:	05 c0       	rjmp	.+10     	; 0x173e <ds18x20GetByte+0x24>
    1734:	23 30       	cpi	r18, 0x03	; 3
    1736:	e9 f0       	breq	.+58     	; 0x1772 <ds18x20GetByte+0x58>
    1738:	24 30       	cpi	r18, 0x04	; 4
    173a:	d9 f5       	brne	.+118    	; 0x17b2 <ds18x20GetByte+0x98>
    173c:	27 c0       	rjmp	.+78     	; 0x178c <ds18x20GetByte+0x72>
    case 1:
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Pin as output (0) */
    173e:	21 9a       	sbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Set active 0 */
    1740:	29 98       	cbi	0x05, 1	; 5
    1742:	90 e2       	ldi	r25, 0x20	; 32
    1744:	9a 95       	dec	r25
    1746:	f1 f7       	brne	.-4      	; 0x1744 <ds18x20GetByte+0x2a>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_1) &= ~ONE_WIRE_1_LINE;				/* Pin as input (1) */
    1748:	21 98       	cbi	0x04, 1	; 4
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;				/* Enable pull-up resitor */
    174a:	29 9a       	sbi	0x05, 1	; 5
    174c:	e0 e3       	ldi	r30, 0x30	; 48
    174e:	ea 95       	dec	r30
    1750:	f1 f7       	brne	.-4      	; 0x174e <ds18x20GetByte+0x34>
      _delay_us(9);
      ret = PIN(ONE_WIRE_1) & ONE_WIRE_1_LINE;
    1752:	93 b1       	in	r25, 0x03	; 3
    1754:	92 70       	andi	r25, 0x02	; 2
    1756:	26 c0       	rjmp	.+76     	; 0x17a4 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 2:
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Pin as output (0) */
    1758:	20 9a       	sbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Set active 0 */
    175a:	28 98       	cbi	0x05, 0	; 5
    175c:	f0 e2       	ldi	r31, 0x20	; 32
    175e:	fa 95       	dec	r31
    1760:	f1 f7       	brne	.-4      	; 0x175e <ds18x20GetByte+0x44>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_2) &= ~ONE_WIRE_2_LINE;				/* Pin as input (1) */
    1762:	20 98       	cbi	0x04, 0	; 4
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;				/* Enable pull-up resitor */
    1764:	28 9a       	sbi	0x05, 0	; 5
    1766:	90 e3       	ldi	r25, 0x30	; 48
    1768:	9a 95       	dec	r25
    176a:	f1 f7       	brne	.-4      	; 0x1768 <ds18x20GetByte+0x4e>
      _delay_us(9);
      ret = PIN(ONE_WIRE_2) & ONE_WIRE_2_LINE;
    176c:	93 b1       	in	r25, 0x03	; 3
    176e:	91 70       	andi	r25, 0x01	; 1
    1770:	19 c0       	rjmp	.+50     	; 0x17a4 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 3:
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Pin as output (0) */
    1772:	57 9a       	sbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Set active 0 */
    1774:	5f 98       	cbi	0x0b, 7	; 11
    1776:	f0 e2       	ldi	r31, 0x20	; 32
    1778:	fa 95       	dec	r31
    177a:	f1 f7       	brne	.-4      	; 0x1778 <ds18x20GetByte+0x5e>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_3) &= ~ONE_WIRE_3_LINE;				/* Pin as input (1) */
    177c:	57 98       	cbi	0x0a, 7	; 10
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;				/* Enable pull-up resitor */
    177e:	5f 9a       	sbi	0x0b, 7	; 11
    1780:	90 e3       	ldi	r25, 0x30	; 48
    1782:	9a 95       	dec	r25
    1784:	f1 f7       	brne	.-4      	; 0x1782 <ds18x20GetByte+0x68>
      _delay_us(9);
      ret = PIN(ONE_WIRE_3) & ONE_WIRE_3_LINE;
    1786:	99 b1       	in	r25, 0x09	; 9
    1788:	90 78       	andi	r25, 0x80	; 128
    178a:	0c c0       	rjmp	.+24     	; 0x17a4 <ds18x20GetByte+0x8a>
      _delay_us(55);
    break;
    case 4:
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Pin as output (0) */
    178c:	22 9a       	sbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Set active 0 */
    178e:	2a 98       	cbi	0x05, 2	; 5
    1790:	f0 e2       	ldi	r31, 0x20	; 32
    1792:	fa 95       	dec	r31
    1794:	f1 f7       	brne	.-4      	; 0x1792 <ds18x20GetByte+0x78>
      _delay_us(6);										/* Strob */
      DDR(ONE_WIRE_4) &= ~ONE_WIRE_4_LINE;				/* Pin as input (1) */
    1796:	22 98       	cbi	0x04, 2	; 4
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;				/* Enable pull-up resitor */
    1798:	2a 9a       	sbi	0x05, 2	; 5
    179a:	90 e3       	ldi	r25, 0x30	; 48
    179c:	9a 95       	dec	r25
    179e:	f1 f7       	brne	.-4      	; 0x179c <ds18x20GetByte+0x82>
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
    17a0:	93 b1       	in	r25, 0x03	; 3
    17a2:	94 70       	andi	r25, 0x04	; 4
    17a4:	eb ed       	ldi	r30, 0xDB	; 219
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	31 97       	sbiw	r30, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <ds18x20GetByte+0x8e>
    17ac:	00 c0       	rjmp	.+0      	; 0x17ae <ds18x20GetByte+0x94>
    17ae:	00 00       	nop
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <ds18x20GetByte+0x9a>
//=============================================================================
static uint8_t ds18x20GetBit(uint8_t chanel)
{
  uint8_t ret;
  cli();
  switch(chanel) {
    17b2:	90 e0       	ldi	r25, 0x00	; 0
      _delay_us(9);
      ret = PIN(ONE_WIRE_4) & ONE_WIRE_4_LINE;
      _delay_us(55);
    break;
  }
  sei();
    17b4:	78 94       	sei
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
    17b6:	91 11       	cpse	r25, r1
    17b8:	80 68       	ori	r24, 0x80	; 128
    17ba:	31 50       	subi	r19, 0x01	; 1
//=============================================================================
uint8_t ds18x20GetByte(uint8_t chanel)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <ds18x20GetByte+0xa6>
    17be:	b0 cf       	rjmp	.-160    	; 0x1720 <ds18x20GetByte+0x6>
	ret >>= 1;
	if (ds18x20GetBit(chanel)) ret |= 0x80;
  }
  return ret;
}
    17c0:	08 95       	ret

000017c2 <ds18x20ReadStratchPad>:
//=============================================================================
void ds18x20ReadStratchPad(uint8_t chanel)
{
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	18 2f       	mov	r17, r24
  uint8_t j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  if (ds18x20IsOnBus(chanel))
    17cc:	0e 94 bd 0a 	call	0x157a	; 0x157a <ds18x20IsOnBus>
    17d0:	88 23       	and	r24, r24
    17d2:	91 f1       	breq	.+100    	; 0x1838 <ds18x20ReadStratchPad+0x76>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    17d4:	8c ec       	ldi	r24, 0xCC	; 204
    17d6:	61 2f       	mov	r22, r17
    17d8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    17dc:	8e eb       	ldi	r24, 0xBE	; 190
    17de:	61 2f       	mov	r22, r17
    17e0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ds18x20SendByte>
    17e4:	c6 e4       	ldi	r28, 0x46	; 70
    17e6:	d2 e0       	ldi	r29, 0x02	; 2
    crc = 0;
    17e8:	00 e0       	ldi	r16, 0x00	; 0
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
	  arr[j] = ds18x20GetByte(chanel);
    17ea:	81 2f       	mov	r24, r17
    17ec:	0e 94 8d 0b 	call	0x171a	; 0x171a <ds18x20GetByte>
    17f0:	89 93       	st	Y+, r24

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    17f2:	08 27       	eor	r16, r24
    17f4:	88 e0       	ldi	r24, 0x08	; 8
    17f6:	9c e8       	ldi	r25, 0x8C	; 140
    17f8:	06 95       	lsr	r16
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <ds18x20ReadStratchPad+0x3c>
    17fc:	09 27       	eor	r16, r25
    17fe:	8a 95       	dec	r24
    1800:	d9 f7       	brne	.-10     	; 0x17f8 <ds18x20ReadStratchPad+0x36>
  if (ds18x20IsOnBus(chanel))
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    ds18x20SendByte(DS18X20_CMD_READ_SCRATCH, chanel);
    crc = 0;
	for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	cf 34       	cpi	r28, 0x4F	; 79
    1806:	d8 07       	cpc	r29, r24
    1808:	81 f7       	brne	.-32     	; 0x17ea <ds18x20ReadStratchPad+0x28>
	  arr[j] = ds18x20GetByte(chanel);
	  crc = _crc_ibutton_update(crc, arr[j]);
	}
  	if (crc == 0) {
    180a:	00 23       	and	r16, r16
    180c:	a9 f4       	brne	.+42     	; 0x1838 <ds18x20ReadStratchPad+0x76>
	  for (j = 0; j < DS18X20_SCRATCH_TEMP_LEN; j++) { devs[chanel - 1].sp[j] = arr[j]; }
    180e:	81 2f       	mov	r24, r17
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	fc 01       	movw	r30, r24
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	23 e0       	ldi	r18, 0x03	; 3
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	2a 95       	dec	r18
    1822:	e1 f7       	brne	.-8      	; 0x181c <ds18x20ReadStratchPad+0x5a>
    1824:	e8 0f       	add	r30, r24
    1826:	f9 1f       	adc	r31, r25
    1828:	e2 5e       	subi	r30, 0xE2	; 226
    182a:	fd 4f       	sbci	r31, 0xFD	; 253
    182c:	80 91 46 02 	lds	r24, 0x0246
    1830:	80 83       	st	Z, r24
    1832:	80 91 47 02 	lds	r24, 0x0247
    1836:	81 83       	std	Z+1, r24	; 0x01
	}
  }
  return;
}
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <ds18x20ConvertTemp>:
//=============================================================================
void ds18x20ConvertTemp(uint8_t chanel)
{
    1842:	1f 93       	push	r17
    1844:	18 2f       	mov	r17, r24
  if (ds18x20IsOnBus(chanel))
    1846:	0e 94 bd 0a 	call	0x157a	; 0x157a <ds18x20IsOnBus>
    184a:	88 23       	and	r24, r24
    184c:	41 f0       	breq	.+16     	; 0x185e <ds18x20ConvertTemp+0x1c>
  {
    ds18x20SendByte(DS18X20_CMD_SKIP_ROM, chanel);
    184e:	8c ec       	ldi	r24, 0xCC	; 204
    1850:	61 2f       	mov	r22, r17
    1852:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ds18x20SendByte>
    ds18x20SendByte(DS18X20_CMD_CONVERT, chanel);
    1856:	84 e4       	ldi	r24, 0x44	; 68
    1858:	61 2f       	mov	r22, r17
    185a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ds18x20SendByte>
  }
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  switch(chanel) {
    185e:	12 30       	cpi	r17, 0x02	; 2
    1860:	69 f0       	breq	.+26     	; 0x187c <ds18x20ConvertTemp+0x3a>
    1862:	13 30       	cpi	r17, 0x03	; 3
    1864:	18 f4       	brcc	.+6      	; 0x186c <ds18x20ConvertTemp+0x2a>
    1866:	11 30       	cpi	r17, 0x01	; 1
    1868:	89 f4       	brne	.+34     	; 0x188c <ds18x20ConvertTemp+0x4a>
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <ds18x20ConvertTemp+0x34>
    186c:	13 30       	cpi	r17, 0x03	; 3
    186e:	49 f0       	breq	.+18     	; 0x1882 <ds18x20ConvertTemp+0x40>
    1870:	14 30       	cpi	r17, 0x04	; 4
    1872:	61 f4       	brne	.+24     	; 0x188c <ds18x20ConvertTemp+0x4a>
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <ds18x20ConvertTemp+0x46>
    case 1:
      PORT(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1876:	29 9a       	sbi	0x05, 1	; 5
      DDR(ONE_WIRE_1) |= ONE_WIRE_1_LINE;
    1878:	21 9a       	sbi	0x04, 1	; 4
    break;
    187a:	08 c0       	rjmp	.+16     	; 0x188c <ds18x20ConvertTemp+0x4a>
    case 2:
      PORT(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    187c:	28 9a       	sbi	0x05, 0	; 5
      DDR(ONE_WIRE_2) |= ONE_WIRE_2_LINE;
    187e:	20 9a       	sbi	0x04, 0	; 4
    break;
    1880:	05 c0       	rjmp	.+10     	; 0x188c <ds18x20ConvertTemp+0x4a>
    case 3:
      PORT(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1882:	5f 9a       	sbi	0x0b, 7	; 11
      DDR(ONE_WIRE_3) |= ONE_WIRE_3_LINE;
    1884:	57 9a       	sbi	0x0a, 7	; 10
    break;
    1886:	02 c0       	rjmp	.+4      	; 0x188c <ds18x20ConvertTemp+0x4a>
    case 4:
      PORT(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    1888:	2a 9a       	sbi	0x05, 2	; 5
      DDR(ONE_WIRE_4) |= ONE_WIRE_4_LINE;
    188a:	22 9a       	sbi	0x04, 2	; 4
    break;
  }
#endif
  return;
}
    188c:	1f 91       	pop	r17
    188e:	08 95       	ret

00001890 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	fc 01       	movw	r30, r24
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	23 e0       	ldi	r18, 0x03	; 3
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	2a 95       	dec	r18
    18a2:	e1 f7       	brne	.-8      	; 0x189c <ds18x20GetTemp+0xc>
    18a4:	e8 0f       	add	r30, r24
    18a6:	f9 1f       	adc	r31, r25
    18a8:	e2 5e       	subi	r30, 0xE2	; 226
    18aa:	fd 4f       	sbci	r31, 0xFD	; 253
    18ac:	40 81       	ld	r20, Z
    18ae:	50 e0       	ldi	r21, 0x00	; 0
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
    18b0:	9a 01       	movw	r18, r20
    18b2:	2f 70       	andi	r18, 0x0F	; 15
    18b4:	30 70       	andi	r19, 0x00	; 0
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
    18b6:	c9 01       	movw	r24, r18
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	a3 e0       	ldi	r26, 0x03	; 3
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	aa 95       	dec	r26
    18c4:	e1 f7       	brne	.-8      	; 0x18be <ds18x20GetTemp+0x2e>
    18c6:	28 0f       	add	r18, r24
    18c8:	39 1f       	adc	r19, r25
int16_t ds18x20GetTemp(uint8_t chanel)
{
  int16_t ret;
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	84 2b       	or	r24, r20
    18d0:	95 2b       	or	r25, r21
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
  ret = (ret / 16 * 10) + tmp;
    18d2:	60 e1       	ldi	r22, 0x10	; 16
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__divmodhi4>
    18da:	ab 01       	movw	r20, r22
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	e3 e0       	ldi	r30, 0x03	; 3
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	ea 95       	dec	r30
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <ds18x20GetTemp+0x52>
    18ea:	46 0f       	add	r20, r22
    18ec:	57 1f       	adc	r21, r23
  uint16_t tmp_L = devs[chanel - 1].sp[0], tmp_H = devs[chanel - 1].sp[1];
  int16_t tmp = 0;
  ret = ((tmp_H << 8) | tmp_L);
  tmp = (tmp_L & 15);
  tmp = (tmp << 1) + (tmp << 3); // Умножаем на 10
  tmp = (tmp >> 4);              //делим на 16 или умножаем на 0.0625  
    18ee:	64 e0       	ldi	r22, 0x04	; 4
    18f0:	35 95       	asr	r19
    18f2:	27 95       	ror	r18
    18f4:	6a 95       	dec	r22
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <ds18x20GetTemp+0x60>
  ret = (ret / 16 * 10) + tmp;
    18f8:	42 0f       	add	r20, r18
    18fa:	53 1f       	adc	r21, r19
  return ret;
}
    18fc:	ca 01       	movw	r24, r20
    18fe:	08 95       	ret

00001900 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(uint8_t chanel)
{
  return devCount[chanel - 1];
    1900:	e8 2f       	mov	r30, r24
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	e7 5e       	subi	r30, 0xE7	; 231
    1906:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1908:	80 81       	ld	r24, Z
    190a:	08 95       	ret

0000190c <ds18x20SetDevCount>:
//=============================================================================
void ds18x20SetDevCount(uint8_t chanel, uint8_t val)
{
  devCount[chanel - 1] = val;
    190c:	e8 2f       	mov	r30, r24
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	e7 5e       	subi	r30, 0xE7	; 231
    1912:	fd 4f       	sbci	r31, 0xFD	; 253
    1914:	60 83       	st	Z, r22
}
    1916:	08 95       	ret

00001918 <__divmodhi4>:
    1918:	97 fb       	bst	r25, 7
    191a:	09 2e       	mov	r0, r25
    191c:	07 26       	eor	r0, r23
    191e:	0a d0       	rcall	.+20     	; 0x1934 <__divmodhi4_neg1>
    1920:	77 fd       	sbrc	r23, 7
    1922:	04 d0       	rcall	.+8      	; 0x192c <__divmodhi4_neg2>
    1924:	0c d0       	rcall	.+24     	; 0x193e <__udivmodhi4>
    1926:	06 d0       	rcall	.+12     	; 0x1934 <__divmodhi4_neg1>
    1928:	00 20       	and	r0, r0
    192a:	1a f4       	brpl	.+6      	; 0x1932 <__divmodhi4_exit>

0000192c <__divmodhi4_neg2>:
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255

00001932 <__divmodhi4_exit>:
    1932:	08 95       	ret

00001934 <__divmodhi4_neg1>:
    1934:	f6 f7       	brtc	.-4      	; 0x1932 <__divmodhi4_exit>
    1936:	90 95       	com	r25
    1938:	81 95       	neg	r24
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	08 95       	ret

0000193e <__udivmodhi4>:
    193e:	aa 1b       	sub	r26, r26
    1940:	bb 1b       	sub	r27, r27
    1942:	51 e1       	ldi	r21, 0x11	; 17
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <__udivmodhi4_ep>

00001946 <__udivmodhi4_loop>:
    1946:	aa 1f       	adc	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	a6 17       	cp	r26, r22
    194c:	b7 07       	cpc	r27, r23
    194e:	10 f0       	brcs	.+4      	; 0x1954 <__udivmodhi4_ep>
    1950:	a6 1b       	sub	r26, r22
    1952:	b7 0b       	sbc	r27, r23

00001954 <__udivmodhi4_ep>:
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	5a 95       	dec	r21
    195a:	a9 f7       	brne	.-22     	; 0x1946 <__udivmodhi4_loop>
    195c:	80 95       	com	r24
    195e:	90 95       	com	r25
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	08 95       	ret

00001966 <__eerd_byte_m328p>:
    1966:	f9 99       	sbic	0x1f, 1	; 31
    1968:	fe cf       	rjmp	.-4      	; 0x1966 <__eerd_byte_m328p>
    196a:	92 bd       	out	0x22, r25	; 34
    196c:	81 bd       	out	0x21, r24	; 33
    196e:	f8 9a       	sbi	0x1f, 0	; 31
    1970:	99 27       	eor	r25, r25
    1972:	80 b5       	in	r24, 0x20	; 32
    1974:	08 95       	ret

00001976 <__eerd_word_m328p>:
    1976:	a8 e1       	ldi	r26, 0x18	; 24
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	42 e0       	ldi	r20, 0x02	; 2
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__eerd_blraw_m328p>

00001982 <__eewr_byte_m328p>:
    1982:	26 2f       	mov	r18, r22

00001984 <__eewr_r18_m328p>:
    1984:	f9 99       	sbic	0x1f, 1	; 31
    1986:	fe cf       	rjmp	.-4      	; 0x1984 <__eewr_r18_m328p>
    1988:	1f ba       	out	0x1f, r1	; 31
    198a:	92 bd       	out	0x22, r25	; 34
    198c:	81 bd       	out	0x21, r24	; 33
    198e:	20 bd       	out	0x20, r18	; 32
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	fa 9a       	sbi	0x1f, 2	; 31
    1996:	f9 9a       	sbi	0x1f, 1	; 31
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	08 95       	ret

0000199e <__eewr_word_m328p>:
    199e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__eewr_byte_m328p>
    19a2:	27 2f       	mov	r18, r23
    19a4:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__eewr_r18_m328p>

000019a8 <__eerd_block_m328p>:
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22

000019ac <__eerd_blraw_m328p>:
    19ac:	fc 01       	movw	r30, r24
    19ae:	f9 99       	sbic	0x1f, 1	; 31
    19b0:	fe cf       	rjmp	.-4      	; 0x19ae <__eerd_blraw_m328p+0x2>
    19b2:	06 c0       	rjmp	.+12     	; 0x19c0 <__eerd_blraw_m328p+0x14>
    19b4:	f2 bd       	out	0x22, r31	; 34
    19b6:	e1 bd       	out	0x21, r30	; 33
    19b8:	f8 9a       	sbi	0x1f, 0	; 31
    19ba:	31 96       	adiw	r30, 0x01	; 1
    19bc:	00 b4       	in	r0, 0x20	; 32
    19be:	0d 92       	st	X+, r0
    19c0:	41 50       	subi	r20, 0x01	; 1
    19c2:	50 40       	sbci	r21, 0x00	; 0
    19c4:	b8 f7       	brcc	.-18     	; 0x19b4 <__eerd_blraw_m328p+0x8>
    19c6:	08 95       	ret

000019c8 <_exit>:
    19c8:	f8 94       	cli

000019ca <__stop_program>:
    19ca:	ff cf       	rjmp	.-2      	; 0x19ca <__stop_program>
